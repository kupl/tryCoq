Choose the proof type :
1) Interactive Mode 	 2) Auto Mode
Enter the goal : =================================================
Progress: 1


No conjecture
>>> assert forall (lambda2:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda2) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda2) (string_list1) else sub_check_ta1 (lambda2) ((string1::string_list1))(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
intro string1(rank:3)
=================================================
Progress: 2


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))

0 goal(s) more...

0 conjecture(s) more...
>>> intro string1(rank : 3)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
intro string_list1(rank:3)
=================================================
Progress: 3


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))

0 goal(s) more...

0 conjecture(s) more...
>>> intro string_list1(rank : 3)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
---------------------------------------
forall (lambda1:lambda), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string1)(rank:4)
=================================================
Progress: 4


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
---------------------------------------
forall (lambda1:lambda), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))

0 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 4)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
forall (lambda1:lambda), sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:6)
=================================================
Progress: 5


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
forall (lambda1:lambda), sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)

1 goal(s) more...

0 conjecture(s) more...
>>> induction lambda1(rank : 6)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
sub_check_ta1 (V (string2)) ((string1::string_list1)) = sub_check_ta1 (V (string2)) (string_list1)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:6)
=================================================
Progress: 6


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
sub_check_ta1 (V (string2)) ((string1::string_list1)) = sub_check_ta1 (V (string2)) (string_list1)

3 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 6)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (string_list1) (string2)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case string_eq (string1) (string2)(rank:7)
rewrite <- Case1 in goal at 0(rank:22)
=================================================
Progress: 7


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (string_list1) (string2)

3 goal(s) more...

0 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case2 : string_eq (string1) (string2) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:7)
=================================================
Progress: 8


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case2 : string_eq (string1) (string2) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case2 : string1 = string2
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:7)
rewrite <- Case1 in goal at 0(rank:15)
=================================================
Progress: 9


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case2 : string1 = string2
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case2 : string1 = string2
---------------------------------------
true = is_mem_ta1 (string_list1) (string1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite Case1 in goal at 0(rank:15)
rewrite <- Case1 in goal at 0(rank:15)
=================================================
Progress: 10


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case2 : string1 = string2
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 15)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case2 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:7)
=================================================
Progress: 11


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case2 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case2 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:6)
=================================================
Progress: 12


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case2 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 6)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case2 : string_eq (string1) (string2) = false
---------------------------------------
is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (string_list1) (string2)

3 goal(s) more...

0 conjecture(s) more...
Deduplication: 2
Tactic List : 1
reflexivity(rank:5)
=================================================
Progress: 13


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case2 : string_eq (string1) (string2) = false
---------------------------------------
is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (string_list1) (string2)

3 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 5)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
sub_check_ta1 (P (string2) (lambda2)) ((string1::string_list1)) = sub_check_ta1 (P (string2) (lambda2)) (string_list1)

2 goal(s) more...

0 conjecture(s) more...
Deduplication: 1
Tactic List : 1
simpl in goal(rank:5)
=================================================
Progress: 14


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
sub_check_ta1 (P (string2) (lambda2)) ((string1::string_list1)) = sub_check_ta1 (P (string2) (lambda2)) (string_list1)

2 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 5)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal


1st goal of : any
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
---------------------------------------
forall (lambda2:lambda), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))

0 goal(s) more...

0 conjecture(s) more...


1st goal of : any
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
lambda2 : lambda
string3 : string
---------------------------------------
forall (lambda3:lambda), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda3) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (lambda3) ((string3::(string2::string_list1)))

0 goal(s) more...

0 conjecture(s) more...
state_list
sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))
sub_check_ta1 (lambda3) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (lambda3) ((string3::(string2::string_list1)))
sub_check_ta1 (lambda4) ((string4::(string3::(string2::(string1::string_list1))))) = sub_check_ta1 (lambda4) ((string4::(string3::(string2::string_list1))))
lhs_common_subtree
Cons(string2, Cons(string1, string_list1))
Cons(string3, Cons(string2, Cons(string1, string_list1)))
Cons(string4, Cons(string3, Cons(string2, Cons(string1, string_list1))))
rhs_common_subtree
Cons(string2, string_list1)
Cons(string3, Cons(string2, string_list1))
Cons(string4, Cons(string3, Cons(string2, string_list1)))
lhs_increase_subtree
Cons(string3, _)
Cons(string4, _)
rhs_increase_subtree
Cons(string3, _)
Cons(string4, _)
New Env
let rec mk_lhs1 arg_1 arg_2 arg_3 arg_4 =
match (arg_1) with
| Nil  -> (arg_2::(arg_3::arg_4))
| Cons hd tl -> (hd::mk_lhs1 (tl) (arg_2) (arg_3) (arg_4))
;;
let rec mk_rhs1 arg_5 arg_6 arg_7 =
match (arg_5) with
| Nil  -> (arg_6::arg_7)
| Cons hd tl -> (hd::mk_rhs1 (tl) (arg_6) (arg_7))
;;
Lemma List
forall (string2:string) (string1:string) (string_list1:string list), mk_lhs1 ((Nil)) (string2) (string1) (string_list1) = (string2::(string1::string_list1))
forall (hd:string) (tl:string list) (string2:string) (string1:string) (string_list1:string list), mk_lhs1 ((hd::tl)) (string2) (string1) (string_list1) = (hd::mk_lhs1 (tl) (string2) (string1) (string_list1))
forall (string2:string) (string_list1:string list), mk_rhs1 ((Nil)) (string2) (string_list1) = (string2::string_list1)
forall (hd:string) (tl:string list) (string2:string) (string_list1:string list), mk_rhs1 ((hd::tl)) (string2) (string_list1) = (hd::mk_rhs1 (tl) (string2) (string_list1))
forall (lambda2:lambda) (lst:string list) (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda2) (mk_lhs1 (lst) (string2) (string1) (string_list1)) = sub_check_ta1 (lambda2) (mk_rhs1 (lst) (string2) (string_list1))
End of Lemma List
=================================================
Progress: 15


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))

2 goal(s) more...

0 conjecture(s) more...
>>> assert forall (lambda2:lambda) (lst:string list) (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda2) (mk_lhs1 (lst) (string2) (string1) (string_list1)) = sub_check_ta1 (lambda2) (mk_rhs1 (lst) (string2) (string_list1))(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))

---------------------------------------
forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro string1(rank:5)
=================================================
Progress: 16


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))

---------------------------------------
forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))

0 goal(s) more...

1 conjecture(s) more...
>>> intro string1(rank : 5)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro string_list2(rank:5)
=================================================
Progress: 17


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))

0 goal(s) more...

1 conjecture(s) more...
>>> intro string_list2(rank : 5)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
---------------------------------------
forall (lambda1:lambda) (string_list1:string list) (string2:string), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:5)
=================================================
Progress: 18


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
---------------------------------------
forall (lambda1:lambda) (string_list1:string list) (string2:string), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))

0 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 5)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
forall (lambda1:lambda) (string_list1:string list) (string2:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:7)
=================================================
Progress: 19


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
forall (lambda1:lambda) (string_list1:string list) (string2:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))

0 goal(s) more...

1 conjecture(s) more...
>>> induction lambda1(rank : 7)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string_list1:string list) (string2:string), sub_check_ta1 (V (string3)) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (V (string3)) (mk_rhs1 (string_list1) (string2) (string_list2))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7)
=================================================
Progress: 20


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string_list1:string list) (string2:string), sub_check_ta1 (V (string3)) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (V (string3)) (mk_rhs1 (string_list1) (string2) (string_list2))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string_list1:string list) (string2:string), is_mem_ta1 (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list1) (string2) (string_list2)) (string3)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction string_list1(rank:8)
=================================================
Progress: 21


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string_list1:string list) (string2:string), is_mem_ta1 (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list1) (string2) (string_list2)) (string3)

2 goal(s) more...

1 conjecture(s) more...
>>> induction string_list1(rank : 8)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
---------------------------------------
forall (string2:string), is_mem_ta1 (mk_lhs1 ((Nil)) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 ((Nil)) (string2) (string_list2)) (string3)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8)
=================================================
Progress: 22


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
---------------------------------------
forall (string2:string), is_mem_ta1 (mk_lhs1 ((Nil)) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 ((Nil)) (string2) (string_list2)) (string3)

3 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 8)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
---------------------------------------
forall (string2:string), if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::string_list2)) (string3) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list2) (string3)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro string2(rank:8)
=================================================
Progress: 23


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
---------------------------------------
forall (string2:string), if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::string_list2)) (string3) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list2) (string3)

3 goal(s) more...

1 conjecture(s) more...
>>> intro string2(rank : 8)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string2 : string
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::string_list2)) (string3) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list2) (string3)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
case string_eq (string2) (string3)(rank:9)
rewrite <- Cond1 in goal at 0(rank:24)
rewrite <- Cond1 in goal at 1(rank:24)
rewrite <- Cond1 in goal at 2(rank:24)
=================================================
Progress: 24


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string2 : string
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::string_list2)) (string3) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list2) (string3)

3 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 9)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string2 : string
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:8)
=================================================
Progress: 25


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string2 : string
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 8)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string2 : string
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 (string_list2) (string3) = is_mem_ta1 (string_list2) (string3)

3 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 2
case string_eq (string1) (string3)(rank:9)
rewrite <- Cond1 in goal at 0(rank:24)
=================================================
Progress: 26


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string2 : string
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 (string_list2) (string3) = is_mem_ta1 (string_list2) (string3)

3 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 9)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string2 : string
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = is_mem_ta1 (string_list2) (string3)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case2 at 0(rank:9)
=================================================
Progress: 27


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string2 : string
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = is_mem_ta1 (string_list2) (string3)

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 9)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string2 : string
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = is_mem_ta1 (string_list2) (string3)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:9)
rewrite <- Cond1 in goal at 0(rank:17)
=================================================
Progress: 28


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string2 : string
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = is_mem_ta1 (string_list2) (string3)

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 9)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string2 : string
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = is_mem_ta1 (string_list2) (string1)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite Cond1 in goal at 0(rank:17)
rewrite <- Cond1 in goal at 0(rank:17)
=================================================
Progress: 29


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string2 : string
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = is_mem_ta1 (string_list2) (string3)

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Cond1 in goal at 0(rank : 17)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string2 : string
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
is_mem_ta1 (string_list2) (string1) = is_mem_ta1 (string_list2) (string3)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:9)
=================================================
Progress: 30


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string2 : string
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
is_mem_ta1 (string_list2) (string1) = is_mem_ta1 (string_list2) (string3)

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 9)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string2 : string
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
is_mem_ta1 (string_list2) (string3) = is_mem_ta1 (string_list2) (string3)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:8)
=================================================
Progress: 31


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string2 : string
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
is_mem_ta1 (string_list2) (string3) = is_mem_ta1 (string_list2) (string3)

4 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 8)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string2 : string
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
is_mem_ta1 (string_list2) (string3) = is_mem_ta1 (string_list2) (string3)

3 goal(s) more...

1 conjecture(s) more...
Deduplication: 2
Tactic List : 1
reflexivity(rank:7)
=================================================
Progress: 32


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string2 : string
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
is_mem_ta1 (string_list2) (string3) = is_mem_ta1 (string_list2) (string3)

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string2:string), is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
---------------------------------------
forall (string2:string), is_mem_ta1 (mk_lhs1 ((string4::string_list3)) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 ((string4::string_list3)) (string2) (string_list2)) (string3)

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 4
Tactic List : 1
simpl in goal(rank:7)
=================================================
Progress: 33


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string2:string), is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
---------------------------------------
forall (string2:string), is_mem_ta1 (mk_lhs1 ((string4::string_list3)) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 ((string4::string_list3)) (string2) (string_list2)) (string3)

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string2:string), is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
---------------------------------------
forall (string2:string), if string_eq (string4) (string3) then true else is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = if string_eq (string4) (string3) then true else is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro string2(rank:7)
=================================================
Progress: 34


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string2:string), is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
---------------------------------------
forall (string2:string), if string_eq (string4) (string3) then true else is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = if string_eq (string4) (string3) then true else is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)

2 goal(s) more...

1 conjecture(s) more...
>>> intro string2(rank : 7)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string2:string), is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
string2 : string
---------------------------------------
if string_eq (string4) (string3) then true else is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = if string_eq (string4) (string3) then true else is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 6
case string_eq (string4) (string3)(rank:8)
rewrite <- IH1 in goal at 0(rank:15)
rewrite <- Cond1 in goal at 2(rank:23)
rewrite <- Cond1 in goal at 0(rank:23)
rewrite <- Cond1 in goal at 1(rank:23)
rewrite IH1 in goal at 0(rank:15)
=================================================
Progress: 35


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string2:string), is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
string2 : string
---------------------------------------
if string_eq (string4) (string3) then true else is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = if string_eq (string4) (string3) then true else is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string4) (string3)(rank : 8)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string2:string), is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
string2 : string
Case1 : string_eq (string4) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7)
=================================================
Progress: 36


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string2:string), is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
string2 : string
Case1 : string_eq (string4) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string2:string), is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
string2 : string
Case1 : string_eq (string4) (string3) = false
---------------------------------------
is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite IH1 in goal at 0(rank:15)
rewrite <- IH1 in goal at 0(rank:15)
=================================================
Progress: 37


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string2:string), is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
string2 : string
---------------------------------------
if string_eq (string4) (string3) then true else is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = if string_eq (string4) (string3) then true else is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 15)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string2:string), is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
string2 : string
---------------------------------------
if string_eq (string4) (string3) then true else is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3) = if string_eq (string4) (string3) then true else is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:6)
=================================================
Progress: 38


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string2:string), is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
string2 : string
---------------------------------------
if string_eq (string4) (string3) then true else is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3) = if string_eq (string4) (string3) then true else is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)

2 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 6)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = P (string3) (lambda2)
---------------------------------------
forall (string_list1:string list) (string2:string), sub_check_ta1 (P (string3) (lambda2)) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (P (string3) (lambda2)) (mk_rhs1 (string_list1) (string2) (string_list2))

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 6
Tactic List : 1
simpl in goal(rank:6)
=================================================
Progress: 39


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = P (string3) (lambda2)
---------------------------------------
forall (string_list1:string list) (string2:string), sub_check_ta1 (P (string3) (lambda2)) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (P (string3) (lambda2)) (mk_rhs1 (string_list1) (string2) (string_list2))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = P (string3) (lambda2)
---------------------------------------
forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) ((string3::mk_lhs1 (string_list1) (string2) (string1) (string_list2))) = sub_check_ta1 (lambda2) ((string3::mk_rhs1 (string_list1) (string2) (string_list2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction string_list1(rank:7)
=================================================
Progress: 40


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = P (string3) (lambda2)
---------------------------------------
forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) ((string3::mk_lhs1 (string_list1) (string2) (string1) (string_list2))) = sub_check_ta1 (lambda2) ((string3::mk_rhs1 (string_list1) (string2) (string_list2)))

1 goal(s) more...

1 conjecture(s) more...
>>> induction string_list1(rank : 7)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = P (string3) (lambda2)
string_list1 : string list
Base1 : string_list1 = (Nil)
---------------------------------------
forall (string2:string), sub_check_ta1 (lambda2) ((string3::mk_lhs1 ((Nil)) (string2) (string1) (string_list2))) = sub_check_ta1 (lambda2) ((string3::mk_rhs1 ((Nil)) (string2) (string_list2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7)
=================================================
Progress: 41


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = P (string3) (lambda2)
string_list1 : string list
Base1 : string_list1 = (Nil)
---------------------------------------
forall (string2:string), sub_check_ta1 (lambda2) ((string3::mk_lhs1 ((Nil)) (string2) (string1) (string_list2))) = sub_check_ta1 (lambda2) ((string3::mk_rhs1 ((Nil)) (string2) (string_list2)))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = P (string3) (lambda2)
string_list1 : string list
Base1 : string_list1 = (Nil)
---------------------------------------
forall (string2:string), sub_check_ta1 (lambda2) ((string3::(string2::(string1::string_list2)))) = sub_check_ta1 (lambda2) ((string3::(string2::string_list2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
intro string2(rank:7)
rewrite <- lhs_lemma3 in goal at 1(rank:23)
=================================================
Progress: 42


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = P (string3) (lambda2)
string_list1 : string list
Base1 : string_list1 = (Nil)
---------------------------------------
forall (string2:string), sub_check_ta1 (lambda2) ((string3::(string2::(string1::string_list2)))) = sub_check_ta1 (lambda2) ((string3::(string2::string_list2)))

2 goal(s) more...

1 conjecture(s) more...
>>> intro string2(rank : 7)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = P (string3) (lambda2)
string_list1 : string list
Base1 : string_list1 = (Nil)
string2 : string
---------------------------------------
sub_check_ta1 (lambda2) ((string3::(string2::(string1::string_list2)))) = sub_check_ta1 (lambda2) ((string3::(string2::string_list2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- lhs_lemma3 in goal at 1(rank:23)
rewrite <- lhs_lemma3 in goal at 2(rank:23)
=================================================
Progress: 43


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = P (string3) (lambda2)
string_list1 : string list
Base1 : string_list1 = (Nil)
---------------------------------------
forall (string2:string), sub_check_ta1 (lambda2) ((string3::(string2::(string1::string_list2)))) = sub_check_ta1 (lambda2) ((string3::(string2::string_list2)))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- lhs_lemma3 in goal at 1(rank : 23)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = P (string3) (lambda2)
string_list1 : string list
Base1 : string_list1 = (Nil)
---------------------------------------
forall (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 ((Nil)) (string3) (string2) ((string1::string_list2))) = sub_check_ta1 (lambda2) ((string3::(string2::string_list2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7)
=================================================
Progress: 44


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = P (string3) (lambda2)
string_list1 : string list
Base1 : string_list1 = (Nil)
---------------------------------------
forall (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 ((Nil)) (string3) (string2) ((string1::string_list2))) = sub_check_ta1 (lambda2) ((string3::(string2::string_list2)))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = P (string3) (lambda2)
string_list1 : string list
Base1 : string_list1 = (Nil)
---------------------------------------
forall (string2:string), sub_check_ta1 (lambda2) ((string3::(string2::(string1::string_list2)))) = sub_check_ta1 (lambda2) ((string3::(string2::string_list2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro string2(rank:7)
=================================================
Progress: 45


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = P (string3) (lambda2)
string_list1 : string list
Base1 : string_list1 = (Nil)
---------------------------------------
forall (string2:string), sub_check_ta1 (lambda2) ((string3::(string2::(string1::string_list2)))) = sub_check_ta1 (lambda2) ((string3::(string2::string_list2)))

2 goal(s) more...

1 conjecture(s) more...
>>> intro string2(rank : 7)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = P (string3) (lambda2)
string_list1 : string list
Base1 : string_list1 = (Nil)
string2 : string
---------------------------------------
sub_check_ta1 (lambda2) ((string3::(string2::(string1::string_list2)))) = sub_check_ta1 (lambda2) ((string3::(string2::string_list2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- lhs_lemma3 in goal at 1
simpl in goal
intro string2


1st goal of : any
string1 : string
lambda1 : lambda
string3 : string
lambda2 : lambda
string_list1 : string list
string2 : string
---------------------------------------
forall (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda2) ((string3::(string2::(string1::string_list2)))) = sub_check_ta1 (lambda2) ((string3::(string2::string_list2)))

0 goal(s) more...

0 conjecture(s) more...
state_list
New Env

;;
Lemma List
forall (lambda2:lambda) (string1:string) (string2:string) (string3:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda2) ((string3::(string2::(string1::string_list2)))) = sub_check_ta1 (lambda2) ((string3::(string2::string_list2)))
End of Lemma List
=================================================
Progress: 46


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = P (string3) (lambda2)
string_list1 : string list
Base1 : string_list1 = (Nil)
---------------------------------------
forall (string2:string), sub_check_ta1 (lambda2) ((string3::(string2::(string1::string_list2)))) = sub_check_ta1 (lambda2) ((string3::(string2::string_list2)))

2 goal(s) more...

1 conjecture(s) more...
>>> assert forall (lambda2:lambda) (string1:string) (string2:string) (string3:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda2) ((string3::(string2::(string1::string_list2)))) = sub_check_ta1 (lambda2) ((string3::(string2::string_list2)))(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (lambda1) ((string3::(string2::string_list1)))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (lambda1) ((string3::(string2::string_list1)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:7)
=================================================
Progress: 47


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (lambda1) ((string3::(string2::string_list1)))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (lambda1) ((string3::(string2::string_list1)))

0 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (lambda1) ((string3::(string2::string_list1)))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (lambda1) ((string3::(string2::string_list1)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string_list1(rank:7)
=================================================
Progress: 48


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (lambda1) ((string3::(string2::string_list1)))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (lambda1) ((string3::(string2::string_list1)))

0 goal(s) more...

2 conjecture(s) more...
>>> intro string_list1(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (lambda1) ((string3::(string2::string_list1)))
string1 : string
string_list1 : string list
---------------------------------------
forall (lambda1:lambda) (string2:string) (string3:string), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (lambda1) ((string3::(string2::string_list1)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7)
=================================================
Progress: 49


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (lambda1) ((string3::(string2::string_list1)))
string1 : string
string_list1 : string list
---------------------------------------
forall (lambda1:lambda) (string2:string) (string3:string), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (lambda1) ((string3::(string2::string_list1)))

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (lambda1) ((string3::(string2::string_list1)))
string1 : string
string_list1 : string list
Cond1 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
forall (lambda1:lambda) (string2:string) (string3:string), sub_check_ta1 (lambda1) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (lambda1) ((string3::(string2::string_list1)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:9)
=================================================
Progress: 50


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (lambda1) ((string3::(string2::string_list1)))
string1 : string
string_list1 : string list
Cond1 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
forall (lambda1:lambda) (string2:string) (string3:string), sub_check_ta1 (lambda1) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (lambda1) ((string3::(string2::string_list1)))

0 goal(s) more...

2 conjecture(s) more...
>>> induction lambda1(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (lambda1) ((string3::(string2::string_list1)))
string1 : string
string_list1 : string list
Cond1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string4 : string
Base1 : lambda1 = V (string4)
---------------------------------------
forall (string2:string) (string3:string), sub_check_ta1 (V (string4)) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (V (string4)) ((string3::(string2::string_list1)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9)
=================================================
Progress: 51


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (lambda1) ((string3::(string2::string_list1)))
string1 : string
string_list1 : string list
Cond1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string4 : string
Base1 : lambda1 = V (string4)
---------------------------------------
forall (string2:string) (string3:string), sub_check_ta1 (V (string4)) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (V (string4)) ((string3::(string2::string_list1)))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (lambda1) ((string3::(string2::string_list1)))
string1 : string
string_list1 : string list
Cond1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string4 : string
Base1 : lambda1 = V (string4)
---------------------------------------
forall (string2:string) (string3:string), if string_eq (string3) (string4) then true else is_mem_ta1 ((string2::(string1::string_list1))) (string4) = if string_eq (string3) (string4) then true else is_mem_ta1 ((string2::string_list1)) (string4)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string2(rank:9)
=================================================
Progress: 52


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (lambda1) ((string3::(string2::string_list1)))
string1 : string
string_list1 : string list
Cond1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string4 : string
Base1 : lambda1 = V (string4)
---------------------------------------
forall (string2:string) (string3:string), if string_eq (string3) (string4) then true else is_mem_ta1 ((string2::(string1::string_list1))) (string4) = if string_eq (string3) (string4) then true else is_mem_ta1 ((string2::string_list1)) (string4)

2 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (lambda1) ((string3::(string2::string_list1)))
string1 : string
string_list1 : string list
Cond1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string4 : string
Base1 : lambda1 = V (string4)
string2 : string
---------------------------------------
forall (string3:string), if string_eq (string3) (string4) then true else is_mem_ta1 ((string2::(string1::string_list1))) (string4) = if string_eq (string3) (string4) then true else is_mem_ta1 ((string2::string_list1)) (string4)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string3(rank:9)
=================================================
Progress: 53


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (lambda1) ((string3::(string2::string_list1)))
string1 : string
string_list1 : string list
Cond1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string4 : string
Base1 : lambda1 = V (string4)
string2 : string
---------------------------------------
forall (string3:string), if string_eq (string3) (string4) then true else is_mem_ta1 ((string2::(string1::string_list1))) (string4) = if string_eq (string3) (string4) then true else is_mem_ta1 ((string2::string_list1)) (string4)

2 goal(s) more...

2 conjecture(s) more...
>>> intro string3(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (lambda1) ((string3::(string2::string_list1)))
string1 : string
string_list1 : string list
Cond1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string4 : string
Base1 : lambda1 = V (string4)
string2 : string
string3 : string
---------------------------------------
if string_eq (string3) (string4) then true else is_mem_ta1 ((string2::(string1::string_list1))) (string4) = if string_eq (string3) (string4) then true else is_mem_ta1 ((string2::string_list1)) (string4)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
case string_eq (string3) (string4)(rank:10)
rewrite <- Cond1 in goal at 1(rank:25)
rewrite <- Cond1 in goal at 2(rank:25)
rewrite <- lhs_lemma3 in goal at 0(rank:25)
rewrite <- rhs_lemma5 in goal at 3(rank:25)
rewrite <- Cond1 in goal at 0(rank:25)
=================================================
Progress: 54


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (lambda1) ((string3::(string2::string_list1)))
string1 : string
string_list1 : string list
Cond1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string4 : string
Base1 : lambda1 = V (string4)
string2 : string
string3 : string
---------------------------------------
if string_eq (string3) (string4) then true else is_mem_ta1 ((string2::(string1::string_list1))) (string4) = if string_eq (string3) (string4) then true else is_mem_ta1 ((string2::string_list1)) (string4)

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string3) (string4)(rank : 10)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (lambda1) ((string3::(string2::string_list1)))
string1 : string
string_list1 : string list
Cond1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string4 : string
Base1 : lambda1 = V (string4)
string2 : string
string3 : string
Case1 : string_eq (string3) (string4) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9)
=================================================
Progress: 55


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (lambda1) ((string3::(string2::string_list1)))
string1 : string
string_list1 : string list
Cond1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string4 : string
Base1 : lambda1 = V (string4)
string2 : string
string3 : string
Case1 : string_eq (string3) (string4) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (lambda1) ((string3::(string2::string_list1)))
string1 : string
string_list1 : string list
Cond1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string4 : string
Base1 : lambda1 = V (string4)
string2 : string
string3 : string
Case1 : string_eq (string3) (string4) = false
---------------------------------------
if string_eq (string2) (string4) then true else is_mem_ta1 ((string1::string_list1)) (string4) = if string_eq (string2) (string4) then true else is_mem_ta1 (string_list1) (string4)

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 4
case string_eq (string2) (string4)(rank:10)
rewrite <- Cond1 in goal at 0(rank:25)
rewrite <- Cond1 in goal at 1(rank:25)
rewrite <- Cond1 in goal at 2(rank:25)
=================================================
Progress: 56


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (lambda1) ((string3::(string2::string_list1)))
string1 : string
string_list1 : string list
Cond1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string4 : string
Base1 : lambda1 = V (string4)
string2 : string
string3 : string
Case1 : string_eq (string3) (string4) = false
---------------------------------------
if string_eq (string2) (string4) then true else is_mem_ta1 ((string1::string_list1)) (string4) = if string_eq (string2) (string4) then true else is_mem_ta1 (string_list1) (string4)

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string2) (string4)(rank : 10)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (lambda1) ((string3::(string2::string_list1)))
string1 : string
string_list1 : string list
Cond1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string4 : string
Base1 : lambda1 = V (string4)
string2 : string
string3 : string
Case1 : string_eq (string3) (string4) = false
Case2 : string_eq (string2) (string4) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9)
=================================================
Progress: 57


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (lambda1) ((string3::(string2::string_list1)))
string1 : string
string_list1 : string list
Cond1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string4 : string
Base1 : lambda1 = V (string4)
string2 : string
string3 : string
Case1 : string_eq (string3) (string4) = false
Case2 : string_eq (string2) (string4) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (lambda1) ((string3::(string2::string_list1)))
string1 : string
string_list1 : string list
Cond1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string4 : string
Base1 : lambda1 = V (string4)
string2 : string
string3 : string
Case1 : string_eq (string3) (string4) = false
Case2 : string_eq (string2) (string4) = false
---------------------------------------
if string_eq (string1) (string4) then true else is_mem_ta1 (string_list1) (string4) = is_mem_ta1 (string_list1) (string4)

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 2
case string_eq (string1) (string4)(rank:10)
rewrite <- Cond1 in goal at 0(rank:25)
=================================================
Progress: 58


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (lambda1) ((string3::(string2::string_list1)))
string1 : string
string_list1 : string list
Cond1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string4 : string
Base1 : lambda1 = V (string4)
string2 : string
string3 : string
Case1 : string_eq (string3) (string4) = false
Case2 : string_eq (string2) (string4) = false
---------------------------------------
if string_eq (string1) (string4) then true else is_mem_ta1 (string_list1) (string4) = is_mem_ta1 (string_list1) (string4)

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string1) (string4)(rank : 10)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (lambda1) ((string3::(string2::string_list1)))
string1 : string
string_list1 : string list
Cond1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string4 : string
Base1 : lambda1 = V (string4)
string2 : string
string3 : string
Case1 : string_eq (string3) (string4) = false
Case2 : string_eq (string2) (string4) = false
Case3 : string_eq (string1) (string4) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string4)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:10)
=================================================
Progress: 59


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (lambda1) ((string3::(string2::string_list1)))
string1 : string
string_list1 : string list
Cond1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string4 : string
Base1 : lambda1 = V (string4)
string2 : string
string3 : string
Case1 : string_eq (string3) (string4) = false
Case2 : string_eq (string2) (string4) = false
Case3 : string_eq (string1) (string4) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string4)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 10)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (lambda1) ((string3::(string2::string_list1)))
string1 : string
string_list1 : string list
Cond1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string4 : string
Base1 : lambda1 = V (string4)
string2 : string
string3 : string
Case1 : string_eq (string3) (string4) = false
Case2 : string_eq (string2) (string4) = false
Case3 : string1 = string4
---------------------------------------
true = is_mem_ta1 (string_list1) (string4)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite <- Case3 in goal at 0(rank:10)
rewrite <- Cond1 in goal at 0(rank:18)
=================================================
Progress: 60


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (lambda1) ((string3::(string2::string_list1)))
string1 : string
string_list1 : string list
Cond1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string4 : string
Base1 : lambda1 = V (string4)
string2 : string
string3 : string
Case1 : string_eq (string3) (string4) = false
Case2 : string_eq (string2) (string4) = false
Case3 : string1 = string4
---------------------------------------
true = is_mem_ta1 (string_list1) (string4)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 10)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (lambda1) ((string3::(string2::string_list1)))
string1 : string
string_list1 : string list
Cond1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string4 : string
Base1 : lambda1 = V (string4)
string2 : string
string3 : string
Case1 : string_eq (string3) (string4) = false
Case2 : string_eq (string2) (string4) = false
Case3 : string1 = string4
---------------------------------------
true = is_mem_ta1 (string_list1) (string1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite Cond1 in goal at 0(rank:18)
rewrite <- Cond1 in goal at 0(rank:18)
=================================================
Progress: 61


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (lambda1) ((string3::(string2::string_list1)))
string1 : string
string_list1 : string list
Cond1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string4 : string
Base1 : lambda1 = V (string4)
string2 : string
string3 : string
Case1 : string_eq (string3) (string4) = false
Case2 : string_eq (string2) (string4) = false
Case3 : string1 = string4
---------------------------------------
true = is_mem_ta1 (string_list1) (string4)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Cond1 in goal at 0(rank : 18)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (lambda1) ((string3::(string2::string_list1)))
string1 : string
string_list1 : string list
Cond1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string4 : string
Base1 : lambda1 = V (string4)
string2 : string
string3 : string
Case1 : string_eq (string3) (string4) = false
Case2 : string_eq (string2) (string4) = false
Case3 : string1 = string4
---------------------------------------
is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list1) (string4)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Case3 in goal at 0(rank:10)
=================================================
Progress: 62


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (lambda1) ((string3::(string2::string_list1)))
string1 : string
string_list1 : string list
Cond1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string4 : string
Base1 : lambda1 = V (string4)
string2 : string
string3 : string
Case1 : string_eq (string3) (string4) = false
Case2 : string_eq (string2) (string4) = false
Case3 : string1 = string4
---------------------------------------
is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list1) (string4)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite Case3 in goal at 0(rank : 10)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (lambda1) ((string3::(string2::string_list1)))
string1 : string
string_list1 : string list
Cond1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string4 : string
Base1 : lambda1 = V (string4)
string2 : string
string3 : string
Case1 : string_eq (string3) (string4) = false
Case2 : string_eq (string2) (string4) = false
Case3 : string1 = string4
---------------------------------------
is_mem_ta1 (string_list1) (string4) = is_mem_ta1 (string_list1) (string4)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9)
=================================================
Progress: 63


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (lambda1) ((string3::(string2::string_list1)))
string1 : string
string_list1 : string list
Cond1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string4 : string
Base1 : lambda1 = V (string4)
string2 : string
string3 : string
Case1 : string_eq (string3) (string4) = false
Case2 : string_eq (string2) (string4) = false
Case3 : string1 = string4
---------------------------------------
is_mem_ta1 (string_list1) (string4) = is_mem_ta1 (string_list1) (string4)

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (lambda1) ((string3::(string2::string_list1)))
string1 : string
string_list1 : string list
Cond1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string4 : string
Base1 : lambda1 = V (string4)
string2 : string
string3 : string
Case1 : string_eq (string3) (string4) = false
Case2 : string_eq (string2) (string4) = false
Case3 : string_eq (string1) (string4) = false
---------------------------------------
is_mem_ta1 (string_list1) (string4) = is_mem_ta1 (string_list1) (string4)

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 2
Tactic List : 1
reflexivity(rank:8)
=================================================
Progress: 64


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (lambda1) ((string3::(string2::string_list1)))
string1 : string
string_list1 : string list
Cond1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string4 : string
Base1 : lambda1 = V (string4)
string2 : string
string3 : string
Case1 : string_eq (string3) (string4) = false
Case2 : string_eq (string2) (string4) = false
Case3 : string_eq (string1) (string4) = false
---------------------------------------
is_mem_ta1 (string_list1) (string4) = is_mem_ta1 (string_list1) (string4)

2 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (lambda1) ((string3::(string2::string_list1)))
string1 : string
string_list1 : string list
Cond1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string4 : string
lambda2 : lambda
IH1 : forall (string2:string) (string3:string), sub_check_ta1 (lambda2) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (lambda2) ((string3::(string2::string_list1)))
Inductive1 : lambda1 = P (string4) (lambda2)
---------------------------------------
forall (string2:string) (string3:string), sub_check_ta1 (P (string4) (lambda2)) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (P (string4) (lambda2)) ((string3::(string2::string_list1)))

1 goal(s) more...

2 conjecture(s) more...
Deduplication: 9
Tactic List : 1
simpl in goal(rank:8)
=================================================
Progress: 65


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (lambda1) ((string3::(string2::string_list1)))
string1 : string
string_list1 : string list
Cond1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string4 : string
lambda2 : lambda
IH1 : forall (string2:string) (string3:string), sub_check_ta1 (lambda2) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (lambda2) ((string3::(string2::string_list1)))
Inductive1 : lambda1 = P (string4) (lambda2)
---------------------------------------
forall (string2:string) (string3:string), sub_check_ta1 (P (string4) (lambda2)) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (P (string4) (lambda2)) ((string3::(string2::string_list1)))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (lambda1) ((string3::(string2::string_list1)))
string1 : string
string_list1 : string list
Cond1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string4 : string
lambda2 : lambda
IH1 : forall (string2:string) (string3:string), sub_check_ta1 (lambda2) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (lambda2) ((string3::(string2::string_list1)))
Inductive1 : lambda1 = P (string4) (lambda2)
---------------------------------------
forall (string2:string) (string3:string), sub_check_ta1 (lambda2) ((string4::(string3::(string2::(string1::string_list1))))) = sub_check_ta1 (lambda2) ((string4::(string3::(string2::string_list1))))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 5
intro string2(rank:8)
rewrite <- lhs_lemma3 in goal at 1(rank:24)
rewrite <- lhs_lemma3 in goal at 2(rank:24)
rewrite <- lhs_lemma3 in goal at 3(rank:24)
intro string3(rank:8)
=================================================
Progress: 66


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (lambda1) ((string3::(string2::string_list1)))
string1 : string
string_list1 : string list
Cond1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string4 : string
lambda2 : lambda
IH1 : forall (string2:string) (string3:string), sub_check_ta1 (lambda2) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (lambda2) ((string3::(string2::string_list1)))
Inductive1 : lambda1 = P (string4) (lambda2)
---------------------------------------
forall (string2:string) (string3:string), sub_check_ta1 (lambda2) ((string4::(string3::(string2::(string1::string_list1))))) = sub_check_ta1 (lambda2) ((string4::(string3::(string2::string_list1))))

1 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (lambda1) ((string3::(string2::string_list1)))
string1 : string
string_list1 : string list
Cond1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string4 : string
lambda2 : lambda
IH1 : forall (string2:string) (string3:string), sub_check_ta1 (lambda2) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (lambda2) ((string3::(string2::string_list1)))
Inductive1 : lambda1 = P (string4) (lambda2)
string2 : string
---------------------------------------
forall (string3:string), sub_check_ta1 (lambda2) ((string4::(string3::(string2::(string1::string_list1))))) = sub_check_ta1 (lambda2) ((string4::(string3::(string2::string_list1))))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
intro string3(rank:8)
rewrite <- lhs_lemma3 in goal at 1(rank:24)
rewrite <- lhs_lemma3 in goal at 2(rank:24)
rewrite <- lhs_lemma3 in goal at 3(rank:24)
=================================================
Progress: 67


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (lambda1) ((string3::(string2::string_list1)))
string1 : string
string_list1 : string list
Cond1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string4 : string
lambda2 : lambda
IH1 : forall (string2:string) (string3:string), sub_check_ta1 (lambda2) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (lambda2) ((string3::(string2::string_list1)))
Inductive1 : lambda1 = P (string4) (lambda2)
---------------------------------------
forall (string2:string) (string3:string), sub_check_ta1 (lambda2) ((string4::(string3::(string2::(string1::string_list1))))) = sub_check_ta1 (lambda2) ((string4::(string3::(string2::string_list1))))

1 goal(s) more...

2 conjecture(s) more...
>>> intro string3(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (lambda1) ((string3::(string2::string_list1)))
string1 : string
string_list1 : string list
Cond1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string4 : string
lambda2 : lambda
IH1 : forall (string2:string) (string3:string), sub_check_ta1 (lambda2) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (lambda2) ((string3::(string2::string_list1)))
Inductive1 : lambda1 = P (string4) (lambda2)
string3 : string
---------------------------------------
forall (string2:string), sub_check_ta1 (lambda2) ((string4::(string3::(string2::(string1::string_list1))))) = sub_check_ta1 (lambda2) ((string4::(string3::(string2::string_list1))))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite <- lhs_lemma3 in goal at 1(rank:24)
rewrite <- lhs_lemma3 in goal at 2(rank:24)
rewrite <- lhs_lemma3 in goal at 3(rank:24)
=================================================
Progress: 68


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (lambda1) ((string3::(string2::string_list1)))
string1 : string
string_list1 : string list
Cond1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string4 : string
lambda2 : lambda
IH1 : forall (string2:string) (string3:string), sub_check_ta1 (lambda2) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (lambda2) ((string3::(string2::string_list1)))
Inductive1 : lambda1 = P (string4) (lambda2)
string2 : string
---------------------------------------
forall (string3:string), sub_check_ta1 (lambda2) ((string4::(string3::(string2::(string1::string_list1))))) = sub_check_ta1 (lambda2) ((string4::(string3::(string2::string_list1))))

1 goal(s) more...

2 conjecture(s) more...
>>> intro string3(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (lambda1) ((string3::(string2::string_list1)))
string1 : string
string_list1 : string list
Cond1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string4 : string
lambda2 : lambda
IH1 : forall (string2:string) (string3:string), sub_check_ta1 (lambda2) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (lambda2) ((string3::(string2::string_list1)))
Inductive1 : lambda1 = P (string4) (lambda2)
string2 : string
string3 : string
---------------------------------------
sub_check_ta1 (lambda2) ((string4::(string3::(string2::(string1::string_list1))))) = sub_check_ta1 (lambda2) ((string4::(string3::(string2::string_list1))))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite <- lhs_lemma3 in goal at 1(rank:24)
rewrite <- lhs_lemma3 in goal at 2(rank:24)
rewrite <- lhs_lemma3 in goal at 3(rank:24)
=================================================
Progress: 69


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = P (string3) (lambda2)
string_list1 : string list
Base1 : string_list1 = (Nil)
string2 : string
---------------------------------------
sub_check_ta1 (lambda2) ((string3::(string2::(string1::string_list2)))) = sub_check_ta1 (lambda2) ((string3::(string2::string_list2)))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- lhs_lemma3 in goal at 1(rank : 23)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = P (string3) (lambda2)
string_list1 : string list
Base1 : string_list1 = (Nil)
string2 : string
---------------------------------------
sub_check_ta1 (lambda2) (mk_lhs1 ((Nil)) (string3) (string2) ((string1::string_list2))) = sub_check_ta1 (lambda2) ((string3::(string2::string_list2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- rhs_lemma5 in goal at 2(rank:15)
rewrite <- rhs_lemma5 in goal at 3(rank:23)
=================================================
Progress: 70


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = P (string3) (lambda2)
string_list1 : string list
Base1 : string_list1 = (Nil)
string2 : string
---------------------------------------
sub_check_ta1 (lambda2) (mk_lhs1 ((Nil)) (string3) (string2) ((string1::string_list2))) = sub_check_ta1 (lambda2) ((string3::(string2::string_list2)))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- rhs_lemma5 in goal at 2(rank : 15)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = P (string3) (lambda2)
string_list1 : string list
Base1 : string_list1 = (Nil)
string2 : string
---------------------------------------
sub_check_ta1 (lambda2) (mk_lhs1 ((Nil)) (string3) (string2) ((string1::string_list2))) = sub_check_ta1 (lambda2) (mk_rhs1 ((Nil)) (string3) ((string2::string_list2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- rhs_lemma5 in goal at 2(rank:7)
=================================================
Progress: 71


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = P (string3) (lambda2)
string_list1 : string list
Base1 : string_list1 = (Nil)
string2 : string
---------------------------------------
sub_check_ta1 (lambda2) (mk_lhs1 ((Nil)) (string3) (string2) ((string1::string_list2))) = sub_check_ta1 (lambda2) (mk_rhs1 ((Nil)) (string3) ((string2::string_list2)))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- rhs_lemma5 in goal at 2(rank : 7)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = P (string3) (lambda2)
string_list1 : string list
Base1 : string_list1 = (Nil)
string2 : string
---------------------------------------
sub_check_ta1 (lambda2) (mk_lhs1 ((Nil)) (string3) (string2) ((string1::string_list2))) = sub_check_ta1 (lambda2) (mk_rhs1 ((Nil)) (string3) (mk_rhs1 ((Nil)) (string2) (string_list2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
rewrite <- lhs_lemma3 in goal at 1
rewrite <- rhs_lemma5 in goal at 2
rewrite <- rhs_lemma5 in goal at 2


1st goal of : any
string1 : string
lambda1 : lambda
string3 : string
lambda2 : lambda
string_list1 : string list
string2 : string
---------------------------------------
forall (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda2) (mk_lhs1 ((Nil)) (string3) (string2) ((string1::string_list2))) = sub_check_ta1 (lambda2) (mk_rhs1 ((Nil)) (string3) (mk_rhs1 ((Nil)) (string2) (string_list2)))

0 goal(s) more...

0 conjecture(s) more...
state_list
New Env

;;
Lemma List
forall (lambda2:lambda) (string1:string) (string2:string) (string3:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda2) (mk_lhs1 ((Nil)) (string3) (string2) ((string1::string_list2))) = sub_check_ta1 (lambda2) (mk_rhs1 ((Nil)) (string3) (mk_rhs1 ((Nil)) (string2) (string_list2)))
End of Lemma List
=================================================
Progress: 72


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = P (string3) (lambda2)
string_list1 : string list
Base1 : string_list1 = (Nil)
string2 : string
---------------------------------------
sub_check_ta1 (lambda2) (mk_lhs1 ((Nil)) (string3) (string2) ((string1::string_list2))) = sub_check_ta1 (lambda2) (mk_rhs1 ((Nil)) (string3) ((string2::string_list2)))

2 goal(s) more...

1 conjecture(s) more...
>>> assert forall (lambda2:lambda) (string1:string) (string2:string) (string3:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda2) (mk_lhs1 ((Nil)) (string3) (string2) ((string1::string_list2))) = sub_check_ta1 (lambda2) (mk_rhs1 ((Nil)) (string3) (mk_rhs1 ((Nil)) (string2) (string_list2)))(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (string3) (string2) ((string1::string_list1))) = sub_check_ta1 (lambda1) (mk_rhs1 ((Nil)) (string3) (mk_rhs1 ((Nil)) (string2) (string_list1)))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (string3) (string2) ((string1::string_list1))) = sub_check_ta1 (lambda1) (mk_rhs1 ((Nil)) (string3) (mk_rhs1 ((Nil)) (string2) (string_list1)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7)
=================================================
Progress: 73


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (string3) (string2) ((string1::string_list1))) = sub_check_ta1 (lambda1) (mk_rhs1 ((Nil)) (string3) (mk_rhs1 ((Nil)) (string2) (string_list1)))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (string3) (string2) ((string1::string_list1))) = sub_check_ta1 (lambda1) (mk_rhs1 ((Nil)) (string3) (mk_rhs1 ((Nil)) (string2) (string_list1)))

0 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (string3) (string2) ((string1::string_list1))) = sub_check_ta1 (lambda1) (mk_rhs1 ((Nil)) (string3) (mk_rhs1 ((Nil)) (string2) (string_list1)))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (lambda1) ((string3::(string2::string_list1)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:7)
=================================================
Progress: 74


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (string3) (string2) ((string1::string_list1))) = sub_check_ta1 (lambda1) (mk_rhs1 ((Nil)) (string3) (mk_rhs1 ((Nil)) (string2) (string_list1)))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (lambda1) ((string3::(string2::string_list1)))

0 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (string3) (string2) ((string1::string_list1))) = sub_check_ta1 (lambda1) (mk_rhs1 ((Nil)) (string3) (mk_rhs1 ((Nil)) (string2) (string_list1)))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (lambda1) ((string3::(string2::string_list1)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string_list1(rank:7)
=================================================
Progress: 75


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (string3) (string2) ((string1::string_list1))) = sub_check_ta1 (lambda1) (mk_rhs1 ((Nil)) (string3) (mk_rhs1 ((Nil)) (string2) (string_list1)))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (lambda1) ((string3::(string2::string_list1)))

0 goal(s) more...

2 conjecture(s) more...
>>> intro string_list1(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (string3) (string2) ((string1::string_list1))) = sub_check_ta1 (lambda1) (mk_rhs1 ((Nil)) (string3) (mk_rhs1 ((Nil)) (string2) (string_list1)))
string1 : string
string_list1 : string list
---------------------------------------
forall (lambda1:lambda) (string2:string) (string3:string), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (lambda1) ((string3::(string2::string_list1)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7)
=================================================
Progress: 76


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (string3) (string2) ((string1::string_list1))) = sub_check_ta1 (lambda1) (mk_rhs1 ((Nil)) (string3) (mk_rhs1 ((Nil)) (string2) (string_list1)))
string1 : string
string_list1 : string list
---------------------------------------
forall (lambda1:lambda) (string2:string) (string3:string), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (lambda1) ((string3::(string2::string_list1)))

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (string3) (string2) ((string1::string_list1))) = sub_check_ta1 (lambda1) (mk_rhs1 ((Nil)) (string3) (mk_rhs1 ((Nil)) (string2) (string_list1)))
string1 : string
string_list1 : string list
Cond1 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
forall (lambda1:lambda) (string2:string) (string3:string), sub_check_ta1 (lambda1) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (lambda1) ((string3::(string2::string_list1)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:9)
=================================================
Progress: 77


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (string3) (string2) ((string1::string_list1))) = sub_check_ta1 (lambda1) (mk_rhs1 ((Nil)) (string3) (mk_rhs1 ((Nil)) (string2) (string_list1)))
string1 : string
string_list1 : string list
Cond1 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
forall (lambda1:lambda) (string2:string) (string3:string), sub_check_ta1 (lambda1) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (lambda1) ((string3::(string2::string_list1)))

0 goal(s) more...

2 conjecture(s) more...
>>> induction lambda1(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (string3) (string2) ((string1::string_list1))) = sub_check_ta1 (lambda1) (mk_rhs1 ((Nil)) (string3) (mk_rhs1 ((Nil)) (string2) (string_list1)))
string1 : string
string_list1 : string list
Cond1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string4 : string
Base1 : lambda1 = V (string4)
---------------------------------------
forall (string2:string) (string3:string), sub_check_ta1 (V (string4)) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (V (string4)) ((string3::(string2::string_list1)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9)
=================================================
Progress: 78


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (string3) (string2) ((string1::string_list1))) = sub_check_ta1 (lambda1) (mk_rhs1 ((Nil)) (string3) (mk_rhs1 ((Nil)) (string2) (string_list1)))
string1 : string
string_list1 : string list
Cond1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string4 : string
Base1 : lambda1 = V (string4)
---------------------------------------
forall (string2:string) (string3:string), sub_check_ta1 (V (string4)) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (V (string4)) ((string3::(string2::string_list1)))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (string3) (string2) ((string1::string_list1))) = sub_check_ta1 (lambda1) (mk_rhs1 ((Nil)) (string3) (mk_rhs1 ((Nil)) (string2) (string_list1)))
string1 : string
string_list1 : string list
Cond1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string4 : string
Base1 : lambda1 = V (string4)
---------------------------------------
forall (string2:string) (string3:string), if string_eq (string3) (string4) then true else is_mem_ta1 ((string2::(string1::string_list1))) (string4) = if string_eq (string3) (string4) then true else is_mem_ta1 ((string2::string_list1)) (string4)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string2(rank:9)
=================================================
Progress: 79


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (string3) (string2) ((string1::string_list1))) = sub_check_ta1 (lambda1) (mk_rhs1 ((Nil)) (string3) (mk_rhs1 ((Nil)) (string2) (string_list1)))
string1 : string
string_list1 : string list
Cond1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string4 : string
Base1 : lambda1 = V (string4)
---------------------------------------
forall (string2:string) (string3:string), if string_eq (string3) (string4) then true else is_mem_ta1 ((string2::(string1::string_list1))) (string4) = if string_eq (string3) (string4) then true else is_mem_ta1 ((string2::string_list1)) (string4)

2 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (string3) (string2) ((string1::string_list1))) = sub_check_ta1 (lambda1) (mk_rhs1 ((Nil)) (string3) (mk_rhs1 ((Nil)) (string2) (string_list1)))
string1 : string
string_list1 : string list
Cond1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string4 : string
Base1 : lambda1 = V (string4)
string2 : string
---------------------------------------
forall (string3:string), if string_eq (string3) (string4) then true else is_mem_ta1 ((string2::(string1::string_list1))) (string4) = if string_eq (string3) (string4) then true else is_mem_ta1 ((string2::string_list1)) (string4)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string3(rank:9)
=================================================
Progress: 80


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (string3) (string2) ((string1::string_list1))) = sub_check_ta1 (lambda1) (mk_rhs1 ((Nil)) (string3) (mk_rhs1 ((Nil)) (string2) (string_list1)))
string1 : string
string_list1 : string list
Cond1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string4 : string
Base1 : lambda1 = V (string4)
string2 : string
---------------------------------------
forall (string3:string), if string_eq (string3) (string4) then true else is_mem_ta1 ((string2::(string1::string_list1))) (string4) = if string_eq (string3) (string4) then true else is_mem_ta1 ((string2::string_list1)) (string4)

2 goal(s) more...

2 conjecture(s) more...
>>> intro string3(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (string3) (string2) ((string1::string_list1))) = sub_check_ta1 (lambda1) (mk_rhs1 ((Nil)) (string3) (mk_rhs1 ((Nil)) (string2) (string_list1)))
string1 : string
string_list1 : string list
Cond1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string4 : string
Base1 : lambda1 = V (string4)
string2 : string
string3 : string
---------------------------------------
if string_eq (string3) (string4) then true else is_mem_ta1 ((string2::(string1::string_list1))) (string4) = if string_eq (string3) (string4) then true else is_mem_ta1 ((string2::string_list1)) (string4)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
case string_eq (string3) (string4)(rank:10)
rewrite <- Cond1 in goal at 1(rank:25)
rewrite <- Cond1 in goal at 2(rank:25)
rewrite <- lhs_lemma3 in goal at 0(rank:25)
rewrite <- rhs_lemma5 in goal at 3(rank:25)
rewrite <- Cond1 in goal at 0(rank:25)
=================================================
Progress: 81


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (string3) (string2) ((string1::string_list1))) = sub_check_ta1 (lambda1) (mk_rhs1 ((Nil)) (string3) (mk_rhs1 ((Nil)) (string2) (string_list1)))
string1 : string
string_list1 : string list
Cond1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string4 : string
Base1 : lambda1 = V (string4)
string2 : string
string3 : string
---------------------------------------
if string_eq (string3) (string4) then true else is_mem_ta1 ((string2::(string1::string_list1))) (string4) = if string_eq (string3) (string4) then true else is_mem_ta1 ((string2::string_list1)) (string4)

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string3) (string4)(rank : 10)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (string3) (string2) ((string1::string_list1))) = sub_check_ta1 (lambda1) (mk_rhs1 ((Nil)) (string3) (mk_rhs1 ((Nil)) (string2) (string_list1)))
string1 : string
string_list1 : string list
Cond1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string4 : string
Base1 : lambda1 = V (string4)
string2 : string
string3 : string
Case1 : string_eq (string3) (string4) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9)
=================================================
Progress: 82


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (string3) (string2) ((string1::string_list1))) = sub_check_ta1 (lambda1) (mk_rhs1 ((Nil)) (string3) (mk_rhs1 ((Nil)) (string2) (string_list1)))
string1 : string
string_list1 : string list
Cond1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string4 : string
Base1 : lambda1 = V (string4)
string2 : string
string3 : string
Case1 : string_eq (string3) (string4) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (string3) (string2) ((string1::string_list1))) = sub_check_ta1 (lambda1) (mk_rhs1 ((Nil)) (string3) (mk_rhs1 ((Nil)) (string2) (string_list1)))
string1 : string
string_list1 : string list
Cond1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string4 : string
Base1 : lambda1 = V (string4)
string2 : string
string3 : string
Case1 : string_eq (string3) (string4) = false
---------------------------------------
if string_eq (string2) (string4) then true else is_mem_ta1 ((string1::string_list1)) (string4) = if string_eq (string2) (string4) then true else is_mem_ta1 (string_list1) (string4)

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 4
case string_eq (string2) (string4)(rank:10)
rewrite <- Cond1 in goal at 0(rank:25)
rewrite <- Cond1 in goal at 1(rank:25)
rewrite <- Cond1 in goal at 2(rank:25)
=================================================
Progress: 83


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (string3) (string2) ((string1::string_list1))) = sub_check_ta1 (lambda1) (mk_rhs1 ((Nil)) (string3) (mk_rhs1 ((Nil)) (string2) (string_list1)))
string1 : string
string_list1 : string list
Cond1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string4 : string
Base1 : lambda1 = V (string4)
string2 : string
string3 : string
Case1 : string_eq (string3) (string4) = false
---------------------------------------
if string_eq (string2) (string4) then true else is_mem_ta1 ((string1::string_list1)) (string4) = if string_eq (string2) (string4) then true else is_mem_ta1 (string_list1) (string4)

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string2) (string4)(rank : 10)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (string3) (string2) ((string1::string_list1))) = sub_check_ta1 (lambda1) (mk_rhs1 ((Nil)) (string3) (mk_rhs1 ((Nil)) (string2) (string_list1)))
string1 : string
string_list1 : string list
Cond1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string4 : string
Base1 : lambda1 = V (string4)
string2 : string
string3 : string
Case1 : string_eq (string3) (string4) = false
Case2 : string_eq (string2) (string4) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9)
=================================================
Progress: 84


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (string3) (string2) ((string1::string_list1))) = sub_check_ta1 (lambda1) (mk_rhs1 ((Nil)) (string3) (mk_rhs1 ((Nil)) (string2) (string_list1)))
string1 : string
string_list1 : string list
Cond1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string4 : string
Base1 : lambda1 = V (string4)
string2 : string
string3 : string
Case1 : string_eq (string3) (string4) = false
Case2 : string_eq (string2) (string4) = true
---------------------------------------
true = true

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (string3) (string2) ((string1::string_list1))) = sub_check_ta1 (lambda1) (mk_rhs1 ((Nil)) (string3) (mk_rhs1 ((Nil)) (string2) (string_list1)))
string1 : string
string_list1 : string list
Cond1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string4 : string
Base1 : lambda1 = V (string4)
string2 : string
string3 : string
Case1 : string_eq (string3) (string4) = false
Case2 : string_eq (string2) (string4) = false
---------------------------------------
if string_eq (string1) (string4) then true else is_mem_ta1 (string_list1) (string4) = is_mem_ta1 (string_list1) (string4)

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 2
case string_eq (string1) (string4)(rank:10)
rewrite <- Cond1 in goal at 0(rank:25)
=================================================
Progress: 85


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (string3) (string2) ((string1::string_list1))) = sub_check_ta1 (lambda1) (mk_rhs1 ((Nil)) (string3) (mk_rhs1 ((Nil)) (string2) (string_list1)))
string1 : string
string_list1 : string list
Cond1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string4 : string
Base1 : lambda1 = V (string4)
string2 : string
string3 : string
Case1 : string_eq (string3) (string4) = false
Case2 : string_eq (string2) (string4) = false
---------------------------------------
if string_eq (string1) (string4) then true else is_mem_ta1 (string_list1) (string4) = is_mem_ta1 (string_list1) (string4)

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string1) (string4)(rank : 10)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (string3) (string2) ((string1::string_list1))) = sub_check_ta1 (lambda1) (mk_rhs1 ((Nil)) (string3) (mk_rhs1 ((Nil)) (string2) (string_list1)))
string1 : string
string_list1 : string list
Cond1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string4 : string
Base1 : lambda1 = V (string4)
string2 : string
string3 : string
Case1 : string_eq (string3) (string4) = false
Case2 : string_eq (string2) (string4) = false
Case3 : string_eq (string1) (string4) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string4)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite string_eqb_eq in Case3 at 0(rank:10)
=================================================
Progress: 86


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (string3) (string2) ((string1::string_list1))) = sub_check_ta1 (lambda1) (mk_rhs1 ((Nil)) (string3) (mk_rhs1 ((Nil)) (string2) (string_list1)))
string1 : string
string_list1 : string list
Cond1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string4 : string
Base1 : lambda1 = V (string4)
string2 : string
string3 : string
Case1 : string_eq (string3) (string4) = false
Case2 : string_eq (string2) (string4) = false
Case3 : string_eq (string1) (string4) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string4)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 10)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (string3) (string2) ((string1::string_list1))) = sub_check_ta1 (lambda1) (mk_rhs1 ((Nil)) (string3) (mk_rhs1 ((Nil)) (string2) (string_list1)))
string1 : string
string_list1 : string list
Cond1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string4 : string
Base1 : lambda1 = V (string4)
string2 : string
string3 : string
Case1 : string_eq (string3) (string4) = false
Case2 : string_eq (string2) (string4) = false
Case3 : string1 = string4
---------------------------------------
true = is_mem_ta1 (string_list1) (string4)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite <- Case3 in goal at 0(rank:10)
rewrite <- Cond1 in goal at 0(rank:18)
=================================================
Progress: 87


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (string3) (string2) ((string1::string_list1))) = sub_check_ta1 (lambda1) (mk_rhs1 ((Nil)) (string3) (mk_rhs1 ((Nil)) (string2) (string_list1)))
string1 : string
string_list1 : string list
Cond1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string4 : string
Base1 : lambda1 = V (string4)
string2 : string
string3 : string
Case1 : string_eq (string3) (string4) = false
Case2 : string_eq (string2) (string4) = false
Case3 : string1 = string4
---------------------------------------
true = is_mem_ta1 (string_list1) (string4)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case3 in goal at 0(rank : 10)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (string3) (string2) ((string1::string_list1))) = sub_check_ta1 (lambda1) (mk_rhs1 ((Nil)) (string3) (mk_rhs1 ((Nil)) (string2) (string_list1)))
string1 : string
string_list1 : string list
Cond1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string4 : string
Base1 : lambda1 = V (string4)
string2 : string
string3 : string
Case1 : string_eq (string3) (string4) = false
Case2 : string_eq (string2) (string4) = false
Case3 : string1 = string4
---------------------------------------
true = is_mem_ta1 (string_list1) (string1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite Cond1 in goal at 0(rank:18)
rewrite <- Cond1 in goal at 0(rank:18)
=================================================
Progress: 88


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (string3) (string2) ((string1::string_list1))) = sub_check_ta1 (lambda1) (mk_rhs1 ((Nil)) (string3) (mk_rhs1 ((Nil)) (string2) (string_list1)))
string1 : string
string_list1 : string list
Cond1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string4 : string
Base1 : lambda1 = V (string4)
string2 : string
string3 : string
Case1 : string_eq (string3) (string4) = false
Case2 : string_eq (string2) (string4) = false
Case3 : string1 = string4
---------------------------------------
true = is_mem_ta1 (string_list1) (string4)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Cond1 in goal at 0(rank : 18)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (string3) (string2) ((string1::string_list1))) = sub_check_ta1 (lambda1) (mk_rhs1 ((Nil)) (string3) (mk_rhs1 ((Nil)) (string2) (string_list1)))
string1 : string
string_list1 : string list
Cond1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string4 : string
Base1 : lambda1 = V (string4)
string2 : string
string3 : string
Case1 : string_eq (string3) (string4) = false
Case2 : string_eq (string2) (string4) = false
Case3 : string1 = string4
---------------------------------------
is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list1) (string4)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Case3 in goal at 0(rank:10)
=================================================
Progress: 89


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (string3) (string2) ((string1::string_list1))) = sub_check_ta1 (lambda1) (mk_rhs1 ((Nil)) (string3) (mk_rhs1 ((Nil)) (string2) (string_list1)))
string1 : string
string_list1 : string list
Cond1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string4 : string
Base1 : lambda1 = V (string4)
string2 : string
string3 : string
Case1 : string_eq (string3) (string4) = false
Case2 : string_eq (string2) (string4) = false
Case3 : string1 = string4
---------------------------------------
is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list1) (string4)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite Case3 in goal at 0(rank : 10)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (string3) (string2) ((string1::string_list1))) = sub_check_ta1 (lambda1) (mk_rhs1 ((Nil)) (string3) (mk_rhs1 ((Nil)) (string2) (string_list1)))
string1 : string
string_list1 : string list
Cond1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string4 : string
Base1 : lambda1 = V (string4)
string2 : string
string3 : string
Case1 : string_eq (string3) (string4) = false
Case2 : string_eq (string2) (string4) = false
Case3 : string1 = string4
---------------------------------------
is_mem_ta1 (string_list1) (string4) = is_mem_ta1 (string_list1) (string4)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9)
=================================================
Progress: 90


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (string3) (string2) ((string1::string_list1))) = sub_check_ta1 (lambda1) (mk_rhs1 ((Nil)) (string3) (mk_rhs1 ((Nil)) (string2) (string_list1)))
string1 : string
string_list1 : string list
Cond1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string4 : string
Base1 : lambda1 = V (string4)
string2 : string
string3 : string
Case1 : string_eq (string3) (string4) = false
Case2 : string_eq (string2) (string4) = false
Case3 : string1 = string4
---------------------------------------
is_mem_ta1 (string_list1) (string4) = is_mem_ta1 (string_list1) (string4)

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (string3) (string2) ((string1::string_list1))) = sub_check_ta1 (lambda1) (mk_rhs1 ((Nil)) (string3) (mk_rhs1 ((Nil)) (string2) (string_list1)))
string1 : string
string_list1 : string list
Cond1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string4 : string
Base1 : lambda1 = V (string4)
string2 : string
string3 : string
Case1 : string_eq (string3) (string4) = false
Case2 : string_eq (string2) (string4) = false
Case3 : string_eq (string1) (string4) = false
---------------------------------------
is_mem_ta1 (string_list1) (string4) = is_mem_ta1 (string_list1) (string4)

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 2
Tactic List : 1
reflexivity(rank:8)
=================================================
Progress: 91


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (string3) (string2) ((string1::string_list1))) = sub_check_ta1 (lambda1) (mk_rhs1 ((Nil)) (string3) (mk_rhs1 ((Nil)) (string2) (string_list1)))
string1 : string
string_list1 : string list
Cond1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string4 : string
Base1 : lambda1 = V (string4)
string2 : string
string3 : string
Case1 : string_eq (string3) (string4) = false
Case2 : string_eq (string2) (string4) = false
Case3 : string_eq (string1) (string4) = false
---------------------------------------
is_mem_ta1 (string_list1) (string4) = is_mem_ta1 (string_list1) (string4)

2 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (string3) (string2) ((string1::string_list1))) = sub_check_ta1 (lambda1) (mk_rhs1 ((Nil)) (string3) (mk_rhs1 ((Nil)) (string2) (string_list1)))
string1 : string
string_list1 : string list
Cond1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string4 : string
lambda2 : lambda
IH1 : forall (string2:string) (string3:string), sub_check_ta1 (lambda2) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (lambda2) ((string3::(string2::string_list1)))
Inductive1 : lambda1 = P (string4) (lambda2)
---------------------------------------
forall (string2:string) (string3:string), sub_check_ta1 (P (string4) (lambda2)) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (P (string4) (lambda2)) ((string3::(string2::string_list1)))

1 goal(s) more...

2 conjecture(s) more...
Deduplication: 9
Tactic List : 1
simpl in goal(rank:8)
=================================================
Progress: 92


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (string3) (string2) ((string1::string_list1))) = sub_check_ta1 (lambda1) (mk_rhs1 ((Nil)) (string3) (mk_rhs1 ((Nil)) (string2) (string_list1)))
string1 : string
string_list1 : string list
Cond1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string4 : string
lambda2 : lambda
IH1 : forall (string2:string) (string3:string), sub_check_ta1 (lambda2) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (lambda2) ((string3::(string2::string_list1)))
Inductive1 : lambda1 = P (string4) (lambda2)
---------------------------------------
forall (string2:string) (string3:string), sub_check_ta1 (P (string4) (lambda2)) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (P (string4) (lambda2)) ((string3::(string2::string_list1)))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (string3) (string2) ((string1::string_list1))) = sub_check_ta1 (lambda1) (mk_rhs1 ((Nil)) (string3) (mk_rhs1 ((Nil)) (string2) (string_list1)))
string1 : string
string_list1 : string list
Cond1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string4 : string
lambda2 : lambda
IH1 : forall (string2:string) (string3:string), sub_check_ta1 (lambda2) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (lambda2) ((string3::(string2::string_list1)))
Inductive1 : lambda1 = P (string4) (lambda2)
---------------------------------------
forall (string2:string) (string3:string), sub_check_ta1 (lambda2) ((string4::(string3::(string2::(string1::string_list1))))) = sub_check_ta1 (lambda2) ((string4::(string3::(string2::string_list1))))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 5
intro string2(rank:8)
rewrite <- lhs_lemma3 in goal at 1(rank:24)
rewrite <- lhs_lemma3 in goal at 2(rank:24)
rewrite <- lhs_lemma3 in goal at 3(rank:24)
intro string3(rank:8)
=================================================
Progress: 93


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (string3) (string2) ((string1::string_list1))) = sub_check_ta1 (lambda1) (mk_rhs1 ((Nil)) (string3) (mk_rhs1 ((Nil)) (string2) (string_list1)))
string1 : string
string_list1 : string list
Cond1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string4 : string
lambda2 : lambda
IH1 : forall (string2:string) (string3:string), sub_check_ta1 (lambda2) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (lambda2) ((string3::(string2::string_list1)))
Inductive1 : lambda1 = P (string4) (lambda2)
---------------------------------------
forall (string2:string) (string3:string), sub_check_ta1 (lambda2) ((string4::(string3::(string2::(string1::string_list1))))) = sub_check_ta1 (lambda2) ((string4::(string3::(string2::string_list1))))

1 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (string3) (string2) ((string1::string_list1))) = sub_check_ta1 (lambda1) (mk_rhs1 ((Nil)) (string3) (mk_rhs1 ((Nil)) (string2) (string_list1)))
string1 : string
string_list1 : string list
Cond1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string4 : string
lambda2 : lambda
IH1 : forall (string2:string) (string3:string), sub_check_ta1 (lambda2) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (lambda2) ((string3::(string2::string_list1)))
Inductive1 : lambda1 = P (string4) (lambda2)
string2 : string
---------------------------------------
forall (string3:string), sub_check_ta1 (lambda2) ((string4::(string3::(string2::(string1::string_list1))))) = sub_check_ta1 (lambda2) ((string4::(string3::(string2::string_list1))))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
intro string3(rank:8)
rewrite <- lhs_lemma3 in goal at 1(rank:24)
rewrite <- lhs_lemma3 in goal at 2(rank:24)
rewrite <- lhs_lemma3 in goal at 3(rank:24)
=================================================
Progress: 94


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (string3) (string2) ((string1::string_list1))) = sub_check_ta1 (lambda1) (mk_rhs1 ((Nil)) (string3) (mk_rhs1 ((Nil)) (string2) (string_list1)))
string1 : string
string_list1 : string list
Cond1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string4 : string
lambda2 : lambda
IH1 : forall (string2:string) (string3:string), sub_check_ta1 (lambda2) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (lambda2) ((string3::(string2::string_list1)))
Inductive1 : lambda1 = P (string4) (lambda2)
---------------------------------------
forall (string2:string) (string3:string), sub_check_ta1 (lambda2) ((string4::(string3::(string2::(string1::string_list1))))) = sub_check_ta1 (lambda2) ((string4::(string3::(string2::string_list1))))

1 goal(s) more...

2 conjecture(s) more...
>>> intro string3(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (string3) (string2) ((string1::string_list1))) = sub_check_ta1 (lambda1) (mk_rhs1 ((Nil)) (string3) (mk_rhs1 ((Nil)) (string2) (string_list1)))
string1 : string
string_list1 : string list
Cond1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string4 : string
lambda2 : lambda
IH1 : forall (string2:string) (string3:string), sub_check_ta1 (lambda2) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (lambda2) ((string3::(string2::string_list1)))
Inductive1 : lambda1 = P (string4) (lambda2)
string3 : string
---------------------------------------
forall (string2:string), sub_check_ta1 (lambda2) ((string4::(string3::(string2::(string1::string_list1))))) = sub_check_ta1 (lambda2) ((string4::(string3::(string2::string_list1))))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite <- lhs_lemma3 in goal at 1(rank:24)
rewrite <- lhs_lemma3 in goal at 2(rank:24)
rewrite <- lhs_lemma3 in goal at 3(rank:24)
=================================================
Progress: 95


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (string3) (string2) ((string1::string_list1))) = sub_check_ta1 (lambda1) (mk_rhs1 ((Nil)) (string3) (mk_rhs1 ((Nil)) (string2) (string_list1)))
string1 : string
string_list1 : string list
Cond1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string4 : string
lambda2 : lambda
IH1 : forall (string2:string) (string3:string), sub_check_ta1 (lambda2) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (lambda2) ((string3::(string2::string_list1)))
Inductive1 : lambda1 = P (string4) (lambda2)
string2 : string
---------------------------------------
forall (string3:string), sub_check_ta1 (lambda2) ((string4::(string3::(string2::(string1::string_list1))))) = sub_check_ta1 (lambda2) ((string4::(string3::(string2::string_list1))))

1 goal(s) more...

2 conjecture(s) more...
>>> intro string3(rank : 8)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 ((Nil)) (string3) (string2) ((string1::string_list1))) = sub_check_ta1 (lambda1) (mk_rhs1 ((Nil)) (string3) (mk_rhs1 ((Nil)) (string2) (string_list1)))
string1 : string
string_list1 : string list
Cond1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string4 : string
lambda2 : lambda
IH1 : forall (string2:string) (string3:string), sub_check_ta1 (lambda2) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (lambda2) ((string3::(string2::string_list1)))
Inductive1 : lambda1 = P (string4) (lambda2)
string2 : string
string3 : string
---------------------------------------
sub_check_ta1 (lambda2) ((string4::(string3::(string2::(string1::string_list1))))) = sub_check_ta1 (lambda2) ((string4::(string3::(string2::string_list1))))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite <- lhs_lemma3 in goal at 1(rank:24)
rewrite <- lhs_lemma3 in goal at 2(rank:24)
rewrite <- lhs_lemma3 in goal at 3(rank:24)
=================================================
Progress: 96


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = P (string3) (lambda2)
string_list1 : string list
Base1 : string_list1 = (Nil)
string2 : string
---------------------------------------
sub_check_ta1 (lambda2) ((string3::(string2::(string1::string_list2)))) = sub_check_ta1 (lambda2) ((string3::(string2::string_list2)))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- lhs_lemma3 in goal at 2(rank : 23)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = P (string3) (lambda2)
string_list1 : string list
Base1 : string_list1 = (Nil)
string2 : string
---------------------------------------
sub_check_ta1 (lambda2) ((string3::mk_lhs1 ((Nil)) (string2) (string1) (string_list2))) = sub_check_ta1 (lambda2) ((string3::(string2::string_list2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- rhs_lemma5 in goal at 2(rank:15)
rewrite <- lhs_lemma4 in goal at 0(rank:23)
=================================================
Progress: 97


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = P (string3) (lambda2)
string_list1 : string list
Base1 : string_list1 = (Nil)
string2 : string
---------------------------------------
sub_check_ta1 (lambda2) ((string3::mk_lhs1 ((Nil)) (string2) (string1) (string_list2))) = sub_check_ta1 (lambda2) ((string3::(string2::string_list2)))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- rhs_lemma5 in goal at 2(rank : 15)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = P (string3) (lambda2)
string_list1 : string list
Base1 : string_list1 = (Nil)
string2 : string
---------------------------------------
sub_check_ta1 (lambda2) ((string3::mk_lhs1 ((Nil)) (string2) (string1) (string_list2))) = sub_check_ta1 (lambda2) (mk_rhs1 ((Nil)) (string3) ((string2::string_list2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- lhs_lemma4 in goal at 0(rank:23)
rewrite <- rhs_lemma5 in goal at 2(rank:23)
=================================================
Progress: 98


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = P (string3) (lambda2)
string_list1 : string list
Base1 : string_list1 = (Nil)
string2 : string
---------------------------------------
sub_check_ta1 (lambda2) (mk_lhs1 ((Nil)) (string3) (string2) ((string1::string_list2))) = sub_check_ta1 (lambda2) ((string3::(string2::string_list2)))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- rhs_lemma5 in goal at 3(rank : 23)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = P (string3) (lambda2)
string_list1 : string list
Base1 : string_list1 = (Nil)
string2 : string
---------------------------------------
sub_check_ta1 (lambda2) (mk_lhs1 ((Nil)) (string3) (string2) ((string1::string_list2))) = sub_check_ta1 (lambda2) ((string3::mk_rhs1 ((Nil)) (string2) (string_list2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- rhs_lemma6 in goal at 0(rank:7)
=================================================
Progress: 99


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = P (string3) (lambda2)
string_list1 : string list
Base1 : string_list1 = (Nil)
string2 : string
---------------------------------------
sub_check_ta1 (lambda2) (mk_lhs1 ((Nil)) (string3) (string2) ((string1::string_list2))) = sub_check_ta1 (lambda2) ((string3::mk_rhs1 ((Nil)) (string2) (string_list2)))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- rhs_lemma6 in goal at 0(rank : 7)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = P (string3) (lambda2)
string_list1 : string list
Base1 : string_list1 = (Nil)
string2 : string
---------------------------------------
sub_check_ta1 (lambda2) (mk_lhs1 ((Nil)) (string3) (string2) ((string1::string_list2))) = sub_check_ta1 (lambda2) (mk_rhs1 ((string3::(Nil))) (string2) (string_list2))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:15)
rewrite <- rhs_lemma5 in goal at 2(rank:23)
=================================================
Progress: 100


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = P (string3) (lambda2)
string_list1 : string list
Base1 : string_list1 = (Nil)
string2 : string
---------------------------------------
sub_check_ta1 (lambda2) (mk_lhs1 ((Nil)) (string3) (string2) ((string1::string_list2))) = sub_check_ta1 (lambda2) (mk_rhs1 ((string3::(Nil))) (string2) (string_list2))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 15)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = P (string3) (lambda2)
string_list1 : string list
Base1 : string_list1 = (Nil)
string2 : string
---------------------------------------
sub_check_ta1 (lambda2) (mk_lhs1 ((Nil)) (string3) (string2) ((string1::string_list2))) = sub_check_ta1 (lambda2) (mk_lhs1 ((string3::(Nil))) (string2) (string1) (string_list2))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:6)
=================================================
Progress: 101


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = P (string3) (lambda2)
string_list1 : string list
Base1 : string_list1 = (Nil)
string2 : string
---------------------------------------
sub_check_ta1 (lambda2) (mk_lhs1 ((Nil)) (string3) (string2) ((string1::string_list2))) = sub_check_ta1 (lambda2) (mk_lhs1 ((string3::(Nil))) (string2) (string1) (string_list2))

2 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 6)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = P (string3) (lambda2)
string_list1 : string list
string4 : string
string_list3 : string list
IH2 : forall (string2:string), sub_check_ta1 (lambda2) ((string3::mk_lhs1 (string_list3) (string2) (string1) (string_list2))) = sub_check_ta1 (lambda2) ((string3::mk_rhs1 (string_list3) (string2) (string_list2)))
Inductive2 : string_list1 = (string4::string_list3)
---------------------------------------
forall (string2:string), sub_check_ta1 (lambda2) ((string3::mk_lhs1 ((string4::string_list3)) (string2) (string1) (string_list2))) = sub_check_ta1 (lambda2) ((string3::mk_rhs1 ((string4::string_list3)) (string2) (string_list2)))

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 28
Tactic List : 1
simpl in goal(rank:6)
=================================================
Progress: 102


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = P (string3) (lambda2)
string_list1 : string list
string4 : string
string_list3 : string list
IH2 : forall (string2:string), sub_check_ta1 (lambda2) ((string3::mk_lhs1 (string_list3) (string2) (string1) (string_list2))) = sub_check_ta1 (lambda2) ((string3::mk_rhs1 (string_list3) (string2) (string_list2)))
Inductive2 : string_list1 = (string4::string_list3)
---------------------------------------
forall (string2:string), sub_check_ta1 (lambda2) ((string3::mk_lhs1 ((string4::string_list3)) (string2) (string1) (string_list2))) = sub_check_ta1 (lambda2) ((string3::mk_rhs1 ((string4::string_list3)) (string2) (string_list2)))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = P (string3) (lambda2)
string_list1 : string list
string4 : string
string_list3 : string list
IH2 : forall (string2:string), sub_check_ta1 (lambda2) ((string3::mk_lhs1 (string_list3) (string2) (string1) (string_list2))) = sub_check_ta1 (lambda2) ((string3::mk_rhs1 (string_list3) (string2) (string_list2)))
Inductive2 : string_list1 = (string4::string_list3)
---------------------------------------
forall (string2:string), sub_check_ta1 (lambda2) ((string3::(string4::mk_lhs1 (string_list3) (string2) (string1) (string_list2)))) = sub_check_ta1 (lambda2) ((string3::(string4::mk_rhs1 (string_list3) (string2) (string_list2))))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
intro string2(rank:22)
rewrite <- lhs_lemma3 in goal at 1(rank:22)
rewrite <- rhs_lemma5 in goal at 3(rank:22)
=================================================
Progress: 103


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = P (string3) (lambda2)
string_list1 : string list
string4 : string
string_list3 : string list
IH2 : forall (string2:string), sub_check_ta1 (lambda2) ((string3::mk_lhs1 (string_list3) (string2) (string1) (string_list2))) = sub_check_ta1 (lambda2) ((string3::mk_rhs1 (string_list3) (string2) (string_list2)))
Inductive2 : string_list1 = (string4::string_list3)
---------------------------------------
forall (string2:string), sub_check_ta1 (lambda2) ((string3::(string4::mk_lhs1 (string_list3) (string2) (string1) (string_list2)))) = sub_check_ta1 (lambda2) ((string3::(string4::mk_rhs1 (string_list3) (string2) (string_list2))))

1 goal(s) more...

1 conjecture(s) more...
>>> intro string2(rank : 22)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = P (string3) (lambda2)
string_list1 : string list
string4 : string
string_list3 : string list
IH2 : forall (string2:string), sub_check_ta1 (lambda2) ((string3::mk_lhs1 (string_list3) (string2) (string1) (string_list2))) = sub_check_ta1 (lambda2) ((string3::mk_rhs1 (string_list3) (string2) (string_list2)))
Inductive2 : string_list1 = (string4::string_list3)
string2 : string
---------------------------------------
sub_check_ta1 (lambda2) ((string3::(string4::mk_lhs1 (string_list3) (string2) (string1) (string_list2)))) = sub_check_ta1 (lambda2) ((string3::(string4::mk_rhs1 (string_list3) (string2) (string_list2))))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
rewrite <- lhs_lemma3 in goal at 1(rank:22)
rewrite <- lhs_lemma4 in goal at 0(rank:22)
rewrite <- rhs_lemma5 in goal at 3(rank:22)
rewrite <- rhs_lemma6 in goal at 0(rank:22)
=================================================
Progress: 104


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = P (string3) (lambda2)
string_list1 : string list
string4 : string
string_list3 : string list
IH2 : forall (string2:string), sub_check_ta1 (lambda2) ((string3::mk_lhs1 (string_list3) (string2) (string1) (string_list2))) = sub_check_ta1 (lambda2) ((string3::mk_rhs1 (string_list3) (string2) (string_list2)))
Inductive2 : string_list1 = (string4::string_list3)
---------------------------------------
forall (string2:string), sub_check_ta1 (lambda2) ((string3::(string4::mk_lhs1 (string_list3) (string2) (string1) (string_list2)))) = sub_check_ta1 (lambda2) ((string3::(string4::mk_rhs1 (string_list3) (string2) (string_list2))))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- lhs_lemma3 in goal at 1(rank : 22)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = P (string3) (lambda2)
string_list1 : string list
string4 : string
string_list3 : string list
IH2 : forall (string2:string), sub_check_ta1 (lambda2) ((string3::mk_lhs1 (string_list3) (string2) (string1) (string_list2))) = sub_check_ta1 (lambda2) ((string3::mk_rhs1 (string_list3) (string2) (string_list2)))
Inductive2 : string_list1 = (string4::string_list3)
---------------------------------------
forall (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 ((Nil)) (string3) (string4) (mk_lhs1 (string_list3) (string2) (string1) (string_list2))) = sub_check_ta1 (lambda2) ((string3::(string4::mk_rhs1 (string_list3) (string2) (string_list2))))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:6)
=================================================
Progress: 105


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = P (string3) (lambda2)
string_list1 : string list
string4 : string
string_list3 : string list
IH2 : forall (string2:string), sub_check_ta1 (lambda2) ((string3::mk_lhs1 (string_list3) (string2) (string1) (string_list2))) = sub_check_ta1 (lambda2) ((string3::mk_rhs1 (string_list3) (string2) (string_list2)))
Inductive2 : string_list1 = (string4::string_list3)
---------------------------------------
forall (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 ((Nil)) (string3) (string4) (mk_lhs1 (string_list3) (string2) (string1) (string_list2))) = sub_check_ta1 (lambda2) ((string3::(string4::mk_rhs1 (string_list3) (string2) (string_list2))))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = P (string3) (lambda2)
string_list1 : string list
string4 : string
string_list3 : string list
IH2 : forall (string2:string), sub_check_ta1 (lambda2) ((string3::mk_lhs1 (string_list3) (string2) (string1) (string_list2))) = sub_check_ta1 (lambda2) ((string3::mk_rhs1 (string_list3) (string2) (string_list2)))
Inductive2 : string_list1 = (string4::string_list3)
---------------------------------------
forall (string2:string), sub_check_ta1 (lambda2) ((string3::(string4::mk_lhs1 (string_list3) (string2) (string1) (string_list2)))) = sub_check_ta1 (lambda2) ((string3::(string4::mk_rhs1 (string_list3) (string2) (string_list2))))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
intro string2(rank:22)
rewrite <- rhs_lemma5 in goal at 3(rank:22)
rewrite <- rhs_lemma6 in goal at 0(rank:22)
=================================================
Progress: 106


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = P (string3) (lambda2)
string_list1 : string list
string4 : string
string_list3 : string list
IH2 : forall (string2:string), sub_check_ta1 (lambda2) ((string3::mk_lhs1 (string_list3) (string2) (string1) (string_list2))) = sub_check_ta1 (lambda2) ((string3::mk_rhs1 (string_list3) (string2) (string_list2)))
Inductive2 : string_list1 = (string4::string_list3)
---------------------------------------
forall (string2:string), sub_check_ta1 (lambda2) ((string3::(string4::mk_lhs1 (string_list3) (string2) (string1) (string_list2)))) = sub_check_ta1 (lambda2) ((string3::(string4::mk_rhs1 (string_list3) (string2) (string_list2))))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- rhs_lemma5 in goal at 3(rank : 22)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = P (string3) (lambda2)
string_list1 : string list
string4 : string
string_list3 : string list
IH2 : forall (string2:string), sub_check_ta1 (lambda2) ((string3::mk_lhs1 (string_list3) (string2) (string1) (string_list2))) = sub_check_ta1 (lambda2) ((string3::mk_rhs1 (string_list3) (string2) (string_list2)))
Inductive2 : string_list1 = (string4::string_list3)
---------------------------------------
forall (string2:string), sub_check_ta1 (lambda2) ((string3::(string4::mk_lhs1 (string_list3) (string2) (string1) (string_list2)))) = sub_check_ta1 (lambda2) (mk_rhs1 ((Nil)) (string3) ((string4::mk_rhs1 (string_list3) (string2) (string_list2))))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite <- lhs_lemma4 in goal at 0(rank:22)
rewrite <- rhs_lemma5 in goal at 3(rank:22)
rewrite <- rhs_lemma6 in goal at 0(rank:22)
=================================================
Progress: 107


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = P (string3) (lambda2)
string_list1 : string list
string4 : string
string_list3 : string list
IH2 : forall (string2:string), sub_check_ta1 (lambda2) ((string3::mk_lhs1 (string_list3) (string2) (string1) (string_list2))) = sub_check_ta1 (lambda2) ((string3::mk_rhs1 (string_list3) (string2) (string_list2)))
Inductive2 : string_list1 = (string4::string_list3)
string2 : string
---------------------------------------
sub_check_ta1 (lambda2) ((string3::(string4::mk_lhs1 (string_list3) (string2) (string1) (string_list2)))) = sub_check_ta1 (lambda2) ((string3::(string4::mk_rhs1 (string_list3) (string2) (string_list2))))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- lhs_lemma3 in goal at 1(rank : 22)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = P (string3) (lambda2)
string_list1 : string list
string4 : string
string_list3 : string list
IH2 : forall (string2:string), sub_check_ta1 (lambda2) ((string3::mk_lhs1 (string_list3) (string2) (string1) (string_list2))) = sub_check_ta1 (lambda2) ((string3::mk_rhs1 (string_list3) (string2) (string_list2)))
Inductive2 : string_list1 = (string4::string_list3)
string2 : string
---------------------------------------
sub_check_ta1 (lambda2) (mk_lhs1 ((Nil)) (string3) (string4) (mk_lhs1 (string_list3) (string2) (string1) (string_list2))) = sub_check_ta1 (lambda2) ((string3::(string4::mk_rhs1 (string_list3) (string2) (string_list2))))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite <- rhs_lemma5 in goal at 0(rank:14)
rewrite <- rhs_lemma5 in goal at 2(rank:22)
rewrite <- rhs_lemma6 in goal at 0(rank:22)
=================================================
Progress: 108


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = P (string3) (lambda2)
string_list1 : string list
string4 : string
string_list3 : string list
IH2 : forall (string2:string), sub_check_ta1 (lambda2) ((string3::mk_lhs1 (string_list3) (string2) (string1) (string_list2))) = sub_check_ta1 (lambda2) ((string3::mk_rhs1 (string_list3) (string2) (string_list2)))
Inductive2 : string_list1 = (string4::string_list3)
string2 : string
---------------------------------------
sub_check_ta1 (lambda2) (mk_lhs1 ((Nil)) (string3) (string4) (mk_lhs1 (string_list3) (string2) (string1) (string_list2))) = sub_check_ta1 (lambda2) ((string3::(string4::mk_rhs1 (string_list3) (string2) (string_list2))))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- rhs_lemma5 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = P (string3) (lambda2)
string_list1 : string list
string4 : string
string_list3 : string list
IH2 : forall (string2:string), sub_check_ta1 (lambda2) ((string3::mk_lhs1 (string_list3) (string2) (string1) (string_list2))) = sub_check_ta1 (lambda2) ((string3::mk_rhs1 (string_list3) (string2) (string_list2)))
Inductive2 : string_list1 = (string4::string_list3)
string2 : string
---------------------------------------
sub_check_ta1 (lambda2) (mk_lhs1 ((Nil)) (string3) (string4) (mk_lhs1 (string_list3) (string2) (string1) (string_list2))) = sub_check_ta1 (lambda2) (mk_rhs1 ((Nil)) (string3) ((string4::mk_rhs1 (string_list3) (string2) (string_list2))))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- rhs_lemma5 in goal at 0(rank:22)
rewrite <- rhs_lemma6 in goal at 0(rank:22)
=================================================
Progress: 109


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = P (string3) (lambda2)
string_list1 : string list
string4 : string
string_list3 : string list
IH2 : forall (string2:string), sub_check_ta1 (lambda2) ((string3::mk_lhs1 (string_list3) (string2) (string1) (string_list2))) = sub_check_ta1 (lambda2) ((string3::mk_rhs1 (string_list3) (string2) (string_list2)))
Inductive2 : string_list1 = (string4::string_list3)
string2 : string
---------------------------------------
sub_check_ta1 (lambda2) ((string3::(string4::mk_lhs1 (string_list3) (string2) (string1) (string_list2)))) = sub_check_ta1 (lambda2) ((string3::(string4::mk_rhs1 (string_list3) (string2) (string_list2))))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- lhs_lemma4 in goal at 0(rank : 22)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = P (string3) (lambda2)
string_list1 : string list
string4 : string
string_list3 : string list
IH2 : forall (string2:string), sub_check_ta1 (lambda2) ((string3::mk_lhs1 (string_list3) (string2) (string1) (string_list2))) = sub_check_ta1 (lambda2) ((string3::mk_rhs1 (string_list3) (string2) (string_list2)))
Inductive2 : string_list1 = (string4::string_list3)
string2 : string
---------------------------------------
sub_check_ta1 (lambda2) ((string3::mk_lhs1 ((string4::string_list3)) (string2) (string1) (string_list2))) = sub_check_ta1 (lambda2) ((string3::(string4::mk_rhs1 (string_list3) (string2) (string_list2))))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- lhs_lemma4 in goal at 0(rank:22)
rewrite <- rhs_lemma5 in goal at 3(rank:22)
=================================================
Progress: 110


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = P (string3) (lambda2)
string_list1 : string list
string4 : string
string_list3 : string list
IH2 : forall (string2:string), sub_check_ta1 (lambda2) ((string3::mk_lhs1 (string_list3) (string2) (string1) (string_list2))) = sub_check_ta1 (lambda2) ((string3::mk_rhs1 (string_list3) (string2) (string_list2)))
Inductive2 : string_list1 = (string4::string_list3)
string2 : string
---------------------------------------
sub_check_ta1 (lambda2) ((string3::(string4::mk_lhs1 (string_list3) (string2) (string1) (string_list2)))) = sub_check_ta1 (lambda2) ((string3::(string4::mk_rhs1 (string_list3) (string2) (string_list2))))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- rhs_lemma5 in goal at 3(rank : 22)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = P (string3) (lambda2)
string_list1 : string list
string4 : string
string_list3 : string list
IH2 : forall (string2:string), sub_check_ta1 (lambda2) ((string3::mk_lhs1 (string_list3) (string2) (string1) (string_list2))) = sub_check_ta1 (lambda2) ((string3::mk_rhs1 (string_list3) (string2) (string_list2)))
Inductive2 : string_list1 = (string4::string_list3)
string2 : string
---------------------------------------
sub_check_ta1 (lambda2) ((string3::(string4::mk_lhs1 (string_list3) (string2) (string1) (string_list2)))) = sub_check_ta1 (lambda2) (mk_rhs1 ((Nil)) (string3) ((string4::mk_rhs1 (string_list3) (string2) (string_list2))))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- rhs_lemma5 in goal at 3(rank:22)
rewrite <- rhs_lemma6 in goal at 0(rank:22)
=================================================
Progress: 111


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = P (string3) (lambda2)
string_list1 : string list
string4 : string
string_list3 : string list
IH2 : forall (string2:string), sub_check_ta1 (lambda2) ((string3::mk_lhs1 (string_list3) (string2) (string1) (string_list2))) = sub_check_ta1 (lambda2) ((string3::mk_rhs1 (string_list3) (string2) (string_list2)))
Inductive2 : string_list1 = (string4::string_list3)
string2 : string
---------------------------------------
sub_check_ta1 (lambda2) ((string3::(string4::mk_lhs1 (string_list3) (string2) (string1) (string_list2)))) = sub_check_ta1 (lambda2) ((string3::(string4::mk_rhs1 (string_list3) (string2) (string_list2))))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- rhs_lemma6 in goal at 0(rank : 22)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = P (string3) (lambda2)
string_list1 : string list
string4 : string
string_list3 : string list
IH2 : forall (string2:string), sub_check_ta1 (lambda2) ((string3::mk_lhs1 (string_list3) (string2) (string1) (string_list2))) = sub_check_ta1 (lambda2) ((string3::mk_rhs1 (string_list3) (string2) (string_list2)))
Inductive2 : string_list1 = (string4::string_list3)
string2 : string
---------------------------------------
sub_check_ta1 (lambda2) ((string3::(string4::mk_lhs1 (string_list3) (string2) (string1) (string_list2)))) = sub_check_ta1 (lambda2) ((string3::mk_rhs1 ((string4::string_list3)) (string2) (string_list2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- rhs_lemma6 in goal at 0(rank:6)
=================================================
Progress: 112


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = P (string3) (lambda2)
string_list1 : string list
string4 : string
string_list3 : string list
IH2 : forall (string2:string), sub_check_ta1 (lambda2) ((string3::mk_lhs1 (string_list3) (string2) (string1) (string_list2))) = sub_check_ta1 (lambda2) ((string3::mk_rhs1 (string_list3) (string2) (string_list2)))
Inductive2 : string_list1 = (string4::string_list3)
string2 : string
---------------------------------------
sub_check_ta1 (lambda2) ((string3::(string4::mk_lhs1 (string_list3) (string2) (string1) (string_list2)))) = sub_check_ta1 (lambda2) ((string3::mk_rhs1 ((string4::string_list3)) (string2) (string_list2)))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- rhs_lemma6 in goal at 0(rank : 6)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = P (string3) (lambda2)
string_list1 : string list
string4 : string
string_list3 : string list
IH2 : forall (string2:string), sub_check_ta1 (lambda2) ((string3::mk_lhs1 (string_list3) (string2) (string1) (string_list2))) = sub_check_ta1 (lambda2) ((string3::mk_rhs1 (string_list3) (string2) (string_list2)))
Inductive2 : string_list1 = (string4::string_list3)
string2 : string
---------------------------------------
sub_check_ta1 (lambda2) ((string3::(string4::mk_lhs1 (string_list3) (string2) (string1) (string_list2)))) = sub_check_ta1 (lambda2) (mk_rhs1 ((string3::(string4::string_list3))) (string2) (string_list2))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
rewrite <- IH1 in goal at 0(rank:14)
rewrite <- lhs_lemma3 in goal at 1(rank:22)
rewrite <- lhs_lemma4 in goal at 0(rank:14)
rewrite <- rhs_lemma5 in goal at 3(rank:22)
=================================================
Progress: 113


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = P (string3) (lambda2)
string_list1 : string list
string4 : string
string_list3 : string list
IH2 : forall (string2:string), sub_check_ta1 (lambda2) ((string3::mk_lhs1 (string_list3) (string2) (string1) (string_list2))) = sub_check_ta1 (lambda2) ((string3::mk_rhs1 (string_list3) (string2) (string_list2)))
Inductive2 : string_list1 = (string4::string_list3)
string2 : string
---------------------------------------
sub_check_ta1 (lambda2) ((string3::(string4::mk_lhs1 (string_list3) (string2) (string1) (string_list2)))) = sub_check_ta1 (lambda2) (mk_rhs1 ((string3::(string4::string_list3))) (string2) (string_list2))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 14)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = P (string3) (lambda2)
string_list1 : string list
string4 : string
string_list3 : string list
IH2 : forall (string2:string), sub_check_ta1 (lambda2) ((string3::mk_lhs1 (string_list3) (string2) (string1) (string_list2))) = sub_check_ta1 (lambda2) ((string3::mk_rhs1 (string_list3) (string2) (string_list2)))
Inductive2 : string_list1 = (string4::string_list3)
string2 : string
---------------------------------------
sub_check_ta1 (lambda2) ((string3::(string4::mk_lhs1 (string_list3) (string2) (string1) (string_list2)))) = sub_check_ta1 (lambda2) (mk_lhs1 ((string3::(string4::string_list3))) (string2) (string1) (string_list2))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:5)
=================================================
Progress: 114


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = P (string3) (lambda2)
string_list1 : string list
string4 : string
string_list3 : string list
IH2 : forall (string2:string), sub_check_ta1 (lambda2) ((string3::mk_lhs1 (string_list3) (string2) (string1) (string_list2))) = sub_check_ta1 (lambda2) ((string3::mk_rhs1 (string_list3) (string2) (string_list2)))
Inductive2 : string_list1 = (string4::string_list3)
string2 : string
---------------------------------------
sub_check_ta1 (lambda2) ((string3::(string4::mk_lhs1 (string_list3) (string2) (string1) (string_list2)))) = sub_check_ta1 (lambda2) (mk_lhs1 ((string3::(string4::string_list3))) (string2) (string1) (string_list2))

1 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 5)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
IH2 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda3) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
forall (string_list1:string list) (string2:string), sub_check_ta1 (C (lambda2) (lambda3)) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (C (lambda2) (lambda3)) (mk_rhs1 (string_list1) (string2) (string_list2))

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 17
Tactic List : 1
simpl in goal(rank:5)
=================================================
Progress: 115


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
IH2 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda3) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
forall (string_list1:string list) (string2:string), sub_check_ta1 (C (lambda2) (lambda3)) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (C (lambda2) (lambda3)) (mk_rhs1 (string_list1) (string2) (string_list2))

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 5)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
IH2 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda3) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
forall (string_list1:string list) (string2:string), if sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) then sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) else false = if sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2)) then sub_check_ta1 (lambda3) (mk_rhs1 (string_list1) (string2) (string_list2)) else false

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro string2(rank:5)
=================================================
Progress: 116


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
IH2 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda3) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
forall (string_list1:string list) (string2:string), if sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) then sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) else false = if sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2)) then sub_check_ta1 (lambda3) (mk_rhs1 (string_list1) (string2) (string_list2)) else false

0 goal(s) more...

1 conjecture(s) more...
>>> intro string2(rank : 5)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
IH2 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda3) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string2 : string
---------------------------------------
forall (string_list1:string list), if sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) then sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) else false = if sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2)) then sub_check_ta1 (lambda3) (mk_rhs1 (string_list1) (string2) (string_list2)) else false

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
rewrite IH1 in goal at 0(rank:13)
rewrite IH2 in goal at 0(rank:13)
rewrite <- IH1 in goal at 0(rank:13)
rewrite <- IH2 in goal at 0(rank:13)
=================================================
Progress: 117


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
IH2 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda3) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string2 : string
---------------------------------------
forall (string_list1:string list), if sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) then sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) else false = if sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2)) then sub_check_ta1 (lambda3) (mk_rhs1 (string_list1) (string2) (string_list2)) else false

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
IH2 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda3) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string2 : string
---------------------------------------
forall (string_list1:string list), if sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2)) then sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) else false = if sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2)) then sub_check_ta1 (lambda3) (mk_rhs1 (string_list1) (string2) (string_list2)) else false

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite IH2 in goal at 0(rank:13)
rewrite <- IH2 in goal at 0(rank:13)
=================================================
Progress: 118


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
IH2 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda3) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string2 : string
---------------------------------------
forall (string_list1:string list), if sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) then sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) else false = if sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2)) then sub_check_ta1 (lambda3) (mk_rhs1 (string_list1) (string2) (string_list2)) else false

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
IH2 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda3) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string2 : string
---------------------------------------
forall (string_list1:string list), if sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) then sub_check_ta1 (lambda3) (mk_rhs1 (string_list1) (string2) (string_list2)) else false = if sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2)) then sub_check_ta1 (lambda3) (mk_rhs1 (string_list1) (string2) (string_list2)) else false

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:5)
=================================================
Progress: 119


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
IH2 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda3) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string2 : string
---------------------------------------
forall (string_list1:string list), if sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) then sub_check_ta1 (lambda3) (mk_rhs1 (string_list1) (string2) (string_list2)) else false = if sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2)) then sub_check_ta1 (lambda3) (mk_rhs1 (string_list1) (string2) (string_list2)) else false

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 5)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
IH2 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda3) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string2 : string
---------------------------------------
forall (string_list1:string list), if sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) then sub_check_ta1 (lambda3) (mk_rhs1 (string_list1) (string2) (string_list2)) else false = if sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) then sub_check_ta1 (lambda3) (mk_rhs1 (string_list1) (string2) (string_list2)) else false

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:5)
=================================================
Progress: 120


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
string1 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
IH2 : forall (string_list1:string list) (string2:string), sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda3) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string2 : string
---------------------------------------
forall (string_list1:string list), if sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) then sub_check_ta1 (lambda3) (mk_rhs1 (string_list1) (string2) (string_list2)) else false = if sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) then sub_check_ta1 (lambda3) (mk_rhs1 (string_list1) (string2) (string_list2)) else false

0 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 5)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))

2 goal(s) more...

0 conjecture(s) more...
Deduplication: 4
Tactic List : 2
rewrite <- lhs_lemma3 in goal at 0(rank:21)
rewrite <- rhs_lemma5 in goal at 3(rank:21)
=================================================
Progress: 121


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- lhs_lemma3 in goal at 0(rank : 21)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
sub_check_ta1 (lambda2) (mk_lhs1 ((Nil)) (string2) (string1) (string_list1)) = sub_check_ta1 (lambda2) ((string2::string_list1))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite <- rhs_lemma5 in goal at 0(rank:13)
rewrite lemma7 in goal at 0(rank:14)
=================================================
Progress: 122


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
sub_check_ta1 (lambda2) (mk_lhs1 ((Nil)) (string2) (string1) (string_list1)) = sub_check_ta1 (lambda2) ((string2::string_list1))

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- rhs_lemma5 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
sub_check_ta1 (lambda2) (mk_lhs1 ((Nil)) (string2) (string1) (string_list1)) = sub_check_ta1 (lambda2) (mk_rhs1 ((Nil)) (string2) (string_list1))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite lemma7 in goal at 0(rank:6)
=================================================
Progress: 123


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
sub_check_ta1 (lambda2) (mk_lhs1 ((Nil)) (string2) (string1) (string_list1)) = sub_check_ta1 (lambda2) (mk_rhs1 ((Nil)) (string2) (string_list1))

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite lemma7 in goal at 0(rank : 6)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
sub_check_ta1 (lambda2) (mk_rhs1 ((Nil)) (string2) (string_list1)) = sub_check_ta1 (lambda2) (mk_rhs1 ((Nil)) (string2) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:5)
=================================================
Progress: 124


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
sub_check_ta1 (lambda2) (mk_rhs1 ((Nil)) (string2) (string_list1)) = sub_check_ta1 (lambda2) (mk_rhs1 ((Nil)) (string2) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 5)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
is_mem_ta1 (string_list1) (string1) = true

2 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite Case1 in goal at 0(rank:13)
rewrite <- Case1 in goal at 0(rank:13)
=================================================
Progress: 125


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
is_mem_ta1 (string_list1) (string1) = true

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 13)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
true = true

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:4)
=================================================
Progress: 126


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
true = true

2 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 4)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
IH2 : sub_check_ta1 (lambda3) ((string1::string_list1)) = sub_check_ta1 (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
sub_check_ta1 (C (lambda2) (lambda3)) ((string1::string_list1)) = sub_check_ta1 (C (lambda2) (lambda3)) (string_list1)

1 goal(s) more...

0 conjecture(s) more...
Deduplication: 3
Tactic List : 1
simpl in goal(rank:4)
=================================================
Progress: 127


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
IH2 : sub_check_ta1 (lambda3) ((string1::string_list1)) = sub_check_ta1 (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
sub_check_ta1 (C (lambda2) (lambda3)) ((string1::string_list1)) = sub_check_ta1 (C (lambda2) (lambda3)) (string_list1)

1 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 4)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
IH2 : sub_check_ta1 (lambda3) ((string1::string_list1)) = sub_check_ta1 (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check_ta1 (lambda2) ((string1::string_list1)) then sub_check_ta1 (lambda3) ((string1::string_list1)) else false = if sub_check_ta1 (lambda2) (string_list1) then sub_check_ta1 (lambda3) (string_list1) else false

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 6
case sub_check_ta1 (lambda2) ((string1::string_list1))(rank:5)
rewrite IH1 in goal at 0(rank:12)
rewrite IH2 in goal at 0(rank:12)
rewrite <- IH1 in goal at 0(rank:12)
rewrite <- IH2 in goal at 0(rank:12)
case sub_check_ta1 (lambda2) (string_list1)(rank:5)
=================================================
Progress: 128


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
IH2 : sub_check_ta1 (lambda3) ((string1::string_list1)) = sub_check_ta1 (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check_ta1 (lambda2) ((string1::string_list1)) then sub_check_ta1 (lambda3) ((string1::string_list1)) else false = if sub_check_ta1 (lambda2) (string_list1) then sub_check_ta1 (lambda3) (string_list1) else false

1 goal(s) more...

0 conjecture(s) more...
>>> case sub_check_ta1 (lambda2) ((string1::string_list1))(rank : 5)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
IH2 : sub_check_ta1 (lambda3) ((string1::string_list1)) = sub_check_ta1 (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case2 : sub_check_ta1 (lambda2) ((string1::string_list1)) = true
---------------------------------------
sub_check_ta1 (lambda3) ((string1::string_list1)) = if sub_check_ta1 (lambda2) (string_list1) then sub_check_ta1 (lambda3) (string_list1) else false

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
case sub_check_ta1 (lambda2) (string_list1)(rank:6)
rewrite IH2 in goal at 0(rank:21)
rewrite <- IH1 in goal at 0(rank:21)
rewrite <- IH2 in goal at 0(rank:21)
=================================================
Progress: 129


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
IH2 : sub_check_ta1 (lambda3) ((string1::string_list1)) = sub_check_ta1 (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check_ta1 (lambda2) ((string1::string_list1)) then sub_check_ta1 (lambda3) ((string1::string_list1)) else false = if sub_check_ta1 (lambda2) (string_list1) then sub_check_ta1 (lambda3) (string_list1) else false

1 goal(s) more...

0 conjecture(s) more...
>>> case sub_check_ta1 (lambda2) (string_list1)(rank : 5)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
IH2 : sub_check_ta1 (lambda3) ((string1::string_list1)) = sub_check_ta1 (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case2 : sub_check_ta1 (lambda2) (string_list1) = true
---------------------------------------
if sub_check_ta1 (lambda2) ((string1::string_list1)) then sub_check_ta1 (lambda3) ((string1::string_list1)) else false = sub_check_ta1 (lambda3) (string_list1)

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
case sub_check_ta1 (lambda2) ((string1::string_list1))(rank:6)
rewrite IH1 in goal at 0(rank:13)
rewrite IH2 in goal at 0(rank:13)
rewrite <- IH2 in goal at 0(rank:13)
=================================================
Progress: 130


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
IH2 : sub_check_ta1 (lambda3) ((string1::string_list1)) = sub_check_ta1 (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case2 : sub_check_ta1 (lambda2) ((string1::string_list1)) = true
---------------------------------------
sub_check_ta1 (lambda3) ((string1::string_list1)) = if sub_check_ta1 (lambda2) (string_list1) then sub_check_ta1 (lambda3) (string_list1) else false

2 goal(s) more...

0 conjecture(s) more...
>>> case sub_check_ta1 (lambda2) (string_list1)(rank : 6)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
IH2 : sub_check_ta1 (lambda3) ((string1::string_list1)) = sub_check_ta1 (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case2 : sub_check_ta1 (lambda2) ((string1::string_list1)) = true
Case3 : sub_check_ta1 (lambda2) (string_list1) = true
---------------------------------------
sub_check_ta1 (lambda3) ((string1::string_list1)) = sub_check_ta1 (lambda3) (string_list1)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite IH2 in goal at 0(rank:14)
rewrite <- IH2 in goal at 0(rank:14)
=================================================
Progress: 131


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
IH2 : sub_check_ta1 (lambda3) ((string1::string_list1)) = sub_check_ta1 (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case2 : sub_check_ta1 (lambda2) (string_list1) = true
---------------------------------------
if sub_check_ta1 (lambda2) ((string1::string_list1)) then sub_check_ta1 (lambda3) ((string1::string_list1)) else false = sub_check_ta1 (lambda3) (string_list1)

2 goal(s) more...

0 conjecture(s) more...
>>> case sub_check_ta1 (lambda2) ((string1::string_list1))(rank : 6)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
IH2 : sub_check_ta1 (lambda3) ((string1::string_list1)) = sub_check_ta1 (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case2 : sub_check_ta1 (lambda2) (string_list1) = true
Case3 : sub_check_ta1 (lambda2) ((string1::string_list1)) = true
---------------------------------------
sub_check_ta1 (lambda3) ((string1::string_list1)) = sub_check_ta1 (lambda3) (string_list1)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite IH2 in goal at 0(rank:14)
rewrite <- IH2 in goal at 0(rank:14)
=================================================
Progress: 132


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
IH2 : sub_check_ta1 (lambda3) ((string1::string_list1)) = sub_check_ta1 (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check_ta1 (lambda2) ((string1::string_list1)) then sub_check_ta1 (lambda3) ((string1::string_list1)) else false = if sub_check_ta1 (lambda2) (string_list1) then sub_check_ta1 (lambda3) (string_list1) else false

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
IH2 : sub_check_ta1 (lambda3) ((string1::string_list1)) = sub_check_ta1 (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check_ta1 (lambda2) (string_list1) then sub_check_ta1 (lambda3) ((string1::string_list1)) else false = if sub_check_ta1 (lambda2) (string_list1) then sub_check_ta1 (lambda3) (string_list1) else false

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
case sub_check_ta1 (lambda2) (string_list1)(rank:5)
rewrite IH2 in goal at 0(rank:12)
rewrite <- IH2 in goal at 0(rank:12)
=================================================
Progress: 133


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
IH2 : sub_check_ta1 (lambda3) ((string1::string_list1)) = sub_check_ta1 (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check_ta1 (lambda2) (string_list1) then sub_check_ta1 (lambda3) ((string1::string_list1)) else false = if sub_check_ta1 (lambda2) (string_list1) then sub_check_ta1 (lambda3) (string_list1) else false

1 goal(s) more...

0 conjecture(s) more...
>>> case sub_check_ta1 (lambda2) (string_list1)(rank : 5)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
IH2 : sub_check_ta1 (lambda3) ((string1::string_list1)) = sub_check_ta1 (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case2 : sub_check_ta1 (lambda2) (string_list1) = true
---------------------------------------
sub_check_ta1 (lambda3) ((string1::string_list1)) = sub_check_ta1 (lambda3) (string_list1)

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite IH2 in goal at 0(rank:13)
rewrite <- IH2 in goal at 0(rank:13)
=================================================
Progress: 134


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
IH2 : sub_check_ta1 (lambda3) ((string1::string_list1)) = sub_check_ta1 (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check_ta1 (lambda2) ((string1::string_list1)) then sub_check_ta1 (lambda3) ((string1::string_list1)) else false = if sub_check_ta1 (lambda2) (string_list1) then sub_check_ta1 (lambda3) (string_list1) else false

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
IH2 : sub_check_ta1 (lambda3) ((string1::string_list1)) = sub_check_ta1 (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check_ta1 (lambda2) ((string1::string_list1)) then sub_check_ta1 (lambda3) (string_list1) else false = if sub_check_ta1 (lambda2) (string_list1) then sub_check_ta1 (lambda3) (string_list1) else false

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case sub_check_ta1 (lambda2) (string_list1)(rank:5)
rewrite <- IH1 in goal at 0(rank:12)
=================================================
Progress: 135


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
IH2 : sub_check_ta1 (lambda3) ((string1::string_list1)) = sub_check_ta1 (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check_ta1 (lambda2) ((string1::string_list1)) then sub_check_ta1 (lambda3) (string_list1) else false = if sub_check_ta1 (lambda2) (string_list1) then sub_check_ta1 (lambda3) (string_list1) else false

1 goal(s) more...

0 conjecture(s) more...
>>> case sub_check_ta1 (lambda2) (string_list1)(rank : 5)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
IH2 : sub_check_ta1 (lambda3) ((string1::string_list1)) = sub_check_ta1 (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case2 : sub_check_ta1 (lambda2) (string_list1) = true
---------------------------------------
if sub_check_ta1 (lambda2) ((string1::string_list1)) then sub_check_ta1 (lambda3) (string_list1) else false = sub_check_ta1 (lambda3) (string_list1)

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 5
case sub_check_ta1 (lambda2) ((string1::string_list1))(rank:6)
rewrite IH1 in goal at 0(rank:13)
rewrite <- IH2 in goal at 2(rank:13)
rewrite <- IH2 in goal at 0(rank:21)
rewrite <- IH2 in goal at 1(rank:21)
=================================================
Progress: 136


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
IH2 : sub_check_ta1 (lambda3) ((string1::string_list1)) = sub_check_ta1 (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case2 : sub_check_ta1 (lambda2) (string_list1) = true
---------------------------------------
if sub_check_ta1 (lambda2) ((string1::string_list1)) then sub_check_ta1 (lambda3) (string_list1) else false = sub_check_ta1 (lambda3) (string_list1)

2 goal(s) more...

0 conjecture(s) more...
>>> case sub_check_ta1 (lambda2) ((string1::string_list1))(rank : 6)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
IH2 : sub_check_ta1 (lambda3) ((string1::string_list1)) = sub_check_ta1 (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case2 : sub_check_ta1 (lambda2) (string_list1) = true
Case3 : sub_check_ta1 (lambda2) ((string1::string_list1)) = true
---------------------------------------
sub_check_ta1 (lambda3) (string_list1) = sub_check_ta1 (lambda3) (string_list1)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:5)
=================================================
Progress: 137


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
IH2 : sub_check_ta1 (lambda3) ((string1::string_list1)) = sub_check_ta1 (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case2 : sub_check_ta1 (lambda2) (string_list1) = true
Case3 : sub_check_ta1 (lambda2) ((string1::string_list1)) = true
---------------------------------------
sub_check_ta1 (lambda3) (string_list1) = sub_check_ta1 (lambda3) (string_list1)

3 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 5)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
IH2 : sub_check_ta1 (lambda3) ((string1::string_list1)) = sub_check_ta1 (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case2 : sub_check_ta1 (lambda2) (string_list1) = true
Case3 : sub_check_ta1 (lambda2) ((string1::string_list1)) = false
---------------------------------------
false = sub_check_ta1 (lambda3) (string_list1)

2 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite <- Case3 in goal at 0(rank:13)
rewrite <- IH2 in goal at 0(rank:21)
=================================================
Progress: 138


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
IH2 : sub_check_ta1 (lambda3) ((string1::string_list1)) = sub_check_ta1 (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check_ta1 (lambda2) ((string1::string_list1)) then sub_check_ta1 (lambda3) ((string1::string_list1)) else false = if sub_check_ta1 (lambda2) (string_list1) then sub_check_ta1 (lambda3) (string_list1) else false

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
IH2 : sub_check_ta1 (lambda3) ((string1::string_list1)) = sub_check_ta1 (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check_ta1 (lambda2) ((string1::string_list1)) then sub_check_ta1 (lambda3) ((string1::string_list1)) else false = if sub_check_ta1 (lambda2) ((string1::string_list1)) then sub_check_ta1 (lambda3) (string_list1) else false

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
case sub_check_ta1 (lambda2) ((string1::string_list1))(rank:5)
rewrite <- IH2 in goal at 0(rank:12)
rewrite <- rhs_lemma5 in goal at 3(rank:20)
=================================================
Progress: 139


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
IH2 : sub_check_ta1 (lambda3) ((string1::string_list1)) = sub_check_ta1 (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check_ta1 (lambda2) ((string1::string_list1)) then sub_check_ta1 (lambda3) ((string1::string_list1)) else false = if sub_check_ta1 (lambda2) ((string1::string_list1)) then sub_check_ta1 (lambda3) (string_list1) else false

1 goal(s) more...

0 conjecture(s) more...
>>> case sub_check_ta1 (lambda2) ((string1::string_list1))(rank : 5)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
IH2 : sub_check_ta1 (lambda3) ((string1::string_list1)) = sub_check_ta1 (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case2 : sub_check_ta1 (lambda2) ((string1::string_list1)) = true
---------------------------------------
sub_check_ta1 (lambda3) ((string1::string_list1)) = sub_check_ta1 (lambda3) (string_list1)

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite IH2 in goal at 0(rank:13)
rewrite <- IH2 in goal at 0(rank:13)
=================================================
Progress: 140


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
IH2 : sub_check_ta1 (lambda3) ((string1::string_list1)) = sub_check_ta1 (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check_ta1 (lambda2) ((string1::string_list1)) then sub_check_ta1 (lambda3) ((string1::string_list1)) else false = if sub_check_ta1 (lambda2) (string_list1) then sub_check_ta1 (lambda3) (string_list1) else false

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
IH2 : sub_check_ta1 (lambda3) ((string1::string_list1)) = sub_check_ta1 (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check_ta1 (lambda2) ((string1::string_list1)) then sub_check_ta1 (lambda3) ((string1::string_list1)) else false = if sub_check_ta1 (lambda2) (string_list1) then sub_check_ta1 (lambda3) ((string1::string_list1)) else false

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case sub_check_ta1 (lambda2) ((string1::string_list1))(rank:5)
rewrite <- rhs_lemma5 in goal at 3(rank:20)
=================================================
Progress: 141


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
IH2 : sub_check_ta1 (lambda3) ((string1::string_list1)) = sub_check_ta1 (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check_ta1 (lambda2) ((string1::string_list1)) then sub_check_ta1 (lambda3) ((string1::string_list1)) else false = if sub_check_ta1 (lambda2) (string_list1) then sub_check_ta1 (lambda3) ((string1::string_list1)) else false

1 goal(s) more...

0 conjecture(s) more...
>>> case sub_check_ta1 (lambda2) ((string1::string_list1))(rank : 5)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
IH2 : sub_check_ta1 (lambda3) ((string1::string_list1)) = sub_check_ta1 (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case2 : sub_check_ta1 (lambda2) ((string1::string_list1)) = true
---------------------------------------
sub_check_ta1 (lambda3) ((string1::string_list1)) = if sub_check_ta1 (lambda2) (string_list1) then sub_check_ta1 (lambda3) ((string1::string_list1)) else false

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 6
case sub_check_ta1 (lambda2) (string_list1)(rank:6)
rewrite IH2 in goal at 2(rank:13)
rewrite IH2 in goal at 1(rank:21)
rewrite <- IH1 in goal at 0(rank:21)
rewrite <- rhs_lemma5 in goal at 2(rank:21)
rewrite IH2 in goal at 0(rank:21)
=================================================
Progress: 142


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
IH2 : sub_check_ta1 (lambda3) ((string1::string_list1)) = sub_check_ta1 (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case2 : sub_check_ta1 (lambda2) ((string1::string_list1)) = true
---------------------------------------
sub_check_ta1 (lambda3) ((string1::string_list1)) = if sub_check_ta1 (lambda2) (string_list1) then sub_check_ta1 (lambda3) ((string1::string_list1)) else false

2 goal(s) more...

0 conjecture(s) more...
>>> case sub_check_ta1 (lambda2) (string_list1)(rank : 6)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
IH2 : sub_check_ta1 (lambda3) ((string1::string_list1)) = sub_check_ta1 (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case2 : sub_check_ta1 (lambda2) ((string1::string_list1)) = true
Case3 : sub_check_ta1 (lambda2) (string_list1) = true
---------------------------------------
sub_check_ta1 (lambda3) ((string1::string_list1)) = sub_check_ta1 (lambda3) ((string1::string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:5)
=================================================
Progress: 143


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
IH2 : sub_check_ta1 (lambda3) ((string1::string_list1)) = sub_check_ta1 (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case2 : sub_check_ta1 (lambda2) ((string1::string_list1)) = true
Case3 : sub_check_ta1 (lambda2) (string_list1) = true
---------------------------------------
sub_check_ta1 (lambda3) ((string1::string_list1)) = sub_check_ta1 (lambda3) ((string1::string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 5)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
IH2 : sub_check_ta1 (lambda3) ((string1::string_list1)) = sub_check_ta1 (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case2 : sub_check_ta1 (lambda2) ((string1::string_list1)) = true
Case3 : sub_check_ta1 (lambda2) (string_list1) = false
---------------------------------------
sub_check_ta1 (lambda3) ((string1::string_list1)) = false

2 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite IH2 in goal at 0(rank:13)
rewrite <- Case3 in goal at 0(rank:13)
=================================================
Progress: 144


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
IH2 : sub_check_ta1 (lambda3) ((string1::string_list1)) = sub_check_ta1 (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check_ta1 (lambda2) (string_list1) then sub_check_ta1 (lambda3) ((string1::string_list1)) else false = if sub_check_ta1 (lambda2) (string_list1) then sub_check_ta1 (lambda3) (string_list1) else false

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 12)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
IH2 : sub_check_ta1 (lambda3) ((string1::string_list1)) = sub_check_ta1 (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check_ta1 (lambda2) (string_list1) then sub_check_ta1 (lambda3) (string_list1) else false = if sub_check_ta1 (lambda2) (string_list1) then sub_check_ta1 (lambda3) (string_list1) else false

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:3)
=================================================
Progress: 145


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
IH2 : sub_check_ta1 (lambda3) ((string1::string_list1)) = sub_check_ta1 (lambda3) (string_list1)
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check_ta1 (lambda2) (string_list1) then sub_check_ta1 (lambda3) (string_list1) else false = if sub_check_ta1 (lambda2) (string_list1) then sub_check_ta1 (lambda3) (string_list1) else false

1 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 3)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = false
---------------------------------------
forall (lambda1:lambda), sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) ((string1::string_list1))

0 goal(s) more...

0 conjecture(s) more...
Deduplication: 32
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 146


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = false
---------------------------------------
forall (lambda1:lambda), sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) ((string1::string_list1))

0 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 0)


No conjecture
Proof Success
Helper Functions
let rec mk_lhs1 arg_1 arg_2 arg_3 arg_4 =
match (arg_1) with
| Nil  -> (arg_2::(arg_3::arg_4))
| Cons hd tl -> (hd::mk_lhs1 (tl) (arg_2) (arg_3) (arg_4))
;;
let rec mk_rhs1 arg_5 arg_6 arg_7 =
match (arg_5) with
| Nil  -> (arg_6::arg_7)
| Cons hd tl -> (hd::mk_rhs1 (tl) (arg_6) (arg_7))
;;
Proof
assert forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
intro string1
intro string_list1
case is_mem_ta1 (string_list1) (string1)
induction lambda1
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case1 in goal at 0
rewrite Case2 in goal at 0
reflexivity
reflexivity
simpl in goal
define mk_lhs1 arg_1 arg_2 arg_3 arg_4 =
match (arg_1) with
| Nil  -> (arg_2::(arg_3::arg_4))
| Cons hd tl -> (hd::mk_lhs1 (tl) (arg_2) (arg_3) (arg_4))
define mk_rhs1 arg_5 arg_6 arg_7 =
match (arg_5) with
| Nil  -> (arg_6::arg_7)
| Cons hd tl -> (hd::mk_rhs1 (tl) (arg_6) (arg_7))
assert forall (string1:string) (string2:string) (string_list1:string list), mk_lhs1 ((Nil)) (string1) (string2) (string_list1) = (string1::(string2::string_list1))
simpl in goal
reflexivity
assert forall (string1:string) (string_list1:string list) (string2:string) (string3:string) (string_list2:string list), mk_lhs1 ((string1::string_list1)) (string2) (string3) (string_list2) = (string1::mk_lhs1 (string_list1) (string2) (string3) (string_list2))
simpl in goal
reflexivity
assert forall (string1:string) (string_list1:string list), mk_rhs1 ((Nil)) (string1) (string_list1) = (string1::string_list1)
simpl in goal
reflexivity
assert forall (string1:string) (string_list1:string list) (string2:string) (string_list2:string list), mk_rhs1 ((string1::string_list1)) (string2) (string_list2) = (string1::mk_rhs1 (string_list1) (string2) (string_list2))
simpl in goal
reflexivity
assert forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
intro string1
intro string_list2
intro Cond1
induction lambda1
simpl in goal
induction string_list1
simpl in goal
intro string2
case string_eq (string2) (string3)
reflexivity
case string_eq (string1) (string3)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Cond1 in goal at 0
rewrite Case2 in goal at 0
reflexivity
reflexivity
simpl in goal
intro string2
rewrite IH1 in goal at 0
reflexivity
simpl in goal
induction string_list1
simpl in goal
intro string2
rewrite <- lhs_lemma3 in goal at 1
rewrite <- rhs_lemma5 in goal at 3
rewrite <- rhs_lemma6 in goal at 0
rewrite <- IH1 in goal at 0
reflexivity
simpl in goal
intro string2
rewrite <- rhs_lemma6 in goal at 0
rewrite <- rhs_lemma6 in goal at 0
rewrite <- IH1 in goal at 0
reflexivity
simpl in goal
intro string2
rewrite IH2 in goal at 0
rewrite <- IH1 in goal at 0
reflexivity
rewrite <- lhs_lemma3 in goal at 0
rewrite <- rhs_lemma5 in goal at 0
rewrite lemma7 in goal at 0
reflexivity
rewrite Case1 in goal at 0
reflexivity
simpl in goal
rewrite IH1 in goal at 0
rewrite IH2 in goal at 0
reflexivity
reflexivity
Qed
