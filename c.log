Choose the proof type :
1) Interactive Mode 	 2) Auto Mode
Enter the goal : =================================================
Progress: 1


No conjecture
>>> assert forall (l:lambda), check_ta1 (l) = check (l)(rank : 0)


1st goal of : forall (l:lambda), check_ta1 (l) = check (l)

---------------------------------------
forall (l:lambda), check_ta1 (l) = check (l)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 2


1st goal of : forall (l:lambda), check_ta1 (l) = check (l)

---------------------------------------
forall (l:lambda), check_ta1 (l) = check (l)

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (l:lambda), check_ta1 (l) = check (l)

---------------------------------------
forall (l:lambda), sub_check_ta1 (l) (Nil) = match (l) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
induction l(rank:0)
=================================================
Progress: 3


1st goal of : forall (l:lambda), check_ta1 (l) = check (l)

---------------------------------------
forall (l:lambda), sub_check_ta1 (l) (Nil) = match (l) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))

0 goal(s) more...

0 conjecture(s) more...
>>> induction l(rank : 0)


1st goal of : forall (l:lambda), check_ta1 (l) = check (l)
string1 : string
---------------------------------------
sub_check_ta1 (V (string1)) (Nil) = match (V (string1)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 4


1st goal of : forall (l:lambda), check_ta1 (l) = check (l)
string1 : string
---------------------------------------
sub_check_ta1 (V (string1)) (Nil) = match (V (string1)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))

2 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (l:lambda), check_ta1 (l) = check (l)
string1 : string
---------------------------------------
false = false

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 5


1st goal of : forall (l:lambda), check_ta1 (l) = check (l)
string1 : string
---------------------------------------
false = false

2 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (l:lambda), check_ta1 (l) = check (l)
string1 : string
lambda1 : lambda
IH1 : sub_check_ta1 (lambda1) (Nil) = match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : l = P (string1) (lambda1)
---------------------------------------
sub_check_ta1 (P (string1) (lambda1)) (Nil) = match (P (string1) (lambda1)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))

1 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 6


1st goal of : forall (l:lambda), check_ta1 (l) = check (l)
string1 : string
lambda1 : lambda
IH1 : sub_check_ta1 (lambda1) (Nil) = match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : l = P (string1) (lambda1)
---------------------------------------
sub_check_ta1 (P (string1) (lambda1)) (Nil) = match (P (string1) (lambda1)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))

1 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (l:lambda), check_ta1 (l) = check (l)
string1 : string
lambda1 : lambda
IH1 : sub_check_ta1 (lambda1) (Nil) = match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : l = P (string1) (lambda1)
---------------------------------------
sub_check_ta1 (lambda1) (Cons (string1) (Nil)) = sub_check (lambda1) (Cons (string1) (Nil))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
*******************************************
>>> induction lambda1


1st goal of : forall (lambda1:lambda) (string1:string), sub_check_ta1 (lambda1) (Cons (string1) (Nil)) = sub_check (lambda1) (Cons (string1) (Nil))
string1 : string
---------------------------------------
forall (string1:string), sub_check_ta1 (V (string1)) (Cons (string1) (Nil)) = sub_check (V (string1)) (Cons (string1) (Nil))

2 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal


1st goal of : forall (lambda1:lambda) (string1:string), sub_check_ta1 (lambda1) (Cons (string1) (Nil)) = sub_check (lambda1) (Cons (string1) (Nil))
string1 : string
---------------------------------------
forall (string1:string), if match (string1, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Nil) (string1) = if match (string1, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (Nil)

2 goal(s) more...

0 conjecture(s) more...
>>> intro string1


1st goal of : forall (lambda1:lambda) (string1:string), sub_check_ta1 (lambda1) (Cons (string1) (Nil)) = sub_check (lambda1) (Cons (string1) (Nil))
string1 : string
string1 : string
---------------------------------------
if match (string1, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Nil) (string1) = if match (string1, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (Nil)

2 goal(s) more...

0 conjecture(s) more...
>>> case match (string1, string1) with
| (String l1, String l2) -> list_eq (l1) (l2)


1st goal of : forall (lambda1:lambda) (string1:string), sub_check_ta1 (lambda1) (Cons (string1) (Nil)) = sub_check (lambda1) (Cons (string1) (Nil))
string1 : string
string1 : string
Case1 : match (string1, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = true

3 goal(s) more...

0 conjecture(s) more...
>>> reflexivity


1st goal of : forall (lambda1:lambda) (string1:string), sub_check_ta1 (lambda1) (Cons (string1) (Nil)) = sub_check (lambda1) (Cons (string1) (Nil))
string1 : string
string1 : string
Case1 : match (string1, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) = false
---------------------------------------
false = false

2 goal(s) more...

0 conjecture(s) more...
>>> reflexivity


1st goal of : forall (lambda1:lambda) (string1:string), sub_check_ta1 (lambda1) (Cons (string1) (Nil)) = sub_check (lambda1) (Cons (string1) (Nil))
string1 : string
lambda1 : lambda
IH1 : forall (string1:string), sub_check_ta1 (lambda1) (Cons (string1) (Nil)) = sub_check (lambda1) (Cons (string1) (Nil))
Inductive1 : lambda1 = P (string1) (lambda1)
---------------------------------------
forall (string1:string), sub_check_ta1 (P (string1) (lambda1)) (Cons (string1) (Nil)) = sub_check (P (string1) (lambda1)) (Cons (string1) (Nil))

1 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal


1st goal of : forall (lambda1:lambda) (string1:string), sub_check_ta1 (lambda1) (Cons (string1) (Nil)) = sub_check (lambda1) (Cons (string1) (Nil))
string1 : string
lambda1 : lambda
IH1 : forall (string1:string), sub_check_ta1 (lambda1) (Cons (string1) (Nil)) = sub_check (lambda1) (Cons (string1) (Nil))
Inductive1 : lambda1 = P (string1) (lambda1)
---------------------------------------
forall (string1:string), sub_check_ta1 (lambda1) (Cons (string1) (Cons (string1) (Nil))) = sub_check (lambda1) (Cons (string1) (Cons (string1) (Nil)))

1 goal(s) more...

0 conjecture(s) more...
>>> intro string1


1st goal of : forall (lambda1:lambda) (string1:string), sub_check_ta1 (lambda1) (Cons (string1) (Nil)) = sub_check (lambda1) (Cons (string1) (Nil))
string1 : string
lambda1 : lambda
IH1 : forall (string1:string), sub_check_ta1 (lambda1) (Cons (string1) (Nil)) = sub_check (lambda1) (Cons (string1) (Nil))
Inductive1 : lambda1 = P (string1) (lambda1)
string1 : string
---------------------------------------
sub_check_ta1 (lambda1) (Cons (string1) (Cons (string1) (Nil))) = sub_check (lambda1) (Cons (string1) (Cons (string1) (Nil)))

1 goal(s) more...

0 conjecture(s) more...
*******************************************
>>> induction lambda1


1st goal of : forall (lambda1:lambda) (string1:string), lambda1 = P (string1) (lambda1) -> sub_check_ta1 (lambda1) (Cons (string1) (Cons (string1) (Nil))) = sub_check (lambda1) (Cons (string1) (Cons (string1) (Nil)))
string1 : string
---------------------------------------
forall (string1:string), V (string1) = P (string1) (V (string1)) -> sub_check_ta1 (V (string1)) (Cons (string1) (Cons (string1) (Nil))) = sub_check (V (string1)) (Cons (string1) (Cons (string1) (Nil)))

2 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal


1st goal of : forall (lambda1:lambda) (string1:string), lambda1 = P (string1) (lambda1) -> sub_check_ta1 (lambda1) (Cons (string1) (Cons (string1) (Nil))) = sub_check (lambda1) (Cons (string1) (Cons (string1) (Nil)))
string1 : string
---------------------------------------
forall (string1:string), V (string1) = P (string1) (V (string1)) -> if match (string1, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string1) (Nil)) (string1) = if match (string1, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (Cons (string1) (Nil))

2 goal(s) more...

0 conjecture(s) more...
>>> intro string1


1st goal of : forall (lambda1:lambda) (string1:string), lambda1 = P (string1) (lambda1) -> sub_check_ta1 (lambda1) (Cons (string1) (Cons (string1) (Nil))) = sub_check (lambda1) (Cons (string1) (Cons (string1) (Nil)))
string1 : string
string1 : string
---------------------------------------
V (string1) = P (string1) (V (string1)) -> if match (string1, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string1) (Nil)) (string1) = if match (string1, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (Cons (string1) (Nil))

2 goal(s) more...

0 conjecture(s) more...
>>> case match (string1, string1) with
| (String l1, String l2) -> list_eq (l1) (l2)


1st goal of : forall (lambda1:lambda) (string1:string), lambda1 = P (string1) (lambda1) -> sub_check_ta1 (lambda1) (Cons (string1) (Cons (string1) (Nil))) = sub_check (lambda1) (Cons (string1) (Cons (string1) (Nil)))
string1 : string
string1 : string
Case1 : match (string1, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
V (string1) = P (string1) (V (string1)) -> true = true

3 goal(s) more...

0 conjecture(s) more...
>>> intro Cond26


1st goal of : forall (lambda1:lambda) (string1:string), lambda1 = P (string1) (lambda1) -> sub_check_ta1 (lambda1) (Cons (string1) (Cons (string1) (Nil))) = sub_check (lambda1) (Cons (string1) (Cons (string1) (Nil)))
string1 : string
string1 : string
Case1 : match (string1, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
Cond26 : V (string1) = P (string1) (V (string1))
---------------------------------------
true = true

3 goal(s) more...

0 conjecture(s) more...
>>> reflexivity


1st goal of : forall (lambda1:lambda) (string1:string), lambda1 = P (string1) (lambda1) -> sub_check_ta1 (lambda1) (Cons (string1) (Cons (string1) (Nil))) = sub_check (lambda1) (Cons (string1) (Cons (string1) (Nil)))
string1 : string
string1 : string
Case1 : match (string1, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) = false
---------------------------------------
V (string1) = P (string1) (V (string1)) -> if match (string1, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Nil) (string1) = if match (string1, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (Nil)

2 goal(s) more...

0 conjecture(s) more...
>>> intro Cond27


1st goal of : forall (lambda1:lambda) (string1:string), lambda1 = P (string1) (lambda1) -> sub_check_ta1 (lambda1) (Cons (string1) (Cons (string1) (Nil))) = sub_check (lambda1) (Cons (string1) (Cons (string1) (Nil)))
string1 : string
string1 : string
Case1 : match (string1, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) = false
Cond27 : V (string1) = P (string1) (V (string1))
---------------------------------------
if match (string1, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Nil) (string1) = if match (string1, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (Nil)

2 goal(s) more...

0 conjecture(s) more...
lhs_common_subtree
rhs_common_subtree
