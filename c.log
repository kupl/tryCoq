Choose the proof type :
1) Interactive Mode 	 2) Auto Mode
Enter the goal : =================================================
Progress: 1


No conjecture
>>> assert forall (lambda2:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda2) (string_list1) else sub_check_ta1 (lambda2) (Cons (string1) (string_list1))(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
induction lambda1(rank:0)
intro string1(rank:1)
intro string_list1(rank:1)
=================================================
Progress: 2


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))

0 goal(s) more...

0 conjecture(s) more...
>>> induction lambda1(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string) (string_list1:string list), sub_check_ta1 (V (string2)) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 3


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string) (string_list1:string list), sub_check_ta1 (V (string2)) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

2 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string) (string_list1:string list), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
induction string_list1(rank:0)
intro string1(rank:1)
=================================================
Progress: 4


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string) (string_list1:string list), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

2 goal(s) more...

0 conjecture(s) more...
>>> induction string_list1(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
Base2 : string_list1 = Nil
---------------------------------------
forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (Nil) (string2) = if is_mem_ta1 (Nil) (string1) then sub_check_ta1 (V (string2)) (Nil) else sub_check_ta1 (V (string2)) (Cons (string1) (Nil))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 5


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
Base2 : string_list1 = Nil
---------------------------------------
forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (Nil) (string2) = if is_mem_ta1 (Nil) (string1) then sub_check_ta1 (V (string2)) (Nil) else sub_check_ta1 (V (string2)) (Cons (string1) (Nil))

3 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
Base2 : string_list1 = Nil
---------------------------------------
forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (Nil) (string2) = if string_eq (string1) (string2) then true else is_mem_ta1 (Nil) (string2)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 6


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
Base2 : string_list1 = Nil
---------------------------------------
forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (Nil) (string2) = if string_eq (string1) (string2) then true else is_mem_ta1 (Nil) (string2)

3 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if is_mem_ta1 (Cons (string3) (string_list2)) (string1) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

2 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 7


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if is_mem_ta1 (Cons (string3) (string_list2)) (string1) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

2 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
intro string1(rank:1)
=================================================
Progress: 8


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))

0 goal(s) more...

0 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
induction lambda1(rank:0)
intro string_list1(rank:1)
=================================================
Progress: 9


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))

0 goal(s) more...

0 conjecture(s) more...
>>> induction lambda1(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string_list1:string list), sub_check_ta1 (V (string2)) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 10


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string_list1:string list), sub_check_ta1 (V (string2)) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

2 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string_list1:string list), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
induction string_list1(rank:0)
case string_eq (string1) (string2)(rank:2)
=================================================
Progress: 11


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string_list1:string list), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

2 goal(s) more...

0 conjecture(s) more...
>>> induction string_list1(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
Base2 : string_list1 = Nil
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 (Nil) (string2) = if is_mem_ta1 (Nil) (string1) then sub_check_ta1 (V (string2)) (Nil) else sub_check_ta1 (V (string2)) (Cons (string1) (Nil))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 12


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
Base2 : string_list1 = Nil
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 (Nil) (string2) = if is_mem_ta1 (Nil) (string1) then sub_check_ta1 (V (string2)) (Nil) else sub_check_ta1 (V (string2)) (Cons (string1) (Nil))

3 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
Base2 : string_list1 = Nil
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 (Nil) (string2) = if string_eq (string1) (string2) then true else is_mem_ta1 (Nil) (string2)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 13


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
Base2 : string_list1 = Nil
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 (Nil) (string2) = if string_eq (string1) (string2) then true else is_mem_ta1 (Nil) (string2)

3 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if is_mem_ta1 (Cons (string3) (string_list2)) (string1) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

2 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 14


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if is_mem_ta1 (Cons (string3) (string_list2)) (string1) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

2 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)(rank:0)
=================================================
Progress: 15


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

2 goal(s) more...

0 conjecture(s) more...
>>> case if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case string_eq (string1) (string2)(rank:0)
case string_eq (string3) (string2)(rank:0)
=================================================
Progress: 16


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

3 goal(s) more...

0 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string1) (string2) = true
---------------------------------------
true = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case2 at 0(rank:0)
rewrite <- string_eqb_eq in Case2 at 0(rank:0)
case string_eq (string3) (string2)(rank:2)
=================================================
Progress: 17


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

3 goal(s) more...

0 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string3) (string2) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = true

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case2 at 0(rank:0)
rewrite <- string_eqb_eq in Case2 at 0(rank:0)
case string_eq (string1) (string2)(rank:2)
=================================================
Progress: 18


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string1) (string2) = true
---------------------------------------
true = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string1 = string2
---------------------------------------
true = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
rewrite <- Case2 in goal at 0(rank:2)
rewrite <- Case2 in goal at 1(rank:2)
rewrite <- Case2 in goal at 2(rank:2)
case string_eq (string3) (string2)(rank:2)
=================================================
Progress: 19


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string1) (string2) = true
---------------------------------------
true = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string2 = string1
---------------------------------------
true = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
rewrite Case2 in goal at 0(rank:2)
rewrite Case2 in goal at 1(rank:2)
rewrite Case2 in goal at 2(rank:2)
case string_eq (string3) (string2)(rank:2)
=================================================
Progress: 20


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string3) (string2) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = true

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string3 = string2
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = true

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 5
rewrite Case2 in goal at 0(rank:2)
rewrite <- Case2 in goal at 1(rank:2)
rewrite <- Case2 in goal at 2(rank:2)
case string_eq (string1) (string2)(rank:2)
rewrite <- Case2 in goal at 0(rank:2)
=================================================
Progress: 21


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string3) (string2) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = true

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string2 = string3
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = true

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 5
rewrite Case2 in goal at 0(rank:2)
rewrite Case2 in goal at 2(rank:2)
rewrite <- Case2 in goal at 0(rank:2)
case string_eq (string1) (string2)(rank:2)
rewrite Case2 in goal at 1(rank:2)
=================================================
Progress: 22


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))

0 goal(s) more...

0 conjecture(s) more...
>>> intro string_list1(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
---------------------------------------
forall (lambda1:lambda) (string1:string), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:0)
=================================================
Progress: 23


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
---------------------------------------
forall (lambda1:lambda) (string1:string), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))

0 goal(s) more...

0 conjecture(s) more...
>>> induction lambda1(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string), sub_check_ta1 (V (string2)) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 24


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string), sub_check_ta1 (V (string2)) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

2 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
intro string1(rank:1)
=================================================
Progress: 25


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))

0 goal(s) more...

0 conjecture(s) more...
>>> intro string_list1(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
---------------------------------------
forall (lambda1:lambda), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
induction lambda1(rank:0)
case is_mem_ta1 (string_list1) (string1)(rank:2)
=================================================
Progress: 26


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
---------------------------------------
forall (lambda1:lambda), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))

0 goal(s) more...

0 conjecture(s) more...
>>> induction lambda1(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
sub_check_ta1 (V (string2)) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 27


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
sub_check_ta1 (V (string2)) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

2 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string2)(rank:0)
=================================================
Progress: 28


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

2 goal(s) more...

0 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case1 at 0(rank:0)
rewrite <- string_eqb_eq in Case1 at 0(rank:0)
case is_mem_ta1 (string_list1) (string1)(rank:2)
=================================================
Progress: 29


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 7
rewrite Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
case is_mem_ta1 (string_list1) (string1)(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 1(rank:2)
=================================================
Progress: 30


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 7
rewrite Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
case is_mem_ta1 (string_list1) (string1)(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 1(rank:2)
=================================================
Progress: 31


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string) (string_list1:string list), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

2 goal(s) more...

0 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
---------------------------------------
forall (string_list1:string list), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
induction string_list1(rank:0)
case string_eq (string1) (string2)(rank:2)
=================================================
Progress: 32


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
---------------------------------------
forall (string_list1:string list), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

2 goal(s) more...

0 conjecture(s) more...
>>> induction string_list1(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
Base2 : string_list1 = Nil
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 (Nil) (string2) = if is_mem_ta1 (Nil) (string1) then sub_check_ta1 (V (string2)) (Nil) else sub_check_ta1 (V (string2)) (Cons (string1) (Nil))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 33


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
Base2 : string_list1 = Nil
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 (Nil) (string2) = if is_mem_ta1 (Nil) (string1) then sub_check_ta1 (V (string2)) (Nil) else sub_check_ta1 (V (string2)) (Cons (string1) (Nil))

3 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
Base2 : string_list1 = Nil
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 (Nil) (string2) = if string_eq (string1) (string2) then true else is_mem_ta1 (Nil) (string2)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 34


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
Base2 : string_list1 = Nil
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 (Nil) (string2) = if string_eq (string1) (string2) then true else is_mem_ta1 (Nil) (string2)

3 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if is_mem_ta1 (Cons (string3) (string_list2)) (string1) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

2 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 35


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if is_mem_ta1 (Cons (string3) (string_list2)) (string1) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

2 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)(rank:0)
=================================================
Progress: 36


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

2 goal(s) more...

0 conjecture(s) more...
>>> case if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case string_eq (string1) (string2)(rank:0)
case string_eq (string3) (string2)(rank:0)
=================================================
Progress: 37


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

3 goal(s) more...

0 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string1) (string2) = true
---------------------------------------
true = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case2 at 0(rank:0)
rewrite <- string_eqb_eq in Case2 at 0(rank:0)
case string_eq (string3) (string2)(rank:2)
=================================================
Progress: 38


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

3 goal(s) more...

0 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string3) (string2) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = true

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case2 at 0(rank:0)
rewrite <- string_eqb_eq in Case2 at 0(rank:0)
case string_eq (string1) (string2)(rank:2)
=================================================
Progress: 39


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string1) (string2) = true
---------------------------------------
true = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string1 = string2
---------------------------------------
true = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
rewrite <- Case2 in goal at 0(rank:2)
rewrite <- Case2 in goal at 1(rank:2)
rewrite <- Case2 in goal at 2(rank:2)
case string_eq (string3) (string2)(rank:2)
=================================================
Progress: 40


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string1) (string2) = true
---------------------------------------
true = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string2 = string1
---------------------------------------
true = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
rewrite Case2 in goal at 0(rank:2)
rewrite Case2 in goal at 1(rank:2)
rewrite Case2 in goal at 2(rank:2)
case string_eq (string3) (string2)(rank:2)
=================================================
Progress: 41


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string3) (string2) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = true

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string3 = string2
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = true

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 5
rewrite Case2 in goal at 0(rank:2)
rewrite <- Case2 in goal at 1(rank:2)
rewrite <- Case2 in goal at 2(rank:2)
case string_eq (string1) (string2)(rank:2)
rewrite <- Case2 in goal at 0(rank:2)
=================================================
Progress: 42


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string3) (string2) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = true

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string2 = string3
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = true

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 5
rewrite Case2 in goal at 0(rank:2)
rewrite Case2 in goal at 2(rank:2)
rewrite <- Case2 in goal at 0(rank:2)
case string_eq (string1) (string2)(rank:2)
rewrite Case2 in goal at 1(rank:2)
=================================================
Progress: 43


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

2 goal(s) more...

0 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)(rank:0)
case string_eq (string1) (string2)(rank:0)
=================================================
Progress: 44


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

2 goal(s) more...

0 conjecture(s) more...
>>> case if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:2)
case string_eq (string1) (string2)(rank:2)
case string_eq (string3) (string2)(rank:2)
=================================================
Progress: 45


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

2 goal(s) more...

0 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case1 at 0(rank:0)
rewrite <- string_eqb_eq in Case1 at 0(rank:0)
case if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)(rank:2)
=================================================
Progress: 46


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string1 = string2
---------------------------------------
true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 8
rewrite Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
case if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)(rank:2)
rewrite Case1 in goal at 3(rank:2)
rewrite Case1 in goal at 1(rank:2)
=================================================
Progress: 47


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string2 = string1
---------------------------------------
true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 8
rewrite Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 3(rank:2)
case if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 1(rank:2)
=================================================
Progress: 48


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

2 goal(s) more...

0 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case is_mem_ta1 (string_list1) (string1)(rank:0)
case string_eq (string1) (string2)(rank:0)
=================================================
Progress: 49


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

2 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (string_list1) (string2)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string2)(rank:0)
=================================================
Progress: 50


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

2 goal(s) more...

0 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case1 at 0(rank:0)
rewrite <- string_eqb_eq in Case1 at 0(rank:0)
case is_mem_ta1 (string_list1) (string1)(rank:2)
=================================================
Progress: 51


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (string_list1) (string2)

3 goal(s) more...

0 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : string_eq (string1) (string2) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite string_eqb_eq in Case2 at 0(rank:0)
rewrite <- string_eqb_eq in Case2 at 0(rank:0)
=================================================
Progress: 52


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 7
rewrite Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
case is_mem_ta1 (string_list1) (string1)(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 1(rank:2)
=================================================
Progress: 53


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 7
rewrite Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
case is_mem_ta1 (string_list1) (string1)(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 1(rank:2)
=================================================
Progress: 54


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : string_eq (string1) (string2) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : string1 = string2
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:2)
=================================================
Progress: 55


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : string_eq (string1) (string2) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : string2 = string1
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:2)
=================================================
Progress: 56


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
---------------------------------------
forall (lambda1:lambda), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))

0 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
forall (lambda1:lambda), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check_ta1 (lambda1) (string_list1)

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:0)
=================================================
Progress: 57


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
forall (lambda1:lambda), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check_ta1 (lambda1) (string_list1)

1 goal(s) more...

0 conjecture(s) more...
>>> induction lambda1(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
sub_check_ta1 (V (string2)) (Cons (string1) (string_list1)) = sub_check_ta1 (V (string2)) (string_list1)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 58


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
sub_check_ta1 (V (string2)) (Cons (string1) (string_list1)) = sub_check_ta1 (V (string2)) (string_list1)

3 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (string_list1) (string2)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:2)
case string_eq (string1) (string2)(rank:2)
=================================================
Progress: 59


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string_list1:string list), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

2 goal(s) more...

0 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case1 at 0(rank:0)
intro string_list1(rank:1)
rewrite <- string_eqb_eq in Case1 at 0(rank:0)
=================================================
Progress: 60


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 7
intro string_list1(rank:1)
rewrite Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite Case1 in goal at 0(rank:2)
=================================================
Progress: 61


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 7
intro string_list1(rank:1)
rewrite Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite Case1 in goal at 0(rank:2)
=================================================
Progress: 62


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> intro string_list1(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = true
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:1)
case is_mem_ta1 (string_list1) (string1)(rank:2)
=================================================
Progress: 63


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> intro string_list1(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 7
rewrite Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
case is_mem_ta1 (string_list1) (string1)(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 1(rank:2)
=================================================
Progress: 64


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> intro string_list1(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 7
rewrite Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
case is_mem_ta1 (string_list1) (string1)(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 1(rank:2)
=================================================
Progress: 65


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = true
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = true
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case1 at 0(rank:0)
rewrite <- string_eqb_eq in Case1 at 0(rank:0)
case is_mem_ta1 (string_list1) (string1)(rank:2)
=================================================
Progress: 66


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = true
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 9
rewrite Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 3(rank:2)
rewrite Case1 in goal at 3(rank:2)
rewrite Case1 in goal at 1(rank:2)
case is_mem_ta1 (string_list1) (string1)(rank:2)
=================================================
Progress: 67


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = true
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 9
rewrite Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 3(rank:2)
rewrite Case1 in goal at 3(rank:2)
rewrite Case1 in goal at 1(rank:2)
case is_mem_ta1 (string_list1) (string1)(rank:2)
=================================================
Progress: 68


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
---------------------------------------
forall (string_list1:string list), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

2 goal(s) more...

0 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string_eq (string1) (string2) = true
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case1 at 0(rank:0)
intro string_list1(rank:1)
rewrite <- string_eqb_eq in Case1 at 0(rank:0)
=================================================
Progress: 69


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string_eq (string1) (string2) = true
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 7
intro string_list1(rank:1)
rewrite Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite Case1 in goal at 0(rank:2)
=================================================
Progress: 70


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string_eq (string1) (string2) = true
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 7
intro string_list1(rank:1)
rewrite Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite Case1 in goal at 0(rank:2)
=================================================
Progress: 71


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string_eq (string1) (string2) = true
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> intro string_list1(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string_eq (string1) (string2) = true
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:1)
case is_mem_ta1 (string_list1) (string1)(rank:2)
=================================================
Progress: 72


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> intro string_list1(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 7
rewrite Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
case is_mem_ta1 (string_list1) (string1)(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 1(rank:2)
=================================================
Progress: 73


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> intro string_list1(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 7
rewrite Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
case is_mem_ta1 (string_list1) (string1)(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 1(rank:2)
=================================================
Progress: 74


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string_eq (string1) (string2) = true
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string_eq (string1) (string2) = true
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case1 at 0(rank:0)
rewrite <- string_eqb_eq in Case1 at 0(rank:0)
case is_mem_ta1 (string_list1) (string1)(rank:2)
=================================================
Progress: 75


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string_eq (string1) (string2) = true
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 9
rewrite Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 3(rank:2)
rewrite Case1 in goal at 3(rank:2)
rewrite Case1 in goal at 1(rank:2)
case is_mem_ta1 (string_list1) (string1)(rank:2)
=================================================
Progress: 76


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string_eq (string1) (string2) = true
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 9
rewrite Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 3(rank:2)
rewrite Case1 in goal at 3(rank:2)
rewrite Case1 in goal at 1(rank:2)
case is_mem_ta1 (string_list1) (string1)(rank:2)
=================================================
Progress: 77


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = true
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite string_eqb_eq in Case1 at 0(rank:0)
rewrite <- string_eqb_eq in Case1 at 0(rank:0)
=================================================
Progress: 78


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = true
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:2)
=================================================
Progress: 79


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = true
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:2)
=================================================
Progress: 80


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string2)(rank:0)
=================================================
Progress: 81


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
Case2 : is_mem_ta1 (string_list1) (string2) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
case is_mem_ta1 (string_list1) (string2)
state_list
New Env

;;
Lemma List
forall (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string2) = true -> true = is_mem_ta1 (string_list1) (string2)
End of Lemma List
=================================================
Progress: 82


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> assert forall (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string2) = true -> true = is_mem_ta1 (string_list1) (string2)(rank : 0)


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)

---------------------------------------
forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
induction string_list1(rank:0)
intro string1(rank:1)
=================================================
Progress: 83


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)

---------------------------------------
forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> induction string_list1(rank : 0)


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string), is_mem_ta1 (Nil) (string1) = true -> true = is_mem_ta1 (Nil) (string1)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:0)
=================================================
Progress: 84


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string), is_mem_ta1 (Nil) (string1) = true -> true = is_mem_ta1 (Nil) (string1)

1 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 0)


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (string1:string), is_mem_ta1 (string_list2) (string1) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string2) (string_list2)
---------------------------------------
forall (string1:string), is_mem_ta1 (Cons (string2) (string_list2)) (string1) = true -> true = is_mem_ta1 (Cons (string2) (string_list2)) (string1)

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 85


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (string1:string), is_mem_ta1 (string_list2) (string1) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string2) (string_list2)
---------------------------------------
forall (string1:string), is_mem_ta1 (Cons (string2) (string_list2)) (string1) = true -> true = is_mem_ta1 (Cons (string2) (string_list2)) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (string1:string), is_mem_ta1 (string_list2) (string1) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string2) (string_list2)
---------------------------------------
forall (string1:string), if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> true = if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
intro string1(rank:1)
rewrite <- IH1 in goal at 0(rank:1)
rewrite <- IH1 in goal at 2(rank:1)
rewrite <- IH1 in goal at 1(rank:2)
=================================================
Progress: 86


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)

---------------------------------------
forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
---------------------------------------
forall (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction string_list1(rank:0)
=================================================
Progress: 87


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
---------------------------------------
forall (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> induction string_list1(rank : 0)


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
is_mem_ta1 (Nil) (string1) = true -> true = is_mem_ta1 (Nil) (string1)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:0)
=================================================
Progress: 88


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
is_mem_ta1 (Nil) (string1) = true -> true = is_mem_ta1 (Nil) (string1)

1 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 0)


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string2) (string_list2)
---------------------------------------
is_mem_ta1 (Cons (string2) (string_list2)) (string1) = true -> true = is_mem_ta1 (Cons (string2) (string_list2)) (string1)

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 4
simpl in goal(rank:0)
rewrite IH1 in goal at 0(rank:1)
rewrite IH1 in goal at 2(rank:1)
rewrite IH1 in goal at 1(rank:2)
=================================================
Progress: 89


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string2) (string_list2)
---------------------------------------
is_mem_ta1 (Cons (string2) (string_list2)) (string1) = true -> true = is_mem_ta1 (Cons (string2) (string_list2)) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string2) (string_list2)
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> true = if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
intro Cond1(rank:1)
rewrite IH1 in goal at 3(rank:1)
rewrite <- IH1 in goal at 2(rank:1)
rewrite <- IH1 in goal at 1(rank:2)
rewrite IH1 in goal at 1(rank:2)
rewrite IH1 in goal at 2(rank:2)
rewrite <- IH1 in goal at 0(rank:1)
rewrite IH1 in goal at 0(rank:2)
case string_eq (string2) (string1)(rank:2)
=================================================
Progress: 90


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (string1:string), is_mem_ta1 (string_list2) (string1) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string2) (string_list2)
---------------------------------------
forall (string1:string), if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> true = if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (string1:string), is_mem_ta1 (string_list2) (string1) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string2) (string_list2)
string1 : string
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> true = if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
intro Cond1(rank:1)
rewrite <- IH1 in goal at 2(rank:1)
rewrite <- IH1 in goal at 1(rank:2)
case string_eq (string2) (string1)(rank:2)
rewrite <- IH1 in goal at 0(rank:1)
=================================================
Progress: 91


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (string1:string), is_mem_ta1 (string_list2) (string1) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string2) (string_list2)
---------------------------------------
forall (string1:string), if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> true = if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (string1:string), is_mem_ta1 (string_list2) (string1) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string2) (string_list2)
---------------------------------------
forall (string1:string), if string_eq (string2) (string1) then true else true = true -> true = if string_eq (string2) (string1) then true else true

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro string1(rank:1)
=================================================
Progress: 92


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (string1:string), is_mem_ta1 (string_list2) (string1) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string2) (string_list2)
---------------------------------------
forall (string1:string), if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> true = if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 2(rank : 1)


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (string1:string), is_mem_ta1 (string_list2) (string1) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string2) (string_list2)
---------------------------------------
forall (string1:string), if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> true = if string_eq (string2) (string1) then true else true

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro string1(rank:1)
=================================================
Progress: 93


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string2) (string_list2)
---------------------------------------
is_mem_ta1 (Cons (string2) (string_list2)) (string1) = true -> true = is_mem_ta1 (Cons (string2) (string_list2)) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string2) (string_list2)
---------------------------------------
is_mem_ta1 (Cons (string2) (string_list2)) (string1) = is_mem_ta1 (string_list2) (string1) -> is_mem_ta1 (string_list2) (string1) = is_mem_ta1 (Cons (string2) (string_list2)) (string1)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 94


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string2) (string_list2)
---------------------------------------
is_mem_ta1 (Cons (string2) (string_list2)) (string1) = is_mem_ta1 (string_list2) (string1) -> is_mem_ta1 (string_list2) (string1) = is_mem_ta1 (Cons (string2) (string_list2)) (string1)

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string2) (string_list2)
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = is_mem_ta1 (string_list2) (string1) -> is_mem_ta1 (string_list2) (string1) = if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
intro Cond1(rank:1)
rewrite IH1 in goal at 1(rank:2)
rewrite <- IH1 in goal at 0(rank:2)
rewrite <- IH1 in goal at 1(rank:2)
rewrite <- IH1 in goal at 2(rank:2)
rewrite <- IH1 in goal at 3(rank:2)
rewrite IH1 in goal at 2(rank:2)
rewrite IH1 in goal at 0(rank:2)
case string_eq (string2) (string1)(rank:2)
=================================================
Progress: 95


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string2) (string_list2)
---------------------------------------
is_mem_ta1 (Cons (string2) (string_list2)) (string1) = true -> true = is_mem_ta1 (Cons (string2) (string_list2)) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 2(rank : 1)


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string2) (string_list2)
---------------------------------------
is_mem_ta1 (Cons (string2) (string_list2)) (string1) = true -> is_mem_ta1 (string_list2) (string1) = is_mem_ta1 (Cons (string2) (string_list2)) (string1)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
rewrite IH1 in goal at 2


1st goal of : any
string1 : string
string_list1 : string list
string2 : string
---------------------------------------
forall (string_list2:string list), is_mem_ta1 (Cons (string2) (string_list2)) (string1) = true -> is_mem_ta1 (string_list2) (string1) = is_mem_ta1 (Cons (string2) (string_list2)) (string1)

0 goal(s) more...

0 conjecture(s) more...
state_list
New Env

;;
Lemma List
forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (Cons (string2) (string_list2)) (string1) = true -> is_mem_ta1 (string_list2) (string1) = is_mem_ta1 (Cons (string2) (string_list2)) (string1)
End of Lemma List
=================================================
Progress: 96


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string2) (string_list2)
---------------------------------------
is_mem_ta1 (Cons (string2) (string_list2)) (string1) = true -> true = is_mem_ta1 (Cons (string2) (string_list2)) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (Cons (string2) (string_list2)) (string1) = true -> is_mem_ta1 (string_list2) (string1) = is_mem_ta1 (Cons (string2) (string_list2)) (string1)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (Cons (string2) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string2) (string_list1)) (string1)

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (Cons (string2) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string2) (string_list1)) (string1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 97


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (Cons (string2) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string2) (string_list1)) (string1)

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (Cons (string2) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string2) (string_list1)) (string1)

0 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (Cons (string2) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string2) (string_list1)) (string1)

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), if string_eq (string2) (string1) then true else is_mem_ta1 (string_list1) (string1) = true -> is_mem_ta1 (string_list1) (string1) = if string_eq (string2) (string1) then true else is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
induction string_list1(rank:0)
intro string1(rank:1)
intro string2(rank:1)
=================================================
Progress: 98


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (Cons (string2) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string2) (string_list1)) (string1)

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), if string_eq (string2) (string1) then true else is_mem_ta1 (string_list1) (string1) = true -> is_mem_ta1 (string_list1) (string1) = if string_eq (string2) (string1) then true else is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

2 conjecture(s) more...
>>> induction string_list1(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (Cons (string2) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string2) (string_list1)) (string1)
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string) (string2:string), if string_eq (string2) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> is_mem_ta1 (Nil) (string1) = if string_eq (string2) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 99


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (Cons (string2) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string2) (string_list1)) (string1)
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string) (string2:string), if string_eq (string2) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> is_mem_ta1 (Nil) (string1) = if string_eq (string2) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (Cons (string2) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string2) (string_list1)) (string1)
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string) (string2:string), if string_eq (string2) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string2) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro string1(rank:1)
intro string2(rank:1)
=================================================
Progress: 100


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string2) (string_list2)
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> true = if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string2) (string_list2)
Cond1 : if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
true = if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
rewrite Cond1 in goal at 0(rank:1)
rewrite IH1 in goal at 1(rank:1)
rewrite <- Cond1 in goal at 1(rank:1)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- IH1 in goal at 0(rank:1)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite IH1 in goal at 2(rank:2)
rewrite IH1 in goal at 0(rank:2)
case string_eq (string2) (string1)(rank:2)
=================================================
Progress: 101


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string2) (string_list2)
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> true = if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 3(rank : 1)


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string2) (string_list2)
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (string_list2) (string1) = if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
intro Cond1(rank:1)
case string_eq (string2) (string1)(rank:2)
=================================================
Progress: 102


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string2) (string_list2)
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> true = if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string2) (string_list2)
---------------------------------------
if string_eq (string2) (string1) then true else true = true -> true = if string_eq (string2) (string1) then true else true

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
intro Cond1(rank:1)
case string_eq (string2) (string1)(rank:2)
=================================================
Progress: 103


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string2) (string_list2)
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> true = if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 2(rank : 1)


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string2) (string_list2)
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> true = if string_eq (string2) (string1) then true else true

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
intro Cond1(rank:1)
case string_eq (string2) (string1)(rank:2)
=================================================
Progress: 104


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (string1:string), is_mem_ta1 (string_list2) (string1) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string2) (string_list2)
string1 : string
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> true = if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (string1:string), is_mem_ta1 (string_list2) (string1) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string2) (string_list2)
string1 : string
Cond1 : if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
true = if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:1)
rewrite <- Cond1 in goal at 1(rank:1)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- IH1 in goal at 0(rank:1)
case string_eq (string2) (string1)(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 105


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (string1:string), is_mem_ta1 (string_list2) (string1) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string2) (string_list2)
string1 : string
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> true = if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (string1:string), is_mem_ta1 (string_list2) (string1) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string2) (string_list2)
string1 : string
---------------------------------------
if string_eq (string2) (string1) then true else true = true -> true = if string_eq (string2) (string1) then true else true

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
intro Cond1(rank:1)
case string_eq (string2) (string1)(rank:2)
=================================================
Progress: 106


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (string1:string), is_mem_ta1 (string_list2) (string1) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string2) (string_list2)
string1 : string
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> true = if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 2(rank : 1)


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (string1:string), is_mem_ta1 (string_list2) (string1) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string2) (string_list2)
string1 : string
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> true = if string_eq (string2) (string1) then true else true

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
intro Cond1(rank:1)
case string_eq (string2) (string1)(rank:2)
=================================================
Progress: 107


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string2) (string_list2)
Cond1 : if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
true = if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string2) (string_list2)
Cond1 : if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
true = true

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 108


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string2) (string_list2)
Cond1 : if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
true = true

0 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Deduplication: 48
Tactic List : 2
rewrite <- lemma3 in goal at 0(rank:1)
case is_mem_ta1 (string_list1) (string2)(rank:2)
=================================================
Progress: 109


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- lemma3 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = if true then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 110


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = if true then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))

4 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite <- lemma3 in goal at 0(rank:1)
rewrite <- Case1 in goal at 0(rank:2)
=================================================
Progress: 111


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- lemma3 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 112


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list1) (string2) = true

4 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:2)
=================================================
Progress: 113


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 1(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string2)(rank:0)
=================================================
Progress: 114


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
Case2 : is_mem_ta1 (string_list1) (string2) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 115


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 2(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 116


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 117


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 118


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
case is_mem_ta1 (string_list1) (string1)
state_list
New Env

;;
Lemma List
forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)
End of Lemma List
=================================================
Progress: 119


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> assert forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)

---------------------------------------
forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
induction string_list1(rank:0)
intro string1(rank:1)
=================================================
Progress: 120


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)

---------------------------------------
forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> induction string_list1(rank : 0)


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string), is_mem_ta1 (Nil) (string1) = true -> true = is_mem_ta1 (Nil) (string1)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:0)
=================================================
Progress: 121


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string), is_mem_ta1 (Nil) (string1) = true -> true = is_mem_ta1 (Nil) (string1)

1 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 0)


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (string1:string), is_mem_ta1 (string_list2) (string1) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string2) (string_list2)
---------------------------------------
forall (string1:string), is_mem_ta1 (Cons (string2) (string_list2)) (string1) = true -> true = is_mem_ta1 (Cons (string2) (string_list2)) (string1)

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 122


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (string1:string), is_mem_ta1 (string_list2) (string1) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string2) (string_list2)
---------------------------------------
forall (string1:string), is_mem_ta1 (Cons (string2) (string_list2)) (string1) = true -> true = is_mem_ta1 (Cons (string2) (string_list2)) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (string1:string), is_mem_ta1 (string_list2) (string1) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string2) (string_list2)
---------------------------------------
forall (string1:string), if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> true = if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
intro string1(rank:1)
rewrite <- IH1 in goal at 0(rank:1)
rewrite <- IH1 in goal at 2(rank:1)
rewrite <- IH1 in goal at 1(rank:2)
=================================================
Progress: 123


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)

---------------------------------------
forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
---------------------------------------
forall (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction string_list1(rank:0)
=================================================
Progress: 124


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
---------------------------------------
forall (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> induction string_list1(rank : 0)


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
is_mem_ta1 (Nil) (string1) = true -> true = is_mem_ta1 (Nil) (string1)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:0)
=================================================
Progress: 125


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
is_mem_ta1 (Nil) (string1) = true -> true = is_mem_ta1 (Nil) (string1)

1 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 0)


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string2) (string_list2)
---------------------------------------
is_mem_ta1 (Cons (string2) (string_list2)) (string1) = true -> true = is_mem_ta1 (Cons (string2) (string_list2)) (string1)

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 4
simpl in goal(rank:0)
rewrite IH1 in goal at 0(rank:1)
rewrite IH1 in goal at 2(rank:1)
rewrite IH1 in goal at 1(rank:2)
=================================================
Progress: 126


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string2) (string_list2)
---------------------------------------
is_mem_ta1 (Cons (string2) (string_list2)) (string1) = true -> true = is_mem_ta1 (Cons (string2) (string_list2)) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string2) (string_list2)
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> true = if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
intro Cond1(rank:1)
rewrite IH1 in goal at 3(rank:1)
rewrite <- IH1 in goal at 2(rank:1)
rewrite <- IH1 in goal at 1(rank:2)
rewrite IH1 in goal at 1(rank:2)
rewrite IH1 in goal at 2(rank:2)
rewrite <- IH1 in goal at 0(rank:1)
rewrite IH1 in goal at 0(rank:2)
case string_eq (string2) (string1)(rank:2)
=================================================
Progress: 127


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (string1:string), is_mem_ta1 (string_list2) (string1) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string2) (string_list2)
---------------------------------------
forall (string1:string), if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> true = if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (string1:string), is_mem_ta1 (string_list2) (string1) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string2) (string_list2)
string1 : string
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> true = if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
intro Cond1(rank:1)
rewrite <- IH1 in goal at 2(rank:1)
rewrite <- IH1 in goal at 1(rank:2)
case string_eq (string2) (string1)(rank:2)
rewrite <- IH1 in goal at 0(rank:1)
=================================================
Progress: 128


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (string1:string), is_mem_ta1 (string_list2) (string1) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string2) (string_list2)
---------------------------------------
forall (string1:string), if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> true = if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (string1:string), is_mem_ta1 (string_list2) (string1) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string2) (string_list2)
---------------------------------------
forall (string1:string), if string_eq (string2) (string1) then true else true = true -> true = if string_eq (string2) (string1) then true else true

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro string1(rank:1)
=================================================
Progress: 129


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (string1:string), is_mem_ta1 (string_list2) (string1) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string2) (string_list2)
---------------------------------------
forall (string1:string), if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> true = if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 2(rank : 1)


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (string1:string), is_mem_ta1 (string_list2) (string1) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string2) (string_list2)
---------------------------------------
forall (string1:string), if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> true = if string_eq (string2) (string1) then true else true

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro string1(rank:1)
=================================================
Progress: 130


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string2) (string_list2)
---------------------------------------
is_mem_ta1 (Cons (string2) (string_list2)) (string1) = true -> true = is_mem_ta1 (Cons (string2) (string_list2)) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string2) (string_list2)
---------------------------------------
is_mem_ta1 (Cons (string2) (string_list2)) (string1) = is_mem_ta1 (string_list2) (string1) -> is_mem_ta1 (string_list2) (string1) = is_mem_ta1 (Cons (string2) (string_list2)) (string1)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 131


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string2) (string_list2)
---------------------------------------
is_mem_ta1 (Cons (string2) (string_list2)) (string1) = is_mem_ta1 (string_list2) (string1) -> is_mem_ta1 (string_list2) (string1) = is_mem_ta1 (Cons (string2) (string_list2)) (string1)

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string2) (string_list2)
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = is_mem_ta1 (string_list2) (string1) -> is_mem_ta1 (string_list2) (string1) = if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
intro Cond1(rank:1)
rewrite IH1 in goal at 1(rank:2)
rewrite <- IH1 in goal at 0(rank:2)
rewrite <- IH1 in goal at 1(rank:2)
rewrite <- IH1 in goal at 2(rank:2)
rewrite <- IH1 in goal at 3(rank:2)
rewrite IH1 in goal at 2(rank:2)
rewrite IH1 in goal at 0(rank:2)
case string_eq (string2) (string1)(rank:2)
=================================================
Progress: 132


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string2) (string_list2)
---------------------------------------
is_mem_ta1 (Cons (string2) (string_list2)) (string1) = true -> true = is_mem_ta1 (Cons (string2) (string_list2)) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 2(rank : 1)


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string2) (string_list2)
---------------------------------------
is_mem_ta1 (Cons (string2) (string_list2)) (string1) = true -> is_mem_ta1 (string_list2) (string1) = is_mem_ta1 (Cons (string2) (string_list2)) (string1)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 133


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string2) (string_list2)
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> true = if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string2) (string_list2)
Cond1 : if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
true = if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
rewrite Cond1 in goal at 0(rank:1)
rewrite IH1 in goal at 1(rank:1)
rewrite <- Cond1 in goal at 1(rank:1)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- IH1 in goal at 0(rank:1)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite IH1 in goal at 2(rank:2)
rewrite IH1 in goal at 0(rank:2)
case string_eq (string2) (string1)(rank:2)
=================================================
Progress: 134


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string2) (string_list2)
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> true = if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 3(rank : 1)


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string2) (string_list2)
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (string_list2) (string1) = if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
intro Cond1(rank:1)
case string_eq (string2) (string1)(rank:2)
=================================================
Progress: 135


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string2) (string_list2)
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> true = if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string2) (string_list2)
---------------------------------------
if string_eq (string2) (string1) then true else true = true -> true = if string_eq (string2) (string1) then true else true

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
intro Cond1(rank:1)
case string_eq (string2) (string1)(rank:2)
=================================================
Progress: 136


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string2) (string_list2)
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> true = if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 2(rank : 1)


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string2) (string_list2)
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> true = if string_eq (string2) (string1) then true else true

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
intro Cond1(rank:1)
case string_eq (string2) (string1)(rank:2)
=================================================
Progress: 137


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (string1:string), is_mem_ta1 (string_list2) (string1) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string2) (string_list2)
string1 : string
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> true = if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (string1:string), is_mem_ta1 (string_list2) (string1) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string2) (string_list2)
string1 : string
Cond1 : if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
true = if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:1)
rewrite <- Cond1 in goal at 1(rank:1)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- IH1 in goal at 0(rank:1)
case string_eq (string2) (string1)(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 138


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (string1:string), is_mem_ta1 (string_list2) (string1) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string2) (string_list2)
string1 : string
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> true = if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (string1:string), is_mem_ta1 (string_list2) (string1) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string2) (string_list2)
string1 : string
---------------------------------------
if string_eq (string2) (string1) then true else true = true -> true = if string_eq (string2) (string1) then true else true

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
intro Cond1(rank:1)
case string_eq (string2) (string1)(rank:2)
=================================================
Progress: 139


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (string1:string), is_mem_ta1 (string_list2) (string1) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string2) (string_list2)
string1 : string
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> true = if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 2(rank : 1)


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (string1:string), is_mem_ta1 (string_list2) (string1) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string2) (string_list2)
string1 : string
---------------------------------------
if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> true = if string_eq (string2) (string1) then true else true

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
intro Cond1(rank:1)
case string_eq (string2) (string1)(rank:2)
=================================================
Progress: 140


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string2) (string_list2)
Cond1 : if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
true = if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string2) (string_list2)
Cond1 : if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
true = true

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 141


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = true -> true = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string2) (string_list2)
Cond1 : if string_eq (string2) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
true = true

0 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Deduplication: 44
Tactic List : 2
rewrite <- lemma3 in goal at 0(rank:1)
case is_mem_ta1 (string_list1) (string1)(rank:2)
=================================================
Progress: 142


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- lemma3 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = if true then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 143


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = if true then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

4 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = is_mem_ta1 (string_list1) (string1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite <- lemma3 in goal at 0(rank:1)
rewrite Case1 in goal at 0(rank:2)
=================================================
Progress: 144


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = is_mem_ta1 (string_list1) (string1)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- lemma3 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 145


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list1) (string1) = true

4 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite Case1 in goal at 0(rank:2)
=================================================
Progress: 146


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 147


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 148


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 149


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 150


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 151


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 152


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 153


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 1(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 154


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 155


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 2(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 156


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 157


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
---------------------------------------
true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string2)(rank:0)
=================================================
Progress: 158


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
---------------------------------------
true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
Case2 : is_mem_ta1 (string_list1) (string2) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 159


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
---------------------------------------
true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string2)(rank:0)
=================================================
Progress: 160


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
---------------------------------------
true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
Case2 : is_mem_ta1 (string_list1) (string2) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 161


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 162


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 163


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 164


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if is_mem_ta1 (string_list2) (string3) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string3) (string_list2))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case is_mem_ta1 (string_list2) (string3)(rank:0)
case string_eq (string1) (string2)(rank:0)
=================================================
Progress: 165


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if is_mem_ta1 (string_list2) (string3) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string3) (string_list2))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list2) (string3)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : is_mem_ta1 (string_list2) (string3) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string2)(rank:0)
=================================================
Progress: 166


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if is_mem_ta1 (string_list2) (string3) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string3) (string_list2))

3 goal(s) more...

0 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string1) (string2) = true
---------------------------------------
true = if is_mem_ta1 (string_list2) (string3) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string3) (string_list2))

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case2 at 0(rank:0)
rewrite <- string_eqb_eq in Case2 at 0(rank:0)
case is_mem_ta1 (string_list2) (string3)(rank:2)
=================================================
Progress: 167


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : is_mem_ta1 (string_list2) (string3) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : is_mem_ta1 (string_list2) (string3) = true
Case3 : string_eq (string1) (string2) = true
---------------------------------------
true = is_mem_ta1 (string_list2) (string2)

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite string_eqb_eq in Case3 at 0(rank:0)
rewrite <- string_eqb_eq in Case3 at 0(rank:0)
=================================================
Progress: 168


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string1) (string2) = true
---------------------------------------
true = if is_mem_ta1 (string_list2) (string3) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string3) (string_list2))

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string1 = string2
---------------------------------------
true = if is_mem_ta1 (string_list2) (string3) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string3) (string_list2))

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
rewrite <- Case2 in goal at 0(rank:2)
rewrite <- Case2 in goal at 1(rank:2)
rewrite <- Case2 in goal at 2(rank:2)
case is_mem_ta1 (string_list2) (string3)(rank:2)
=================================================
Progress: 169


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string1) (string2) = true
---------------------------------------
true = if is_mem_ta1 (string_list2) (string3) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string3) (string_list2))

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string2 = string1
---------------------------------------
true = if is_mem_ta1 (string_list2) (string3) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string3) (string_list2))

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
rewrite Case2 in goal at 0(rank:2)
rewrite Case2 in goal at 1(rank:2)
rewrite Case2 in goal at 2(rank:2)
case is_mem_ta1 (string_list2) (string3)(rank:2)
=================================================
Progress: 170


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : is_mem_ta1 (string_list2) (string3) = true
Case3 : string_eq (string1) (string2) = true
---------------------------------------
true = is_mem_ta1 (string_list2) (string2)

5 goal(s) more...

0 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : is_mem_ta1 (string_list2) (string3) = true
Case3 : string1 = string2
---------------------------------------
true = is_mem_ta1 (string_list2) (string2)

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- Case3 in goal at 0(rank:2)
=================================================
Progress: 171


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : is_mem_ta1 (string_list2) (string3) = true
Case3 : string_eq (string1) (string2) = true
---------------------------------------
true = is_mem_ta1 (string_list2) (string2)

5 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case3 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : is_mem_ta1 (string_list2) (string3) = true
Case3 : string2 = string1
---------------------------------------
true = is_mem_ta1 (string_list2) (string2)

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case3 in goal at 0(rank:2)
=================================================
Progress: 172


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

3 goal(s) more...

0 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string1) (string2) = true
---------------------------------------
true = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
rewrite string_eqb_eq in Case2 at 0(rank:0)
rewrite IH1 in goal at 0(rank:2)
rewrite <- string_eqb_eq in Case2 at 0(rank:0)
case string_eq (string3) (string2)(rank:2)
=================================================
Progress: 173


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string1) (string2) = true
---------------------------------------
true = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string1 = string2
---------------------------------------
true = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 5
rewrite IH1 in goal at 0(rank:2)
rewrite <- Case2 in goal at 1(rank:2)
rewrite <- Case2 in goal at 2(rank:2)
case string_eq (string3) (string2)(rank:2)
rewrite <- Case2 in goal at 0(rank:2)
=================================================
Progress: 174


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string1) (string2) = true
---------------------------------------
true = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string2 = string1
---------------------------------------
true = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 5
rewrite Case2 in goal at 0(rank:2)
rewrite Case2 in goal at 2(rank:2)
rewrite IH1 in goal at 0(rank:2)
case string_eq (string3) (string2)(rank:2)
rewrite Case2 in goal at 1(rank:2)
=================================================
Progress: 175


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

3 goal(s) more...

0 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string3) (string2) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = true

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case2 at 0(rank:0)
rewrite <- string_eqb_eq in Case2 at 0(rank:0)
case string_eq (string1) (string2)(rank:2)
=================================================
Progress: 176


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string3) (string2) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = true

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string3 = string2
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = true

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 5
rewrite Case2 in goal at 0(rank:2)
rewrite <- Case2 in goal at 1(rank:2)
rewrite <- Case2 in goal at 2(rank:2)
case string_eq (string1) (string2)(rank:2)
rewrite <- Case2 in goal at 0(rank:2)
=================================================
Progress: 177


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string3) (string2) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = true

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string2 = string3
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = true

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 5
rewrite Case2 in goal at 0(rank:2)
rewrite Case2 in goal at 2(rank:2)
rewrite <- Case2 in goal at 0(rank:2)
case string_eq (string1) (string2)(rank:2)
rewrite Case2 in goal at 1(rank:2)
=================================================
Progress: 178


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

3 goal(s) more...

0 conjecture(s) more...
>>> case if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string_eq (string1) (string2) = true
Case2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
true = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
rewrite string_eqb_eq in Case1 at 0(rank:0)
rewrite IH1 in goal at 0(rank:2)
rewrite <- string_eqb_eq in Case1 at 0(rank:0)
case string_eq (string3) (string2)(rank:2)
=================================================
Progress: 179


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string_eq (string1) (string2) = true
Case2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
true = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string1 = string2
Case2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
true = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 5
rewrite IH1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
case string_eq (string3) (string2)(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
=================================================
Progress: 180


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string_eq (string1) (string2) = true
Case2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
true = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string2 = string1
Case2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
true = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 5
rewrite Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite IH1 in goal at 0(rank:2)
case string_eq (string3) (string2)(rank:2)
rewrite Case1 in goal at 1(rank:2)
=================================================
Progress: 181


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string1 = string2
---------------------------------------
true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string1 = string2
---------------------------------------
true = if if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string2) (Cons (string3) (string_list2)))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:2)
case if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)(rank:2)
=================================================
Progress: 182


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string1 = string2
---------------------------------------
true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 1(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string1 = string2
---------------------------------------
true = if if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string1)(rank:0)
=================================================
Progress: 183


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string1 = string2
---------------------------------------
true = if if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

3 goal(s) more...

0 conjecture(s) more...
>>> case if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string1 = string2
Case2 : if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
true = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:2)
case string_eq (string3) (string2)(rank:2)
=================================================
Progress: 184


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string1 = string2
---------------------------------------
true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 2(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string1 = string2
---------------------------------------
true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string2) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string2)(rank:0)
=================================================
Progress: 185


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string1 = string2
---------------------------------------
true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string2) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

3 goal(s) more...

0 conjecture(s) more...
>>> case if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string1 = string2
Case2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string2) = true
---------------------------------------
true = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:2)
case string_eq (string3) (string2)(rank:2)
=================================================
Progress: 186


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string1 = string2
---------------------------------------
true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 3(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string1 = string2
---------------------------------------
true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string2) (Cons (string3) (string_list2)))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)(rank:0)
=================================================
Progress: 187


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string1 = string2
---------------------------------------
true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string2) (Cons (string3) (string_list2)))

3 goal(s) more...

0 conjecture(s) more...
>>> case if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string1 = string2
Case2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
true = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:2)
case string_eq (string3) (string2)(rank:2)
=================================================
Progress: 188


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string1 = string2
---------------------------------------
true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string1 = string2
---------------------------------------
true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string1)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string1)) (Cons (string1) (Cons (string3) (string_list2)))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)(rank:0)
=================================================
Progress: 189


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string1 = string2
---------------------------------------
true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string1)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string1)) (Cons (string1) (Cons (string3) (string_list2)))

3 goal(s) more...

0 conjecture(s) more...
>>> case if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string1 = string2
Case2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
true = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case string_eq (string3) (string1)(rank:0)
=================================================
Progress: 190


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string1 = string2
Case2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
true = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

4 goal(s) more...

0 conjecture(s) more...
>>> case string_eq (string3) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string1 = string2
Case2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case3 : string_eq (string3) (string1) = true
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 191


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string1 = string2
Case2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case3 : string_eq (string3) (string1) = true
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string1 = string2
Case2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case3 : string_eq (string3) (string1) = false
---------------------------------------
true = is_mem_ta1 (string_list2) (string1)

4 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:2)
=================================================
Progress: 192


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string1 = string2
---------------------------------------
true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string1 = string2
---------------------------------------
true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string1)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)(rank:0)
=================================================
Progress: 193


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string1 = string2
---------------------------------------
true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string1)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

3 goal(s) more...

0 conjecture(s) more...
>>> case if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string1 = string2
Case2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
true = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case string_eq (string3) (string1)(rank:0)
=================================================
Progress: 194


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string1 = string2
Case2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
true = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

4 goal(s) more...

0 conjecture(s) more...
>>> case string_eq (string3) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string1 = string2
Case2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case3 : string_eq (string3) (string1) = true
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 195


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string1 = string2
Case2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case3 : string_eq (string3) (string1) = true
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string1 = string2
Case2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case3 : string_eq (string3) (string1) = false
---------------------------------------
true = is_mem_ta1 (string_list2) (string1)

4 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:2)
=================================================
Progress: 196


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string1 = string2
---------------------------------------
true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string1 = string2
---------------------------------------
true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string1)) (Cons (string1) (Cons (string3) (string_list2)))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)(rank:0)
=================================================
Progress: 197


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string1 = string2
---------------------------------------
true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string1)) (Cons (string1) (Cons (string3) (string_list2)))

3 goal(s) more...

0 conjecture(s) more...
>>> case if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string1 = string2
Case2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
true = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:2)
case string_eq (string3) (string2)(rank:2)
=================================================
Progress: 198


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string1 = string2
---------------------------------------
true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

3 goal(s) more...

0 conjecture(s) more...
>>> case if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string1 = string2
Case2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
true = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
rewrite IH1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
case string_eq (string3) (string2)(rank:2)
=================================================
Progress: 199


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string2 = string1
---------------------------------------
true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string2 = string1
---------------------------------------
true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string1)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string1)) (Cons (string1) (Cons (string3) (string_list2)))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)(rank:0)
=================================================
Progress: 200


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string2 = string1
---------------------------------------
true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string1)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string1)) (Cons (string1) (Cons (string3) (string_list2)))

3 goal(s) more...

0 conjecture(s) more...
>>> case if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string2 = string1
Case2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
true = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case string_eq (string3) (string1)(rank:0)
=================================================
Progress: 201


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string2 = string1
Case2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
true = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

4 goal(s) more...

0 conjecture(s) more...
>>> case string_eq (string3) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string2 = string1
Case2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case3 : string_eq (string3) (string1) = true
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 202


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string2 = string1
Case2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case3 : string_eq (string3) (string1) = true
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string2 = string1
Case2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case3 : string_eq (string3) (string1) = false
---------------------------------------
true = is_mem_ta1 (string_list2) (string1)

4 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:2)
=================================================
Progress: 203


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string2 = string1
---------------------------------------
true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 1(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string2 = string1
---------------------------------------
true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string1)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)(rank:0)
=================================================
Progress: 204


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string2 = string1
---------------------------------------
true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string1)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

3 goal(s) more...

0 conjecture(s) more...
>>> case if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string2 = string1
Case2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
true = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case string_eq (string3) (string1)(rank:0)
=================================================
Progress: 205


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string2 = string1
Case2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
true = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

4 goal(s) more...

0 conjecture(s) more...
>>> case string_eq (string3) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string2 = string1
Case2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case3 : string_eq (string3) (string1) = true
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 206


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string2 = string1
Case2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case3 : string_eq (string3) (string1) = true
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string2 = string1
Case2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case3 : string_eq (string3) (string1) = false
---------------------------------------
true = is_mem_ta1 (string_list2) (string1)

4 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:2)
=================================================
Progress: 207


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string2 = string1
---------------------------------------
true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 2(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string2 = string1
---------------------------------------
true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string1)) (Cons (string1) (Cons (string3) (string_list2)))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)(rank:0)
=================================================
Progress: 208


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string2 = string1
---------------------------------------
true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string1)) (Cons (string1) (Cons (string3) (string_list2)))

3 goal(s) more...

0 conjecture(s) more...
>>> case if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string2 = string1
Case2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
true = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:2)
case string_eq (string3) (string2)(rank:2)
=================================================
Progress: 209


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string2 = string1
---------------------------------------
true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string2 = string1
---------------------------------------
true = if if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string2) (Cons (string3) (string_list2)))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:2)
case if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)(rank:2)
=================================================
Progress: 210


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string2 = string1
---------------------------------------
true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string2 = string1
---------------------------------------
true = if if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string1)(rank:0)
=================================================
Progress: 211


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string2 = string1
---------------------------------------
true = if if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

3 goal(s) more...

0 conjecture(s) more...
>>> case if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string2 = string1
Case2 : if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
true = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:2)
case string_eq (string3) (string2)(rank:2)
=================================================
Progress: 212


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string2 = string1
---------------------------------------
true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string2 = string1
---------------------------------------
true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string2) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string2)(rank:0)
=================================================
Progress: 213


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string2 = string1
---------------------------------------
true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string2) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

3 goal(s) more...

0 conjecture(s) more...
>>> case if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string2 = string1
Case2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string2) = true
---------------------------------------
true = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:2)
case string_eq (string3) (string2)(rank:2)
=================================================
Progress: 214


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string2 = string1
---------------------------------------
true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 3(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string2 = string1
---------------------------------------
true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string2) (Cons (string3) (string_list2)))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)(rank:0)
=================================================
Progress: 215


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string2 = string1
---------------------------------------
true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string2) (Cons (string3) (string_list2)))

3 goal(s) more...

0 conjecture(s) more...
>>> case if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string2 = string1
Case2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
true = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:2)
case string_eq (string3) (string2)(rank:2)
=================================================
Progress: 216


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string2 = string1
---------------------------------------
true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

3 goal(s) more...

0 conjecture(s) more...
>>> case if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string2 = string1
Case2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
true = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
rewrite Case1 in goal at 1(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite IH1 in goal at 0(rank:2)
case string_eq (string3) (string2)(rank:2)
=================================================
Progress: 217


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string_eq (string1) (string2) = true
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite string_eqb_eq in Case1 at 0(rank:0)
rewrite <- string_eqb_eq in Case1 at 0(rank:0)
=================================================
Progress: 218


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string_eq (string1) (string2) = true
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:2)
=================================================
Progress: 219


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string_eq (string1) (string2) = true
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:2)
=================================================
Progress: 220


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
---------------------------------------
true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string2)(rank:0)
=================================================
Progress: 221


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
---------------------------------------
true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
Case2 : is_mem_ta1 (string_list1) (string2) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 222


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 1(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
---------------------------------------
true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string2)(rank:0)
=================================================
Progress: 223


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
---------------------------------------
true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
Case2 : is_mem_ta1 (string_list1) (string2) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 224


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 2(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 225


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 226


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 227


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 228


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 229


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 230


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 231


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 232


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 233


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 234


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 235


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 1(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 236


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 237


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 2(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 238


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 239


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
---------------------------------------
true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string2)(rank:0)
=================================================
Progress: 240


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
---------------------------------------
true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
Case2 : is_mem_ta1 (string_list1) (string2) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 241


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
---------------------------------------
true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string2)(rank:0)
=================================================
Progress: 242


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
---------------------------------------
true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
Case2 : is_mem_ta1 (string_list1) (string2) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 243


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 244


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 245


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 246


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (string_list1) (string2)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
if string_eq (string1) (string2) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (string_list1) (string2)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string2)(rank:0)
=================================================
Progress: 247


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
if string_eq (string1) (string2) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (string_list1) (string2)

3 goal(s) more...

0 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case2 : string_eq (string1) (string2) = true
---------------------------------------
is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite string_eqb_eq in Case2 at 0(rank:0)
rewrite <- string_eqb_eq in Case2 at 0(rank:0)
=================================================
Progress: 248


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case2 : string_eq (string1) (string2) = true
---------------------------------------
is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case2 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite Case2 in goal at 0(rank:1)
rewrite <- Case2 in goal at 0(rank:1)
=================================================
Progress: 249


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case2 : string_eq (string1) (string2) = true
---------------------------------------
is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case2 : string2 = string1
---------------------------------------
is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite Case2 in goal at 0(rank:1)
rewrite <- Case2 in goal at 0(rank:1)
=================================================
Progress: 250


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case2 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case2 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 251


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case2 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case2 : string_eq (string1) (string2) = false
---------------------------------------
is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (string_list1) (string2)

3 goal(s) more...

0 conjecture(s) more...
Deduplication: 3
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 252


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case2 : string_eq (string1) (string2) = false
---------------------------------------
is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (string_list1) (string2)

3 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = sub_check_ta1 (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
sub_check_ta1 (P (string2) (lambda2)) (Cons (string1) (string_list1)) = sub_check_ta1 (P (string2) (lambda2)) (string_list1)

2 goal(s) more...

0 conjecture(s) more...
Deduplication: 1
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 253


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = sub_check_ta1 (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
sub_check_ta1 (P (string2) (lambda2)) (Cons (string1) (string_list1)) = sub_check_ta1 (P (string2) (lambda2)) (string_list1)

2 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = sub_check_ta1 (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
sub_check_ta1 (lambda2) (Cons (string2) (Cons (string1) (string_list1))) = sub_check_ta1 (lambda2) (Cons (string2) (string_list1))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal


1st goal of : any
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
---------------------------------------
forall (lambda2:lambda), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda2) (Cons (string2) (Cons (string1) (string_list1))) = sub_check_ta1 (lambda2) (Cons (string2) (string_list1))

0 goal(s) more...

0 conjecture(s) more...


1st goal of : any
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
lambda2 : lambda
string3 : string
---------------------------------------
forall (lambda3:lambda), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda3) (Cons (string3) (Cons (string2) (Cons (string1) (string_list1)))) = sub_check_ta1 (lambda3) (Cons (string3) (Cons (string2) (string_list1)))

0 goal(s) more...

0 conjecture(s) more...
state_list
sub_check_ta1 (lambda2) (Cons (string2) (Cons (string1) (string_list1))) = sub_check_ta1 (lambda2) (Cons (string2) (string_list1))
sub_check_ta1 (lambda3) (Cons (string3) (Cons (string2) (Cons (string1) (string_list1)))) = sub_check_ta1 (lambda3) (Cons (string3) (Cons (string2) (string_list1)))
sub_check_ta1 (lambda4) (Cons (string4) (Cons (string3) (Cons (string2) (Cons (string1) (string_list1))))) = sub_check_ta1 (lambda4) (Cons (string4) (Cons (string3) (Cons (string2) (string_list1))))
lhs_common_subtree
Cons(string2, Cons(string1, string_list1))
Cons(string3, Cons(string2, Cons(string1, string_list1)))
Cons(string4, Cons(string3, Cons(string2, Cons(string1, string_list1))))
rhs_common_subtree
Cons(string2, string_list1)
Cons(string3, Cons(string2, string_list1))
Cons(string4, Cons(string3, Cons(string2, string_list1)))
lhs_increase_subtree
Cons(string3, _)
Cons(string4, _)
rhs_increase_subtree
Cons(string3, _)
Cons(string4, _)
New Env
let rec mk_lhs1 arg_1 arg_2 arg_3 arg_4 =
match (arg_1) with
| Nil  -> Cons (arg_2) (Cons (arg_3) (arg_4))
| Cons hd tl -> Cons (hd) (mk_lhs1 (tl) (arg_2) (arg_3) (arg_4))
;;
let rec mk_rhs1 arg_5 arg_6 arg_7 =
match (arg_5) with
| Nil  -> Cons (arg_6) (arg_7)
| Cons hd tl -> Cons (hd) (mk_rhs1 (tl) (arg_6) (arg_7))
;;
Lemma List
forall (string2:string) (string1:string) (string_list1:string list), mk_lhs1 (Nil) (string2) (string1) (string_list1) = Cons (string2) (Cons (string1) (string_list1))
forall (hd:string) (tl:string list) (string2:string) (string1:string) (string_list1:string list), mk_lhs1 (Cons (hd) (tl)) (string2) (string1) (string_list1) = Cons (hd) (mk_lhs1 (tl) (string2) (string1) (string_list1))
forall (string2:string) (string_list1:string list), mk_rhs1 (Nil) (string2) (string_list1) = Cons (string2) (string_list1)
forall (hd:string) (tl:string list) (string2:string) (string_list1:string list), mk_rhs1 (Cons (hd) (tl)) (string2) (string_list1) = Cons (hd) (mk_rhs1 (tl) (string2) (string_list1))
forall (lambda2:lambda) (lst:string list) (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda2) (mk_lhs1 (lst) (string2) (string1) (string_list1)) = sub_check_ta1 (lambda2) (mk_rhs1 (lst) (string2) (string_list1))
End of Lemma List
=================================================
Progress: 254


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = sub_check_ta1 (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
sub_check_ta1 (lambda2) (Cons (string2) (Cons (string1) (string_list1))) = sub_check_ta1 (lambda2) (Cons (string2) (string_list1))

2 goal(s) more...

0 conjecture(s) more...
>>> assert forall (lambda2:lambda) (lst:string list) (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda2) (mk_lhs1 (lst) (string2) (string1) (string_list1)) = sub_check_ta1 (lambda2) (mk_rhs1 (lst) (string2) (string_list1))(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))

---------------------------------------
forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
induction lambda1(rank:0)
intro string1(rank:3)
intro string2(rank:3)
=================================================
Progress: 255


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))

---------------------------------------
forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))

0 goal(s) more...

1 conjecture(s) more...
>>> induction lambda1(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (V (string3)) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (V (string3)) (mk_rhs1 (string_list1) (string2) (string_list2))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 256


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (V (string3)) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (V (string3)) (mk_rhs1 (string_list1) (string2) (string_list2))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list1) (string2) (string_list2)) (string3)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
intro string1(rank:3)
intro string2(rank:3)
=================================================
Progress: 257


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
state_list
New Env

;;
Lemma List
forall (string2:string) (string_list1:string list), true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))
End of Lemma List
=================================================
Progress: 258


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> assert forall (string2:string) (string_list1:string list), true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))(rank : 0)


1st goal of : forall (string1:string) (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

---------------------------------------
forall (string1:string) (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
intro string1(rank:1)
intro string_list1(rank:1)
=================================================
Progress: 259


1st goal of : forall (string1:string) (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

---------------------------------------
forall (string1:string) (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (string1:string) (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))
string1 : string
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro string_list1(rank:1)
=================================================
Progress: 260


1st goal of : forall (string1:string) (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

---------------------------------------
forall (string1:string) (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
>>> intro string_list1(rank : 1)


1st goal of : forall (string1:string) (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))
string_list1 : string list
---------------------------------------
forall (string1:string), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
state_list
New Env

;;
Lemma List
forall (string1:string) (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))
End of Lemma List
=================================================
Progress: 261


1st goal of : forall (string1:string) (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

---------------------------------------
forall (string1:string) (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
>>> assert forall (string1:string) (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))(rank : 0)


1st goal of : forall (string1:string) (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

---------------------------------------
forall (string1:string) (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro string1(rank:1)
intro string_list1(rank:1)
=================================================
Progress: 262


1st goal of : forall (string1:string) (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))
string1 : string
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
>>> intro string_list1(rank : 1)


1st goal of : forall (string1:string) (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 263


1st goal of : forall (string1:string) (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (string1:string) (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string1)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 264


1st goal of : forall (string1:string) (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

---------------------------------------
forall (string1:string) (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (string1:string) (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))
string1 : string
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string_list1(rank:1)
=================================================
Progress: 265


1st goal of : forall (string1:string) (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

---------------------------------------
forall (string1:string) (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> intro string_list1(rank : 1)


1st goal of : forall (string1:string) (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))
string_list1 : string list
---------------------------------------
forall (string1:string), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 266


1st goal of : forall (string1:string) (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))
string1 : string
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> intro string_list1(rank : 1)


1st goal of : forall (string1:string) (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 267


1st goal of : forall (string1:string) (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (string1:string) (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 268


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 1(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 1
state_list
New Env

;;
Lemma List
forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))
End of Lemma List
=================================================
Progress: 269


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
intro string1(rank:1)
intro string2(rank:1)
intro string_list1(rank:1)
=================================================
Progress: 270


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))
string1 : string
---------------------------------------
forall (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
intro string2(rank:1)
intro string_list1(rank:1)
=================================================
Progress: 271


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))
string2 : string
---------------------------------------
forall (string1:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro string_list1(rank:1)
=================================================
Progress: 272


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
>>> intro string_list1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))
string_list1 : string list
---------------------------------------
forall (string1:string) (string2:string), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
state_list
=================================================
Progress: 273


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))
string1 : string
---------------------------------------
forall (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))
string1 : string
string2 : string
---------------------------------------
forall (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro string_list1(rank:1)
=================================================
Progress: 274


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))
string1 : string
---------------------------------------
forall (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
>>> intro string_list1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
---------------------------------------
forall (string2:string), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
state_list
=================================================
Progress: 275


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))
string2 : string
---------------------------------------
forall (string1:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
>>> intro string_list1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))
string2 : string
string_list1 : string list
---------------------------------------
forall (string1:string), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string2)(rank:0)
=================================================
Progress: 276


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))
string2 : string
string_list1 : string list
---------------------------------------
forall (string1:string), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string2)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string2) = true
---------------------------------------
forall (string1:string), string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro string1(rank:1)
=================================================
Progress: 277


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))
string1 : string
string2 : string
---------------------------------------
forall (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
>>> intro string_list1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))
string1 : string
string2 : string
string_list1 : string list
---------------------------------------
string1 = string2 -> true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
intro Cond1(rank:1)
case is_mem_ta1 (string_list1) (string2)(rank:2)
=================================================
Progress: 278


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))
string1 : string
string2 : string
string_list1 : string list
---------------------------------------
string1 = string2 -> true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))
string1 : string
string2 : string
string_list1 : string list
Cond1 : string1 = string2
---------------------------------------
true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 3(rank:2)
case is_mem_ta1 (string_list1) (string2)(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 279


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string2) = true
---------------------------------------
forall (string1:string), string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)

1 goal(s) more...

1 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string2) = true
string1 : string
---------------------------------------
string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
intro Cond1(rank:1)
rewrite Case1 in goal at 0(rank:1)
rewrite <- Case1 in goal at 0(rank:1)
=================================================
Progress: 280


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string2) = true
string1 : string
---------------------------------------
string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string2) = true
string1 : string
Cond1 : string1 = string2
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite Case1 in goal at 0(rank:1)
rewrite <- Case1 in goal at 0(rank:1)
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 281


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string2) = true
string1 : string
---------------------------------------
string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string2) = true
string1 : string
---------------------------------------
string1 = string2 -> true = true

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
state_list
New Env

;;
Lemma List
forall (string1:string) (string2:string), string1 = string2 -> true = true
End of Lemma List
=================================================
Progress: 282


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string2) = true
string1 : string
---------------------------------------
string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)

1 goal(s) more...

1 conjecture(s) more...
>>> assert forall (string1:string) (string2:string), string1 = string2 -> true = true(rank : 0)


1st goal of : forall (string1:string) (string2:string), string1 = string2 -> true = true

---------------------------------------
forall (string1:string) (string2:string), string1 = string2 -> true = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro string1(rank:1)
intro string2(rank:1)
=================================================
Progress: 283


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string2) = true
string1 : string
---------------------------------------
string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string2) = true
string1 : string
---------------------------------------
string1 = string2 -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (string_list1) (string2)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
state_list
New Env

;;
Lemma List
forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string2) = true -> string1 = string2 -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (string_list1) (string2)
End of Lemma List
=================================================
Progress: 284


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string2) = true
string1 : string
---------------------------------------
string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)

1 goal(s) more...

1 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string2) = true -> string1 = string2 -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (string_list1) (string2)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string2) = true -> string1 = string2 -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (string_list1) (string2)

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string2) = true -> string1 = string2 -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
induction string_list1(rank:0)
intro string1(rank:1)
intro string2(rank:1)
=================================================
Progress: 285


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string2) = true -> string1 = string2 -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (string_list1) (string2)

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string2) = true -> string1 = string2 -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

2 conjecture(s) more...
>>> induction string_list1(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string2) = true -> string1 = string2 -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string) (string2:string), is_mem_ta1 (Nil) (string2) = true -> string1 = string2 -> is_mem_ta1 (Nil) (string2) = is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
discriminate(rank:0)
=================================================
Progress: 286


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string2) = true -> string1 = string2 -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string) (string2:string), is_mem_ta1 (Nil) (string2) = true -> string1 = string2 -> is_mem_ta1 (Nil) (string2) = is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
>>> discriminate(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string2) = true -> string1 = string2 -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), is_mem_ta1 (string_list2) (string2) = true -> string1 = string2 -> is_mem_ta1 (string_list2) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string) (string2:string), is_mem_ta1 (Cons (string3) (string_list2)) (string2) = true -> string1 = string2 -> is_mem_ta1 (Cons (string3) (string_list2)) (string2) = is_mem_ta1 (Cons (string3) (string_list2)) (string2)

0 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 287


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string2) = true -> string1 = string2 -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), is_mem_ta1 (string_list2) (string2) = true -> string1 = string2 -> is_mem_ta1 (string_list2) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string) (string2:string), is_mem_ta1 (Cons (string3) (string_list2)) (string2) = true -> string1 = string2 -> is_mem_ta1 (Cons (string3) (string_list2)) (string2) = is_mem_ta1 (Cons (string3) (string_list2)) (string2)

0 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string2) = true -> string1 = string2 -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), is_mem_ta1 (string_list2) (string2) = true -> string1 = string2 -> is_mem_ta1 (string_list2) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string) (string2:string), if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> string1 = string2 -> if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro string1(rank:1)
intro string2(rank:1)
=================================================
Progress: 288


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string2) = true
string1 : string
Cond1 : string1 = string2
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string2) = true
string1 : string
Cond1 : string1 = string2
---------------------------------------
true = true

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 289


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string2) = true
string1 : string
Cond1 : string1 = string2
---------------------------------------
true = true

1 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string2) = false
---------------------------------------
forall (string1:string), string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 8
Tactic List : 1
intro string1(rank:1)
=================================================
Progress: 290


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string2) = false
---------------------------------------
forall (string1:string), string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

1 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string2) = false
string1 : string
---------------------------------------
string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
intro Cond1(rank:1)
rewrite Case1 in goal at 0(rank:1)
case string_eq (string1) (string2)(rank:2)
=================================================
Progress: 291


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string2) = false
string1 : string
---------------------------------------
string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string2) = false
string1 : string
Cond1 : string1 = string2
---------------------------------------
true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 6
rewrite Case1 in goal at 0(rank:1)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
case string_eq (string1) (string2)(rank:2)
rewrite Cond1 in goal at 0(rank:2)
=================================================
Progress: 292


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string2) = false
string1 : string
---------------------------------------
string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string2) = false
string1 : string
---------------------------------------
string1 = string2 -> true = if string_eq (string1) (string2) then true else false

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string2)(rank:0)
=================================================
Progress: 293


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string2) = false
string1 : string
---------------------------------------
string1 = string2 -> true = if string_eq (string1) (string2) then true else false

0 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string2) = false
string1 : string
Case2 : string_eq (string1) (string2) = true
---------------------------------------
string1 = string2 -> true = true

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case2 at 0(rank:0)
intro Cond1(rank:1)
rewrite <- string_eqb_eq in Case2 at 0(rank:0)
=================================================
Progress: 294


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string2) = false
string1 : string
Case2 : string_eq (string1) (string2) = true
---------------------------------------
string1 = string2 -> true = true

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string2) = false
string1 : string
Case2 : string1 = string2
---------------------------------------
string1 = string2 -> true = true

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
intro Cond1(rank:1)
rewrite Case2 in goal at 0(rank:2)
rewrite <- Case2 in goal at 0(rank:2)
=================================================
Progress: 295


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string2) = false
string1 : string
Case2 : string_eq (string1) (string2) = true
---------------------------------------
string1 = string2 -> true = true

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string2) = false
string1 : string
Case2 : string2 = string1
---------------------------------------
string1 = string2 -> true = true

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
intro Cond1(rank:1)
rewrite Case2 in goal at 0(rank:2)
rewrite <- Case2 in goal at 0(rank:2)
=================================================
Progress: 296


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string2) = false
string1 : string
Cond1 : string1 = string2
---------------------------------------
true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string2) = false
string1 : string
Cond1 : string1 = string2
---------------------------------------
true = if string_eq (string1) (string2) then true else false

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
case string_eq (string1) (string2)(rank:2)
=================================================
Progress: 297


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string2) = false
string1 : string
Case2 : string_eq (string1) (string2) = true
---------------------------------------
string1 = string2 -> true = true

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string2) = false
string1 : string
Case2 : string_eq (string1) (string2) = true
Cond1 : string1 = string2
---------------------------------------
true = true

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 298


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string2) = false
string1 : string
Case2 : string_eq (string1) (string2) = true
Cond1 : string1 = string2
---------------------------------------
true = true

1 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string2) = false
string1 : string
Case2 : string_eq (string1) (string2) = false
---------------------------------------
string1 = string2 -> true = false

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 6
Tactic List : 1
intro Cond1(rank:1)
=================================================
Progress: 299


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string2) = false
string1 : string
Case2 : string_eq (string1) (string2) = false
---------------------------------------
string1 = string2 -> true = false

0 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string2) = false
string1 : string
Case2 : string_eq (string1) (string2) = false
Cond1 : string1 = string2
---------------------------------------
true = false

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case2 in goal at 0(rank:2)
=================================================
Progress: 300


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 2(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 2
state_list
New Env

;;
Lemma List
forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))
End of Lemma List
=================================================
Progress: 301


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
intro string1(rank:1)
intro string2(rank:1)
intro string_list1(rank:1)
=================================================
Progress: 302


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))
string1 : string
---------------------------------------
forall (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
intro string2(rank:1)
intro string_list1(rank:1)
=================================================
Progress: 303


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))
string2 : string
---------------------------------------
forall (string1:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro string_list1(rank:1)
=================================================
Progress: 304


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
>>> intro string_list1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))
string_list1 : string list
---------------------------------------
forall (string1:string) (string2:string), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
state_list
=================================================
Progress: 305


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))
string1 : string
---------------------------------------
forall (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))
string1 : string
string2 : string
---------------------------------------
forall (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro string_list1(rank:1)
=================================================
Progress: 306


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))
string1 : string
---------------------------------------
forall (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
>>> intro string_list1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))
string1 : string
string_list1 : string list
---------------------------------------
forall (string2:string), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 307


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))
string1 : string
string_list1 : string list
---------------------------------------
forall (string2:string), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
forall (string2:string), string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro string2(rank:1)
=================================================
Progress: 308


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))
string2 : string
---------------------------------------
forall (string1:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
>>> intro string_list1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))
string2 : string
string_list1 : string list
---------------------------------------
forall (string1:string), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
state_list
=================================================
Progress: 309


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))
string1 : string
string2 : string
---------------------------------------
forall (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
>>> intro string_list1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))
string1 : string
string2 : string
string_list1 : string list
---------------------------------------
string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
intro Cond1(rank:1)
case is_mem_ta1 (string_list1) (string1)(rank:2)
=================================================
Progress: 310


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))
string1 : string
string2 : string
string_list1 : string list
---------------------------------------
string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))
string1 : string
string2 : string
string_list1 : string list
Cond1 : string1 = string2
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
case is_mem_ta1 (string_list1) (string1)(rank:2)
=================================================
Progress: 311


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
forall (string2:string), string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)

1 goal(s) more...

1 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
---------------------------------------
string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
intro Cond1(rank:1)
rewrite <- Case1 in goal at 0(rank:1)
=================================================
Progress: 312


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
---------------------------------------
string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
Cond1 : string1 = string2
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:1)
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 313


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
---------------------------------------
string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
---------------------------------------
string1 = string2 -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list1) (string2)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
state_list
New Env

;;
Lemma List
forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> string1 = string2 -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list1) (string2)
End of Lemma List
=================================================
Progress: 314


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
---------------------------------------
string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)

1 goal(s) more...

1 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> string1 = string2 -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list1) (string2)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> string1 = string2 -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list1) (string2)

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> string1 = string2 -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
induction string_list1(rank:0)
intro string1(rank:1)
intro string2(rank:1)
=================================================
Progress: 315


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> string1 = string2 -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list1) (string2)

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> string1 = string2 -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

2 conjecture(s) more...
>>> induction string_list1(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> string1 = string2 -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string) (string2:string), is_mem_ta1 (Nil) (string1) = true -> string1 = string2 -> is_mem_ta1 (Nil) (string1) = is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
discriminate(rank:0)
=================================================
Progress: 316


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> string1 = string2 -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string) (string2:string), is_mem_ta1 (Nil) (string1) = true -> string1 = string2 -> is_mem_ta1 (Nil) (string1) = is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
>>> discriminate(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> string1 = string2 -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), is_mem_ta1 (string_list2) (string1) = true -> string1 = string2 -> is_mem_ta1 (string_list2) (string1) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string) (string2:string), is_mem_ta1 (Cons (string3) (string_list2)) (string1) = true -> string1 = string2 -> is_mem_ta1 (Cons (string3) (string_list2)) (string1) = is_mem_ta1 (Cons (string3) (string_list2)) (string2)

0 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 317


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> string1 = string2 -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), is_mem_ta1 (string_list2) (string1) = true -> string1 = string2 -> is_mem_ta1 (string_list2) (string1) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string) (string2:string), is_mem_ta1 (Cons (string3) (string_list2)) (string1) = true -> string1 = string2 -> is_mem_ta1 (Cons (string3) (string_list2)) (string1) = is_mem_ta1 (Cons (string3) (string_list2)) (string2)

0 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> string1 = string2 -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), is_mem_ta1 (string_list2) (string1) = true -> string1 = string2 -> is_mem_ta1 (string_list2) (string1) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string) (string2:string), if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> string1 = string2 -> if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro string1(rank:1)
intro string2(rank:1)
=================================================
Progress: 318


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
Cond1 : string1 = string2
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
Cond1 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list1) (string2)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite Cond1 in goal at 0(rank:1)
rewrite <- Cond1 in goal at 0(rank:1)
=================================================
Progress: 319


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
Cond1 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list1) (string2)

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
Cond1 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (string_list1) (string2)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 320


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
Cond1 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (string_list1) (string2)

1 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = false
---------------------------------------
forall (string2:string), string1 = string2 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 6
Tactic List : 2
intro string2(rank:1)
rewrite string_refl in goal at 0(rank:1)
=================================================
Progress: 321


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = false
---------------------------------------
forall (string2:string), string1 = string2 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

1 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = false
string2 : string
---------------------------------------
string1 = string2 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
intro Cond1(rank:1)
rewrite string_refl in goal at 0(rank:1)
case string_eq (string2) (string2)(rank:2)
=================================================
Progress: 322


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = false
---------------------------------------
forall (string2:string), string1 = string2 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = false
---------------------------------------
forall (string2:string), string1 = string2 -> true = if true then true else is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 323


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = false
---------------------------------------
forall (string2:string), string1 = string2 -> true = if true then true else is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = false
---------------------------------------
forall (string2:string), string1 = string2 -> true = true

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro string2(rank:1)
=================================================
Progress: 324


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = false
string2 : string
---------------------------------------
string1 = string2 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = false
string2 : string
Cond1 : string1 = string2
---------------------------------------
true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 6
rewrite string_refl in goal at 0(rank:1)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 3(rank:2)
case string_eq (string2) (string2)(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 325


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = false
string2 : string
---------------------------------------
string1 = string2 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = false
string2 : string
---------------------------------------
string1 = string2 -> true = if true then true else is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
state_list
New Env

;;
Lemma List
forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if true then true else is_mem_ta1 (string_list1) (string2)
End of Lemma List
=================================================
Progress: 326


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = false
string2 : string
---------------------------------------
string1 = string2 -> true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

1 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if true then true else is_mem_ta1 (string_list1) (string2)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if true then true else is_mem_ta1 (string_list1) (string2)

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if true then true else is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 327


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if true then true else is_mem_ta1 (string_list1) (string2)

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if true then true else is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if true then true else is_mem_ta1 (string_list1) (string2)

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
induction string_list1(rank:0)
intro string1(rank:1)
intro string2(rank:1)
=================================================
Progress: 328


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if true then true else is_mem_ta1 (string_list1) (string2)

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = true

0 goal(s) more...

2 conjecture(s) more...
>>> induction string_list1(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if true then true else is_mem_ta1 (string_list1) (string2)
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string) (string2:string), is_mem_ta1 (Nil) (string1) = false -> string1 = string2 -> true = true

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 329


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if true then true else is_mem_ta1 (string_list1) (string2)
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string) (string2:string), is_mem_ta1 (Nil) (string1) = false -> string1 = string2 -> true = true

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if true then true else is_mem_ta1 (string_list1) (string2)
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string) (string2:string), false = false -> string1 = string2 -> true = true

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro string1(rank:1)
intro string2(rank:1)
=================================================
Progress: 330


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = false
---------------------------------------
forall (string2:string), string1 = string2 -> true = true

0 goal(s) more...

1 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = false
string2 : string
---------------------------------------
string1 = string2 -> true = true

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:1)
=================================================
Progress: 331


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = false
string2 : string
Cond1 : string1 = string2
---------------------------------------
true = if string_eq (string2) (string2) then true else is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = false
string2 : string
Cond1 : string1 = string2
---------------------------------------
true = if true then true else is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 332


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = false
string2 : string
---------------------------------------
string1 = string2 -> true = true

0 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = false
string2 : string
Cond1 : string1 = string2
---------------------------------------
true = true

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 333


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = false
string2 : string
Cond1 : string1 = string2
---------------------------------------
true = true

0 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Deduplication: 36
Tactic List : 7
intro string_list1(rank:1)
rewrite Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite Case1 in goal at 0(rank:2)
=================================================
Progress: 334


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> intro string_list1(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 7
rewrite Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
case is_mem_ta1 (string_list1) (string1)(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 1(rank:2)
=================================================
Progress: 335


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite <- string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
state_list
=================================================
Progress: 336


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 1(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite <- string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 1
state_list
New Env

;;
Lemma List
forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))
End of Lemma List
=================================================
Progress: 337


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
intro string1(rank:1)
intro string2(rank:1)
intro string_list1(rank:1)
=================================================
Progress: 338


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))
string1 : string
---------------------------------------
forall (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
intro string2(rank:1)
intro string_list1(rank:1)
=================================================
Progress: 339


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))
string2 : string
---------------------------------------
forall (string1:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro string_list1(rank:1)
=================================================
Progress: 340


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
>>> intro string_list1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))
string_list1 : string list
---------------------------------------
forall (string1:string) (string2:string), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
state_list
=================================================
Progress: 341


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))
string1 : string
---------------------------------------
forall (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))
string1 : string
string2 : string
---------------------------------------
forall (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro string_list1(rank:1)
=================================================
Progress: 342


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))
string1 : string
---------------------------------------
forall (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
>>> intro string_list1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
---------------------------------------
forall (string2:string), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 343


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
---------------------------------------
forall (string2:string), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
forall (string2:string), string2 = string1 -> true = is_mem_ta1 (string_list1) (string1)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro string2(rank:1)
=================================================
Progress: 344


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))
string2 : string
---------------------------------------
forall (string1:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
>>> intro string_list1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))
string2 : string
string_list1 : string list
---------------------------------------
forall (string1:string), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
state_list
=================================================
Progress: 345


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))
string1 : string
string2 : string
---------------------------------------
forall (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
>>> intro string_list1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))
string1 : string
string2 : string
string_list1 : string list
---------------------------------------
string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
intro Cond1(rank:1)
case is_mem_ta1 (string_list1) (string1)(rank:2)
=================================================
Progress: 346


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))
string1 : string
string2 : string
string_list1 : string list
---------------------------------------
string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))
string1 : string
string2 : string
string_list1 : string list
Cond1 : string2 = string1
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 3(rank:2)
case is_mem_ta1 (string_list1) (string1)(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 347


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
forall (string2:string), string2 = string1 -> true = is_mem_ta1 (string_list1) (string1)

1 goal(s) more...

1 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
---------------------------------------
string2 = string1 -> true = is_mem_ta1 (string_list1) (string1)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
intro Cond1(rank:1)
rewrite Case1 in goal at 0(rank:1)
rewrite <- Case1 in goal at 0(rank:1)
=================================================
Progress: 348


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
---------------------------------------
string2 = string1 -> true = is_mem_ta1 (string_list1) (string1)

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
Cond1 : string2 = string1
---------------------------------------
true = is_mem_ta1 (string_list1) (string1)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite Case1 in goal at 0(rank:1)
rewrite <- Case1 in goal at 0(rank:1)
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 349


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
---------------------------------------
string2 = string1 -> true = is_mem_ta1 (string_list1) (string1)

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
---------------------------------------
string2 = string1 -> true = true

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
state_list
New Env

;;
Lemma List
forall (string1:string) (string2:string), string2 = string1 -> true = true
End of Lemma List
=================================================
Progress: 350


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
---------------------------------------
string2 = string1 -> true = is_mem_ta1 (string_list1) (string1)

1 goal(s) more...

1 conjecture(s) more...
>>> assert forall (string1:string) (string2:string), string2 = string1 -> true = true(rank : 0)


1st goal of : forall (string1:string) (string2:string), string2 = string1 -> true = true

---------------------------------------
forall (string1:string) (string2:string), string2 = string1 -> true = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro string1(rank:1)
intro string2(rank:1)
=================================================
Progress: 351


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
---------------------------------------
string2 = string1 -> true = is_mem_ta1 (string_list1) (string1)

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
---------------------------------------
string2 = string1 -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list1) (string1)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
state_list
New Env

;;
Lemma List
forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> string2 = string1 -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list1) (string1)
End of Lemma List
=================================================
Progress: 352


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
---------------------------------------
string2 = string1 -> true = is_mem_ta1 (string_list1) (string1)

1 goal(s) more...

1 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> string2 = string1 -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> string2 = string1 -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list1) (string1)

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> string2 = string1 -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
induction string_list1(rank:0)
intro string1(rank:1)
intro string2(rank:1)
=================================================
Progress: 353


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> string2 = string1 -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list1) (string1)

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> string2 = string1 -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

2 conjecture(s) more...
>>> induction string_list1(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> string2 = string1 -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string) (string2:string), is_mem_ta1 (Nil) (string1) = true -> string2 = string1 -> is_mem_ta1 (Nil) (string1) = is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
discriminate(rank:0)
=================================================
Progress: 354


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> string2 = string1 -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string) (string2:string), is_mem_ta1 (Nil) (string1) = true -> string2 = string1 -> is_mem_ta1 (Nil) (string1) = is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
>>> discriminate(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> string2 = string1 -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), is_mem_ta1 (string_list2) (string1) = true -> string2 = string1 -> is_mem_ta1 (string_list2) (string1) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string) (string2:string), is_mem_ta1 (Cons (string3) (string_list2)) (string1) = true -> string2 = string1 -> is_mem_ta1 (Cons (string3) (string_list2)) (string1) = is_mem_ta1 (Cons (string3) (string_list2)) (string1)

0 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 355


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> string2 = string1 -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), is_mem_ta1 (string_list2) (string1) = true -> string2 = string1 -> is_mem_ta1 (string_list2) (string1) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string) (string2:string), is_mem_ta1 (Cons (string3) (string_list2)) (string1) = true -> string2 = string1 -> is_mem_ta1 (Cons (string3) (string_list2)) (string1) = is_mem_ta1 (Cons (string3) (string_list2)) (string1)

0 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> string2 = string1 -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), is_mem_ta1 (string_list2) (string1) = true -> string2 = string1 -> is_mem_ta1 (string_list2) (string1) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string) (string2:string), if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> string2 = string1 -> if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro string1(rank:1)
intro string2(rank:1)
=================================================
Progress: 356


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
Cond1 : string2 = string1
---------------------------------------
true = is_mem_ta1 (string_list1) (string1)

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
Cond1 : string2 = string1
---------------------------------------
true = true

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 357


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
Cond1 : string2 = string1
---------------------------------------
true = true

1 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = false
---------------------------------------
forall (string2:string), string2 = string1 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 8
Tactic List : 1
intro string2(rank:1)
=================================================
Progress: 358


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = false
---------------------------------------
forall (string2:string), string2 = string1 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

1 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = false
string2 : string
---------------------------------------
string2 = string1 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
intro Cond1(rank:1)
case string_eq (string1) (string2)(rank:2)
=================================================
Progress: 359


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = false
string2 : string
---------------------------------------
string2 = string1 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = false
string2 : string
Cond1 : string2 = string1
---------------------------------------
true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
rewrite Cond1 in goal at 0(rank:2)
rewrite Cond1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
case string_eq (string1) (string2)(rank:2)
rewrite Cond1 in goal at 1(rank:2)
=================================================
Progress: 360


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 2(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite <- string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 2
state_list
New Env

;;
Lemma List
forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))
End of Lemma List
=================================================
Progress: 361


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
intro string1(rank:1)
intro string2(rank:1)
intro string_list1(rank:1)
=================================================
Progress: 362


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))
string1 : string
---------------------------------------
forall (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
intro string2(rank:1)
intro string_list1(rank:1)
=================================================
Progress: 363


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))
string2 : string
---------------------------------------
forall (string1:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro string_list1(rank:1)
=================================================
Progress: 364


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
>>> intro string_list1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))
string_list1 : string list
---------------------------------------
forall (string1:string) (string2:string), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
state_list
=================================================
Progress: 365


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))
string1 : string
---------------------------------------
forall (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))
string1 : string
string2 : string
---------------------------------------
forall (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro string_list1(rank:1)
=================================================
Progress: 366


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))
string1 : string
---------------------------------------
forall (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
>>> intro string_list1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
---------------------------------------
forall (string2:string), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 367


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
---------------------------------------
forall (string2:string), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
forall (string2:string), string2 = string1 -> true = is_mem_ta1 (string_list1) (string2)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro string2(rank:1)
=================================================
Progress: 368


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))
string2 : string
---------------------------------------
forall (string1:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
>>> intro string_list1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))
string2 : string
string_list1 : string list
---------------------------------------
forall (string1:string), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
state_list
=================================================
Progress: 369


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))
string1 : string
string2 : string
---------------------------------------
forall (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
>>> intro string_list1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))
string1 : string
string2 : string
string_list1 : string list
---------------------------------------
string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
intro Cond1(rank:1)
case is_mem_ta1 (string_list1) (string1)(rank:2)
=================================================
Progress: 370


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))
string1 : string
string2 : string
string_list1 : string list
---------------------------------------
string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))
string1 : string
string2 : string
string_list1 : string list
Cond1 : string2 = string1
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 3(rank:2)
case is_mem_ta1 (string_list1) (string1)(rank:2)
=================================================
Progress: 371


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
forall (string2:string), string2 = string1 -> true = is_mem_ta1 (string_list1) (string2)

1 goal(s) more...

1 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
---------------------------------------
string2 = string1 -> true = is_mem_ta1 (string_list1) (string2)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
intro Cond1(rank:1)
rewrite <- Case1 in goal at 0(rank:1)
=================================================
Progress: 372


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
---------------------------------------
string2 = string1 -> true = is_mem_ta1 (string_list1) (string2)

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
Cond1 : string2 = string1
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:1)
rewrite Cond1 in goal at 0(rank:2)
=================================================
Progress: 373


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
---------------------------------------
string2 = string1 -> true = is_mem_ta1 (string_list1) (string2)

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
---------------------------------------
string2 = string1 -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list1) (string2)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
state_list
New Env

;;
Lemma List
forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> string2 = string1 -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list1) (string2)
End of Lemma List
=================================================
Progress: 374


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
---------------------------------------
string2 = string1 -> true = is_mem_ta1 (string_list1) (string2)

1 goal(s) more...

1 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> string2 = string1 -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list1) (string2)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> string2 = string1 -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list1) (string2)

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> string2 = string1 -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
induction string_list1(rank:0)
intro string1(rank:1)
intro string2(rank:1)
=================================================
Progress: 375


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> string2 = string1 -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list1) (string2)

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> string2 = string1 -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

2 conjecture(s) more...
>>> induction string_list1(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> string2 = string1 -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string) (string2:string), is_mem_ta1 (Nil) (string1) = true -> string2 = string1 -> is_mem_ta1 (Nil) (string1) = is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
discriminate(rank:0)
=================================================
Progress: 376


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> string2 = string1 -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string) (string2:string), is_mem_ta1 (Nil) (string1) = true -> string2 = string1 -> is_mem_ta1 (Nil) (string1) = is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
>>> discriminate(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> string2 = string1 -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), is_mem_ta1 (string_list2) (string1) = true -> string2 = string1 -> is_mem_ta1 (string_list2) (string1) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string) (string2:string), is_mem_ta1 (Cons (string3) (string_list2)) (string1) = true -> string2 = string1 -> is_mem_ta1 (Cons (string3) (string_list2)) (string1) = is_mem_ta1 (Cons (string3) (string_list2)) (string2)

0 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 377


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> string2 = string1 -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), is_mem_ta1 (string_list2) (string1) = true -> string2 = string1 -> is_mem_ta1 (string_list2) (string1) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string) (string2:string), is_mem_ta1 (Cons (string3) (string_list2)) (string1) = true -> string2 = string1 -> is_mem_ta1 (Cons (string3) (string_list2)) (string1) = is_mem_ta1 (Cons (string3) (string_list2)) (string2)

0 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> string2 = string1 -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), is_mem_ta1 (string_list2) (string1) = true -> string2 = string1 -> is_mem_ta1 (string_list2) (string1) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string) (string2:string), if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> string2 = string1 -> if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro string1(rank:1)
intro string2(rank:1)
=================================================
Progress: 378


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
Cond1 : string2 = string1
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
Cond1 : string2 = string1
---------------------------------------
is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list1) (string2)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite Cond1 in goal at 0(rank:1)
rewrite <- Cond1 in goal at 0(rank:1)
=================================================
Progress: 379


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
Cond1 : string2 = string1
---------------------------------------
is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list1) (string2)

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
Cond1 : string2 = string1
---------------------------------------
is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list1) (string1)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 380


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
Cond1 : string2 = string1
---------------------------------------
is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list1) (string1)

1 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = false
---------------------------------------
forall (string2:string), string2 = string1 -> true = if string_eq (string1) (string1) then true else is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 6
Tactic List : 3
intro string2(rank:1)
rewrite string_refl in goal at 0(rank:1)
case string_eq (string1) (string1)(rank:2)
=================================================
Progress: 381


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = false
---------------------------------------
forall (string2:string), string2 = string1 -> true = if string_eq (string1) (string1) then true else is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = false
string2 : string
---------------------------------------
string2 = string1 -> true = if string_eq (string1) (string1) then true else is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite Case1 in goal at 0(rank:1)
rewrite string_refl in goal at 0(rank:1)
case string_eq (string1) (string1)(rank:2)
=================================================
Progress: 382


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = false
---------------------------------------
forall (string2:string), string2 = string1 -> true = if string_eq (string1) (string1) then true else is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = false
---------------------------------------
forall (string2:string), string2 = string1 -> true = if true then true else is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 383


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = false
---------------------------------------
forall (string2:string), string2 = string1 -> true = if true then true else is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = false
---------------------------------------
forall (string2:string), string2 = string1 -> true = true

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro string2(rank:1)
=================================================
Progress: 384


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = false
string2 : string
---------------------------------------
string2 = string1 -> true = if string_eq (string1) (string1) then true else is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = false
string2 : string
---------------------------------------
string2 = string1 -> true = if string_eq (string1) (string1) then true else false

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
intro Cond1(rank:1)
rewrite string_refl in goal at 0(rank:1)
case string_eq (string1) (string1)(rank:2)
=================================================
Progress: 385


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = false
string2 : string
---------------------------------------
string2 = string1 -> true = if string_eq (string1) (string1) then true else is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = false
string2 : string
---------------------------------------
string2 = string1 -> true = if true then true else is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
state_list
New Env

;;
Lemma List
forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string2 = string1 -> true = if true then true else is_mem_ta1 (string_list1) (string1)
End of Lemma List
=================================================
Progress: 386


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = false
string2 : string
---------------------------------------
string2 = string1 -> true = if string_eq (string1) (string1) then true else is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string2 = string1 -> true = if true then true else is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string2 = string1 -> true = if true then true else is_mem_ta1 (string_list1) (string1)

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string2 = string1 -> true = if true then true else is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 387


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string2 = string1 -> true = if true then true else is_mem_ta1 (string_list1) (string1)

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string2 = string1 -> true = if true then true else is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string2 = string1 -> true = if true then true else is_mem_ta1 (string_list1) (string1)

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string2 = string1 -> true = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
induction string_list1(rank:0)
intro string1(rank:1)
intro string2(rank:1)
=================================================
Progress: 388


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string2 = string1 -> true = if true then true else is_mem_ta1 (string_list1) (string1)

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string2 = string1 -> true = true

0 goal(s) more...

2 conjecture(s) more...
>>> induction string_list1(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string2 = string1 -> true = if true then true else is_mem_ta1 (string_list1) (string1)
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string) (string2:string), is_mem_ta1 (Nil) (string1) = false -> string2 = string1 -> true = true

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 389


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string2 = string1 -> true = if true then true else is_mem_ta1 (string_list1) (string1)
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string) (string2:string), is_mem_ta1 (Nil) (string1) = false -> string2 = string1 -> true = true

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string2 = string1 -> true = if true then true else is_mem_ta1 (string_list1) (string1)
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string) (string2:string), false = false -> string2 = string1 -> true = true

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro string1(rank:1)
intro string2(rank:1)
=================================================
Progress: 390


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = false
---------------------------------------
forall (string2:string), string2 = string1 -> true = true

0 goal(s) more...

1 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = false
string2 : string
---------------------------------------
string2 = string1 -> true = true

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:1)
=================================================
Progress: 391


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = false
string2 : string
---------------------------------------
string2 = string1 -> true = if string_eq (string1) (string1) then true else false

0 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = false
string2 : string
Cond1 : string2 = string1
---------------------------------------
true = if string_eq (string1) (string1) then true else false

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
rewrite string_refl in goal at 0(rank:1)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
case string_eq (string1) (string1)(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 392


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = false
string2 : string
---------------------------------------
string2 = string1 -> true = if string_eq (string1) (string1) then true else false

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_refl in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = false
string2 : string
---------------------------------------
string2 = string1 -> true = if true then true else false

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
state_list
New Env

;;
Lemma List
forall (string1:string) (string2:string), string2 = string1 -> true = if true then true else false
End of Lemma List
=================================================
Progress: 393


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = false
string2 : string
---------------------------------------
string2 = string1 -> true = if string_eq (string1) (string1) then true else false

0 goal(s) more...

1 conjecture(s) more...
>>> assert forall (string1:string) (string2:string), string2 = string1 -> true = if true then true else false(rank : 0)


1st goal of : forall (string1:string) (string2:string), string2 = string1 -> true = if true then true else false

---------------------------------------
forall (string1:string) (string2:string), string2 = string1 -> true = if true then true else false

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 394


1st goal of : forall (string1:string) (string2:string), string2 = string1 -> true = if true then true else false

---------------------------------------
forall (string1:string) (string2:string), string2 = string1 -> true = if true then true else false

0 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (string1:string) (string2:string), string2 = string1 -> true = if true then true else false

---------------------------------------
forall (string1:string) (string2:string), string2 = string1 -> true = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro string1(rank:1)
intro string2(rank:1)
=================================================
Progress: 395


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = false
string2 : string
---------------------------------------
string2 = string1 -> true = true

0 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = false
string2 : string
Cond1 : string2 = string1
---------------------------------------
true = true

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 396


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string2 = string1 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = false
string2 : string
Cond1 : string2 = string1
---------------------------------------
true = true

0 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Deduplication: 34
Tactic List : 7
intro string_list1(rank:1)
rewrite Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite Case1 in goal at 0(rank:2)
=================================================
Progress: 397


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> intro string_list1(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 7
rewrite Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
case is_mem_ta1 (string_list1) (string1)(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 1(rank:2)
=================================================
Progress: 398


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = true
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = true
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case1 at 0(rank:0)
rewrite <- Case1 in goal at 0(rank:1)
rewrite <- string_eqb_eq in Case1 at 0(rank:0)
=================================================
Progress: 399


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = true
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:2)
=================================================
Progress: 400


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = true
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:2)
=================================================
Progress: 401


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = true
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = true
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite string_eqb_eq in Case1 at 0(rank:0)
rewrite <- string_eqb_eq in Case1 at 0(rank:0)
=================================================
Progress: 402


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = true
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
rewrite Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
=================================================
Progress: 403


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = true
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
rewrite Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 1(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
=================================================
Progress: 404


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string2)(rank:0)
=================================================
Progress: 405


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string2) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 406


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 1(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string2)(rank:0)
=================================================
Progress: 407


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string2) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 408


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 2(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 409


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 410


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 411


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 412


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 413


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 414


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 415


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 416


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 417


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 418


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 419


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 1(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 420


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 421


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 2(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 422


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 423


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string2)(rank:0)
=================================================
Progress: 424


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string2) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 425


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string2)(rank:0)
=================================================
Progress: 426


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string2) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 427


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 428


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 429


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 430


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = true
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = true
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite string_eqb_eq in Case1 at 0(rank:0)
rewrite <- string_eqb_eq in Case1 at 0(rank:0)
=================================================
Progress: 431


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = true
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
rewrite Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
=================================================
Progress: 432


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = true
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
rewrite Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 1(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
=================================================
Progress: 433


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
string_eq (string2) (string2) = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string2)(rank:0)
=================================================
Progress: 434


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
string_eq (string2) (string2) = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string2) = true
---------------------------------------
string_eq (string2) (string2) = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:2)
=================================================
Progress: 435


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 1(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
string_eq (string2) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 436


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
string_eq (string2) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
string_eq (string2) (string2) = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:2)
=================================================
Progress: 437


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 2(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string2)(rank:0)
=================================================
Progress: 438


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string2) = true
---------------------------------------
string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case string_eq (string1) (string2)
intro string_list1
rewrite <- Case1 in goal at 0
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 2
case is_mem_ta1 (string_list1) (string2)
state_list
New Env

;;
Lemma List
forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
End of Lemma List
=================================================
Progress: 439


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
induction string_list1(rank:0)
intro string1(rank:1)
intro string2(rank:1)
=================================================
Progress: 440


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

1 conjecture(s) more...
>>> induction string_list1(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (Nil) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (Nil) (string2)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 441


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (Nil) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (Nil) (string2)

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string) (string2:string), string1 = string2->false = true -> string_eq (string1) (string2) = false

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
intro string1(rank:1)
intro string2(rank:1)
=================================================
Progress: 442


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

1 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
---------------------------------------
forall (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
induction string_list1(rank:0)
intro string2(rank:1)
=================================================
Progress: 443


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
---------------------------------------
forall (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

1 conjecture(s) more...
>>> induction string_list1(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string2:string), string1 = string2->is_mem_ta1 (Nil) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (Nil) (string2)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 444


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string2:string), string1 = string2->is_mem_ta1 (Nil) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (Nil) (string2)

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string2:string), string1 = string2->false = true -> string_eq (string1) (string2) = false

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro string2(rank:1)
=================================================
Progress: 445


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

1 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string2 : string
---------------------------------------
forall (string1:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction string_list1(rank:0)
=================================================
Progress: 446


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string2 : string
---------------------------------------
forall (string1:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

1 conjecture(s) more...
>>> induction string_list1(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string), string1 = string2->is_mem_ta1 (Nil) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (Nil) (string2)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 447


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string), string1 = string2->is_mem_ta1 (Nil) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (Nil) (string2)

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string), string1 = string2->false = true -> string_eq (string1) (string2) = false

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro string1(rank:1)
=================================================
Progress: 448


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
---------------------------------------
forall (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

1 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
---------------------------------------
forall (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction string_list1(rank:0)
=================================================
Progress: 449


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
---------------------------------------
forall (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

1 conjecture(s) more...
>>> induction string_list1(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
string1 = string2->is_mem_ta1 (Nil) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (Nil) (string2)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 450


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
string1 = string2->is_mem_ta1 (Nil) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (Nil) (string2)

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
string1 = string2->false = true -> string_eq (string1) (string2) = false

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:1)
=================================================
Progress: 451


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string) (string2:string), string1 = string2->false = true -> string_eq (string1) (string2) = false

1 goal(s) more...

1 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
---------------------------------------
forall (string2:string), string1 = string2->false = true -> string_eq (string1) (string2) = false

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro string2(rank:1)
=================================================
Progress: 452


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string) (string2:string), string1 = string2->false = true -> string_eq (string1) (string2) = false

1 goal(s) more...

1 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
---------------------------------------
forall (string1:string), string1 = string2->false = true -> string_eq (string1) (string2) = false

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
state_list
New Env

;;
Lemma List
forall (string1:string) (string2:string), string1 = string2->false = true -> string_eq (string1) (string2) = false
End of Lemma List
=================================================
Progress: 453


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string) (string2:string), string1 = string2->false = true -> string_eq (string1) (string2) = false

1 goal(s) more...

1 conjecture(s) more...
>>> assert forall (string1:string) (string2:string), string1 = string2->false = true -> string_eq (string1) (string2) = false(rank : 0)


1st goal of : forall (string1:string) (string2:string), string1 = string2->false = true -> string_eq (string1) (string2) = false

---------------------------------------
forall (string1:string) (string2:string), string1 = string2->false = true -> string_eq (string1) (string2) = false

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro string1(rank:1)
intro string2(rank:1)
=================================================
Progress: 454


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string2:string), string1 = string2->false = true -> string_eq (string1) (string2) = false

1 goal(s) more...

1 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
---------------------------------------
string1 = string2->false = true -> string_eq (string1) (string2) = false

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:1)
=================================================
Progress: 455


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string), string1 = string2->false = true -> string_eq (string1) (string2) = false

1 goal(s) more...

1 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
---------------------------------------
string1 = string2->false = true -> string_eq (string1) (string2) = false

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:1)
=================================================
Progress: 456


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
string1 = string2->false = true -> string_eq (string1) (string2) = false

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
Cond1 : string1 = string2
---------------------------------------
false = true -> string_eq (string1) (string2) = false

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:0)
=================================================
Progress: 457


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
Cond1 : string1 = string2
---------------------------------------
false = true -> string_eq (string1) (string2) = false

1 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
string1 = string2->is_mem_ta1 (Cons (string3) (string_list2)) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (Cons (string3) (string_list2)) (string2)

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 2
simpl in goal(rank:0)
rewrite IH1 in goal at 0(rank:1)
=================================================
Progress: 458


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
string1 = string2->is_mem_ta1 (Cons (string3) (string_list2)) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (Cons (string3) (string_list2)) (string2)

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 6
intro Cond1(rank:1)
rewrite <- IH1 in goal at 0(rank:1)
rewrite <- IH1 in goal at 1(rank:2)
rewrite <- IH1 in goal at 2(rank:1)
case string_eq (string3) (string2)(rank:2)
rewrite IH1 in goal at 0(rank:1)
=================================================
Progress: 459


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
string1 = string2->is_mem_ta1 (Cons (string3) (string_list2)) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (Cons (string3) (string_list2)) (string2)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
string1 = string2->is_mem_ta1 (Cons (string3) (string_list2)) (string2) = true -> is_mem_ta1 (string_list2) (string2) = is_mem_ta1 (Cons (string3) (string_list2)) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
rewrite IH1 in goal at 0


1st goal of : any
string1 : string
string2 : string
string_list1 : string list
string3 : string
---------------------------------------
forall (string_list2:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list2)) (string2) = true -> is_mem_ta1 (string_list2) (string2) = is_mem_ta1 (Cons (string3) (string_list2)) (string2)

0 goal(s) more...

0 conjecture(s) more...
state_list
New Env

;;
Lemma List
forall (string1:string) (string2:string) (string3:string) (string_list2:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list2)) (string2) = true -> is_mem_ta1 (string_list2) (string2) = is_mem_ta1 (Cons (string3) (string_list2)) (string2)
End of Lemma List
=================================================
Progress: 460


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
string1 = string2->is_mem_ta1 (Cons (string3) (string_list2)) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (Cons (string3) (string_list2)) (string2)

0 goal(s) more...

1 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string) (string_list2:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list2)) (string2) = true -> is_mem_ta1 (string_list2) (string2) = is_mem_ta1 (Cons (string3) (string_list2)) (string2)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)

---------------------------------------
forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 461


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)

---------------------------------------
forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)

0 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)

---------------------------------------
forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (string_list1) (string2) = true -> is_mem_ta1 (string_list1) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
induction string_list1(rank:0)
intro string3(rank:1)
intro string1(rank:1)
intro string2(rank:1)
=================================================
Progress: 462


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)

---------------------------------------
forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (string_list1) (string2) = true -> is_mem_ta1 (string_list1) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

2 conjecture(s) more...
>>> induction string_list1(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> is_mem_ta1 (Nil) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 463


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> is_mem_ta1 (Nil) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
intro string1(rank:1)
intro string2(rank:1)
intro string3(rank:1)
=================================================
Progress: 464


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

0 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 11
intro Cond2(rank:1)
rewrite IH1 in goal at 0(rank:1)
rewrite <- IH1 in goal at 0(rank:1)
rewrite <- Cond1 in goal at 3(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- IH1 in goal at 2(rank:1)
rewrite <- IH1 in goal at 1(rank:2)
rewrite Cond1 in goal at 0(rank:2)
case string_eq (string3) (string2)(rank:2)
=================================================
Progress: 465


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> is_mem_ta1 (string_list2) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
intro Cond1(rank:1)
case string_eq (string3) (string2)(rank:2)
=================================================
Progress: 466


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
string1 = string2->if string_eq (string3) (string2) then true else string_eq (string1) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string2) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
intro Cond1(rank:1)
case string_eq (string3) (string2)(rank:2)
=================================================
Progress: 467


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string2) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
intro Cond1(rank:1)
case string_eq (string3) (string2)(rank:2)
=================================================
Progress: 468


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

0 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true
---------------------------------------
string_eq (string1) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 10
rewrite Cond2 in goal at 0(rank:1)
rewrite IH1 in goal at 0(rank:1)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 3(rank:2)
rewrite <- Cond2 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- IH1 in goal at 0(rank:1)
case string_eq (string3) (string2)(rank:2)
rewrite Cond1 in goal at 0(rank:2)
=================================================
Progress: 469


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> is_mem_ta1 (string_list2) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 6
intro Cond2(rank:1)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 3(rank:2)
case string_eq (string3) (string2)(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 470


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string2) then true else string_eq (string1) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string2) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 10
intro Cond2(rank:1)
rewrite Cond1 in goal at 1(rank:2)
rewrite Cond1 in goal at 3(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite Cond1 in goal at 2(rank:2)
rewrite Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 3(rank:2)
case string_eq (string3) (string2)(rank:2)
=================================================
Progress: 471


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string2) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
intro Cond2(rank:1)
rewrite Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 3(rank:2)
rewrite Cond1 in goal at 2(rank:2)
rewrite Cond1 in goal at 0(rank:2)
case string_eq (string3) (string2)(rank:2)
=================================================
Progress: 472


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true
---------------------------------------
string_eq (string1) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true
---------------------------------------
string_eq (string1) (string2) = true

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite Cond1 in goal at 0(rank:2)
rewrite IH1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 473


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true
---------------------------------------
string_eq (string1) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true
---------------------------------------
is_mem_ta1 (string_list2) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 6
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 3(rank:2)
rewrite <- Cond2 in goal at 0(rank:2)
case string_eq (string3) (string2)(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
=================================================
Progress: 474


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true
---------------------------------------
string_eq (string1) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true
---------------------------------------
string_eq (string1) (string2) = if string_eq (string3) (string2) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
rewrite Cond1 in goal at 0(rank:2)
rewrite Cond1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 3(rank:2)
rewrite <- Cond2 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite Cond1 in goal at 1(rank:2)
case string_eq (string3) (string2)(rank:2)
=================================================
Progress: 475


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
---------------------------------------
forall (string2:string), string1 = string2->false = true -> string_eq (string1) (string2) = false

1 goal(s) more...

1 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
string2 : string
---------------------------------------
string1 = string2->false = true -> string_eq (string1) (string2) = false

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:1)
=================================================
Progress: 476


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
---------------------------------------
string1 = string2->false = true -> string_eq (string1) (string2) = false

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
Cond1 : string1 = string2
---------------------------------------
false = true -> string_eq (string1) (string2) = false

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:0)
=================================================
Progress: 477


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
Cond1 : string1 = string2
---------------------------------------
false = true -> string_eq (string1) (string2) = false

1 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string2:string), string1 = string2->is_mem_ta1 (Cons (string3) (string_list2)) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (Cons (string3) (string_list2)) (string2)

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 2
simpl in goal(rank:0)
rewrite IH1 in goal at 0(rank:1)
=================================================
Progress: 478


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string2:string), string1 = string2->is_mem_ta1 (Cons (string3) (string_list2)) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (Cons (string3) (string_list2)) (string2)

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string2:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
intro string2(rank:1)
rewrite <- IH1 in goal at 0(rank:1)
rewrite <- IH1 in goal at 1(rank:2)
rewrite <- IH1 in goal at 2(rank:1)
rewrite IH1 in goal at 0(rank:1)
=================================================
Progress: 479


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string2:string), string1 = string2->is_mem_ta1 (Cons (string3) (string_list2)) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (Cons (string3) (string_list2)) (string2)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string2:string), string1 = string2->is_mem_ta1 (Cons (string3) (string_list2)) (string2) = true -> is_mem_ta1 (string_list2) (string2) = is_mem_ta1 (Cons (string3) (string_list2)) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
rewrite IH1 in goal at 0


1st goal of : any
string1 : string
string_list1 : string list
string3 : string
---------------------------------------
forall (string_list2:string list) (string2:string), string1 = string2->is_mem_ta1 (Cons (string3) (string_list2)) (string2) = true -> is_mem_ta1 (string_list2) (string2) = is_mem_ta1 (Cons (string3) (string_list2)) (string2)

0 goal(s) more...

0 conjecture(s) more...
state_list
=================================================
Progress: 480


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string2:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

0 goal(s) more...

1 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 6
intro Cond1(rank:1)
rewrite <- IH1 in goal at 0(rank:1)
rewrite <- IH1 in goal at 1(rank:2)
rewrite <- IH1 in goal at 2(rank:1)
case string_eq (string3) (string2)(rank:2)
rewrite IH1 in goal at 0(rank:1)
=================================================
Progress: 481


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string2:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string2:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> is_mem_ta1 (string_list2) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro string2(rank:1)
=================================================
Progress: 482


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string2:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string2:string), string1 = string2->if string_eq (string3) (string2) then true else string_eq (string1) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string2) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro string2(rank:1)
=================================================
Progress: 483


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string2:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string2:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string2) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro string2(rank:1)
=================================================
Progress: 484


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

0 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 11
intro Cond2(rank:1)
rewrite IH1 in goal at 0(rank:1)
rewrite <- IH1 in goal at 0(rank:1)
rewrite <- Cond1 in goal at 3(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- IH1 in goal at 2(rank:1)
rewrite <- IH1 in goal at 1(rank:2)
rewrite Cond1 in goal at 0(rank:2)
case string_eq (string3) (string2)(rank:2)
=================================================
Progress: 485


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> is_mem_ta1 (string_list2) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
intro Cond1(rank:1)
case string_eq (string3) (string2)(rank:2)
=================================================
Progress: 486


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string2) then true else string_eq (string1) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string2) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
intro Cond1(rank:1)
case string_eq (string3) (string2)(rank:2)
=================================================
Progress: 487


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string2) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
intro Cond1(rank:1)
case string_eq (string3) (string2)(rank:2)
=================================================
Progress: 488


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

0 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true
---------------------------------------
string_eq (string1) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 10
rewrite Cond2 in goal at 0(rank:1)
rewrite IH1 in goal at 0(rank:1)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 3(rank:2)
rewrite <- Cond2 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- IH1 in goal at 0(rank:1)
case string_eq (string3) (string2)(rank:2)
rewrite Cond1 in goal at 0(rank:2)
=================================================
Progress: 489


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> is_mem_ta1 (string_list2) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 6
intro Cond2(rank:1)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 3(rank:2)
case string_eq (string3) (string2)(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 490


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string2) then true else string_eq (string1) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string2) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 10
intro Cond2(rank:1)
rewrite Cond1 in goal at 1(rank:2)
rewrite Cond1 in goal at 3(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite Cond1 in goal at 2(rank:2)
rewrite Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 3(rank:2)
case string_eq (string3) (string2)(rank:2)
=================================================
Progress: 491


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string2) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
intro Cond2(rank:1)
rewrite Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 3(rank:2)
rewrite Cond1 in goal at 2(rank:2)
rewrite Cond1 in goal at 0(rank:2)
case string_eq (string3) (string2)(rank:2)
=================================================
Progress: 492


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true
---------------------------------------
string_eq (string1) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true
---------------------------------------
string_eq (string1) (string2) = true

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite Cond1 in goal at 0(rank:2)
rewrite IH1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 493


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true
---------------------------------------
string_eq (string1) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true
---------------------------------------
is_mem_ta1 (string_list2) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 6
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 3(rank:2)
rewrite <- Cond2 in goal at 0(rank:2)
case string_eq (string3) (string2)(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
=================================================
Progress: 494


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true
---------------------------------------
string_eq (string1) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true
---------------------------------------
string_eq (string1) (string2) = if string_eq (string3) (string2) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
rewrite Cond1 in goal at 0(rank:2)
rewrite Cond1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 3(rank:2)
rewrite <- Cond2 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite Cond1 in goal at 1(rank:2)
case string_eq (string3) (string2)(rank:2)
=================================================
Progress: 495


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
---------------------------------------
string1 = string2->false = true -> string_eq (string1) (string2) = false

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
Cond1 : string1 = string2
---------------------------------------
false = true -> string_eq (string1) (string2) = false

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:0)
=================================================
Progress: 496


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
Cond1 : string1 = string2
---------------------------------------
false = true -> string_eq (string1) (string2) = false

1 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string), string1 = string2->is_mem_ta1 (Cons (string3) (string_list2)) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (Cons (string3) (string_list2)) (string2)

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 2
simpl in goal(rank:0)
rewrite IH1 in goal at 0(rank:1)
=================================================
Progress: 497


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string), string1 = string2->is_mem_ta1 (Cons (string3) (string_list2)) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (Cons (string3) (string_list2)) (string2)

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 6
intro string1(rank:1)
rewrite IH1 in goal at 2(rank:1)
rewrite IH1 in goal at 1(rank:2)
rewrite IH1 in goal at 3(rank:2)
case string_eq (string3) (string2)(rank:2)
rewrite IH1 in goal at 0(rank:2)
=================================================
Progress: 498


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string), string1 = string2->is_mem_ta1 (Cons (string3) (string_list2)) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (Cons (string3) (string_list2)) (string2)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string), string1 = string2->is_mem_ta1 (Cons (string3) (string_list2)) (string2) = true -> is_mem_ta1 (string_list2) (string2) = is_mem_ta1 (Cons (string3) (string_list2)) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
rewrite IH1 in goal at 0


1st goal of : any
string2 : string
string_list1 : string list
string3 : string
---------------------------------------
forall (string_list2:string list) (string1:string), string1 = string2->is_mem_ta1 (Cons (string3) (string_list2)) (string2) = true -> is_mem_ta1 (string_list2) (string2) = is_mem_ta1 (Cons (string3) (string_list2)) (string2)

0 goal(s) more...

0 conjecture(s) more...
state_list
=================================================
Progress: 499


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

0 goal(s) more...

1 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 6
intro Cond1(rank:1)
rewrite IH1 in goal at 2(rank:1)
rewrite IH1 in goal at 1(rank:2)
rewrite IH1 in goal at 3(rank:2)
case string_eq (string3) (string2)(rank:2)
rewrite IH1 in goal at 0(rank:2)
=================================================
Progress: 500


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> is_mem_ta1 (string_list2) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
intro string1(rank:1)
rewrite IH1 in goal at 1(rank:2)
rewrite IH1 in goal at 2(rank:2)
case string_eq (string3) (string2)(rank:2)
rewrite IH1 in goal at 0(rank:2)
=================================================
Progress: 501


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

0 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 11
intro Cond2(rank:1)
rewrite IH1 in goal at 2(rank:1)
rewrite IH1 in goal at 0(rank:2)
rewrite IH1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite IH1 in goal at 3(rank:2)
rewrite Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 3(rank:2)
case string_eq (string3) (string2)(rank:2)
=================================================
Progress: 502


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> is_mem_ta1 (string_list2) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
intro Cond1(rank:1)
rewrite IH1 in goal at 1(rank:2)
rewrite IH1 in goal at 2(rank:2)
case string_eq (string3) (string2)(rank:2)
rewrite IH1 in goal at 0(rank:2)
=================================================
Progress: 503


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

0 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true
---------------------------------------
string_eq (string1) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 11
rewrite Cond2 in goal at 0(rank:1)
rewrite IH1 in goal at 1(rank:1)
rewrite IH1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite IH1 in goal at 0(rank:2)
rewrite Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 3(rank:2)
rewrite <- Cond2 in goal at 0(rank:2)
case string_eq (string3) (string2)(rank:2)
=================================================
Progress: 504


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> is_mem_ta1 (string_list2) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
intro Cond2(rank:1)
rewrite IH1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 3(rank:2)
rewrite IH1 in goal at 2(rank:2)
rewrite IH1 in goal at 0(rank:2)
case string_eq (string3) (string2)(rank:2)
=================================================
Progress: 505


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true
---------------------------------------
string_eq (string1) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true
---------------------------------------
string_eq (string1) (string2) = true

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite Cond1 in goal at 0(rank:2)
rewrite IH1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 506


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true
---------------------------------------
string_eq (string1) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true
---------------------------------------
is_mem_ta1 (string_list2) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 7
rewrite IH1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 3(rank:2)
rewrite <- Cond2 in goal at 0(rank:2)
case string_eq (string3) (string2)(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 507


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
string2 : string
---------------------------------------
string1 = string2->false = true -> string_eq (string1) (string2) = false

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
string2 : string
Cond1 : string1 = string2
---------------------------------------
false = true -> string_eq (string1) (string2) = false

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:0)
=================================================
Progress: 508


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
string2 : string
Cond1 : string1 = string2
---------------------------------------
false = true -> string_eq (string1) (string2) = false

1 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (Cons (string3) (string_list2)) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (Cons (string3) (string_list2)) (string2)

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 2
Tactic List : 2
simpl in goal(rank:0)
rewrite IH1 in goal at 0(rank:1)
=================================================
Progress: 509


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (Cons (string3) (string_list2)) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (Cons (string3) (string_list2)) (string2)

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string) (string2:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 6
intro string1(rank:1)
rewrite IH1 in goal at 2(rank:1)
rewrite IH1 in goal at 3(rank:2)
rewrite IH1 in goal at 0(rank:2)
rewrite IH1 in goal at 1(rank:2)
intro string2(rank:1)
=================================================
Progress: 510


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (Cons (string3) (string_list2)) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (Cons (string3) (string_list2)) (string2)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (Cons (string3) (string_list2)) (string2) = true -> is_mem_ta1 (string_list2) (string2) = is_mem_ta1 (Cons (string3) (string_list2)) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
rewrite IH1 in goal at 0


1st goal of : any
string_list1 : string list
string3 : string
---------------------------------------
forall (string_list2:string list) (string1:string) (string2:string), string1 = string2->is_mem_ta1 (Cons (string3) (string_list2)) (string2) = true -> is_mem_ta1 (string_list2) (string2) = is_mem_ta1 (Cons (string3) (string_list2)) (string2)

0 goal(s) more...

0 conjecture(s) more...
state_list
=================================================
Progress: 511


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string) (string2:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

0 goal(s) more...

1 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
---------------------------------------
forall (string2:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
intro string2(rank:1)
rewrite IH1 in goal at 2(rank:1)
rewrite IH1 in goal at 1(rank:2)
rewrite IH1 in goal at 3(rank:2)
rewrite IH1 in goal at 0(rank:2)
=================================================
Progress: 512


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string) (string2:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

0 goal(s) more...

1 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
---------------------------------------
forall (string1:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
rewrite IH1 in goal at 2(rank:1)
rewrite IH1 in goal at 0(rank:2)
rewrite IH1 in goal at 1(rank:2)
case string_eq (string3) (string2)(rank:2)
rewrite IH1 in goal at 3(rank:2)
=================================================
Progress: 513


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string) (string2:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string) (string2:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> is_mem_ta1 (string_list2) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
intro string1(rank:1)
rewrite IH1 in goal at 0(rank:2)
rewrite IH1 in goal at 1(rank:2)
rewrite IH1 in goal at 2(rank:2)
intro string2(rank:1)
=================================================
Progress: 514


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
---------------------------------------
forall (string2:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

0 goal(s) more...

1 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
string2 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 6
intro Cond1(rank:1)
rewrite IH1 in goal at 2(rank:1)
rewrite IH1 in goal at 1(rank:2)
rewrite IH1 in goal at 3(rank:2)
case string_eq (string3) (string2)(rank:2)
rewrite IH1 in goal at 0(rank:2)
=================================================
Progress: 515


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
---------------------------------------
forall (string2:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
---------------------------------------
forall (string2:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> is_mem_ta1 (string_list2) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
intro string2(rank:1)
rewrite IH1 in goal at 0(rank:2)
rewrite IH1 in goal at 1(rank:2)
rewrite IH1 in goal at 2(rank:2)
=================================================
Progress: 516


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
---------------------------------------
forall (string1:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
---------------------------------------
forall (string1:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> is_mem_ta1 (string_list2) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
intro string1(rank:1)
rewrite IH1 in goal at 1(rank:2)
rewrite IH1 in goal at 2(rank:2)
case string_eq (string3) (string2)(rank:2)
rewrite IH1 in goal at 0(rank:2)
=================================================
Progress: 517


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
string2 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

0 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
string2 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 11
intro Cond2(rank:1)
rewrite IH1 in goal at 2(rank:1)
rewrite IH1 in goal at 0(rank:2)
rewrite IH1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite IH1 in goal at 3(rank:2)
rewrite Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 3(rank:2)
case string_eq (string3) (string2)(rank:2)
=================================================
Progress: 518


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
string2 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
string2 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> is_mem_ta1 (string_list2) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
intro Cond1(rank:1)
rewrite IH1 in goal at 1(rank:2)
rewrite IH1 in goal at 2(rank:2)
case string_eq (string3) (string2)(rank:2)
rewrite IH1 in goal at 0(rank:2)
=================================================
Progress: 519


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
string2 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

0 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
string2 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true
---------------------------------------
string_eq (string1) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 11
rewrite Cond2 in goal at 0(rank:1)
rewrite IH1 in goal at 1(rank:1)
rewrite IH1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite IH1 in goal at 0(rank:2)
rewrite Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 3(rank:2)
rewrite <- Cond2 in goal at 0(rank:2)
case string_eq (string3) (string2)(rank:2)
=================================================
Progress: 520


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
string2 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
string2 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> is_mem_ta1 (string_list2) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
intro Cond2(rank:1)
rewrite IH1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 3(rank:2)
rewrite IH1 in goal at 2(rank:2)
rewrite IH1 in goal at 0(rank:2)
case string_eq (string3) (string2)(rank:2)
=================================================
Progress: 521


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
string2 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true
---------------------------------------
string_eq (string1) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
string2 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true
---------------------------------------
string_eq (string1) (string2) = true

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite Cond1 in goal at 0(rank:2)
rewrite IH1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 522


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
string2 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true
---------------------------------------
string_eq (string1) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
string2 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true
---------------------------------------
is_mem_ta1 (string_list2) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 7
rewrite IH1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 3(rank:2)
rewrite <- Cond2 in goal at 0(rank:2)
case string_eq (string3) (string2)(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 523


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> is_mem_ta1 (string_list2) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> is_mem_ta1 (string_list2) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 10
intro Cond2(rank:1)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 3(rank:2)
rewrite <- IH1 in goal at 0(rank:2)
rewrite <- IH1 in goal at 1(rank:2)
rewrite <- IH1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- IH1 in goal at 3(rank:2)
case string_eq (string3) (string2)(rank:2)
=================================================
Progress: 524


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
string1 = string2->if string_eq (string3) (string2) then true else string_eq (string1) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string2) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string2) then true else string_eq (string1) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string2) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 14
intro Cond2(rank:1)
rewrite Cond1 in goal at 1(rank:2)
rewrite Cond1 in goal at 3(rank:2)
rewrite IH1 in goal at 0(rank:2)
rewrite IH1 in goal at 1(rank:2)
rewrite IH1 in goal at 2(rank:2)
rewrite Cond1 in goal at 2(rank:2)
rewrite Cond1 in goal at 0(rank:2)
rewrite IH1 in goal at 3(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 3(rank:2)
case string_eq (string3) (string2)(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 525


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string2) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string2) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
intro Cond2(rank:1)
rewrite Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 3(rank:2)
rewrite Cond1 in goal at 2(rank:2)
rewrite Cond1 in goal at 0(rank:2)
case string_eq (string3) (string2)(rank:2)
=================================================
Progress: 526


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> is_mem_ta1 (string_list2) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true
---------------------------------------
is_mem_ta1 (string_list2) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 10
rewrite Cond2 in goal at 0(rank:1)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 3(rank:2)
rewrite <- Cond2 in goal at 0(rank:2)
rewrite <- IH1 in goal at 0(rank:2)
rewrite <- IH1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- IH1 in goal at 2(rank:2)
case string_eq (string3) (string2)(rank:2)
=================================================
Progress: 527


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string2) then true else string_eq (string1) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string2) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else string_eq (string1) (string2) = true
---------------------------------------
string_eq (string1) (string2) = if string_eq (string3) (string2) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 13
rewrite Cond2 in goal at 0(rank:1)
rewrite Cond1 in goal at 0(rank:2)
rewrite IH1 in goal at 0(rank:2)
rewrite IH1 in goal at 1(rank:2)
rewrite IH1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite Cond1 in goal at 1(rank:2)
rewrite Cond1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 3(rank:2)
rewrite <- Cond2 in goal at 0(rank:2)
case string_eq (string3) (string2)(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
=================================================
Progress: 528


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string2) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true
---------------------------------------
string_eq (string1) (string2) = if string_eq (string3) (string2) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 10
rewrite Cond1 in goal at 0(rank:2)
rewrite Cond1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 3(rank:2)
rewrite IH1 in goal at 0(rank:2)
rewrite Cond1 in goal at 1(rank:2)
rewrite <- Cond2 in goal at 0(rank:2)
case string_eq (string3) (string2)(rank:2)
=================================================
Progress: 529


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string2:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> is_mem_ta1 (string_list2) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

2 goal(s) more...

1 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> is_mem_ta1 (string_list2) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 6
intro Cond1(rank:1)
rewrite <- IH1 in goal at 1(rank:2)
rewrite <- IH1 in goal at 2(rank:2)
rewrite <- IH1 in goal at 3(rank:2)
case string_eq (string3) (string2)(rank:2)
rewrite <- IH1 in goal at 0(rank:2)
=================================================
Progress: 530


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string2:string), string1 = string2->if string_eq (string3) (string2) then true else string_eq (string1) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string2) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string2) then true else string_eq (string1) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string2) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 6
intro Cond1(rank:1)
rewrite IH1 in goal at 1(rank:2)
rewrite IH1 in goal at 2(rank:2)
rewrite IH1 in goal at 3(rank:2)
case string_eq (string3) (string2)(rank:2)
rewrite IH1 in goal at 0(rank:2)
=================================================
Progress: 531


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string2:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string2) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string2) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
intro Cond1(rank:1)
case string_eq (string3) (string2)(rank:2)
=================================================
Progress: 532


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> is_mem_ta1 (string_list2) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> is_mem_ta1 (string_list2) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 10
intro Cond2(rank:1)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 3(rank:2)
rewrite <- IH1 in goal at 0(rank:2)
rewrite <- IH1 in goal at 1(rank:2)
rewrite <- IH1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- IH1 in goal at 3(rank:2)
case string_eq (string3) (string2)(rank:2)
=================================================
Progress: 533


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string2) then true else string_eq (string1) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string2) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string2) then true else string_eq (string1) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string2) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 14
intro Cond2(rank:1)
rewrite Cond1 in goal at 1(rank:2)
rewrite Cond1 in goal at 3(rank:2)
rewrite IH1 in goal at 0(rank:2)
rewrite IH1 in goal at 1(rank:2)
rewrite IH1 in goal at 2(rank:2)
rewrite Cond1 in goal at 2(rank:2)
rewrite Cond1 in goal at 0(rank:2)
rewrite IH1 in goal at 3(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 3(rank:2)
case string_eq (string3) (string2)(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 534


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string2) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string2) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
intro Cond2(rank:1)
rewrite Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 3(rank:2)
rewrite Cond1 in goal at 2(rank:2)
rewrite Cond1 in goal at 0(rank:2)
case string_eq (string3) (string2)(rank:2)
=================================================
Progress: 535


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> is_mem_ta1 (string_list2) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true
---------------------------------------
is_mem_ta1 (string_list2) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 10
rewrite Cond2 in goal at 0(rank:1)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 3(rank:2)
rewrite <- Cond2 in goal at 0(rank:2)
rewrite <- IH1 in goal at 0(rank:2)
rewrite <- IH1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- IH1 in goal at 2(rank:2)
case string_eq (string3) (string2)(rank:2)
=================================================
Progress: 536


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string2) then true else string_eq (string1) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string2) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else string_eq (string1) (string2) = true
---------------------------------------
string_eq (string1) (string2) = if string_eq (string3) (string2) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 13
rewrite Cond2 in goal at 0(rank:1)
rewrite Cond1 in goal at 0(rank:2)
rewrite IH1 in goal at 0(rank:2)
rewrite IH1 in goal at 1(rank:2)
rewrite IH1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite Cond1 in goal at 1(rank:2)
rewrite Cond1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 3(rank:2)
rewrite <- Cond2 in goal at 0(rank:2)
case string_eq (string3) (string2)(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
=================================================
Progress: 537


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string2) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true
---------------------------------------
string_eq (string1) (string2) = if string_eq (string3) (string2) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 10
rewrite Cond1 in goal at 0(rank:2)
rewrite Cond1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 3(rank:2)
rewrite IH1 in goal at 0(rank:2)
rewrite Cond1 in goal at 1(rank:2)
rewrite <- Cond2 in goal at 0(rank:2)
case string_eq (string3) (string2)(rank:2)
=================================================
Progress: 538


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> is_mem_ta1 (string_list2) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

2 goal(s) more...

1 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> is_mem_ta1 (string_list2) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
intro Cond1(rank:1)
rewrite IH1 in goal at 1(rank:2)
rewrite IH1 in goal at 2(rank:2)
case string_eq (string3) (string2)(rank:2)
rewrite IH1 in goal at 0(rank:2)
=================================================
Progress: 539


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> is_mem_ta1 (string_list2) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> is_mem_ta1 (string_list2) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
intro Cond2(rank:1)
rewrite IH1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 3(rank:2)
rewrite IH1 in goal at 2(rank:2)
rewrite IH1 in goal at 0(rank:2)
case string_eq (string3) (string2)(rank:2)
=================================================
Progress: 540


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> is_mem_ta1 (string_list2) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true
---------------------------------------
is_mem_ta1 (string_list2) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 8
rewrite Cond2 in goal at 0(rank:1)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 3(rank:2)
rewrite <- Cond2 in goal at 0(rank:2)
case string_eq (string3) (string2)(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite IH1 in goal at 0(rank:2)
=================================================
Progress: 541


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string) (string2:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> is_mem_ta1 (string_list2) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

2 goal(s) more...

1 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
---------------------------------------
forall (string2:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> is_mem_ta1 (string_list2) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
intro string2(rank:1)
rewrite IH1 in goal at 0(rank:2)
rewrite IH1 in goal at 1(rank:2)
rewrite IH1 in goal at 2(rank:2)
=================================================
Progress: 542


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string) (string2:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> is_mem_ta1 (string_list2) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

2 goal(s) more...

1 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
---------------------------------------
forall (string1:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> is_mem_ta1 (string_list2) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
rewrite IH1 in goal at 0(rank:2)
rewrite IH1 in goal at 1(rank:2)
rewrite IH1 in goal at 2(rank:2)
case string_eq (string3) (string2)(rank:2)
=================================================
Progress: 543


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
---------------------------------------
forall (string2:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> is_mem_ta1 (string_list2) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

2 goal(s) more...

1 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
string2 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> is_mem_ta1 (string_list2) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
intro Cond1(rank:1)
rewrite IH1 in goal at 1(rank:2)
rewrite IH1 in goal at 2(rank:2)
case string_eq (string3) (string2)(rank:2)
rewrite IH1 in goal at 0(rank:2)
=================================================
Progress: 544


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
---------------------------------------
forall (string1:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> is_mem_ta1 (string_list2) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

2 goal(s) more...

1 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
string1 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> is_mem_ta1 (string_list2) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
intro Cond1(rank:1)
rewrite IH1 in goal at 1(rank:2)
rewrite IH1 in goal at 2(rank:2)
case string_eq (string3) (string2)(rank:2)
rewrite IH1 in goal at 0(rank:2)
=================================================
Progress: 545


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
string2 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> is_mem_ta1 (string_list2) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
string2 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> is_mem_ta1 (string_list2) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
intro Cond2(rank:1)
rewrite IH1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 3(rank:2)
rewrite IH1 in goal at 2(rank:2)
rewrite IH1 in goal at 0(rank:2)
case string_eq (string3) (string2)(rank:2)
=================================================
Progress: 546


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
string2 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> is_mem_ta1 (string_list2) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
string2 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true
---------------------------------------
is_mem_ta1 (string_list2) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 8
rewrite Cond2 in goal at 0(rank:1)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 3(rank:2)
rewrite <- Cond2 in goal at 0(rank:2)
case string_eq (string3) (string2)(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite IH1 in goal at 0(rank:2)
=================================================
Progress: 547


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> is_mem_ta1 (string_list2) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true
---------------------------------------
is_mem_ta1 (string_list2) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 10
rewrite Cond2 in goal at 0(rank:1)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 3(rank:2)
rewrite <- Cond2 in goal at 0(rank:2)
rewrite <- IH1 in goal at 0(rank:2)
rewrite <- IH1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- IH1 in goal at 2(rank:2)
case string_eq (string3) (string2)(rank:2)
=================================================
Progress: 548


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string2) then true else string_eq (string1) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string2) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else string_eq (string1) (string2) = true
---------------------------------------
string_eq (string1) (string2) = if string_eq (string3) (string2) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 13
rewrite Cond2 in goal at 0(rank:1)
rewrite Cond1 in goal at 0(rank:2)
rewrite IH1 in goal at 0(rank:2)
rewrite IH1 in goal at 1(rank:2)
rewrite IH1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite Cond1 in goal at 1(rank:2)
rewrite Cond1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 3(rank:2)
rewrite <- Cond2 in goal at 0(rank:2)
case string_eq (string3) (string2)(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
=================================================
Progress: 549


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string2) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true
---------------------------------------
string_eq (string1) (string2) = if string_eq (string3) (string2) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 10
rewrite Cond1 in goal at 0(rank:2)
rewrite Cond1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 3(rank:2)
rewrite IH1 in goal at 0(rank:2)
rewrite Cond1 in goal at 1(rank:2)
rewrite <- Cond2 in goal at 0(rank:2)
case string_eq (string3) (string2)(rank:2)
=================================================
Progress: 550


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true
---------------------------------------
is_mem_ta1 (string_list2) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true
---------------------------------------
is_mem_ta1 (string_list2) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:1)
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 551


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else string_eq (string1) (string2) = true
---------------------------------------
string_eq (string1) (string2) = if string_eq (string3) (string2) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else string_eq (string1) (string2) = true
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite Cond1 in goal at 0(rank:2)
rewrite IH1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 552


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> is_mem_ta1 (string_list2) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> is_mem_ta1 (string_list2) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 10
intro Cond2(rank:1)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 3(rank:2)
rewrite <- IH1 in goal at 0(rank:2)
rewrite <- IH1 in goal at 1(rank:2)
rewrite <- IH1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- IH1 in goal at 3(rank:2)
case string_eq (string3) (string2)(rank:2)
=================================================
Progress: 553


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string2) then true else string_eq (string1) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string2) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string2) then true else string_eq (string1) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string2) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 14
intro Cond2(rank:1)
rewrite Cond1 in goal at 1(rank:2)
rewrite Cond1 in goal at 3(rank:2)
rewrite IH1 in goal at 0(rank:2)
rewrite IH1 in goal at 1(rank:2)
rewrite IH1 in goal at 2(rank:2)
rewrite Cond1 in goal at 2(rank:2)
rewrite Cond1 in goal at 0(rank:2)
rewrite IH1 in goal at 3(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 3(rank:2)
case string_eq (string3) (string2)(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 554


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string2) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string2) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
intro Cond2(rank:1)
rewrite Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 3(rank:2)
rewrite Cond1 in goal at 2(rank:2)
rewrite Cond1 in goal at 0(rank:2)
case string_eq (string3) (string2)(rank:2)
=================================================
Progress: 555


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> is_mem_ta1 (string_list2) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true
---------------------------------------
is_mem_ta1 (string_list2) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 10
rewrite Cond2 in goal at 0(rank:1)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 3(rank:2)
rewrite <- Cond2 in goal at 0(rank:2)
rewrite <- IH1 in goal at 0(rank:2)
rewrite <- IH1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- IH1 in goal at 2(rank:2)
case string_eq (string3) (string2)(rank:2)
=================================================
Progress: 556


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string2) then true else string_eq (string1) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string2) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else string_eq (string1) (string2) = true
---------------------------------------
string_eq (string1) (string2) = if string_eq (string3) (string2) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 13
rewrite Cond2 in goal at 0(rank:1)
rewrite Cond1 in goal at 0(rank:2)
rewrite IH1 in goal at 0(rank:2)
rewrite IH1 in goal at 1(rank:2)
rewrite IH1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite Cond1 in goal at 1(rank:2)
rewrite Cond1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 3(rank:2)
rewrite <- Cond2 in goal at 0(rank:2)
case string_eq (string3) (string2)(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
=================================================
Progress: 557


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string2) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true
---------------------------------------
string_eq (string1) (string2) = if string_eq (string3) (string2) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 10
rewrite Cond1 in goal at 0(rank:2)
rewrite Cond1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 3(rank:2)
rewrite IH1 in goal at 0(rank:2)
rewrite Cond1 in goal at 1(rank:2)
rewrite <- Cond2 in goal at 0(rank:2)
case string_eq (string3) (string2)(rank:2)
=================================================
Progress: 558


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true
---------------------------------------
is_mem_ta1 (string_list2) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true
---------------------------------------
is_mem_ta1 (string_list2) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:1)
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 559


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else string_eq (string1) (string2) = true
---------------------------------------
string_eq (string1) (string2) = if string_eq (string3) (string2) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else string_eq (string1) (string2) = true
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite Cond1 in goal at 0(rank:2)
rewrite IH1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 560


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> is_mem_ta1 (string_list2) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> is_mem_ta1 (string_list2) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
intro Cond2(rank:1)
rewrite IH1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 3(rank:2)
rewrite IH1 in goal at 2(rank:2)
rewrite IH1 in goal at 0(rank:2)
case string_eq (string3) (string2)(rank:2)
=================================================
Progress: 561


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> is_mem_ta1 (string_list2) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true
---------------------------------------
is_mem_ta1 (string_list2) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 8
rewrite Cond2 in goal at 0(rank:1)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 3(rank:2)
rewrite <- Cond2 in goal at 0(rank:2)
case string_eq (string3) (string2)(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite IH1 in goal at 0(rank:2)
=================================================
Progress: 562


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true
---------------------------------------
is_mem_ta1 (string_list2) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true
---------------------------------------
is_mem_ta1 (string_list2) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 563


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
---------------------------------------
forall (string2:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> is_mem_ta1 (string_list2) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

2 goal(s) more...

1 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
string2 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> is_mem_ta1 (string_list2) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
intro Cond1(rank:1)
rewrite IH1 in goal at 1(rank:2)
rewrite IH1 in goal at 2(rank:2)
case string_eq (string3) (string2)(rank:2)
rewrite IH1 in goal at 0(rank:2)
=================================================
Progress: 564


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
string2 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> is_mem_ta1 (string_list2) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
string2 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> is_mem_ta1 (string_list2) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
intro Cond2(rank:1)
rewrite IH1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 3(rank:2)
rewrite IH1 in goal at 2(rank:2)
rewrite IH1 in goal at 0(rank:2)
case string_eq (string3) (string2)(rank:2)
=================================================
Progress: 565


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
string1 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> is_mem_ta1 (string_list2) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
string1 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> is_mem_ta1 (string_list2) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
intro Cond2(rank:1)
rewrite IH1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 3(rank:2)
rewrite IH1 in goal at 2(rank:2)
rewrite IH1 in goal at 0(rank:2)
case string_eq (string3) (string2)(rank:2)
=================================================
Progress: 566


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
string2 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> is_mem_ta1 (string_list2) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
string2 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true
---------------------------------------
is_mem_ta1 (string_list2) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 8
rewrite Cond2 in goal at 0(rank:1)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 3(rank:2)
rewrite <- Cond2 in goal at 0(rank:2)
case string_eq (string3) (string2)(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite IH1 in goal at 0(rank:2)
=================================================
Progress: 567


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
string2 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true
---------------------------------------
is_mem_ta1 (string_list2) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
string2 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true
---------------------------------------
is_mem_ta1 (string_list2) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 568


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true
---------------------------------------
is_mem_ta1 (string_list2) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true
---------------------------------------
is_mem_ta1 (string_list2) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:1)
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 569


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else string_eq (string1) (string2) = true
---------------------------------------
string_eq (string1) (string2) = if string_eq (string3) (string2) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else string_eq (string1) (string2) = true
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite Cond1 in goal at 0(rank:2)
rewrite IH1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 570


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true
---------------------------------------
is_mem_ta1 (string_list2) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true
---------------------------------------
string_eq (string1) (string2) = true

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 571


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> is_mem_ta1 (string_list2) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true
---------------------------------------
is_mem_ta1 (string_list2) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 10
rewrite Cond2 in goal at 0(rank:1)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 3(rank:2)
rewrite <- Cond2 in goal at 0(rank:2)
rewrite <- IH1 in goal at 0(rank:2)
rewrite <- IH1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- IH1 in goal at 2(rank:2)
case string_eq (string3) (string2)(rank:2)
=================================================
Progress: 572


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string2) then true else string_eq (string1) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string2) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else string_eq (string1) (string2) = true
---------------------------------------
string_eq (string1) (string2) = if string_eq (string3) (string2) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 13
rewrite Cond2 in goal at 0(rank:1)
rewrite Cond1 in goal at 0(rank:2)
rewrite IH1 in goal at 0(rank:2)
rewrite IH1 in goal at 1(rank:2)
rewrite IH1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite Cond1 in goal at 1(rank:2)
rewrite Cond1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 3(rank:2)
rewrite <- Cond2 in goal at 0(rank:2)
case string_eq (string3) (string2)(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
=================================================
Progress: 573


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string2) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true
---------------------------------------
string_eq (string1) (string2) = if string_eq (string3) (string2) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 10
rewrite Cond1 in goal at 0(rank:2)
rewrite Cond1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 3(rank:2)
rewrite IH1 in goal at 0(rank:2)
rewrite Cond1 in goal at 1(rank:2)
rewrite <- Cond2 in goal at 0(rank:2)
case string_eq (string3) (string2)(rank:2)
=================================================
Progress: 574


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true
---------------------------------------
is_mem_ta1 (string_list2) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true
---------------------------------------
is_mem_ta1 (string_list2) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:1)
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 575


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else string_eq (string1) (string2) = true
---------------------------------------
string_eq (string1) (string2) = if string_eq (string3) (string2) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else string_eq (string1) (string2) = true
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite Cond1 in goal at 0(rank:2)
rewrite IH1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 576


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true
---------------------------------------
is_mem_ta1 (string_list2) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true
---------------------------------------
string_eq (string1) (string2) = true

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 577


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> is_mem_ta1 (string_list2) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true
---------------------------------------
is_mem_ta1 (string_list2) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 8
rewrite Cond2 in goal at 0(rank:1)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 3(rank:2)
rewrite <- Cond2 in goal at 0(rank:2)
case string_eq (string3) (string2)(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite IH1 in goal at 0(rank:2)
=================================================
Progress: 578


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true
---------------------------------------
is_mem_ta1 (string_list2) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true
---------------------------------------
is_mem_ta1 (string_list2) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 579


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
string2 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> is_mem_ta1 (string_list2) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
string2 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> is_mem_ta1 (string_list2) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
intro Cond2(rank:1)
rewrite IH1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 3(rank:2)
rewrite IH1 in goal at 2(rank:2)
rewrite IH1 in goal at 0(rank:2)
case string_eq (string3) (string2)(rank:2)
=================================================
Progress: 580


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
string2 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> is_mem_ta1 (string_list2) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
string2 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true
---------------------------------------
is_mem_ta1 (string_list2) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 8
rewrite Cond2 in goal at 0(rank:1)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 3(rank:2)
rewrite <- Cond2 in goal at 0(rank:2)
case string_eq (string3) (string2)(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite IH1 in goal at 0(rank:2)
=================================================
Progress: 581


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
string1 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> is_mem_ta1 (string_list2) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
string1 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true
---------------------------------------
is_mem_ta1 (string_list2) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 8
rewrite Cond2 in goal at 0(rank:1)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 3(rank:2)
rewrite <- Cond2 in goal at 0(rank:2)
case string_eq (string3) (string2)(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite IH1 in goal at 0(rank:2)
=================================================
Progress: 582


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
string2 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true
---------------------------------------
is_mem_ta1 (string_list2) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
string2 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true
---------------------------------------
is_mem_ta1 (string_list2) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 583


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true
---------------------------------------
is_mem_ta1 (string_list2) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true
---------------------------------------
string_eq (string1) (string2) = true

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 584


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true
---------------------------------------
is_mem_ta1 (string_list2) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true
---------------------------------------
is_mem_ta1 (string_list2) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:1)
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 585


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else string_eq (string1) (string2) = true
---------------------------------------
string_eq (string1) (string2) = if string_eq (string3) (string2) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else string_eq (string1) (string2) = true
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite Cond1 in goal at 0(rank:2)
rewrite IH1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 586


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true
---------------------------------------
is_mem_ta1 (string_list2) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true
---------------------------------------
string_eq (string1) (string2) = true

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 587


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true
---------------------------------------
is_mem_ta1 (string_list2) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true
---------------------------------------
is_mem_ta1 (string_list2) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 588


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
string2 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true -> is_mem_ta1 (string_list2) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
string2 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true
---------------------------------------
is_mem_ta1 (string_list2) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 8
rewrite Cond2 in goal at 0(rank:1)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 3(rank:2)
rewrite <- Cond2 in goal at 0(rank:2)
case string_eq (string3) (string2)(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite IH1 in goal at 0(rank:2)
=================================================
Progress: 589


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
string2 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true
---------------------------------------
is_mem_ta1 (string_list2) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
string2 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true
---------------------------------------
is_mem_ta1 (string_list2) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 590


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
string1 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true
---------------------------------------
is_mem_ta1 (string_list2) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
string1 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true
---------------------------------------
is_mem_ta1 (string_list2) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 591


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true
---------------------------------------
is_mem_ta1 (string_list2) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true
---------------------------------------
string_eq (string1) (string2) = true

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 592


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
string2 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true
---------------------------------------
is_mem_ta1 (string_list2) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string2) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
string2 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true
---------------------------------------
is_mem_ta1 (string_list2) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 593


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)

---------------------------------------
forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (string_list1) (string2) = true -> is_mem_ta1 (string_list1) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string1 : string
---------------------------------------
forall (string2:string) (string3:string) (string_list1:string list), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (string_list1) (string2) = true -> is_mem_ta1 (string_list1) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
induction string_list1(rank:0)
intro string2(rank:1)
intro string3(rank:1)
=================================================
Progress: 594


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string1 : string
---------------------------------------
forall (string2:string) (string3:string) (string_list1:string list), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (string_list1) (string2) = true -> is_mem_ta1 (string_list1) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

2 conjecture(s) more...
>>> induction string_list1(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string1 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> is_mem_ta1 (Nil) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 595


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string1 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> is_mem_ta1 (Nil) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string1 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro string2(rank:1)
intro string3(rank:1)
=================================================
Progress: 596


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)

---------------------------------------
forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (string_list1) (string2) = true -> is_mem_ta1 (string_list1) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string2 : string
---------------------------------------
forall (string1:string) (string3:string) (string_list1:string list), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (string_list1) (string2) = true -> is_mem_ta1 (string_list1) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
induction string_list1(rank:0)
intro string3(rank:1)
=================================================
Progress: 597


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string2 : string
---------------------------------------
forall (string1:string) (string3:string) (string_list1:string list), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (string_list1) (string2) = true -> is_mem_ta1 (string_list1) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

2 conjecture(s) more...
>>> induction string_list1(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string) (string3:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> is_mem_ta1 (Nil) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 598


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string) (string3:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> is_mem_ta1 (Nil) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string) (string3:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro string1(rank:1)
intro string3(rank:1)
=================================================
Progress: 599


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)

---------------------------------------
forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (string_list1) (string2) = true -> is_mem_ta1 (string_list1) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

2 conjecture(s) more...
>>> intro string3(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string3 : string
---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (string_list1) (string2) = true -> is_mem_ta1 (string_list1) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction string_list1(rank:0)
=================================================
Progress: 600


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string3 : string
---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (string_list1) (string2) = true -> is_mem_ta1 (string_list1) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

2 conjecture(s) more...
>>> induction string_list1(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string) (string2:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> is_mem_ta1 (Nil) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 601


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string) (string2:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> is_mem_ta1 (Nil) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string) (string2:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro string1(rank:1)
intro string2(rank:1)
=================================================
Progress: 602


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string1 : string
---------------------------------------
forall (string2:string) (string3:string) (string_list1:string list), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (string_list1) (string2) = true -> is_mem_ta1 (string_list1) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string1 : string
string2 : string
---------------------------------------
forall (string3:string) (string_list1:string list), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (string_list1) (string2) = true -> is_mem_ta1 (string_list1) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
induction string_list1(rank:0)
intro string3(rank:1)
=================================================
Progress: 603


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string1 : string
string2 : string
---------------------------------------
forall (string3:string) (string_list1:string list), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (string_list1) (string2) = true -> is_mem_ta1 (string_list1) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

2 conjecture(s) more...
>>> induction string_list1(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string1 : string
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string3:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> is_mem_ta1 (Nil) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 604


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string1 : string
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string3:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> is_mem_ta1 (Nil) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string1 : string
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string3:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string3(rank:1)
=================================================
Progress: 605


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string1 : string
---------------------------------------
forall (string2:string) (string3:string) (string_list1:string list), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (string_list1) (string2) = true -> is_mem_ta1 (string_list1) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

2 conjecture(s) more...
>>> intro string3(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string1 : string
string3 : string
---------------------------------------
forall (string2:string) (string_list1:string list), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (string_list1) (string2) = true -> is_mem_ta1 (string_list1) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction string_list1(rank:0)
=================================================
Progress: 606


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string1 : string
string3 : string
---------------------------------------
forall (string2:string) (string_list1:string list), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (string_list1) (string2) = true -> is_mem_ta1 (string_list1) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

2 conjecture(s) more...
>>> induction string_list1(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string1 : string
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string2:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> is_mem_ta1 (Nil) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 607


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string1 : string
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string2:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> is_mem_ta1 (Nil) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string1 : string
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string2:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string2(rank:1)
=================================================
Progress: 608


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string2 : string
---------------------------------------
forall (string1:string) (string3:string) (string_list1:string list), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (string_list1) (string2) = true -> is_mem_ta1 (string_list1) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

2 conjecture(s) more...
>>> intro string3(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string2 : string
string3 : string
---------------------------------------
forall (string1:string) (string_list1:string list), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (string_list1) (string2) = true -> is_mem_ta1 (string_list1) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
induction string_list1(rank:0)
case string_eq (string3) (string2)(rank:2)
=================================================
Progress: 609


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string2 : string
string3 : string
---------------------------------------
forall (string1:string) (string_list1:string list), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (string_list1) (string2) = true -> is_mem_ta1 (string_list1) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

2 conjecture(s) more...
>>> induction string_list1(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string2 : string
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> is_mem_ta1 (Nil) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 610


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string2 : string
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> is_mem_ta1 (Nil) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string2 : string
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:1)
=================================================
Progress: 611


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string1 : string
string2 : string
---------------------------------------
forall (string3:string) (string_list1:string list), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (string_list1) (string2) = true -> is_mem_ta1 (string_list1) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

2 conjecture(s) more...
>>> intro string3(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string1 : string
string2 : string
string3 : string
---------------------------------------
forall (string_list1:string list), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (string_list1) (string2) = true -> is_mem_ta1 (string_list1) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
induction string_list1(rank:0)
case string_eq (string3) (string2)(rank:2)
=================================================
Progress: 612


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string1 : string
string2 : string
string3 : string
---------------------------------------
forall (string_list1:string list), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (string_list1) (string2) = true -> is_mem_ta1 (string_list1) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

2 conjecture(s) more...
>>> induction string_list1(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string1 : string
string2 : string
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> is_mem_ta1 (Nil) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 613


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string1 : string
string2 : string
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> is_mem_ta1 (Nil) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string1 : string
string2 : string
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:1)
=================================================
Progress: 614


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
---------------------------------------
forall (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro string2(rank:1)
intro string3(rank:1)
=================================================
Progress: 615


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
---------------------------------------
forall (string1:string) (string3:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string3(rank:1)
=================================================
Progress: 616


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
>>> intro string3(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string_list1 : string list
Base1 : string_list1 = Nil
string3 : string
---------------------------------------
forall (string1:string) (string2:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string3
state_list
New Env

;;
Lemma List
forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)
End of Lemma List
=================================================
Progress: 617


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
intro string1(rank:1)
intro string2(rank:1)
intro string3(rank:1)
=================================================
Progress: 618


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string1 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string1 : string
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
---------------------------------------
forall (string3:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string3(rank:1)
=================================================
Progress: 619


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string1 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
>>> intro string3(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string1 : string
string_list1 : string list
Base1 : string_list1 = Nil
string3 : string
---------------------------------------
forall (string2:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string3
state_list
=================================================
Progress: 620


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string) (string3:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
---------------------------------------
forall (string3:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string3(rank:1)
=================================================
Progress: 621


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string) (string3:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
>>> intro string3(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
string3 : string
---------------------------------------
forall (string1:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case string_eq (string3) (string2)(rank:0)
=================================================
Progress: 622


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
string3 : string
---------------------------------------
forall (string1:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
string3 : string
Case1 : string_eq (string3) (string2) = true
---------------------------------------
forall (string1:string), string1 = string2->true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case1 at 0(rank:0)
intro string1(rank:1)
rewrite <- string_eqb_eq in Case1 at 0(rank:0)
=================================================
Progress: 623


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
string3 : string
Case1 : string_eq (string3) (string2) = true
---------------------------------------
forall (string1:string), string1 = string2->true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
string3 : string
Case1 : string3 = string2
---------------------------------------
forall (string1:string), string1 = string2->true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro string1(rank:1)
rewrite <- Case1 in goal at 0(rank:2)
=================================================
Progress: 624


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
string3 : string
Case1 : string_eq (string3) (string2) = true
---------------------------------------
forall (string1:string), string1 = string2->true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
string3 : string
Case1 : string2 = string3
---------------------------------------
forall (string1:string), string1 = string2->true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro string1(rank:1)
rewrite Case1 in goal at 0(rank:2)
=================================================
Progress: 625


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string) (string2:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
---------------------------------------
forall (string2:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string2(rank:1)
=================================================
Progress: 626


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string) (string2:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
---------------------------------------
forall (string1:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case string_eq (string3) (string2)(rank:0)
=================================================
Progress: 627


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
---------------------------------------
forall (string1:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
Case1 : string_eq (string3) (string2) = true
---------------------------------------
forall (string1:string), string1 = string2->true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case1 at 0(rank:0)
intro string1(rank:1)
rewrite <- string_eqb_eq in Case1 at 0(rank:0)
=================================================
Progress: 628


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
Case1 : string_eq (string3) (string2) = true
---------------------------------------
forall (string1:string), string1 = string2->true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
Case1 : string3 = string2
---------------------------------------
forall (string1:string), string1 = string2->true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro string1(rank:1)
rewrite <- Case1 in goal at 0(rank:2)
=================================================
Progress: 629


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
Case1 : string_eq (string3) (string2) = true
---------------------------------------
forall (string1:string), string1 = string2->true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
Case1 : string2 = string3
---------------------------------------
forall (string1:string), string1 = string2->true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro string1(rank:1)
rewrite Case1 in goal at 0(rank:2)
=================================================
Progress: 630


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string1 : string
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string3:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
>>> intro string3(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string1 : string
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
string3 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro Cond1(rank:1)
case string_eq (string3) (string2)(rank:2)
=================================================
Progress: 631


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string1 : string
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string2:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string1 : string
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro Cond1(rank:1)
case string_eq (string3) (string2)(rank:2)
=================================================
Progress: 632


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string2 : string
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string2 : string
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro Cond1(rank:1)
case string_eq (string3) (string2)(rank:2)
=================================================
Progress: 633


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string1 : string
string2 : string
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string1 : string
string2 : string
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
intro Cond2(rank:1)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 3(rank:2)
case string_eq (string3) (string2)(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 634


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
---------------------------------------
forall (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
string2 : string
---------------------------------------
forall (string3:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string3(rank:1)
=================================================
Progress: 635


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
---------------------------------------
forall (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
>>> intro string3(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
string3 : string
---------------------------------------
forall (string2:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 636


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
---------------------------------------
forall (string1:string) (string3:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
>>> intro string3(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
string3 : string
---------------------------------------
forall (string1:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case string_eq (string3) (string2)(rank:0)
=================================================
Progress: 637


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
string3 : string
---------------------------------------
forall (string1:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
string3 : string
Case1 : string_eq (string3) (string2) = true
---------------------------------------
forall (string1:string), string1 = string2->true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case1 at 0(rank:0)
intro string1(rank:1)
rewrite <- string_eqb_eq in Case1 at 0(rank:0)
=================================================
Progress: 638


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
string3 : string
Case1 : string_eq (string3) (string2) = true
---------------------------------------
forall (string1:string), string1 = string2->true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
string3 : string
Case1 : string3 = string2
---------------------------------------
forall (string1:string), string1 = string2->true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro string1(rank:1)
rewrite <- Case1 in goal at 0(rank:2)
=================================================
Progress: 639


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
string3 : string
Case1 : string_eq (string3) (string2) = true
---------------------------------------
forall (string1:string), string1 = string2->true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
string3 : string
Case1 : string2 = string3
---------------------------------------
forall (string1:string), string1 = string2->true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro string1(rank:1)
rewrite Case1 in goal at 0(rank:2)
=================================================
Progress: 640


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string1 : string
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
---------------------------------------
forall (string3:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
>>> intro string3(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string1 : string
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
string3 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro Cond1(rank:1)
case string_eq (string3) (string2)(rank:2)
=================================================
Progress: 641


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
---------------------------------------
forall (string3:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
>>> intro string3(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
string3 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro Cond1(rank:1)
case string_eq (string3) (string2)(rank:2)
=================================================
Progress: 642


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
---------------------------------------
forall (string2:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
string2 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro Cond1(rank:1)
case string_eq (string3) (string2)(rank:2)
=================================================
Progress: 643


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string1 : string
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
string3 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string1 : string
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
string3 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
intro Cond2(rank:1)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 3(rank:2)
case string_eq (string3) (string2)(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 644


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string1 : string
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string1 : string
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
intro Cond2(rank:1)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 3(rank:2)
case string_eq (string3) (string2)(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 645


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string2 : string
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string2 : string
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
intro Cond2(rank:1)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 3(rank:2)
case string_eq (string3) (string2)(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 646


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string1 : string
string2 : string
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string1 : string
string2 : string
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true
---------------------------------------
false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
rewrite Cond2 in goal at 0(rank:1)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- Cond2 in goal at 0(rank:2)
case string_eq (string3) (string2)(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 647


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
string2 : string
---------------------------------------
forall (string3:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
>>> intro string3(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
string2 : string
string3 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro Cond1(rank:1)
case string_eq (string3) (string2)(rank:2)
=================================================
Progress: 648


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string1 : string
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
string3 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string1 : string
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
string3 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
intro Cond2(rank:1)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 3(rank:2)
case string_eq (string3) (string2)(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 649


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
string3 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
string3 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
intro Cond2(rank:1)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 3(rank:2)
case string_eq (string3) (string2)(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 650


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
string2 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
string2 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
intro Cond2(rank:1)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 3(rank:2)
case string_eq (string3) (string2)(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 651


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string1 : string
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
string3 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string1 : string
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
string3 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true
---------------------------------------
false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
rewrite Cond2 in goal at 0(rank:1)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- Cond2 in goal at 0(rank:2)
case string_eq (string3) (string2)(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 652


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string1 : string
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string1 : string
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true
---------------------------------------
false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
rewrite Cond2 in goal at 0(rank:1)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- Cond2 in goal at 0(rank:2)
case string_eq (string3) (string2)(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 653


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string2 : string
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string2 : string
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true
---------------------------------------
false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
rewrite Cond2 in goal at 0(rank:1)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- Cond2 in goal at 0(rank:2)
case string_eq (string3) (string2)(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 654


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string1 : string
string2 : string
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true
---------------------------------------
false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string1 : string
string2 : string
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true
---------------------------------------
false = true

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
rewrite Cond2 in goal at 0
state_list
=================================================
Progress: 655


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
string2 : string
string3 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
string2 : string
string3 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
intro Cond2(rank:1)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 3(rank:2)
case string_eq (string3) (string2)(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 656


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string1 : string
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
string3 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string1 : string
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
string3 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true
---------------------------------------
false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
rewrite Cond2 in goal at 0(rank:1)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- Cond2 in goal at 0(rank:2)
case string_eq (string3) (string2)(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 657


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
string3 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
string3 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true
---------------------------------------
false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
rewrite Cond2 in goal at 0(rank:1)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- Cond2 in goal at 0(rank:2)
case string_eq (string3) (string2)(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 658


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
string2 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
string2 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true
---------------------------------------
false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
rewrite Cond2 in goal at 0(rank:1)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- Cond2 in goal at 0(rank:2)
case string_eq (string3) (string2)(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 659


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string1 : string
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
string3 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true
---------------------------------------
false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string1 : string
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
string3 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true
---------------------------------------
false = true

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 660


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string1 : string
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true
---------------------------------------
false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string1 : string
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true
---------------------------------------
false = true

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 661


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string2 : string
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true
---------------------------------------
false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string2 : string
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true
---------------------------------------
false = true

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 662


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
string2 : string
string3 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
string2 : string
string3 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true
---------------------------------------
false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
rewrite Cond2 in goal at 0(rank:1)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- Cond2 in goal at 0(rank:2)
case string_eq (string3) (string2)(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 663


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string1 : string
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
string3 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true
---------------------------------------
false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string1 : string
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
string3 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true
---------------------------------------
false = true

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 664


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
string3 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true
---------------------------------------
false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
string3 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true
---------------------------------------
false = true

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 665


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
string2 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true
---------------------------------------
false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
string2 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true
---------------------------------------
false = true

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 666


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
string2 : string
string3 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true
---------------------------------------
false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
string2 : string
string3 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true
---------------------------------------
false = true

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 667


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
string3 : string
Case1 : string_eq (string3) (string2) = true
---------------------------------------
forall (string1:string), string1 = string2->true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
string3 : string
Case1 : string_eq (string3) (string2) = true
string1 : string
---------------------------------------
string1 = string2->true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 5
intro Cond1(rank:1)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 3(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
=================================================
Progress: 668


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
string3 : string
Case1 : string3 = string2
---------------------------------------
forall (string1:string), string1 = string2->true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
string3 : string
Case1 : string3 = string2
string1 : string
---------------------------------------
string1 = string2->true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro Cond1(rank:1)
rewrite <- Case1 in goal at 0(rank:2)
=================================================
Progress: 669


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
string3 : string
Case1 : string2 = string3
---------------------------------------
forall (string1:string), string1 = string2->true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
string3 : string
Case1 : string2 = string3
string1 : string
---------------------------------------
string1 = string2->true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro Cond1(rank:1)
rewrite Case1 in goal at 0(rank:2)
=================================================
Progress: 670


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
Case1 : string_eq (string3) (string2) = true
---------------------------------------
forall (string1:string), string1 = string2->true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
Case1 : string_eq (string3) (string2) = true
string1 : string
---------------------------------------
string1 = string2->true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 5
intro Cond1(rank:1)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 3(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
=================================================
Progress: 671


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
Case1 : string3 = string2
---------------------------------------
forall (string1:string), string1 = string2->true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
Case1 : string3 = string2
string1 : string
---------------------------------------
string1 = string2->true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro Cond1(rank:1)
rewrite <- Case1 in goal at 0(rank:2)
=================================================
Progress: 672


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
Case1 : string2 = string3
---------------------------------------
forall (string1:string), string1 = string2->true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
Case1 : string2 = string3
string1 : string
---------------------------------------
string1 = string2->true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro Cond1(rank:1)
rewrite Case1 in goal at 0(rank:2)
=================================================
Progress: 673


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
string3 : string
Case1 : string_eq (string3) (string2) = true
---------------------------------------
forall (string1:string), string1 = string2->true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
string3 : string
Case1 : string_eq (string3) (string2) = true
string1 : string
---------------------------------------
string1 = string2->true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 5
intro Cond1(rank:1)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 3(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
=================================================
Progress: 674


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
string3 : string
Case1 : string3 = string2
---------------------------------------
forall (string1:string), string1 = string2->true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
string3 : string
Case1 : string3 = string2
string1 : string
---------------------------------------
string1 = string2->true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro Cond1(rank:1)
rewrite <- Case1 in goal at 0(rank:2)
=================================================
Progress: 675


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
string3 : string
Case1 : string2 = string3
---------------------------------------
forall (string1:string), string1 = string2->true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
string3 : string
Case1 : string2 = string3
string1 : string
---------------------------------------
string1 = string2->true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro Cond1(rank:1)
rewrite Case1 in goal at 0(rank:2)
=================================================
Progress: 676


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
string3 : string
Case1 : string_eq (string3) (string2) = true
string1 : string
---------------------------------------
string1 = string2->true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
string3 : string
Case1 : string_eq (string3) (string2) = true
string1 : string
Cond1 : string1 = string2
---------------------------------------
true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 5
intro Cond2(rank:1)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 3(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
=================================================
Progress: 677


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
string3 : string
Case1 : string3 = string2
string1 : string
---------------------------------------
string1 = string2->true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
string3 : string
Case1 : string3 = string2
string1 : string
Cond1 : string1 = string2
---------------------------------------
true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:1)
=================================================
Progress: 678


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
string3 : string
Case1 : string2 = string3
string1 : string
---------------------------------------
string1 = string2->true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
string3 : string
Case1 : string2 = string3
string1 : string
Cond1 : string1 = string2
---------------------------------------
true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:1)
=================================================
Progress: 679


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
Case1 : string_eq (string3) (string2) = true
string1 : string
---------------------------------------
string1 = string2->true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
Case1 : string_eq (string3) (string2) = true
string1 : string
Cond1 : string1 = string2
---------------------------------------
true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 5
intro Cond2(rank:1)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 3(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
=================================================
Progress: 680


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
Case1 : string3 = string2
string1 : string
---------------------------------------
string1 = string2->true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
Case1 : string3 = string2
string1 : string
Cond1 : string1 = string2
---------------------------------------
true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:1)
=================================================
Progress: 681


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
Case1 : string2 = string3
string1 : string
---------------------------------------
string1 = string2->true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
Case1 : string2 = string3
string1 : string
Cond1 : string1 = string2
---------------------------------------
true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:1)
=================================================
Progress: 682


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
string3 : string
Case1 : string_eq (string3) (string2) = true
string1 : string
---------------------------------------
string1 = string2->true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
string3 : string
Case1 : string_eq (string3) (string2) = true
string1 : string
Cond1 : string1 = string2
---------------------------------------
true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 5
intro Cond2(rank:1)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 3(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
=================================================
Progress: 683


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
string3 : string
Case1 : string3 = string2
string1 : string
---------------------------------------
string1 = string2->true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
string3 : string
Case1 : string3 = string2
string1 : string
Cond1 : string1 = string2
---------------------------------------
true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:1)
=================================================
Progress: 684


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
string3 : string
Case1 : string2 = string3
string1 : string
---------------------------------------
string1 = string2->true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
string3 : string
Case1 : string2 = string3
string1 : string
Cond1 : string1 = string2
---------------------------------------
true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:1)
=================================================
Progress: 685


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
string3 : string
Case1 : string_eq (string3) (string2) = true
string1 : string
Cond1 : string1 = string2
---------------------------------------
true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
string3 : string
Case1 : string_eq (string3) (string2) = true
string1 : string
Cond1 : string1 = string2
Cond2 : true = true
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:2)
=================================================
Progress: 686


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
string3 : string
Case1 : string3 = string2
string1 : string
Cond1 : string1 = string2
---------------------------------------
true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
string3 : string
Case1 : string3 = string2
string1 : string
Cond1 : string1 = string2
Cond2 : true = true
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 687


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
string3 : string
Case1 : string2 = string3
string1 : string
Cond1 : string1 = string2
---------------------------------------
true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
string3 : string
Case1 : string2 = string3
string1 : string
Cond1 : string1 = string2
Cond2 : true = true
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 688


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
Case1 : string_eq (string3) (string2) = true
string1 : string
Cond1 : string1 = string2
---------------------------------------
true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
Case1 : string_eq (string3) (string2) = true
string1 : string
Cond1 : string1 = string2
Cond2 : true = true
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:2)
=================================================
Progress: 689


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
Case1 : string3 = string2
string1 : string
Cond1 : string1 = string2
---------------------------------------
true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
Case1 : string3 = string2
string1 : string
Cond1 : string1 = string2
Cond2 : true = true
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 690


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
Case1 : string2 = string3
string1 : string
Cond1 : string1 = string2
---------------------------------------
true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
Case1 : string2 = string3
string1 : string
Cond1 : string1 = string2
Cond2 : true = true
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 691


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
string3 : string
Case1 : string_eq (string3) (string2) = true
string1 : string
Cond1 : string1 = string2
---------------------------------------
true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
string3 : string
Case1 : string_eq (string3) (string2) = true
string1 : string
Cond1 : string1 = string2
Cond2 : true = true
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:2)
=================================================
Progress: 692


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
string3 : string
Case1 : string3 = string2
string1 : string
Cond1 : string1 = string2
---------------------------------------
true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
string3 : string
Case1 : string3 = string2
string1 : string
Cond1 : string1 = string2
Cond2 : true = true
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 693


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
string3 : string
Case1 : string2 = string3
string1 : string
Cond1 : string1 = string2
---------------------------------------
true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string2) = true -> is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (Cons (string3) (string_list1)) (string2)
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
string3 : string
Case1 : string2 = string3
string1 : string
Cond1 : string1 = string2
Cond2 : true = true
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 694


1st goal of : forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

0 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)
string1 : string
---------------------------------------
forall (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
intro string2(rank:1)
intro string3(rank:1)
=================================================
Progress: 695


1st goal of : forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

0 goal(s) more...

3 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)
string2 : string
---------------------------------------
forall (string1:string) (string3:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string3(rank:1)
=================================================
Progress: 696


1st goal of : forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

0 goal(s) more...

3 conjecture(s) more...
>>> intro string3(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)
string3 : string
---------------------------------------
forall (string1:string) (string2:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 697


1st goal of : forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)
string1 : string
---------------------------------------
forall (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

0 goal(s) more...

3 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)
string1 : string
string2 : string
---------------------------------------
forall (string3:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string3(rank:1)
=================================================
Progress: 698


1st goal of : forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)
string1 : string
---------------------------------------
forall (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

0 goal(s) more...

3 conjecture(s) more...
>>> intro string3(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)
string1 : string
string3 : string
---------------------------------------
forall (string2:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 699


1st goal of : forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)
string2 : string
---------------------------------------
forall (string1:string) (string3:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

0 goal(s) more...

3 conjecture(s) more...
>>> intro string3(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)
string2 : string
string3 : string
---------------------------------------
forall (string1:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string3) (string2)(rank:0)
=================================================
Progress: 700


1st goal of : forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)
string2 : string
string3 : string
---------------------------------------
forall (string1:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

0 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)
string2 : string
string3 : string
Case1 : string_eq (string3) (string2) = true
---------------------------------------
forall (string1:string), string1 = string2->true = true -> false = true

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case1 at 0(rank:0)
intro string1(rank:1)
rewrite <- string_eqb_eq in Case1 at 0(rank:0)
=================================================
Progress: 701


1st goal of : forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)
string2 : string
string3 : string
Case1 : string_eq (string3) (string2) = true
---------------------------------------
forall (string1:string), string1 = string2->true = true -> false = true

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)
string2 : string
string3 : string
Case1 : string3 = string2
---------------------------------------
forall (string1:string), string1 = string2->true = true -> false = true

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
intro string1(rank:1)
rewrite <- Case1 in goal at 0(rank:2)
=================================================
Progress: 702


1st goal of : forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)
string2 : string
string3 : string
Case1 : string_eq (string3) (string2) = true
---------------------------------------
forall (string1:string), string1 = string2->true = true -> false = true

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)
string2 : string
string3 : string
Case1 : string2 = string3
---------------------------------------
forall (string1:string), string1 = string2->true = true -> false = true

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
intro string1(rank:1)
rewrite Case1 in goal at 0(rank:2)
=================================================
Progress: 703


1st goal of : forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)
string1 : string
string2 : string
---------------------------------------
forall (string3:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

0 goal(s) more...

3 conjecture(s) more...
>>> intro string3(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)
string1 : string
string2 : string
string3 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
intro Cond1(rank:1)
case string_eq (string3) (string2)(rank:2)
=================================================
Progress: 704


1st goal of : forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)
string1 : string
string2 : string
string3 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)
string1 : string
string2 : string
string3 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
intro Cond2(rank:1)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 3(rank:2)
case string_eq (string3) (string2)(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 705


1st goal of : forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)
string1 : string
string2 : string
string3 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)
string1 : string
string2 : string
string3 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true
---------------------------------------
false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond2 in goal at 0(rank:1)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- Cond2 in goal at 0(rank:2)
case string_eq (string3) (string2)(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 706


1st goal of : forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)
string1 : string
string2 : string
string3 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true
---------------------------------------
false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)

0 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)
string1 : string
string2 : string
string3 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true
---------------------------------------
false = true

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 707


1st goal of : forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)
string2 : string
string3 : string
Case1 : string_eq (string3) (string2) = true
---------------------------------------
forall (string1:string), string1 = string2->true = true -> false = true

1 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)
string2 : string
string3 : string
Case1 : string_eq (string3) (string2) = true
string1 : string
---------------------------------------
string1 = string2->true = true -> false = true

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 5
intro Cond1(rank:1)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 3(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
=================================================
Progress: 708


1st goal of : forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)
string2 : string
string3 : string
Case1 : string3 = string2
---------------------------------------
forall (string1:string), string1 = string2->true = true -> false = true

1 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)
string2 : string
string3 : string
Case1 : string3 = string2
string1 : string
---------------------------------------
string1 = string2->true = true -> false = true

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
intro Cond1(rank:1)
rewrite <- Case1 in goal at 0(rank:2)
=================================================
Progress: 709


1st goal of : forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)
string2 : string
string3 : string
Case1 : string2 = string3
---------------------------------------
forall (string1:string), string1 = string2->true = true -> false = true

1 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)
string2 : string
string3 : string
Case1 : string2 = string3
string1 : string
---------------------------------------
string1 = string2->true = true -> false = true

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
intro Cond1(rank:1)
rewrite Case1 in goal at 0(rank:2)
=================================================
Progress: 710


1st goal of : forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)
string2 : string
string3 : string
Case1 : string_eq (string3) (string2) = true
string1 : string
---------------------------------------
string1 = string2->true = true -> false = true

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)
string2 : string
string3 : string
Case1 : string_eq (string3) (string2) = true
string1 : string
Cond1 : string1 = string2
---------------------------------------
true = true -> false = true

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 5
intro Cond2(rank:1)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 3(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
=================================================
Progress: 711


1st goal of : forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)
string2 : string
string3 : string
Case1 : string3 = string2
string1 : string
---------------------------------------
string1 = string2->true = true -> false = true

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)
string2 : string
string3 : string
Case1 : string3 = string2
string1 : string
Cond1 : string1 = string2
---------------------------------------
true = true -> false = true

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:1)
=================================================
Progress: 712


1st goal of : forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)
string2 : string
string3 : string
Case1 : string2 = string3
string1 : string
---------------------------------------
string1 = string2->true = true -> false = true

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)
string2 : string
string3 : string
Case1 : string2 = string3
string1 : string
Cond1 : string1 = string2
---------------------------------------
true = true -> false = true

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:1)
=================================================
Progress: 713


1st goal of : forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)
string2 : string
string3 : string
Case1 : string_eq (string3) (string2) = true
string1 : string
Cond1 : string1 = string2
---------------------------------------
true = true -> false = true

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)
string2 : string
string3 : string
Case1 : string_eq (string3) (string2) = true
string1 : string
Cond1 : string1 = string2
Cond2 : true = true
---------------------------------------
false = true

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:2)
=================================================
Progress: 714


1st goal of : forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)
string2 : string
string3 : string
Case1 : string3 = string2
string1 : string
Cond1 : string1 = string2
---------------------------------------
true = true -> false = true

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)
string2 : string
string3 : string
Case1 : string3 = string2
string1 : string
Cond1 : string1 = string2
Cond2 : true = true
---------------------------------------
false = true

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 715


1st goal of : forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)
string2 : string
string3 : string
Case1 : string2 = string3
string1 : string
Cond1 : string1 = string2
---------------------------------------
true = true -> false = true

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2) = true -> false = if string_eq (string3) (string2) then true else is_mem_ta1 (Nil) (string2)
string2 : string
string3 : string
Case1 : string2 = string3
string1 : string
Cond1 : string1 = string2
Cond2 : true = true
---------------------------------------
false = true

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 716


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 3(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 717


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 718


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
string_eq (string1) (string1) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 719


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
string_eq (string1) (string1) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
string_eq (string1) (string1) = is_mem_ta1 (string_list1) (string1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:2)
=================================================
Progress: 720


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
string_eq (string1) (string1) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 721


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
string_eq (string1) (string1) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
string_eq (string1) (string1) = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:2)
=================================================
Progress: 722


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 723


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case string_eq (string1) (string2)
intro string_list1
rewrite <- Case1 in goal at 0
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 2
case is_mem_ta1 (string_list1) (string1)
state_list
New Env

;;
Lemma List
forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
End of Lemma List
=================================================
Progress: 724


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
induction string_list1(rank:0)
intro string1(rank:1)
intro string2(rank:1)
=================================================
Progress: 725


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> induction string_list1(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (Nil) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (Nil) (string1)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 726


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (Nil) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (Nil) (string1)

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string) (string2:string), string1 = string2->false = true -> string_eq (string1) (string2) = false

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
intro string1(rank:1)
intro string2(rank:1)
=================================================
Progress: 727


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
---------------------------------------
forall (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
induction string_list1(rank:0)
intro string2(rank:1)
=================================================
Progress: 728


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
---------------------------------------
forall (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> induction string_list1(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string2:string), string1 = string2->is_mem_ta1 (Nil) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (Nil) (string1)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 729


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string2:string), string1 = string2->is_mem_ta1 (Nil) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (Nil) (string1)

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string2:string), string1 = string2->false = true -> string_eq (string1) (string2) = false

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro string2(rank:1)
=================================================
Progress: 730


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
---------------------------------------
forall (string1:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction string_list1(rank:0)
=================================================
Progress: 731


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
---------------------------------------
forall (string1:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> induction string_list1(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string), string1 = string2->is_mem_ta1 (Nil) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (Nil) (string1)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 732


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string), string1 = string2->is_mem_ta1 (Nil) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (Nil) (string1)

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string), string1 = string2->false = true -> string_eq (string1) (string2) = false

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro string1(rank:1)
=================================================
Progress: 733


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
---------------------------------------
forall (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
---------------------------------------
forall (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction string_list1(rank:0)
=================================================
Progress: 734


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
---------------------------------------
forall (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> induction string_list1(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
string1 = string2->is_mem_ta1 (Nil) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (Nil) (string1)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 735


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
string1 = string2->is_mem_ta1 (Nil) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (Nil) (string1)

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
string1 = string2->false = true -> string_eq (string1) (string2) = false

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:1)
=================================================
Progress: 736


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string) (string2:string), string1 = string2->false = true -> string_eq (string1) (string2) = false

1 goal(s) more...

1 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
---------------------------------------
forall (string2:string), string1 = string2->false = true -> string_eq (string1) (string2) = false

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro string2(rank:1)
=================================================
Progress: 737


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string) (string2:string), string1 = string2->false = true -> string_eq (string1) (string2) = false

1 goal(s) more...

1 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
---------------------------------------
forall (string1:string), string1 = string2->false = true -> string_eq (string1) (string2) = false

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 738


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string2:string), string1 = string2->false = true -> string_eq (string1) (string2) = false

1 goal(s) more...

1 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
---------------------------------------
string1 = string2->false = true -> string_eq (string1) (string2) = false

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:1)
=================================================
Progress: 739


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string), string1 = string2->false = true -> string_eq (string1) (string2) = false

1 goal(s) more...

1 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
---------------------------------------
string1 = string2->false = true -> string_eq (string1) (string2) = false

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:1)
=================================================
Progress: 740


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
string1 = string2->false = true -> string_eq (string1) (string2) = false

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
Cond1 : string1 = string2
---------------------------------------
false = true -> string_eq (string1) (string2) = false

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:0)
=================================================
Progress: 741


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
Cond1 : string1 = string2
---------------------------------------
false = true -> string_eq (string1) (string2) = false

1 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
string1 = string2->is_mem_ta1 (Cons (string3) (string_list2)) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (Cons (string3) (string_list2)) (string1)

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 2
simpl in goal(rank:0)
rewrite IH1 in goal at 0(rank:1)
=================================================
Progress: 742


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
string1 = string2->is_mem_ta1 (Cons (string3) (string_list2)) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (Cons (string3) (string_list2)) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 6
intro Cond1(rank:1)
rewrite <- IH1 in goal at 0(rank:1)
rewrite <- IH1 in goal at 1(rank:2)
rewrite <- IH1 in goal at 2(rank:1)
case string_eq (string3) (string1)(rank:2)
rewrite IH1 in goal at 0(rank:1)
=================================================
Progress: 743


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
string1 = string2->is_mem_ta1 (Cons (string3) (string_list2)) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (Cons (string3) (string_list2)) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
string1 = string2->is_mem_ta1 (Cons (string3) (string_list2)) (string1) = true -> is_mem_ta1 (string_list2) (string1) = is_mem_ta1 (Cons (string3) (string_list2)) (string1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
rewrite IH1 in goal at 0


1st goal of : any
string1 : string
string2 : string
string_list1 : string list
string3 : string
---------------------------------------
forall (string_list2:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list2)) (string1) = true -> is_mem_ta1 (string_list2) (string1) = is_mem_ta1 (Cons (string3) (string_list2)) (string1)

0 goal(s) more...

0 conjecture(s) more...
state_list
New Env

;;
Lemma List
forall (string1:string) (string2:string) (string3:string) (string_list2:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list2)) (string1) = true -> is_mem_ta1 (string_list2) (string1) = is_mem_ta1 (Cons (string3) (string_list2)) (string1)
End of Lemma List
=================================================
Progress: 744


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
string1 = string2->is_mem_ta1 (Cons (string3) (string_list2)) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (Cons (string3) (string_list2)) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string) (string_list2:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list2)) (string1) = true -> is_mem_ta1 (string_list2) (string1) = is_mem_ta1 (Cons (string3) (string_list2)) (string1)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)

---------------------------------------
forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 745


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)

---------------------------------------
forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)

0 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)

---------------------------------------
forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) = true -> is_mem_ta1 (string_list1) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
induction string_list1(rank:0)
intro string3(rank:1)
intro string1(rank:1)
intro string2(rank:1)
=================================================
Progress: 746


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)

---------------------------------------
forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) = true -> is_mem_ta1 (string_list1) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

2 conjecture(s) more...
>>> induction string_list1(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> is_mem_ta1 (Nil) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 747


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> is_mem_ta1 (Nil) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
intro string1(rank:1)
intro string2(rank:1)
intro string3(rank:1)
=================================================
Progress: 748


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 11
intro Cond2(rank:1)
rewrite IH1 in goal at 0(rank:1)
rewrite <- IH1 in goal at 0(rank:1)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite Cond1 in goal at 1(rank:2)
rewrite Cond1 in goal at 2(rank:2)
rewrite Cond1 in goal at 3(rank:2)
rewrite <- IH1 in goal at 2(rank:1)
rewrite <- IH1 in goal at 1(rank:2)
rewrite Cond1 in goal at 0(rank:2)
case string_eq (string3) (string1)(rank:2)
=================================================
Progress: 749


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (string_list2) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
intro Cond1(rank:1)
case string_eq (string3) (string1)(rank:2)
=================================================
Progress: 750


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
string1 = string2->if string_eq (string3) (string1) then true else string_eq (string1) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string1) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
intro Cond1(rank:1)
case string_eq (string3) (string1)(rank:2)
=================================================
Progress: 751


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = if string_eq (string3) (string1) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
intro Cond1(rank:1)
case string_eq (string3) (string1)(rank:2)
=================================================
Progress: 752


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
string_eq (string1) (string2) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 10
rewrite Cond2 in goal at 0(rank:1)
rewrite Cond1 in goal at 0(rank:2)
rewrite Cond1 in goal at 2(rank:2)
rewrite Cond1 in goal at 3(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- Cond2 in goal at 0(rank:2)
rewrite Cond1 in goal at 1(rank:2)
rewrite IH1 in goal at 0(rank:1)
rewrite <- IH1 in goal at 0(rank:1)
case string_eq (string3) (string1)(rank:2)
=================================================
Progress: 753


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (string_list2) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 6
intro Cond2(rank:1)
rewrite Cond1 in goal at 1(rank:2)
rewrite Cond1 in goal at 2(rank:2)
rewrite Cond1 in goal at 3(rank:2)
case string_eq (string3) (string1)(rank:2)
rewrite Cond1 in goal at 0(rank:2)
=================================================
Progress: 754


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string1) then true else string_eq (string1) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string1) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 10
intro Cond2(rank:1)
rewrite Cond1 in goal at 1(rank:2)
rewrite Cond1 in goal at 3(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite Cond1 in goal at 2(rank:2)
rewrite Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 3(rank:2)
case string_eq (string3) (string1)(rank:2)
=================================================
Progress: 755


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = if string_eq (string3) (string1) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
intro Cond2(rank:1)
rewrite Cond1 in goal at 1(rank:2)
rewrite Cond1 in goal at 3(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite Cond1 in goal at 2(rank:2)
rewrite Cond1 in goal at 0(rank:2)
case string_eq (string3) (string1)(rank:2)
=================================================
Progress: 756


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
string_eq (string1) (string2) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
string_eq (string1) (string2) = true

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite Cond1 in goal at 0(rank:2)
rewrite IH1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 757


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
string_eq (string1) (string2) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
is_mem_ta1 (string_list2) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:2)
rewrite Cond1 in goal at 2(rank:2)
rewrite Cond1 in goal at 3(rank:2)
rewrite <- Cond2 in goal at 0(rank:2)
case string_eq (string3) (string1)(rank:2)
rewrite Cond1 in goal at 1(rank:2)
=================================================
Progress: 758


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
string_eq (string1) (string2) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
string_eq (string1) (string2) = if string_eq (string3) (string1) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
rewrite Cond1 in goal at 0(rank:2)
rewrite Cond1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- Cond2 in goal at 0(rank:2)
rewrite Cond1 in goal at 3(rank:2)
rewrite Cond1 in goal at 1(rank:2)
case string_eq (string3) (string1)(rank:2)
=================================================
Progress: 759


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
---------------------------------------
forall (string2:string), string1 = string2->false = true -> string_eq (string1) (string2) = false

1 goal(s) more...

1 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
string2 : string
---------------------------------------
string1 = string2->false = true -> string_eq (string1) (string2) = false

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:1)
=================================================
Progress: 760


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
---------------------------------------
string1 = string2->false = true -> string_eq (string1) (string2) = false

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
Cond1 : string1 = string2
---------------------------------------
false = true -> string_eq (string1) (string2) = false

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:0)
=================================================
Progress: 761


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
Cond1 : string1 = string2
---------------------------------------
false = true -> string_eq (string1) (string2) = false

1 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string2:string), string1 = string2->is_mem_ta1 (Cons (string3) (string_list2)) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (Cons (string3) (string_list2)) (string1)

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 2
simpl in goal(rank:0)
rewrite IH1 in goal at 0(rank:1)
=================================================
Progress: 762


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string2:string), string1 = string2->is_mem_ta1 (Cons (string3) (string_list2)) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (Cons (string3) (string_list2)) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string2:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
intro string2(rank:1)
rewrite IH1 in goal at 0(rank:1)
case string_eq (string3) (string1)(rank:2)
=================================================
Progress: 763


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string2:string), string1 = string2->is_mem_ta1 (Cons (string3) (string_list2)) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (Cons (string3) (string_list2)) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string2:string), string1 = string2->is_mem_ta1 (Cons (string3) (string_list2)) (string1) = true -> is_mem_ta1 (string_list2) (string1) = is_mem_ta1 (Cons (string3) (string_list2)) (string1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
rewrite IH1 in goal at 0


1st goal of : any
string1 : string
string_list1 : string list
string3 : string
---------------------------------------
forall (string_list2:string list) (string2:string), string1 = string2->is_mem_ta1 (Cons (string3) (string_list2)) (string1) = true -> is_mem_ta1 (string_list2) (string1) = is_mem_ta1 (Cons (string3) (string_list2)) (string1)

0 goal(s) more...

0 conjecture(s) more...
state_list
=================================================
Progress: 764


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string2:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
intro Cond1(rank:1)
rewrite IH1 in goal at 0(rank:1)
case string_eq (string3) (string1)(rank:2)
=================================================
Progress: 765


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string2:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string2:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (string_list2) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
intro string2(rank:1)
case string_eq (string3) (string1)(rank:2)
=================================================
Progress: 766


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 8
intro Cond2(rank:1)
rewrite IH1 in goal at 0(rank:1)
rewrite Cond1 in goal at 1(rank:2)
rewrite Cond1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
case string_eq (string3) (string1)(rank:2)
rewrite Cond1 in goal at 3(rank:2)
rewrite Cond1 in goal at 0(rank:2)
=================================================
Progress: 767


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (string_list2) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
intro Cond1(rank:1)
case string_eq (string3) (string1)(rank:2)
=================================================
Progress: 768


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
string_eq (string1) (string2) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
rewrite Cond2 in goal at 0(rank:1)
rewrite Cond1 in goal at 0(rank:2)
rewrite Cond1 in goal at 2(rank:2)
rewrite Cond1 in goal at 3(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- Cond2 in goal at 0(rank:2)
rewrite Cond1 in goal at 1(rank:2)
rewrite IH1 in goal at 0(rank:1)
case string_eq (string3) (string1)(rank:2)
=================================================
Progress: 769


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (string_list2) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 6
intro Cond2(rank:1)
rewrite Cond1 in goal at 1(rank:2)
rewrite Cond1 in goal at 2(rank:2)
rewrite Cond1 in goal at 3(rank:2)
case string_eq (string3) (string1)(rank:2)
rewrite Cond1 in goal at 0(rank:2)
=================================================
Progress: 770


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
string_eq (string1) (string2) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
string_eq (string1) (string2) = true

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite Cond1 in goal at 0(rank:2)
rewrite IH1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 771


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
string_eq (string1) (string2) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
is_mem_ta1 (string_list2) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:2)
rewrite Cond1 in goal at 2(rank:2)
rewrite Cond1 in goal at 3(rank:2)
rewrite <- Cond2 in goal at 0(rank:2)
case string_eq (string3) (string1)(rank:2)
rewrite Cond1 in goal at 1(rank:2)
=================================================
Progress: 772


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
---------------------------------------
string1 = string2->false = true -> string_eq (string1) (string2) = false

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
Cond1 : string1 = string2
---------------------------------------
false = true -> string_eq (string1) (string2) = false

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:0)
=================================================
Progress: 773


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
Cond1 : string1 = string2
---------------------------------------
false = true -> string_eq (string1) (string2) = false

1 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string), string1 = string2->is_mem_ta1 (Cons (string3) (string_list2)) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (Cons (string3) (string_list2)) (string1)

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 2
simpl in goal(rank:0)
rewrite IH1 in goal at 0(rank:1)
=================================================
Progress: 774


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string), string1 = string2->is_mem_ta1 (Cons (string3) (string_list2)) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (Cons (string3) (string_list2)) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
intro string1(rank:1)
rewrite <- IH1 in goal at 0(rank:1)
rewrite <- IH1 in goal at 1(rank:2)
rewrite <- IH1 in goal at 2(rank:1)
rewrite IH1 in goal at 0(rank:1)
=================================================
Progress: 775


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string), string1 = string2->is_mem_ta1 (Cons (string3) (string_list2)) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (Cons (string3) (string_list2)) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string), string1 = string2->is_mem_ta1 (Cons (string3) (string_list2)) (string1) = true -> is_mem_ta1 (string_list2) (string1) = is_mem_ta1 (Cons (string3) (string_list2)) (string1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
rewrite IH1 in goal at 0


1st goal of : any
string2 : string
string_list1 : string list
string3 : string
---------------------------------------
forall (string_list2:string list) (string1:string), string1 = string2->is_mem_ta1 (Cons (string3) (string_list2)) (string1) = true -> is_mem_ta1 (string_list2) (string1) = is_mem_ta1 (Cons (string3) (string_list2)) (string1)

0 goal(s) more...

0 conjecture(s) more...
state_list
=================================================
Progress: 776


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 6
intro Cond1(rank:1)
rewrite <- IH1 in goal at 0(rank:1)
rewrite <- IH1 in goal at 1(rank:2)
rewrite <- IH1 in goal at 2(rank:1)
case string_eq (string3) (string1)(rank:2)
rewrite IH1 in goal at 0(rank:1)
=================================================
Progress: 777


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (string_list2) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro string1(rank:1)
=================================================
Progress: 778


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string), string1 = string2->if string_eq (string3) (string1) then true else string_eq (string1) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string1) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro string1(rank:1)
=================================================
Progress: 779


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = if string_eq (string3) (string1) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro string1(rank:1)
=================================================
Progress: 780


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 11
intro Cond2(rank:1)
rewrite IH1 in goal at 0(rank:1)
rewrite <- IH1 in goal at 0(rank:1)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite Cond1 in goal at 1(rank:2)
rewrite Cond1 in goal at 2(rank:2)
rewrite Cond1 in goal at 3(rank:2)
rewrite <- IH1 in goal at 2(rank:1)
rewrite <- IH1 in goal at 1(rank:2)
rewrite Cond1 in goal at 0(rank:2)
case string_eq (string3) (string1)(rank:2)
=================================================
Progress: 781


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (string_list2) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
intro Cond1(rank:1)
case string_eq (string3) (string1)(rank:2)
=================================================
Progress: 782


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string1) then true else string_eq (string1) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string1) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
intro Cond1(rank:1)
case string_eq (string3) (string1)(rank:2)
=================================================
Progress: 783


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = if string_eq (string3) (string1) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
intro Cond1(rank:1)
case string_eq (string3) (string1)(rank:2)
=================================================
Progress: 784


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
string_eq (string1) (string2) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 10
rewrite Cond2 in goal at 0(rank:1)
rewrite Cond1 in goal at 0(rank:2)
rewrite Cond1 in goal at 2(rank:2)
rewrite Cond1 in goal at 3(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- Cond2 in goal at 0(rank:2)
rewrite Cond1 in goal at 1(rank:2)
rewrite IH1 in goal at 0(rank:1)
rewrite <- IH1 in goal at 0(rank:1)
case string_eq (string3) (string1)(rank:2)
=================================================
Progress: 785


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (string_list2) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 6
intro Cond2(rank:1)
rewrite Cond1 in goal at 1(rank:2)
rewrite Cond1 in goal at 2(rank:2)
rewrite Cond1 in goal at 3(rank:2)
case string_eq (string3) (string1)(rank:2)
rewrite Cond1 in goal at 0(rank:2)
=================================================
Progress: 786


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string1) then true else string_eq (string1) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string1) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 10
intro Cond2(rank:1)
rewrite Cond1 in goal at 1(rank:2)
rewrite Cond1 in goal at 3(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite Cond1 in goal at 2(rank:2)
rewrite Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 3(rank:2)
case string_eq (string3) (string1)(rank:2)
=================================================
Progress: 787


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = if string_eq (string3) (string1) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
intro Cond2(rank:1)
rewrite Cond1 in goal at 1(rank:2)
rewrite Cond1 in goal at 3(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite Cond1 in goal at 2(rank:2)
rewrite Cond1 in goal at 0(rank:2)
case string_eq (string3) (string1)(rank:2)
=================================================
Progress: 788


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
string_eq (string1) (string2) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
string_eq (string1) (string2) = true

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite Cond1 in goal at 0(rank:2)
rewrite IH1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 789


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
string_eq (string1) (string2) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
is_mem_ta1 (string_list2) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 6
rewrite Cond1 in goal at 0(rank:2)
rewrite Cond1 in goal at 2(rank:2)
rewrite Cond1 in goal at 3(rank:2)
rewrite <- Cond2 in goal at 0(rank:2)
case string_eq (string3) (string1)(rank:2)
rewrite Cond1 in goal at 1(rank:2)
=================================================
Progress: 790


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
string_eq (string1) (string2) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
string_eq (string1) (string2) = if string_eq (string3) (string1) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
rewrite Cond1 in goal at 0(rank:2)
rewrite Cond1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- Cond2 in goal at 0(rank:2)
rewrite Cond1 in goal at 3(rank:2)
rewrite Cond1 in goal at 1(rank:2)
case string_eq (string3) (string1)(rank:2)
=================================================
Progress: 791


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
string2 : string
---------------------------------------
string1 = string2->false = true -> string_eq (string1) (string2) = false

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
string2 : string
Cond1 : string1 = string2
---------------------------------------
false = true -> string_eq (string1) (string2) = false

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:0)
=================================================
Progress: 792


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
string2 : string
Cond1 : string1 = string2
---------------------------------------
false = true -> string_eq (string1) (string2) = false

1 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (Cons (string3) (string_list2)) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (Cons (string3) (string_list2)) (string1)

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 2
simpl in goal(rank:0)
rewrite IH1 in goal at 0(rank:1)
=================================================
Progress: 793


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (Cons (string3) (string_list2)) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (Cons (string3) (string_list2)) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string) (string2:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 6
intro string1(rank:1)
rewrite IH1 in goal at 2(rank:1)
rewrite IH1 in goal at 3(rank:2)
rewrite IH1 in goal at 0(rank:2)
rewrite IH1 in goal at 1(rank:2)
intro string2(rank:1)
=================================================
Progress: 794


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (Cons (string3) (string_list2)) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (Cons (string3) (string_list2)) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (Cons (string3) (string_list2)) (string1) = true -> is_mem_ta1 (string_list2) (string1) = is_mem_ta1 (Cons (string3) (string_list2)) (string1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
rewrite IH1 in goal at 0


1st goal of : any
string_list1 : string list
string3 : string
---------------------------------------
forall (string_list2:string list) (string1:string) (string2:string), string1 = string2->is_mem_ta1 (Cons (string3) (string_list2)) (string1) = true -> is_mem_ta1 (string_list2) (string1) = is_mem_ta1 (Cons (string3) (string_list2)) (string1)

0 goal(s) more...

0 conjecture(s) more...
state_list
=================================================
Progress: 795


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string) (string2:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
---------------------------------------
forall (string2:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 6
intro string2(rank:1)
rewrite IH1 in goal at 2(rank:1)
rewrite IH1 in goal at 1(rank:2)
rewrite IH1 in goal at 3(rank:2)
case string_eq (string3) (string1)(rank:2)
rewrite IH1 in goal at 0(rank:2)
=================================================
Progress: 796


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string) (string2:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
---------------------------------------
forall (string1:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
rewrite IH1 in goal at 2(rank:1)
rewrite IH1 in goal at 3(rank:2)
rewrite IH1 in goal at 0(rank:2)
rewrite IH1 in goal at 1(rank:2)
=================================================
Progress: 797


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string) (string2:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string) (string2:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (string_list2) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
intro string1(rank:1)
rewrite IH1 in goal at 0(rank:2)
rewrite IH1 in goal at 1(rank:2)
rewrite IH1 in goal at 2(rank:2)
intro string2(rank:1)
=================================================
Progress: 798


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
---------------------------------------
forall (string2:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
string2 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 6
intro Cond1(rank:1)
rewrite IH1 in goal at 2(rank:1)
rewrite IH1 in goal at 1(rank:2)
rewrite IH1 in goal at 3(rank:2)
case string_eq (string3) (string1)(rank:2)
rewrite IH1 in goal at 0(rank:2)
=================================================
Progress: 799


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
---------------------------------------
forall (string2:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
---------------------------------------
forall (string2:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (string_list2) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
intro string2(rank:1)
rewrite IH1 in goal at 1(rank:2)
rewrite IH1 in goal at 2(rank:2)
case string_eq (string3) (string1)(rank:2)
rewrite IH1 in goal at 0(rank:2)
=================================================
Progress: 800


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
---------------------------------------
forall (string1:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
---------------------------------------
forall (string1:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (string_list2) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
intro string1(rank:1)
rewrite IH1 in goal at 0(rank:2)
rewrite IH1 in goal at 1(rank:2)
rewrite IH1 in goal at 2(rank:2)
=================================================
Progress: 801


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
string2 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
string2 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 11
intro Cond2(rank:1)
rewrite IH1 in goal at 2(rank:1)
rewrite Cond1 in goal at 1(rank:2)
rewrite Cond1 in goal at 2(rank:2)
rewrite Cond1 in goal at 3(rank:2)
rewrite IH1 in goal at 0(rank:2)
rewrite IH1 in goal at 1(rank:2)
rewrite Cond1 in goal at 0(rank:2)
rewrite IH1 in goal at 3(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
case string_eq (string3) (string1)(rank:2)
=================================================
Progress: 802


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
string2 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
string2 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (string_list2) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
intro Cond1(rank:1)
rewrite IH1 in goal at 1(rank:2)
rewrite IH1 in goal at 2(rank:2)
case string_eq (string3) (string1)(rank:2)
rewrite IH1 in goal at 0(rank:2)
=================================================
Progress: 803


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
string2 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
string2 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
string_eq (string1) (string2) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 11
rewrite Cond2 in goal at 0(rank:1)
rewrite IH1 in goal at 1(rank:1)
rewrite Cond1 in goal at 0(rank:2)
rewrite Cond1 in goal at 1(rank:2)
rewrite Cond1 in goal at 2(rank:2)
rewrite Cond1 in goal at 3(rank:2)
rewrite IH1 in goal at 2(rank:2)
rewrite IH1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- Cond2 in goal at 0(rank:2)
case string_eq (string3) (string1)(rank:2)
=================================================
Progress: 804


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
string2 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
string2 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (string_list2) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
intro Cond2(rank:1)
rewrite Cond1 in goal at 1(rank:2)
rewrite Cond1 in goal at 3(rank:2)
rewrite IH1 in goal at 0(rank:2)
rewrite IH1 in goal at 1(rank:2)
rewrite IH1 in goal at 2(rank:2)
rewrite Cond1 in goal at 2(rank:2)
rewrite Cond1 in goal at 0(rank:2)
case string_eq (string3) (string1)(rank:2)
=================================================
Progress: 805


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
string2 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
string_eq (string1) (string2) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
string2 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
string_eq (string1) (string2) = true

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite Cond1 in goal at 0(rank:2)
rewrite IH1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 806


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
string2 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
string_eq (string1) (string2) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
string2 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
is_mem_ta1 (string_list2) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 7
rewrite Cond1 in goal at 0(rank:2)
rewrite Cond1 in goal at 2(rank:2)
rewrite IH1 in goal at 0(rank:2)
rewrite <- Cond2 in goal at 0(rank:2)
case string_eq (string3) (string1)(rank:2)
rewrite Cond1 in goal at 3(rank:2)
rewrite Cond1 in goal at 1(rank:2)
=================================================
Progress: 807


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (string_list2) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (string_list2) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 10
intro Cond2(rank:1)
rewrite Cond1 in goal at 1(rank:2)
rewrite Cond1 in goal at 3(rank:2)
rewrite <- IH1 in goal at 0(rank:2)
rewrite <- IH1 in goal at 1(rank:2)
rewrite <- IH1 in goal at 2(rank:2)
rewrite Cond1 in goal at 2(rank:2)
rewrite Cond1 in goal at 0(rank:2)
rewrite <- IH1 in goal at 3(rank:2)
case string_eq (string3) (string1)(rank:2)
=================================================
Progress: 808


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
string1 = string2->if string_eq (string3) (string1) then true else string_eq (string1) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string1) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string1) then true else string_eq (string1) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string1) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 14
intro Cond2(rank:1)
rewrite Cond1 in goal at 1(rank:2)
rewrite Cond1 in goal at 3(rank:2)
rewrite IH1 in goal at 0(rank:2)
rewrite IH1 in goal at 1(rank:2)
rewrite IH1 in goal at 2(rank:2)
rewrite Cond1 in goal at 2(rank:2)
rewrite Cond1 in goal at 0(rank:2)
rewrite IH1 in goal at 3(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 3(rank:2)
case string_eq (string3) (string1)(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 809


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = if string_eq (string3) (string1) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = if string_eq (string3) (string1) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
intro Cond2(rank:1)
rewrite Cond1 in goal at 1(rank:2)
rewrite Cond1 in goal at 3(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite Cond1 in goal at 2(rank:2)
rewrite Cond1 in goal at 0(rank:2)
case string_eq (string3) (string1)(rank:2)
=================================================
Progress: 810


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (string_list2) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
is_mem_ta1 (string_list2) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 10
rewrite Cond2 in goal at 0(rank:1)
rewrite Cond1 in goal at 0(rank:2)
rewrite Cond1 in goal at 2(rank:2)
rewrite Cond1 in goal at 3(rank:2)
rewrite <- IH1 in goal at 0(rank:2)
rewrite <- IH1 in goal at 1(rank:2)
rewrite Cond1 in goal at 1(rank:2)
rewrite <- Cond2 in goal at 0(rank:2)
rewrite <- IH1 in goal at 2(rank:2)
case string_eq (string3) (string1)(rank:2)
=================================================
Progress: 811


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string1) then true else string_eq (string1) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string1) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else string_eq (string1) (string2) = true
---------------------------------------
string_eq (string1) (string2) = if string_eq (string3) (string1) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 13
rewrite Cond2 in goal at 0(rank:1)
rewrite Cond1 in goal at 0(rank:2)
rewrite Cond1 in goal at 2(rank:2)
rewrite Cond1 in goal at 3(rank:2)
rewrite IH1 in goal at 1(rank:2)
rewrite IH1 in goal at 2(rank:2)
rewrite Cond1 in goal at 1(rank:2)
rewrite IH1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- Cond2 in goal at 0(rank:2)
case string_eq (string3) (string1)(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
=================================================
Progress: 812


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = if string_eq (string3) (string1) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
string_eq (string1) (string2) = if string_eq (string3) (string1) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 10
rewrite Cond1 in goal at 0(rank:2)
rewrite Cond1 in goal at 2(rank:2)
rewrite IH1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite Cond1 in goal at 3(rank:2)
rewrite Cond1 in goal at 1(rank:2)
rewrite <- Cond2 in goal at 0(rank:2)
case string_eq (string3) (string1)(rank:2)
=================================================
Progress: 813


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string2:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (string_list2) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (string_list2) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
intro Cond1(rank:1)
case string_eq (string3) (string1)(rank:2)
=================================================
Progress: 814


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (string_list2) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (string_list2) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 6
intro Cond2(rank:1)
rewrite Cond1 in goal at 1(rank:2)
rewrite Cond1 in goal at 2(rank:2)
rewrite Cond1 in goal at 3(rank:2)
case string_eq (string3) (string1)(rank:2)
rewrite Cond1 in goal at 0(rank:2)
=================================================
Progress: 815


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (string_list2) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
is_mem_ta1 (string_list2) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 7
rewrite Cond2 in goal at 0(rank:1)
rewrite Cond1 in goal at 0(rank:2)
rewrite Cond1 in goal at 2(rank:2)
rewrite Cond1 in goal at 3(rank:2)
case string_eq (string3) (string1)(rank:2)
rewrite Cond1 in goal at 1(rank:2)
rewrite <- Cond2 in goal at 0(rank:2)
=================================================
Progress: 816


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (string_list2) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (string_list2) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 6
intro Cond1(rank:1)
rewrite <- IH1 in goal at 1(rank:2)
rewrite <- IH1 in goal at 2(rank:2)
rewrite <- IH1 in goal at 3(rank:2)
case string_eq (string3) (string1)(rank:2)
rewrite <- IH1 in goal at 0(rank:2)
=================================================
Progress: 817


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string), string1 = string2->if string_eq (string3) (string1) then true else string_eq (string1) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string1) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string1) then true else string_eq (string1) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string1) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 6
intro Cond1(rank:1)
rewrite IH1 in goal at 1(rank:2)
rewrite IH1 in goal at 2(rank:2)
rewrite IH1 in goal at 3(rank:2)
case string_eq (string3) (string1)(rank:2)
rewrite IH1 in goal at 0(rank:2)
=================================================
Progress: 818


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = if string_eq (string3) (string1) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = if string_eq (string3) (string1) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
intro Cond1(rank:1)
case string_eq (string3) (string1)(rank:2)
=================================================
Progress: 819


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (string_list2) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (string_list2) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 10
intro Cond2(rank:1)
rewrite Cond1 in goal at 1(rank:2)
rewrite Cond1 in goal at 3(rank:2)
rewrite <- IH1 in goal at 0(rank:2)
rewrite <- IH1 in goal at 1(rank:2)
rewrite <- IH1 in goal at 2(rank:2)
rewrite Cond1 in goal at 2(rank:2)
rewrite Cond1 in goal at 0(rank:2)
rewrite <- IH1 in goal at 3(rank:2)
case string_eq (string3) (string1)(rank:2)
=================================================
Progress: 820


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string1) then true else string_eq (string1) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string1) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string1) then true else string_eq (string1) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string1) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 14
intro Cond2(rank:1)
rewrite Cond1 in goal at 1(rank:2)
rewrite Cond1 in goal at 3(rank:2)
rewrite IH1 in goal at 0(rank:2)
rewrite IH1 in goal at 1(rank:2)
rewrite IH1 in goal at 2(rank:2)
rewrite Cond1 in goal at 2(rank:2)
rewrite Cond1 in goal at 0(rank:2)
rewrite IH1 in goal at 3(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 3(rank:2)
case string_eq (string3) (string1)(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 821


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = if string_eq (string3) (string1) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = if string_eq (string3) (string1) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
intro Cond2(rank:1)
rewrite Cond1 in goal at 1(rank:2)
rewrite Cond1 in goal at 3(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite Cond1 in goal at 2(rank:2)
rewrite Cond1 in goal at 0(rank:2)
case string_eq (string3) (string1)(rank:2)
=================================================
Progress: 822


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (string_list2) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
is_mem_ta1 (string_list2) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 10
rewrite Cond2 in goal at 0(rank:1)
rewrite Cond1 in goal at 0(rank:2)
rewrite Cond1 in goal at 2(rank:2)
rewrite Cond1 in goal at 3(rank:2)
rewrite <- IH1 in goal at 0(rank:2)
rewrite <- IH1 in goal at 1(rank:2)
rewrite Cond1 in goal at 1(rank:2)
rewrite <- Cond2 in goal at 0(rank:2)
rewrite <- IH1 in goal at 2(rank:2)
case string_eq (string3) (string1)(rank:2)
=================================================
Progress: 823


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string1) then true else string_eq (string1) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string1) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else string_eq (string1) (string2) = true
---------------------------------------
string_eq (string1) (string2) = if string_eq (string3) (string1) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 13
rewrite Cond2 in goal at 0(rank:1)
rewrite Cond1 in goal at 0(rank:2)
rewrite Cond1 in goal at 2(rank:2)
rewrite Cond1 in goal at 3(rank:2)
rewrite IH1 in goal at 1(rank:2)
rewrite IH1 in goal at 2(rank:2)
rewrite Cond1 in goal at 1(rank:2)
rewrite IH1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- Cond2 in goal at 0(rank:2)
case string_eq (string3) (string1)(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
=================================================
Progress: 824


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = if string_eq (string3) (string1) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
string_eq (string1) (string2) = if string_eq (string3) (string1) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 10
rewrite Cond1 in goal at 0(rank:2)
rewrite Cond1 in goal at 2(rank:2)
rewrite IH1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite Cond1 in goal at 3(rank:2)
rewrite Cond1 in goal at 1(rank:2)
rewrite <- Cond2 in goal at 0(rank:2)
case string_eq (string3) (string1)(rank:2)
=================================================
Progress: 825


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string) (string2:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (string_list2) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
---------------------------------------
forall (string2:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (string_list2) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
intro string2(rank:1)
rewrite IH1 in goal at 1(rank:2)
rewrite IH1 in goal at 2(rank:2)
case string_eq (string3) (string1)(rank:2)
rewrite IH1 in goal at 0(rank:2)
=================================================
Progress: 826


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string) (string2:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (string_list2) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
---------------------------------------
forall (string1:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (string_list2) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:2)
rewrite IH1 in goal at 1(rank:2)
rewrite IH1 in goal at 2(rank:2)
=================================================
Progress: 827


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
---------------------------------------
forall (string2:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (string_list2) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
string2 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (string_list2) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
intro Cond1(rank:1)
rewrite IH1 in goal at 1(rank:2)
rewrite IH1 in goal at 2(rank:2)
case string_eq (string3) (string1)(rank:2)
rewrite IH1 in goal at 0(rank:2)
=================================================
Progress: 828


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
---------------------------------------
forall (string1:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (string_list2) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
string1 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (string_list2) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
intro Cond1(rank:1)
rewrite IH1 in goal at 1(rank:2)
rewrite IH1 in goal at 2(rank:2)
case string_eq (string3) (string1)(rank:2)
rewrite IH1 in goal at 0(rank:2)
=================================================
Progress: 829


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
string2 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (string_list2) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
string2 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (string_list2) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
intro Cond2(rank:1)
rewrite Cond1 in goal at 1(rank:2)
rewrite Cond1 in goal at 3(rank:2)
rewrite IH1 in goal at 0(rank:2)
rewrite IH1 in goal at 1(rank:2)
rewrite IH1 in goal at 2(rank:2)
rewrite Cond1 in goal at 2(rank:2)
rewrite Cond1 in goal at 0(rank:2)
case string_eq (string3) (string1)(rank:2)
=================================================
Progress: 830


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
string2 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (string_list2) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
string2 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
is_mem_ta1 (string_list2) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 8
rewrite Cond2 in goal at 0(rank:1)
rewrite Cond1 in goal at 0(rank:2)
rewrite Cond1 in goal at 2(rank:2)
rewrite Cond1 in goal at 3(rank:2)
rewrite <- Cond2 in goal at 0(rank:2)
case string_eq (string3) (string1)(rank:2)
rewrite Cond1 in goal at 1(rank:2)
rewrite IH1 in goal at 0(rank:2)
=================================================
Progress: 831


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (string_list2) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
is_mem_ta1 (string_list2) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 10
rewrite Cond2 in goal at 0(rank:1)
rewrite Cond1 in goal at 0(rank:2)
rewrite Cond1 in goal at 2(rank:2)
rewrite Cond1 in goal at 3(rank:2)
rewrite <- IH1 in goal at 0(rank:2)
rewrite <- IH1 in goal at 1(rank:2)
rewrite Cond1 in goal at 1(rank:2)
rewrite <- Cond2 in goal at 0(rank:2)
rewrite <- IH1 in goal at 2(rank:2)
case string_eq (string3) (string1)(rank:2)
=================================================
Progress: 832


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string1) then true else string_eq (string1) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string1) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else string_eq (string1) (string2) = true
---------------------------------------
string_eq (string1) (string2) = if string_eq (string3) (string1) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 13
rewrite Cond2 in goal at 0(rank:1)
rewrite Cond1 in goal at 0(rank:2)
rewrite Cond1 in goal at 2(rank:2)
rewrite Cond1 in goal at 3(rank:2)
rewrite IH1 in goal at 1(rank:2)
rewrite IH1 in goal at 2(rank:2)
rewrite Cond1 in goal at 1(rank:2)
rewrite IH1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- Cond2 in goal at 0(rank:2)
case string_eq (string3) (string1)(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
=================================================
Progress: 833


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = if string_eq (string3) (string1) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
string_eq (string1) (string2) = if string_eq (string3) (string1) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 10
rewrite Cond1 in goal at 0(rank:2)
rewrite Cond1 in goal at 2(rank:2)
rewrite IH1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite Cond1 in goal at 3(rank:2)
rewrite Cond1 in goal at 1(rank:2)
rewrite <- Cond2 in goal at 0(rank:2)
case string_eq (string3) (string1)(rank:2)
=================================================
Progress: 834


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
is_mem_ta1 (string_list2) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:1)
rewrite Cond1 in goal at 0(rank:2)
=================================================
Progress: 835


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else string_eq (string1) (string2) = true
---------------------------------------
string_eq (string1) (string2) = if string_eq (string3) (string1) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else string_eq (string1) (string2) = true
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite Cond1 in goal at 0(rank:2)
rewrite IH1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 836


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (string_list2) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (string_list2) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 6
intro Cond2(rank:1)
rewrite Cond1 in goal at 1(rank:2)
rewrite Cond1 in goal at 2(rank:2)
rewrite Cond1 in goal at 3(rank:2)
case string_eq (string3) (string1)(rank:2)
rewrite Cond1 in goal at 0(rank:2)
=================================================
Progress: 837


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (string_list2) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
is_mem_ta1 (string_list2) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 7
rewrite Cond2 in goal at 0(rank:1)
rewrite Cond1 in goal at 0(rank:2)
rewrite Cond1 in goal at 2(rank:2)
rewrite Cond1 in goal at 3(rank:2)
case string_eq (string3) (string1)(rank:2)
rewrite Cond1 in goal at 1(rank:2)
rewrite <- Cond2 in goal at 0(rank:2)
=================================================
Progress: 838


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
is_mem_ta1 (string_list2) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:2)
=================================================
Progress: 839


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (string_list2) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (string_list2) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 10
intro Cond2(rank:1)
rewrite Cond1 in goal at 1(rank:2)
rewrite Cond1 in goal at 3(rank:2)
rewrite <- IH1 in goal at 0(rank:2)
rewrite <- IH1 in goal at 1(rank:2)
rewrite <- IH1 in goal at 2(rank:2)
rewrite Cond1 in goal at 2(rank:2)
rewrite Cond1 in goal at 0(rank:2)
rewrite <- IH1 in goal at 3(rank:2)
case string_eq (string3) (string1)(rank:2)
=================================================
Progress: 840


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string1) then true else string_eq (string1) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string1) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string1) then true else string_eq (string1) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string1) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 14
intro Cond2(rank:1)
rewrite Cond1 in goal at 1(rank:2)
rewrite Cond1 in goal at 3(rank:2)
rewrite IH1 in goal at 0(rank:2)
rewrite IH1 in goal at 1(rank:2)
rewrite IH1 in goal at 2(rank:2)
rewrite Cond1 in goal at 2(rank:2)
rewrite Cond1 in goal at 0(rank:2)
rewrite IH1 in goal at 3(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 3(rank:2)
case string_eq (string3) (string1)(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 841


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = if string_eq (string3) (string1) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = if string_eq (string3) (string1) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
intro Cond2(rank:1)
rewrite Cond1 in goal at 1(rank:2)
rewrite Cond1 in goal at 3(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite Cond1 in goal at 2(rank:2)
rewrite Cond1 in goal at 0(rank:2)
case string_eq (string3) (string1)(rank:2)
=================================================
Progress: 842


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (string_list2) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
is_mem_ta1 (string_list2) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 10
rewrite Cond2 in goal at 0(rank:1)
rewrite Cond1 in goal at 0(rank:2)
rewrite Cond1 in goal at 2(rank:2)
rewrite Cond1 in goal at 3(rank:2)
rewrite <- IH1 in goal at 0(rank:2)
rewrite <- IH1 in goal at 1(rank:2)
rewrite Cond1 in goal at 1(rank:2)
rewrite <- Cond2 in goal at 0(rank:2)
rewrite <- IH1 in goal at 2(rank:2)
case string_eq (string3) (string1)(rank:2)
=================================================
Progress: 843


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string1) then true else string_eq (string1) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string1) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else string_eq (string1) (string2) = true
---------------------------------------
string_eq (string1) (string2) = if string_eq (string3) (string1) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 13
rewrite Cond2 in goal at 0(rank:1)
rewrite Cond1 in goal at 0(rank:2)
rewrite Cond1 in goal at 2(rank:2)
rewrite Cond1 in goal at 3(rank:2)
rewrite IH1 in goal at 1(rank:2)
rewrite IH1 in goal at 2(rank:2)
rewrite Cond1 in goal at 1(rank:2)
rewrite IH1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- Cond2 in goal at 0(rank:2)
case string_eq (string3) (string1)(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
=================================================
Progress: 844


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = if string_eq (string3) (string1) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
string_eq (string1) (string2) = if string_eq (string3) (string1) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 10
rewrite Cond1 in goal at 0(rank:2)
rewrite Cond1 in goal at 2(rank:2)
rewrite IH1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite Cond1 in goal at 3(rank:2)
rewrite Cond1 in goal at 1(rank:2)
rewrite <- Cond2 in goal at 0(rank:2)
case string_eq (string3) (string1)(rank:2)
=================================================
Progress: 845


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
is_mem_ta1 (string_list2) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:1)
rewrite Cond1 in goal at 0(rank:2)
=================================================
Progress: 846


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else string_eq (string1) (string2) = true
---------------------------------------
string_eq (string1) (string2) = if string_eq (string3) (string1) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else string_eq (string1) (string2) = true
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite Cond1 in goal at 0(rank:2)
rewrite IH1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 847


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
---------------------------------------
forall (string2:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (string_list2) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
string2 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (string_list2) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
intro Cond1(rank:1)
rewrite IH1 in goal at 1(rank:2)
rewrite IH1 in goal at 2(rank:2)
case string_eq (string3) (string1)(rank:2)
rewrite IH1 in goal at 0(rank:2)
=================================================
Progress: 848


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
string2 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (string_list2) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
string2 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (string_list2) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
intro Cond2(rank:1)
rewrite Cond1 in goal at 1(rank:2)
rewrite Cond1 in goal at 3(rank:2)
rewrite IH1 in goal at 0(rank:2)
rewrite IH1 in goal at 1(rank:2)
rewrite IH1 in goal at 2(rank:2)
rewrite Cond1 in goal at 2(rank:2)
rewrite Cond1 in goal at 0(rank:2)
case string_eq (string3) (string1)(rank:2)
=================================================
Progress: 849


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
string1 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (string_list2) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
string1 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (string_list2) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
intro Cond2(rank:1)
rewrite Cond1 in goal at 1(rank:2)
rewrite Cond1 in goal at 3(rank:2)
rewrite IH1 in goal at 0(rank:2)
rewrite IH1 in goal at 1(rank:2)
rewrite IH1 in goal at 2(rank:2)
rewrite Cond1 in goal at 2(rank:2)
rewrite Cond1 in goal at 0(rank:2)
case string_eq (string3) (string1)(rank:2)
=================================================
Progress: 850


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
string2 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (string_list2) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
string2 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
is_mem_ta1 (string_list2) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 8
rewrite Cond2 in goal at 0(rank:1)
rewrite Cond1 in goal at 0(rank:2)
rewrite Cond1 in goal at 2(rank:2)
rewrite Cond1 in goal at 3(rank:2)
rewrite <- Cond2 in goal at 0(rank:2)
case string_eq (string3) (string1)(rank:2)
rewrite Cond1 in goal at 1(rank:2)
rewrite IH1 in goal at 0(rank:2)
=================================================
Progress: 851


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
string2 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
is_mem_ta1 (string_list2) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
string2 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:2)
=================================================
Progress: 852


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
is_mem_ta1 (string_list2) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:1)
rewrite Cond1 in goal at 0(rank:2)
=================================================
Progress: 853


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else string_eq (string1) (string2) = true
---------------------------------------
string_eq (string1) (string2) = if string_eq (string3) (string1) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else string_eq (string1) (string2) = true
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite Cond1 in goal at 0(rank:2)
rewrite IH1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 854


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
string_eq (string1) (string2) = true

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 855


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (string_list2) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
is_mem_ta1 (string_list2) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 7
rewrite Cond2 in goal at 0(rank:1)
rewrite Cond1 in goal at 0(rank:2)
rewrite Cond1 in goal at 2(rank:2)
rewrite Cond1 in goal at 3(rank:2)
case string_eq (string3) (string1)(rank:2)
rewrite Cond1 in goal at 1(rank:2)
rewrite <- Cond2 in goal at 0(rank:2)
=================================================
Progress: 856


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
is_mem_ta1 (string_list2) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:2)
=================================================
Progress: 857


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (string_list2) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
is_mem_ta1 (string_list2) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 10
rewrite Cond2 in goal at 0(rank:1)
rewrite Cond1 in goal at 0(rank:2)
rewrite Cond1 in goal at 2(rank:2)
rewrite Cond1 in goal at 3(rank:2)
rewrite <- IH1 in goal at 0(rank:2)
rewrite <- IH1 in goal at 1(rank:2)
rewrite Cond1 in goal at 1(rank:2)
rewrite <- Cond2 in goal at 0(rank:2)
rewrite <- IH1 in goal at 2(rank:2)
case string_eq (string3) (string1)(rank:2)
=================================================
Progress: 858


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string1) then true else string_eq (string1) (string2) = true -> string_eq (string1) (string2) = if string_eq (string3) (string1) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else string_eq (string1) (string2) = true
---------------------------------------
string_eq (string1) (string2) = if string_eq (string3) (string1) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 13
rewrite Cond2 in goal at 0(rank:1)
rewrite Cond1 in goal at 0(rank:2)
rewrite Cond1 in goal at 2(rank:2)
rewrite Cond1 in goal at 3(rank:2)
rewrite IH1 in goal at 1(rank:2)
rewrite IH1 in goal at 2(rank:2)
rewrite Cond1 in goal at 1(rank:2)
rewrite IH1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- Cond2 in goal at 0(rank:2)
case string_eq (string3) (string1)(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
=================================================
Progress: 859


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = if string_eq (string3) (string1) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
string_eq (string1) (string2) = if string_eq (string3) (string1) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 10
rewrite Cond1 in goal at 0(rank:2)
rewrite Cond1 in goal at 2(rank:2)
rewrite IH1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite Cond1 in goal at 3(rank:2)
rewrite Cond1 in goal at 1(rank:2)
rewrite <- Cond2 in goal at 0(rank:2)
case string_eq (string3) (string1)(rank:2)
=================================================
Progress: 860


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
is_mem_ta1 (string_list2) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:1)
rewrite Cond1 in goal at 0(rank:2)
=================================================
Progress: 861


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else string_eq (string1) (string2) = true
---------------------------------------
string_eq (string1) (string2) = if string_eq (string3) (string1) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else string_eq (string1) (string2) = true
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite Cond1 in goal at 0(rank:2)
rewrite IH1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 862


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
string_eq (string1) (string2) = true

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 863


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
string2 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (string_list2) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
string2 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (string_list2) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
intro Cond2(rank:1)
rewrite Cond1 in goal at 1(rank:2)
rewrite Cond1 in goal at 3(rank:2)
rewrite IH1 in goal at 0(rank:2)
rewrite IH1 in goal at 1(rank:2)
rewrite IH1 in goal at 2(rank:2)
rewrite Cond1 in goal at 2(rank:2)
rewrite Cond1 in goal at 0(rank:2)
case string_eq (string3) (string1)(rank:2)
=================================================
Progress: 864


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
string2 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (string_list2) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
string2 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
is_mem_ta1 (string_list2) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 8
rewrite Cond2 in goal at 0(rank:1)
rewrite Cond1 in goal at 0(rank:2)
rewrite Cond1 in goal at 2(rank:2)
rewrite Cond1 in goal at 3(rank:2)
rewrite <- Cond2 in goal at 0(rank:2)
case string_eq (string3) (string1)(rank:2)
rewrite Cond1 in goal at 1(rank:2)
rewrite IH1 in goal at 0(rank:2)
=================================================
Progress: 865


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
string1 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (string_list2) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
string1 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
is_mem_ta1 (string_list2) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 8
rewrite Cond2 in goal at 0(rank:1)
rewrite Cond1 in goal at 0(rank:2)
rewrite Cond1 in goal at 2(rank:2)
rewrite Cond1 in goal at 3(rank:2)
rewrite <- Cond2 in goal at 0(rank:2)
case string_eq (string3) (string1)(rank:2)
rewrite Cond1 in goal at 1(rank:2)
rewrite IH1 in goal at 0(rank:2)
=================================================
Progress: 866


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
string2 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
is_mem_ta1 (string_list2) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
string2 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:2)
=================================================
Progress: 867


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
string_eq (string1) (string2) = true

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 868


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
is_mem_ta1 (string_list2) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:2)
=================================================
Progress: 869


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
is_mem_ta1 (string_list2) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:1)
rewrite Cond1 in goal at 0(rank:2)
=================================================
Progress: 870


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else string_eq (string1) (string2) = true
---------------------------------------
string_eq (string1) (string2) = if string_eq (string3) (string1) then true else string_eq (string1) (string2)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else string_eq (string1) (string2) = true
---------------------------------------
string_eq (string1) (string2) = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite Cond1 in goal at 0(rank:2)
rewrite IH1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 871


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
string_eq (string1) (string2) = true

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 872


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
string2 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (string_list2) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
string2 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
is_mem_ta1 (string_list2) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 8
rewrite Cond2 in goal at 0(rank:1)
rewrite Cond1 in goal at 0(rank:2)
rewrite Cond1 in goal at 2(rank:2)
rewrite Cond1 in goal at 3(rank:2)
rewrite <- Cond2 in goal at 0(rank:2)
case string_eq (string3) (string1)(rank:2)
rewrite Cond1 in goal at 1(rank:2)
rewrite IH1 in goal at 0(rank:2)
=================================================
Progress: 873


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
string2 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
is_mem_ta1 (string_list2) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
string2 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:2)
=================================================
Progress: 874


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
string1 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
is_mem_ta1 (string_list2) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string2 : string
string1 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:2)
=================================================
Progress: 875


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string2 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
string_eq (string1) (string2) = true

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 876


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
string2 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
is_mem_ta1 (string_list2) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->is_mem_ta1 (string_list1) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), string1 = string2->is_mem_ta1 (string_list2) (string1) = true -> string_eq (string1) (string2) = is_mem_ta1 (string_list2) (string1)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
string2 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:2)
=================================================
Progress: 877


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)

---------------------------------------
forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) = true -> is_mem_ta1 (string_list1) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string1 : string
---------------------------------------
forall (string2:string) (string3:string) (string_list1:string list), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) = true -> is_mem_ta1 (string_list1) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
induction string_list1(rank:0)
intro string2(rank:1)
intro string3(rank:1)
=================================================
Progress: 878


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string1 : string
---------------------------------------
forall (string2:string) (string3:string) (string_list1:string list), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) = true -> is_mem_ta1 (string_list1) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

2 conjecture(s) more...
>>> induction string_list1(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string1 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> is_mem_ta1 (Nil) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 879


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string1 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> is_mem_ta1 (Nil) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string1 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro string2(rank:1)
intro string3(rank:1)
=================================================
Progress: 880


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)

---------------------------------------
forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) = true -> is_mem_ta1 (string_list1) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string2 : string
---------------------------------------
forall (string1:string) (string3:string) (string_list1:string list), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) = true -> is_mem_ta1 (string_list1) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
induction string_list1(rank:0)
intro string3(rank:1)
=================================================
Progress: 881


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string2 : string
---------------------------------------
forall (string1:string) (string3:string) (string_list1:string list), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) = true -> is_mem_ta1 (string_list1) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

2 conjecture(s) more...
>>> induction string_list1(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string) (string3:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> is_mem_ta1 (Nil) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 882


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string) (string3:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> is_mem_ta1 (Nil) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string) (string3:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro string1(rank:1)
intro string3(rank:1)
=================================================
Progress: 883


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)

---------------------------------------
forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) = true -> is_mem_ta1 (string_list1) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro string3(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string3 : string
---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) = true -> is_mem_ta1 (string_list1) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction string_list1(rank:0)
=================================================
Progress: 884


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string3 : string
---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) = true -> is_mem_ta1 (string_list1) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

2 conjecture(s) more...
>>> induction string_list1(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string) (string2:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> is_mem_ta1 (Nil) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 885


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string) (string2:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> is_mem_ta1 (Nil) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string) (string2:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro string1(rank:1)
intro string2(rank:1)
=================================================
Progress: 886


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string1 : string
---------------------------------------
forall (string2:string) (string3:string) (string_list1:string list), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) = true -> is_mem_ta1 (string_list1) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string1 : string
string2 : string
---------------------------------------
forall (string3:string) (string_list1:string list), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) = true -> is_mem_ta1 (string_list1) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
induction string_list1(rank:0)
intro string3(rank:1)
=================================================
Progress: 887


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string1 : string
string2 : string
---------------------------------------
forall (string3:string) (string_list1:string list), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) = true -> is_mem_ta1 (string_list1) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

2 conjecture(s) more...
>>> induction string_list1(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string1 : string
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string3:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> is_mem_ta1 (Nil) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 888


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string1 : string
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string3:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> is_mem_ta1 (Nil) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string1 : string
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string3:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string3(rank:1)
=================================================
Progress: 889


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string1 : string
---------------------------------------
forall (string2:string) (string3:string) (string_list1:string list), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) = true -> is_mem_ta1 (string_list1) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro string3(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string1 : string
string3 : string
---------------------------------------
forall (string2:string) (string_list1:string list), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) = true -> is_mem_ta1 (string_list1) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
induction string_list1(rank:0)
case string_eq (string3) (string1)(rank:2)
=================================================
Progress: 890


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string1 : string
string3 : string
---------------------------------------
forall (string2:string) (string_list1:string list), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) = true -> is_mem_ta1 (string_list1) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

2 conjecture(s) more...
>>> induction string_list1(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string1 : string
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string2:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> is_mem_ta1 (Nil) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 891


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string1 : string
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string2:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> is_mem_ta1 (Nil) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string1 : string
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string2:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string2(rank:1)
=================================================
Progress: 892


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string2 : string
---------------------------------------
forall (string1:string) (string3:string) (string_list1:string list), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) = true -> is_mem_ta1 (string_list1) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro string3(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string2 : string
string3 : string
---------------------------------------
forall (string1:string) (string_list1:string list), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) = true -> is_mem_ta1 (string_list1) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction string_list1(rank:0)
=================================================
Progress: 893


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string2 : string
string3 : string
---------------------------------------
forall (string1:string) (string_list1:string list), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) = true -> is_mem_ta1 (string_list1) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

2 conjecture(s) more...
>>> induction string_list1(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string2 : string
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> is_mem_ta1 (Nil) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 894


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string2 : string
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> is_mem_ta1 (Nil) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string2 : string
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:1)
=================================================
Progress: 895


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string1 : string
string2 : string
---------------------------------------
forall (string3:string) (string_list1:string list), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) = true -> is_mem_ta1 (string_list1) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro string3(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string1 : string
string2 : string
string3 : string
---------------------------------------
forall (string_list1:string list), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) = true -> is_mem_ta1 (string_list1) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
induction string_list1(rank:0)
case string_eq (string3) (string1)(rank:2)
=================================================
Progress: 896


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string1 : string
string2 : string
string3 : string
---------------------------------------
forall (string_list1:string list), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) = true -> is_mem_ta1 (string_list1) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

2 conjecture(s) more...
>>> induction string_list1(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string1 : string
string2 : string
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> is_mem_ta1 (Nil) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 897


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string1 : string
string2 : string
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> is_mem_ta1 (Nil) (string1) = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string1 : string
string2 : string
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:1)
=================================================
Progress: 898


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
---------------------------------------
forall (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro string2(rank:1)
intro string3(rank:1)
=================================================
Progress: 899


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
---------------------------------------
forall (string1:string) (string3:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string3(rank:1)
=================================================
Progress: 900


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
>>> intro string3(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string_list1 : string list
Base1 : string_list1 = Nil
string3 : string
---------------------------------------
forall (string1:string) (string2:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string3
state_list
New Env

;;
Lemma List
forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)
End of Lemma List
=================================================
Progress: 901


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
intro string1(rank:1)
intro string2(rank:1)
intro string3(rank:1)
=================================================
Progress: 902


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string1 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string1 : string
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
---------------------------------------
forall (string3:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string3(rank:1)
=================================================
Progress: 903


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string1 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
>>> intro string3(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string1 : string
string_list1 : string list
Base1 : string_list1 = Nil
string3 : string
---------------------------------------
forall (string2:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case string_eq (string3) (string1)(rank:0)
=================================================
Progress: 904


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string1 : string
string_list1 : string list
Base1 : string_list1 = Nil
string3 : string
---------------------------------------
forall (string2:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string3) (string1)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string1 : string
string_list1 : string list
Base1 : string_list1 = Nil
string3 : string
Case1 : string_eq (string3) (string1) = true
---------------------------------------
forall (string2:string), string1 = string2->true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case1 at 0(rank:0)
intro string2(rank:1)
rewrite <- string_eqb_eq in Case1 at 0(rank:0)
=================================================
Progress: 905


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string1 : string
string_list1 : string list
Base1 : string_list1 = Nil
string3 : string
Case1 : string_eq (string3) (string1) = true
---------------------------------------
forall (string2:string), string1 = string2->true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string1 : string
string_list1 : string list
Base1 : string_list1 = Nil
string3 : string
Case1 : string3 = string1
---------------------------------------
forall (string2:string), string1 = string2->true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro string2(rank:1)
rewrite <- Case1 in goal at 0(rank:2)
=================================================
Progress: 906


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string1 : string
string_list1 : string list
Base1 : string_list1 = Nil
string3 : string
Case1 : string_eq (string3) (string1) = true
---------------------------------------
forall (string2:string), string1 = string2->true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string1 : string
string_list1 : string list
Base1 : string_list1 = Nil
string3 : string
Case1 : string1 = string3
---------------------------------------
forall (string2:string), string1 = string2->true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro string2(rank:1)
rewrite Case1 in goal at 0(rank:2)
=================================================
Progress: 907


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string) (string3:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
---------------------------------------
forall (string3:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string3(rank:1)
=================================================
Progress: 908


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string) (string3:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
>>> intro string3(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
string3 : string
---------------------------------------
forall (string1:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string3
state_list
=================================================
Progress: 909


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string) (string2:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
---------------------------------------
forall (string2:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro string2(rank:1)
case string_eq (string3) (string1)(rank:2)
=================================================
Progress: 910


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string) (string2:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
---------------------------------------
forall (string1:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 911


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string1 : string
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string3:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
>>> intro string3(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string1 : string
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
string3 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro Cond1(rank:1)
case string_eq (string3) (string1)(rank:2)
=================================================
Progress: 912


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string1 : string
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string2:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string1 : string
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro Cond1(rank:1)
case string_eq (string3) (string1)(rank:2)
=================================================
Progress: 913


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string2 : string
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string2 : string
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro Cond1(rank:1)
case string_eq (string3) (string1)(rank:2)
=================================================
Progress: 914


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string1 : string
string2 : string
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string1 : string
string2 : string
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
intro Cond2(rank:1)
rewrite Cond1 in goal at 1(rank:2)
rewrite Cond1 in goal at 2(rank:2)
rewrite Cond1 in goal at 3(rank:2)
case string_eq (string3) (string1)(rank:2)
rewrite Cond1 in goal at 0(rank:2)
=================================================
Progress: 915


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
---------------------------------------
forall (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
string2 : string
---------------------------------------
forall (string3:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string3(rank:1)
=================================================
Progress: 916


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
---------------------------------------
forall (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
>>> intro string3(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
string3 : string
---------------------------------------
forall (string2:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case string_eq (string3) (string1)(rank:0)
=================================================
Progress: 917


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
string3 : string
---------------------------------------
forall (string2:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string3) (string1)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
string3 : string
Case1 : string_eq (string3) (string1) = true
---------------------------------------
forall (string2:string), string1 = string2->true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case1 at 0(rank:0)
intro string2(rank:1)
rewrite <- string_eqb_eq in Case1 at 0(rank:0)
=================================================
Progress: 918


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
string3 : string
Case1 : string_eq (string3) (string1) = true
---------------------------------------
forall (string2:string), string1 = string2->true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
string3 : string
Case1 : string3 = string1
---------------------------------------
forall (string2:string), string1 = string2->true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro string2(rank:1)
rewrite <- Case1 in goal at 0(rank:2)
=================================================
Progress: 919


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
string3 : string
Case1 : string_eq (string3) (string1) = true
---------------------------------------
forall (string2:string), string1 = string2->true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
string3 : string
Case1 : string1 = string3
---------------------------------------
forall (string2:string), string1 = string2->true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro string2(rank:1)
rewrite Case1 in goal at 0(rank:2)
=================================================
Progress: 920


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
---------------------------------------
forall (string1:string) (string3:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
>>> intro string3(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
string3 : string
---------------------------------------
forall (string1:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 921


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string1 : string
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
---------------------------------------
forall (string3:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
>>> intro string3(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string1 : string
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
string3 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro Cond1(rank:1)
case string_eq (string3) (string1)(rank:2)
=================================================
Progress: 922


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
---------------------------------------
forall (string3:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
>>> intro string3(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
string3 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro Cond1(rank:1)
case string_eq (string3) (string1)(rank:2)
=================================================
Progress: 923


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
---------------------------------------
forall (string2:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
string2 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro Cond1(rank:1)
case string_eq (string3) (string1)(rank:2)
=================================================
Progress: 924


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string1 : string
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
string3 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string1 : string
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
string3 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
intro Cond2(rank:1)
rewrite Cond1 in goal at 1(rank:2)
rewrite Cond1 in goal at 2(rank:2)
rewrite Cond1 in goal at 3(rank:2)
case string_eq (string3) (string1)(rank:2)
rewrite Cond1 in goal at 0(rank:2)
=================================================
Progress: 925


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string1 : string
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string1 : string
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
intro Cond2(rank:1)
rewrite Cond1 in goal at 1(rank:2)
rewrite Cond1 in goal at 2(rank:2)
rewrite Cond1 in goal at 3(rank:2)
case string_eq (string3) (string1)(rank:2)
rewrite Cond1 in goal at 0(rank:2)
=================================================
Progress: 926


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string2 : string
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string2 : string
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
intro Cond2(rank:1)
rewrite Cond1 in goal at 1(rank:2)
rewrite Cond1 in goal at 2(rank:2)
rewrite Cond1 in goal at 3(rank:2)
case string_eq (string3) (string1)(rank:2)
rewrite Cond1 in goal at 0(rank:2)
=================================================
Progress: 927


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string1 : string
string2 : string
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string1 : string
string2 : string
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true
---------------------------------------
false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
rewrite Cond2 in goal at 0(rank:1)
rewrite Cond1 in goal at 0(rank:2)
rewrite Cond1 in goal at 1(rank:2)
rewrite <- Cond2 in goal at 0(rank:2)
case string_eq (string3) (string1)(rank:2)
rewrite Cond1 in goal at 2(rank:2)
=================================================
Progress: 928


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
string2 : string
---------------------------------------
forall (string3:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
>>> intro string3(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
string2 : string
string3 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro Cond1(rank:1)
case string_eq (string3) (string1)(rank:2)
=================================================
Progress: 929


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string1 : string
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
string3 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string1 : string
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
string3 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
intro Cond2(rank:1)
rewrite Cond1 in goal at 1(rank:2)
rewrite Cond1 in goal at 2(rank:2)
rewrite Cond1 in goal at 3(rank:2)
case string_eq (string3) (string1)(rank:2)
rewrite Cond1 in goal at 0(rank:2)
=================================================
Progress: 930


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
string3 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
string3 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
intro Cond2(rank:1)
rewrite Cond1 in goal at 1(rank:2)
rewrite Cond1 in goal at 2(rank:2)
rewrite Cond1 in goal at 3(rank:2)
case string_eq (string3) (string1)(rank:2)
rewrite Cond1 in goal at 0(rank:2)
=================================================
Progress: 931


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
string2 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
string2 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
intro Cond2(rank:1)
rewrite Cond1 in goal at 1(rank:2)
rewrite Cond1 in goal at 2(rank:2)
rewrite Cond1 in goal at 3(rank:2)
case string_eq (string3) (string1)(rank:2)
rewrite Cond1 in goal at 0(rank:2)
=================================================
Progress: 932


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string1 : string
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
string3 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string1 : string
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
string3 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true
---------------------------------------
false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
rewrite Cond2 in goal at 0(rank:1)
rewrite Cond1 in goal at 0(rank:2)
rewrite Cond1 in goal at 1(rank:2)
rewrite <- Cond2 in goal at 0(rank:2)
case string_eq (string3) (string1)(rank:2)
rewrite Cond1 in goal at 2(rank:2)
=================================================
Progress: 933


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string1 : string
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string1 : string
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true
---------------------------------------
false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
rewrite Cond2 in goal at 0(rank:1)
rewrite Cond1 in goal at 0(rank:2)
rewrite Cond1 in goal at 1(rank:2)
rewrite <- Cond2 in goal at 0(rank:2)
case string_eq (string3) (string1)(rank:2)
rewrite Cond1 in goal at 2(rank:2)
=================================================
Progress: 934


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string2 : string
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string2 : string
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true
---------------------------------------
false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
rewrite Cond2 in goal at 0(rank:1)
rewrite Cond1 in goal at 0(rank:2)
rewrite Cond1 in goal at 1(rank:2)
rewrite <- Cond2 in goal at 0(rank:2)
case string_eq (string3) (string1)(rank:2)
rewrite Cond1 in goal at 2(rank:2)
=================================================
Progress: 935


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string1 : string
string2 : string
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true
---------------------------------------
false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string1 : string
string2 : string
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true
---------------------------------------
false = true

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 936


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
string2 : string
string3 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
string2 : string
string3 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
intro Cond2(rank:1)
rewrite Cond1 in goal at 1(rank:2)
rewrite Cond1 in goal at 2(rank:2)
rewrite Cond1 in goal at 3(rank:2)
case string_eq (string3) (string1)(rank:2)
rewrite Cond1 in goal at 0(rank:2)
=================================================
Progress: 937


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string1 : string
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
string3 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string1 : string
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
string3 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true
---------------------------------------
false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
rewrite Cond2 in goal at 0(rank:1)
rewrite Cond1 in goal at 0(rank:2)
rewrite Cond1 in goal at 1(rank:2)
rewrite <- Cond2 in goal at 0(rank:2)
case string_eq (string3) (string1)(rank:2)
rewrite Cond1 in goal at 2(rank:2)
=================================================
Progress: 938


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
string3 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
string3 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true
---------------------------------------
false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
rewrite Cond2 in goal at 0(rank:1)
rewrite Cond1 in goal at 0(rank:2)
rewrite Cond1 in goal at 1(rank:2)
rewrite <- Cond2 in goal at 0(rank:2)
case string_eq (string3) (string1)(rank:2)
rewrite Cond1 in goal at 2(rank:2)
=================================================
Progress: 939


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
string2 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
string2 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true
---------------------------------------
false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
rewrite Cond2 in goal at 0(rank:1)
rewrite Cond1 in goal at 0(rank:2)
rewrite Cond1 in goal at 1(rank:2)
rewrite <- Cond2 in goal at 0(rank:2)
case string_eq (string3) (string1)(rank:2)
rewrite Cond1 in goal at 2(rank:2)
=================================================
Progress: 940


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string1 : string
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
string3 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true
---------------------------------------
false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string1 : string
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
string3 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true
---------------------------------------
false = true

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 941


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string1 : string
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true
---------------------------------------
false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string1 : string
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true
---------------------------------------
false = true

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 942


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string2 : string
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true
---------------------------------------
false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string2 : string
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true
---------------------------------------
false = true

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 943


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
string2 : string
string3 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
string2 : string
string3 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true
---------------------------------------
false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
rewrite Cond2 in goal at 0(rank:1)
rewrite Cond1 in goal at 0(rank:2)
rewrite Cond1 in goal at 1(rank:2)
rewrite <- Cond2 in goal at 0(rank:2)
case string_eq (string3) (string1)(rank:2)
rewrite Cond1 in goal at 2(rank:2)
=================================================
Progress: 944


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string1 : string
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
string3 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true
---------------------------------------
false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string1 : string
string_list1 : string list
Base1 : string_list1 = Nil
string2 : string
string3 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true
---------------------------------------
false = true

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 945


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
string3 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true
---------------------------------------
false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
string3 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true
---------------------------------------
false = true

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 946


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
string2 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true
---------------------------------------
false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
string2 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true
---------------------------------------
false = true

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 947


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
string2 : string
string3 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true
---------------------------------------
false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
string2 : string
string3 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true
---------------------------------------
false = true

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 948


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string1 : string
string_list1 : string list
Base1 : string_list1 = Nil
string3 : string
Case1 : string_eq (string3) (string1) = true
---------------------------------------
forall (string2:string), string1 = string2->true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string1 : string
string_list1 : string list
Base1 : string_list1 = Nil
string3 : string
Case1 : string_eq (string3) (string1) = true
string2 : string
---------------------------------------
string1 = string2->true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 5
intro Cond1(rank:1)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 3(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
=================================================
Progress: 949


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string1 : string
string_list1 : string list
Base1 : string_list1 = Nil
string3 : string
Case1 : string3 = string1
---------------------------------------
forall (string2:string), string1 = string2->true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string1 : string
string_list1 : string list
Base1 : string_list1 = Nil
string3 : string
Case1 : string3 = string1
string2 : string
---------------------------------------
string1 = string2->true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro Cond1(rank:1)
rewrite <- Case1 in goal at 0(rank:2)
=================================================
Progress: 950


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string1 : string
string_list1 : string list
Base1 : string_list1 = Nil
string3 : string
Case1 : string1 = string3
---------------------------------------
forall (string2:string), string1 = string2->true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string1 : string
string_list1 : string list
Base1 : string_list1 = Nil
string3 : string
Case1 : string1 = string3
string2 : string
---------------------------------------
string1 = string2->true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro Cond1(rank:1)
rewrite Case1 in goal at 0(rank:2)
=================================================
Progress: 951


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
string3 : string
Case1 : string_eq (string3) (string1) = true
---------------------------------------
forall (string2:string), string1 = string2->true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
string3 : string
Case1 : string_eq (string3) (string1) = true
string2 : string
---------------------------------------
string1 = string2->true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 5
intro Cond1(rank:1)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 3(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
=================================================
Progress: 952


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
string3 : string
Case1 : string3 = string1
---------------------------------------
forall (string2:string), string1 = string2->true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
string3 : string
Case1 : string3 = string1
string2 : string
---------------------------------------
string1 = string2->true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro Cond1(rank:1)
rewrite <- Case1 in goal at 0(rank:2)
=================================================
Progress: 953


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
string3 : string
Case1 : string1 = string3
---------------------------------------
forall (string2:string), string1 = string2->true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
string3 : string
Case1 : string1 = string3
string2 : string
---------------------------------------
string1 = string2->true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro Cond1(rank:1)
rewrite Case1 in goal at 0(rank:2)
=================================================
Progress: 954


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string1 : string
string_list1 : string list
Base1 : string_list1 = Nil
string3 : string
Case1 : string_eq (string3) (string1) = true
string2 : string
---------------------------------------
string1 = string2->true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string1 : string
string_list1 : string list
Base1 : string_list1 = Nil
string3 : string
Case1 : string_eq (string3) (string1) = true
string2 : string
Cond1 : string1 = string2
---------------------------------------
true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 5
intro Cond2(rank:1)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 3(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
=================================================
Progress: 955


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string1 : string
string_list1 : string list
Base1 : string_list1 = Nil
string3 : string
Case1 : string3 = string1
string2 : string
---------------------------------------
string1 = string2->true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string1 : string
string_list1 : string list
Base1 : string_list1 = Nil
string3 : string
Case1 : string3 = string1
string2 : string
Cond1 : string1 = string2
---------------------------------------
true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:1)
=================================================
Progress: 956


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string1 : string
string_list1 : string list
Base1 : string_list1 = Nil
string3 : string
Case1 : string1 = string3
string2 : string
---------------------------------------
string1 = string2->true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string1 : string
string_list1 : string list
Base1 : string_list1 = Nil
string3 : string
Case1 : string1 = string3
string2 : string
Cond1 : string1 = string2
---------------------------------------
true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:1)
=================================================
Progress: 957


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
string3 : string
Case1 : string_eq (string3) (string1) = true
string2 : string
---------------------------------------
string1 = string2->true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
string3 : string
Case1 : string_eq (string3) (string1) = true
string2 : string
Cond1 : string1 = string2
---------------------------------------
true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 5
intro Cond2(rank:1)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 3(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
=================================================
Progress: 958


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
string3 : string
Case1 : string3 = string1
string2 : string
---------------------------------------
string1 = string2->true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
string3 : string
Case1 : string3 = string1
string2 : string
Cond1 : string1 = string2
---------------------------------------
true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:1)
=================================================
Progress: 959


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
string3 : string
Case1 : string1 = string3
string2 : string
---------------------------------------
string1 = string2->true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
string3 : string
Case1 : string1 = string3
string2 : string
Cond1 : string1 = string2
---------------------------------------
true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:1)
=================================================
Progress: 960


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string1 : string
string_list1 : string list
Base1 : string_list1 = Nil
string3 : string
Case1 : string_eq (string3) (string1) = true
string2 : string
Cond1 : string1 = string2
---------------------------------------
true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string1 : string
string_list1 : string list
Base1 : string_list1 = Nil
string3 : string
Case1 : string_eq (string3) (string1) = true
string2 : string
Cond1 : string1 = string2
Cond2 : true = true
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:2)
=================================================
Progress: 961


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string1 : string
string_list1 : string list
Base1 : string_list1 = Nil
string3 : string
Case1 : string3 = string1
string2 : string
Cond1 : string1 = string2
---------------------------------------
true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string1 : string
string_list1 : string list
Base1 : string_list1 = Nil
string3 : string
Case1 : string3 = string1
string2 : string
Cond1 : string1 = string2
Cond2 : true = true
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 962


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string1 : string
string_list1 : string list
Base1 : string_list1 = Nil
string3 : string
Case1 : string1 = string3
string2 : string
Cond1 : string1 = string2
---------------------------------------
true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string1 : string
string_list1 : string list
Base1 : string_list1 = Nil
string3 : string
Case1 : string1 = string3
string2 : string
Cond1 : string1 = string2
Cond2 : true = true
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 963


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
string3 : string
Case1 : string_eq (string3) (string1) = true
string2 : string
Cond1 : string1 = string2
---------------------------------------
true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
string3 : string
Case1 : string_eq (string3) (string1) = true
string2 : string
Cond1 : string1 = string2
Cond2 : true = true
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:2)
=================================================
Progress: 964


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
string3 : string
Case1 : string3 = string1
string2 : string
Cond1 : string1 = string2
---------------------------------------
true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
string3 : string
Case1 : string3 = string1
string2 : string
Cond1 : string1 = string2
Cond2 : true = true
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 965


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
string3 : string
Case1 : string1 = string3
string2 : string
Cond1 : string1 = string2
---------------------------------------
true = true -> false = true

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2->is_mem_ta1 (Cons (string3) (string_list1)) (string1) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (Cons (string3) (string_list1)) (string1)
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
string3 : string
Case1 : string1 = string3
string2 : string
Cond1 : string1 = string2
Cond2 : true = true
---------------------------------------
false = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 966


1st goal of : forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)
string1 : string
---------------------------------------
forall (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
intro string2(rank:1)
intro string3(rank:1)
=================================================
Progress: 967


1st goal of : forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)
string2 : string
---------------------------------------
forall (string1:string) (string3:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string3(rank:1)
=================================================
Progress: 968


1st goal of : forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

---------------------------------------
forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro string3(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)
string3 : string
---------------------------------------
forall (string1:string) (string2:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 969


1st goal of : forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)
string1 : string
---------------------------------------
forall (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)
string1 : string
string2 : string
---------------------------------------
forall (string3:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string3(rank:1)
=================================================
Progress: 970


1st goal of : forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)
string1 : string
---------------------------------------
forall (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro string3(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)
string1 : string
string3 : string
---------------------------------------
forall (string2:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string3) (string1)(rank:0)
=================================================
Progress: 971


1st goal of : forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)
string1 : string
string3 : string
---------------------------------------
forall (string2:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

0 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string3) (string1)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)
string1 : string
string3 : string
Case1 : string_eq (string3) (string1) = true
---------------------------------------
forall (string2:string), string1 = string2->true = true -> false = true

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case1 at 0(rank:0)
intro string2(rank:1)
rewrite <- string_eqb_eq in Case1 at 0(rank:0)
=================================================
Progress: 972


1st goal of : forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)
string1 : string
string3 : string
Case1 : string_eq (string3) (string1) = true
---------------------------------------
forall (string2:string), string1 = string2->true = true -> false = true

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)
string1 : string
string3 : string
Case1 : string3 = string1
---------------------------------------
forall (string2:string), string1 = string2->true = true -> false = true

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
intro string2(rank:1)
rewrite <- Case1 in goal at 0(rank:2)
=================================================
Progress: 973


1st goal of : forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)
string1 : string
string3 : string
Case1 : string_eq (string3) (string1) = true
---------------------------------------
forall (string2:string), string1 = string2->true = true -> false = true

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)
string1 : string
string3 : string
Case1 : string1 = string3
---------------------------------------
forall (string2:string), string1 = string2->true = true -> false = true

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
intro string2(rank:1)
rewrite Case1 in goal at 0(rank:2)
=================================================
Progress: 974


1st goal of : forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)
string2 : string
---------------------------------------
forall (string1:string) (string3:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro string3(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)
string2 : string
string3 : string
---------------------------------------
forall (string1:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 975


1st goal of : forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)
string1 : string
string2 : string
---------------------------------------
forall (string3:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro string3(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)
string1 : string
string2 : string
string3 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
intro Cond1(rank:1)
case string_eq (string3) (string1)(rank:2)
=================================================
Progress: 976


1st goal of : forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)
string1 : string
string2 : string
string3 : string
---------------------------------------
string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)
string1 : string
string2 : string
string3 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
intro Cond2(rank:1)
rewrite Cond1 in goal at 1(rank:2)
rewrite Cond1 in goal at 2(rank:2)
rewrite Cond1 in goal at 3(rank:2)
case string_eq (string3) (string1)(rank:2)
rewrite Cond1 in goal at 0(rank:2)
=================================================
Progress: 977


1st goal of : forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)
string1 : string
string2 : string
string3 : string
Cond1 : string1 = string2
---------------------------------------
if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)
string1 : string
string2 : string
string3 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true
---------------------------------------
false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 6
rewrite Cond2 in goal at 0(rank:1)
rewrite Cond1 in goal at 0(rank:2)
rewrite Cond1 in goal at 1(rank:2)
rewrite <- Cond2 in goal at 0(rank:2)
case string_eq (string3) (string1)(rank:2)
rewrite Cond1 in goal at 2(rank:2)
=================================================
Progress: 978


1st goal of : forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)
string1 : string
string2 : string
string3 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true
---------------------------------------
false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)

0 goal(s) more...

3 conjecture(s) more...
>>> rewrite Cond2 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)
string1 : string
string2 : string
string3 : string
Cond1 : string1 = string2
Cond2 : if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true
---------------------------------------
false = true

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 979


1st goal of : forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)
string1 : string
string3 : string
Case1 : string_eq (string3) (string1) = true
---------------------------------------
forall (string2:string), string1 = string2->true = true -> false = true

1 goal(s) more...

3 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)
string1 : string
string3 : string
Case1 : string_eq (string3) (string1) = true
string2 : string
---------------------------------------
string1 = string2->true = true -> false = true

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 5
intro Cond1(rank:1)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 3(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
=================================================
Progress: 980


1st goal of : forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)
string1 : string
string3 : string
Case1 : string3 = string1
---------------------------------------
forall (string2:string), string1 = string2->true = true -> false = true

1 goal(s) more...

3 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)
string1 : string
string3 : string
Case1 : string3 = string1
string2 : string
---------------------------------------
string1 = string2->true = true -> false = true

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
intro Cond1(rank:1)
rewrite <- Case1 in goal at 0(rank:2)
=================================================
Progress: 981


1st goal of : forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)
string1 : string
string3 : string
Case1 : string1 = string3
---------------------------------------
forall (string2:string), string1 = string2->true = true -> false = true

1 goal(s) more...

3 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)
string1 : string
string3 : string
Case1 : string1 = string3
string2 : string
---------------------------------------
string1 = string2->true = true -> false = true

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
intro Cond1(rank:1)
rewrite Case1 in goal at 0(rank:2)
=================================================
Progress: 982


1st goal of : forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)
string1 : string
string3 : string
Case1 : string_eq (string3) (string1) = true
string2 : string
---------------------------------------
string1 = string2->true = true -> false = true

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)
string1 : string
string3 : string
Case1 : string_eq (string3) (string1) = true
string2 : string
Cond1 : string1 = string2
---------------------------------------
true = true -> false = true

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 5
intro Cond2(rank:1)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 3(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
=================================================
Progress: 983


1st goal of : forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)
string1 : string
string3 : string
Case1 : string3 = string1
string2 : string
---------------------------------------
string1 = string2->true = true -> false = true

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)
string1 : string
string3 : string
Case1 : string3 = string1
string2 : string
Cond1 : string1 = string2
---------------------------------------
true = true -> false = true

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:1)
=================================================
Progress: 984


1st goal of : forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)
string1 : string
string3 : string
Case1 : string1 = string3
string2 : string
---------------------------------------
string1 = string2->true = true -> false = true

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)
string1 : string
string3 : string
Case1 : string1 = string3
string2 : string
Cond1 : string1 = string2
---------------------------------------
true = true -> false = true

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:1)
=================================================
Progress: 985


1st goal of : forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)
string1 : string
string3 : string
Case1 : string_eq (string3) (string1) = true
string2 : string
Cond1 : string1 = string2
---------------------------------------
true = true -> false = true

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)
string1 : string
string3 : string
Case1 : string_eq (string3) (string1) = true
string2 : string
Cond1 : string1 = string2
Cond2 : true = true
---------------------------------------
false = true

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:2)
=================================================
Progress: 986


1st goal of : forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)
string1 : string
string3 : string
Case1 : string3 = string1
string2 : string
Cond1 : string1 = string2
---------------------------------------
true = true -> false = true

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)
string1 : string
string3 : string
Case1 : string3 = string1
string2 : string
Cond1 : string1 = string2
Cond2 : true = true
---------------------------------------
false = true

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 987


1st goal of : forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)
string1 : string
string3 : string
Case1 : string1 = string3
string2 : string
Cond1 : string1 = string2
---------------------------------------
true = true -> false = true

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string), string1 = string2->if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> false = if string_eq (string3) (string1) then true else is_mem_ta1 (Nil) (string1)
string1 : string
string3 : string
Case1 : string1 = string3
string2 : string
Cond1 : string1 = string2
Cond2 : true = true
---------------------------------------
false = true

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 988


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 3(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 989


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 990


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
rewrite Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
=================================================
Progress: 991


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
string_eq (string1) (string1) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 992


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
string_eq (string1) (string1) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
string_eq (string1) (string1) = is_mem_ta1 (string_list1) (string1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:2)
=================================================
Progress: 993


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 1(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
string_eq (string1) (string1) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 994


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
string_eq (string1) (string1) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
string_eq (string1) (string1) = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:2)
=================================================
Progress: 995


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 2(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 996


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 997


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 3(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 998


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 999


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
string_eq (string2) (string2) = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string2)(rank:0)
=================================================
Progress: 1000


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
string_eq (string2) (string2) = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string2) = true
---------------------------------------
string_eq (string2) (string2) = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:2)
=================================================
Progress: 1001


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
string_eq (string2) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 1002


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
string_eq (string2) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
string_eq (string2) (string2) = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:2)
=================================================
Progress: 1003


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string2)(rank:0)
=================================================
Progress: 1004


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string2) = true
---------------------------------------
string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 1005


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 3(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 1006


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 1007


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
rewrite Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
=================================================
Progress: 1008


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 1009


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 1(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 1010


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 2(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 1011


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 1012


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 1013


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 1014


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 1015


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 1(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 1016


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 2(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 1017


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 1018


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 1019


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 1020


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string_eq (string1) (string2) = true
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string_eq (string1) (string2) = true
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case1 at 0(rank:0)
rewrite <- Case1 in goal at 0(rank:1)
rewrite <- string_eqb_eq in Case1 at 0(rank:0)
=================================================
Progress: 1021


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string_eq (string1) (string2) = true
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:2)
=================================================
Progress: 1022


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string_eq (string1) (string2) = true
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:2)
=================================================
Progress: 1023


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string_eq (string1) (string2) = true
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string_eq (string1) (string2) = true
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite string_eqb_eq in Case1 at 0(rank:0)
rewrite <- string_eqb_eq in Case1 at 0(rank:0)
=================================================
Progress: 1024


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string_eq (string1) (string2) = true
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
rewrite Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
=================================================
Progress: 1025


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string_eq (string1) (string2) = true
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
rewrite Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 1(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
=================================================
Progress: 1026


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string2)(rank:0)
=================================================
Progress: 1027


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string2) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 1028


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 1(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string2)(rank:0)
=================================================
Progress: 1029


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string2) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 1030


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 2(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 1031


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 1032


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 1033


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 1034


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 1035


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 1036


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 1037


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 1038


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 1039


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 1040


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 1041


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 1(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 1042


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 1043


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 2(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 1044


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 1045


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string2)(rank:0)
=================================================
Progress: 1046


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string2) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 1047


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string2)(rank:0)
=================================================
Progress: 1048


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string2) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 1049


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 1050


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 1051


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 1052


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string_eq (string1) (string2) = true
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string_eq (string1) (string2) = true
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite string_eqb_eq in Case1 at 0(rank:0)
rewrite <- string_eqb_eq in Case1 at 0(rank:0)
=================================================
Progress: 1053


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string_eq (string1) (string2) = true
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
rewrite Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
=================================================
Progress: 1054


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string_eq (string1) (string2) = true
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
rewrite Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 1(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
=================================================
Progress: 1055


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
string_eq (string2) (string2) = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string2)(rank:0)
=================================================
Progress: 1056


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
string_eq (string2) (string2) = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string2) = true
---------------------------------------
string_eq (string2) (string2) = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:2)
=================================================
Progress: 1057


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 1(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
string_eq (string2) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 1058


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
string_eq (string2) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
string_eq (string2) (string2) = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:2)
=================================================
Progress: 1059


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 2(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string2)(rank:0)
=================================================
Progress: 1060


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string2) = true
---------------------------------------
string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 1061


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 3(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 1062


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 1063


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
string_eq (string1) (string1) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 1064


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
string_eq (string1) (string1) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
string_eq (string1) (string1) = is_mem_ta1 (string_list1) (string1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:2)
=================================================
Progress: 1065


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
string_eq (string1) (string1) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 1066


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
string_eq (string1) (string1) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
string_eq (string1) (string1) = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:2)
=================================================
Progress: 1067


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 1068


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 1069


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 3(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 1070


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 1071


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
rewrite Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
=================================================
Progress: 1072


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
string_eq (string1) (string1) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 1073


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
string_eq (string1) (string1) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
string_eq (string1) (string1) = is_mem_ta1 (string_list1) (string1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:2)
=================================================
Progress: 1074


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 1(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
string_eq (string1) (string1) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 1075


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
string_eq (string1) (string1) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
string_eq (string1) (string1) = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:2)
=================================================
Progress: 1076


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 2(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 1077


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 1078


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 3(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 1079


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 1080


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
string_eq (string2) (string2) = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string2)(rank:0)
=================================================
Progress: 1081


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
string_eq (string2) (string2) = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string2) = true
---------------------------------------
string_eq (string2) (string2) = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:2)
=================================================
Progress: 1082


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
string_eq (string2) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 1083


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
string_eq (string2) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
string_eq (string2) (string2) = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite string_refl in goal at 0(rank:2)
=================================================
Progress: 1084


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string2)(rank:0)
=================================================
Progress: 1085


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string2) = true
---------------------------------------
string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 1086


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 3(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 1087


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 1088


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
rewrite Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
=================================================
Progress: 1089


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string2)(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
Case2 : is_mem_ta1 (string_list1) (string2) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 1090


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 1091


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string1 = string2
---------------------------------------
true = if if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string2) (Cons (string3) (string_list2)))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string1 = string2
---------------------------------------
true = if if is_mem_ta1 (string_list2) (string3) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string2) (Cons (string3) (string_list2)))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case if is_mem_ta1 (string_list2) (string3) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string3) (string_list2))(rank:0)
=================================================
Progress: 1092


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string1 = string2
---------------------------------------
true = if if is_mem_ta1 (string_list2) (string3) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string2) (Cons (string3) (string_list2)))

3 goal(s) more...

0 conjecture(s) more...
>>> case if is_mem_ta1 (string_list2) (string3) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string3) (string_list2))(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string1 = string2
Case2 : if is_mem_ta1 (string_list2) (string3) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) = true
---------------------------------------
true = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case string_eq (string3) (string2)(rank:0)
=================================================
Progress: 1093


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string1 = string2
Case2 : if is_mem_ta1 (string_list2) (string3) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) = true
---------------------------------------
true = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string1 = string2
Case2 : if is_mem_ta1 (string_list2) (string3) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) = true
Case3 : string_eq (string3) (string2) = true
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 1094


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string1 = string2
Case2 : if is_mem_ta1 (string_list2) (string3) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) = true
Case3 : string_eq (string3) (string2) = true
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string1 = string2
Case2 : if is_mem_ta1 (string_list2) (string3) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) = true
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 0
previous tactics
simpl in goal
intro string1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
rewrite IH1 in goal at 0
case if is_mem_ta1 (string_list2) (string3) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string3) (string_list2))
case string_eq (string3) (string2)
reflexivity


1st goal of : any
lambda1 : lambda
string2 : string
string_list1 : string list
string3 : string
string1 : string
---------------------------------------
forall (string_list2:string list), true = is_mem_ta1 (string_list2) (string2)

0 goal(s) more...

0 conjecture(s) more...
state_list
New Env

;;
Lemma List
forall (string2:string) (string_list2:string list), true = is_mem_ta1 (string_list2) (string2)
End of Lemma List
=================================================
Progress: 1095


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string1 = string2
Case2 : if is_mem_ta1 (string_list2) (string3) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) = true
Case3 : string_eq (string3) (string2) = true
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
>>> assert forall (string2:string) (string_list2:string list), true = is_mem_ta1 (string_list2) (string2)(rank : 0)


1st goal of : forall (string1:string) (string_list1:string list), true = is_mem_ta1 (string_list1) (string1)

---------------------------------------
forall (string1:string) (string_list1:string list), true = is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
induction string_list1(rank:0)
intro string1(rank:1)
=================================================
Progress: 1096


1st goal of : forall (string1:string) (string_list1:string list), true = is_mem_ta1 (string_list1) (string1)

---------------------------------------
forall (string1:string) (string_list1:string list), true = is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> induction string_list1(rank : 0)


1st goal of : forall (string1:string) (string_list1:string list), true = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string), true = is_mem_ta1 (Nil) (string1)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 1097


1st goal of : forall (string1:string) (string_list1:string list), true = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string), true = is_mem_ta1 (Nil) (string1)

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (string1:string) (string_list1:string list), true = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string), true = false

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro string1(rank:1)
=================================================
Progress: 1098


1st goal of : forall (string1:string) (string_list1:string list), true = is_mem_ta1 (string_list1) (string1)

---------------------------------------
forall (string1:string) (string_list1:string list), true = is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (string1:string) (string_list1:string list), true = is_mem_ta1 (string_list1) (string1)
string1 : string
---------------------------------------
forall (string_list1:string list), true = is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction string_list1(rank:0)
=================================================
Progress: 1099


1st goal of : forall (string1:string) (string_list1:string list), true = is_mem_ta1 (string_list1) (string1)
string1 : string
---------------------------------------
forall (string_list1:string list), true = is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> induction string_list1(rank : 0)


1st goal of : forall (string1:string) (string_list1:string list), true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
true = is_mem_ta1 (Nil) (string1)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 1100


1st goal of : forall (string1:string) (string_list1:string list), true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
true = is_mem_ta1 (Nil) (string1)

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (string1:string) (string_list1:string list), true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
true = false

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
state_list
=================================================
Progress: 1101


1st goal of : forall (string1:string) (string_list1:string list), true = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string), true = false

1 goal(s) more...

1 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (string1:string) (string_list1:string list), true = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
---------------------------------------
true = false

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 1102


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string1 = string2
---------------------------------------
true = if if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string2) (Cons (string3) (string_list2)))

3 goal(s) more...

0 conjecture(s) more...
>>> case if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string1 = string2
Case2 : if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true
---------------------------------------
true = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:2)
case string_eq (string3) (string2)(rank:2)
=================================================
Progress: 1103


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string2 = string1
---------------------------------------
true = if if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string2) (Cons (string3) (string_list2)))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string2 = string1
---------------------------------------
true = if if is_mem_ta1 (string_list2) (string3) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string2) (Cons (string3) (string_list2)))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case if is_mem_ta1 (string_list2) (string3) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string3) (string_list2))(rank:0)
=================================================
Progress: 1104


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string2 = string1
---------------------------------------
true = if if is_mem_ta1 (string_list2) (string3) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string2) (Cons (string3) (string_list2)))

3 goal(s) more...

0 conjecture(s) more...
>>> case if is_mem_ta1 (string_list2) (string3) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string3) (string_list2))(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string2 = string1
Case2 : if is_mem_ta1 (string_list2) (string3) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) = true
---------------------------------------
true = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case string_eq (string3) (string2)(rank:0)
=================================================
Progress: 1105


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string2 = string1
Case2 : if is_mem_ta1 (string_list2) (string3) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) = true
---------------------------------------
true = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string2 = string1
Case2 : if is_mem_ta1 (string_list2) (string3) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) = true
Case3 : string_eq (string3) (string2) = true
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 1106


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string2 = string1
Case2 : if is_mem_ta1 (string_list2) (string3) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) = true
Case3 : string_eq (string3) (string2) = true
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string2 = string1
Case2 : if is_mem_ta1 (string_list2) (string3) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) = true
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 0
=================================================
Progress: 1107


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string2 = string1
---------------------------------------
true = if if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string2) (Cons (string3) (string_list2)))

3 goal(s) more...

0 conjecture(s) more...
>>> case if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string2 = string1
Case2 : if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true
---------------------------------------
true = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:2)
case string_eq (string3) (string2)(rank:2)
=================================================
Progress: 1108


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 1109


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 1(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 1110


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 2(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 1111


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 1112


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 1113


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 1114


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string2)(rank:0)
=================================================
Progress: 1115


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string2) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 1116


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 1(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string2)(rank:0)
=================================================
Progress: 1117


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string2) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 1118


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 2(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 1119


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 1120


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 1121


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 1122


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 1123


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 1124


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 1125


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 1126


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 1127


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 1128


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 1(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 1129


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 2(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 1130


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 1131


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 1132


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 1133


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 1134


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 1135


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 1(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 1136


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 1137


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 2(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 1138


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 1139


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string2)(rank:0)
=================================================
Progress: 1140


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string2) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 1141


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string2)(rank:0)
=================================================
Progress: 1142


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string2) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 1143


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 1144


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string2) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 1145


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 1146


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string1) (string2) = true
---------------------------------------
true = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string1) (string2) = true
Case3 : string_eq (string3) (string2) = true
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 1147


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string1) (string2) = true
Case3 : string_eq (string3) (string2) = true
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string1) (string2) = true
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite string_eqb_eq in Case2 at 0(rank:0)
rewrite <- string_eqb_eq in Case2 at 0(rank:0)
=================================================
Progress: 1148


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string1) (string2) = true
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string1 = string2
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:2)
=================================================
Progress: 1149


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string1) (string2) = true
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string2 = string1
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:2)
=================================================
Progress: 1150


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string3) (string2) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = true

4 goal(s) more...

0 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string3) (string2) = true
Case3 : string_eq (string1) (string2) = true
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 1151


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string3) (string2) = true
Case3 : string_eq (string1) (string2) = true
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string3) (string2) = true
Case3 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true

4 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite string_eqb_eq in Case2 at 0(rank:0)
rewrite <- string_eqb_eq in Case2 at 0(rank:0)
=================================================
Progress: 1152


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string3) (string2) = true
Case3 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string3 = string2
Case3 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
rewrite Case2 in goal at 0(rank:2)
rewrite <- Case2 in goal at 0(rank:2)
rewrite <- Case2 in goal at 1(rank:2)
rewrite <- Case2 in goal at 2(rank:2)
=================================================
Progress: 1153


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string3) (string2) = true
Case3 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string2 = string3
Case3 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
rewrite Case2 in goal at 0(rank:2)
rewrite Case2 in goal at 1(rank:2)
rewrite Case2 in goal at 2(rank:2)
rewrite <- Case2 in goal at 0(rank:2)
=================================================
Progress: 1154


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string1 = string2
---------------------------------------
true = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string1 = string2
---------------------------------------
true = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 5
rewrite Case1 in goal at 0(rank:1)
rewrite <- Case1 in goal at 1(rank:1)
rewrite <- Case1 in goal at 2(rank:2)
case string_eq (string3) (string1)(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
=================================================
Progress: 1155


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string1 = string2
---------------------------------------
true = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string1 = string2
---------------------------------------
true = true

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 1156


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string1 = string2
---------------------------------------
true = true

4 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

3 goal(s) more...

0 conjecture(s) more...
Deduplication: 13
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 1157


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

3 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = false
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2)

2 goal(s) more...

0 conjecture(s) more...
Deduplication: 18
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 1158


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = false
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2)

2 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda2) (string_list1) else sub_check_ta1 (lambda2) (Cons (string1) (string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
forall (string_list1:string list), sub_check_ta1 (P (string2) (lambda2)) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda2)) (string_list1) else sub_check_ta1 (P (string2) (lambda2)) (Cons (string1) (string_list1))

1 goal(s) more...

0 conjecture(s) more...
Deduplication: 1603
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 1159


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda2) (string_list1) else sub_check_ta1 (lambda2) (Cons (string1) (string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
forall (string_list1:string list), sub_check_ta1 (P (string2) (lambda2)) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda2)) (string_list1) else sub_check_ta1 (P (string2) (lambda2)) (Cons (string1) (string_list1))

1 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda2) (string_list1) else sub_check_ta1 (lambda2) (Cons (string1) (string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
forall (string_list1:string list), sub_check_ta1 (lambda2) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda2)) (string_list1) else sub_check_ta1 (P (string2) (lambda2)) (Cons (string1) (string_list1))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
intro string_list1(rank:1)
=================================================
Progress: 1160


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda2) (string_list1) else sub_check_ta1 (lambda2) (Cons (string1) (string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
forall (string_list1:string list), sub_check_ta1 (lambda2) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda2)) (string_list1) else sub_check_ta1 (P (string2) (lambda2)) (Cons (string1) (string_list1))

1 goal(s) more...

0 conjecture(s) more...
>>> intro string_list1(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda2) (string_list1) else sub_check_ta1 (lambda2) (Cons (string1) (string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
string_list1 : string list
---------------------------------------
sub_check_ta1 (lambda2) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda2)) (string_list1) else sub_check_ta1 (P (string2) (lambda2)) (Cons (string1) (string_list1))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 1161


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda2) (string_list1) else sub_check_ta1 (lambda2) (Cons (string1) (string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
string_list1 : string list
---------------------------------------
sub_check_ta1 (lambda2) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda2)) (string_list1) else sub_check_ta1 (P (string2) (lambda2)) (Cons (string1) (string_list1))

1 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda2) (string_list1) else sub_check_ta1 (lambda2) (Cons (string1) (string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
sub_check_ta1 (lambda2) (Cons (string2) (Cons (string1) (string_list1))) = sub_check_ta1 (lambda2) (Cons (string2) (string_list1))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 1162


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string1) (string2) = true
---------------------------------------
true = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string1) (string2) = true
Case3 : string_eq (string3) (string2) = true
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 1163


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string1) (string2) = true
Case3 : string_eq (string3) (string2) = true
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string1) (string2) = true
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite string_eqb_eq in Case2 at 0(rank:0)
rewrite <- string_eqb_eq in Case2 at 0(rank:0)
=================================================
Progress: 1164


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string1) (string2) = true
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string1 = string2
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:2)
=================================================
Progress: 1165


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string1) (string2) = true
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string2 = string1
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:2)
=================================================
Progress: 1166


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string3) (string2) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = true

4 goal(s) more...

0 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string3) (string2) = true
Case3 : string_eq (string1) (string2) = true
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 1167


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string3) (string2) = true
Case3 : string_eq (string1) (string2) = true
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string3) (string2) = true
Case3 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true

4 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite string_eqb_eq in Case2 at 0(rank:0)
rewrite <- string_eqb_eq in Case2 at 0(rank:0)
=================================================
Progress: 1168


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string3) (string2) = true
Case3 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string3 = string2
Case3 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
rewrite Case2 in goal at 0(rank:2)
rewrite <- Case2 in goal at 0(rank:2)
rewrite <- Case2 in goal at 1(rank:2)
rewrite <- Case2 in goal at 2(rank:2)
=================================================
Progress: 1169


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string3) (string2) = true
Case3 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string2 = string3
Case3 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
rewrite Case2 in goal at 0(rank:2)
rewrite Case2 in goal at 1(rank:2)
rewrite Case2 in goal at 2(rank:2)
rewrite <- Case2 in goal at 0(rank:2)
=================================================
Progress: 1170


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string1 = string2
---------------------------------------
true = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case2 in goal at 0(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string1 = string2
---------------------------------------
true = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 5
rewrite Case1 in goal at 0(rank:1)
rewrite <- Case1 in goal at 1(rank:1)
rewrite <- Case1 in goal at 2(rank:2)
case string_eq (string3) (string1)(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
=================================================
Progress: 1171


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string1 = string2
---------------------------------------
true = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string1 = string2
---------------------------------------
true = true

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 1172


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string1 = string2
---------------------------------------
true = true

4 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

3 goal(s) more...

0 conjecture(s) more...
Deduplication: 13
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 1173


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

3 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = false
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2)

2 goal(s) more...

0 conjecture(s) more...
Deduplication: 18
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 1174


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = false
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2)

2 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string) (string_list1:string list), sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda2) (string_list1) else sub_check_ta1 (lambda2) (Cons (string1) (string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
forall (string1:string) (string_list1:string list), sub_check_ta1 (P (string2) (lambda2)) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda2)) (string_list1) else sub_check_ta1 (P (string2) (lambda2)) (Cons (string1) (string_list1))

1 goal(s) more...

0 conjecture(s) more...
Deduplication: 110
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 1175


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string) (string_list1:string list), sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda2) (string_list1) else sub_check_ta1 (lambda2) (Cons (string1) (string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
forall (string1:string) (string_list1:string list), sub_check_ta1 (P (string2) (lambda2)) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda2)) (string_list1) else sub_check_ta1 (P (string2) (lambda2)) (Cons (string1) (string_list1))

1 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string) (string_list1:string list), sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda2) (string_list1) else sub_check_ta1 (lambda2) (Cons (string1) (string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
forall (string1:string) (string_list1:string list), sub_check_ta1 (lambda2) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda2)) (string_list1) else sub_check_ta1 (P (string2) (lambda2)) (Cons (string1) (string_list1))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
intro string1(rank:1)
intro string_list1(rank:1)
rewrite IH1 in goal at 0(rank:1)
=================================================
Progress: 1176


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string) (string_list1:string list), sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda2) (string_list1) else sub_check_ta1 (lambda2) (Cons (string1) (string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
forall (string1:string) (string_list1:string list), sub_check_ta1 (lambda2) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda2)) (string_list1) else sub_check_ta1 (P (string2) (lambda2)) (Cons (string1) (string_list1))

1 goal(s) more...

0 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string) (string_list1:string list), sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda2) (string_list1) else sub_check_ta1 (lambda2) (Cons (string1) (string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
string1 : string
---------------------------------------
forall (string_list1:string list), sub_check_ta1 (lambda2) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda2)) (string_list1) else sub_check_ta1 (P (string2) (lambda2)) (Cons (string1) (string_list1))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
intro string_list1(rank:1)
rewrite IH1 in goal at 0(rank:1)
=================================================
Progress: 1177


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string) (string_list1:string list), sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda2) (string_list1) else sub_check_ta1 (lambda2) (Cons (string1) (string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
forall (string1:string) (string_list1:string list), sub_check_ta1 (lambda2) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda2)) (string_list1) else sub_check_ta1 (P (string2) (lambda2)) (Cons (string1) (string_list1))

1 goal(s) more...

0 conjecture(s) more...
>>> intro string_list1(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string) (string_list1:string list), sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda2) (string_list1) else sub_check_ta1 (lambda2) (Cons (string1) (string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
string_list1 : string list
---------------------------------------
forall (string1:string), sub_check_ta1 (lambda2) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda2)) (string_list1) else sub_check_ta1 (P (string2) (lambda2)) (Cons (string1) (string_list1))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:1)
=================================================
Progress: 1178


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string) (string_list1:string list), sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda2) (string_list1) else sub_check_ta1 (lambda2) (Cons (string1) (string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
forall (string1:string) (string_list1:string list), sub_check_ta1 (lambda2) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda2)) (string_list1) else sub_check_ta1 (P (string2) (lambda2)) (Cons (string1) (string_list1))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string) (string_list1:string list), sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda2) (string_list1) else sub_check_ta1 (lambda2) (Cons (string1) (string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
forall (string1:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda2) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda2)) (string_list1) else sub_check_ta1 (P (string2) (lambda2)) (Cons (string1) (string_list1))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
simpl in goal(rank:0)
rewrite IH1 in goal at 1(rank:2)
=================================================
Progress: 1179


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string) (string_list1:string list), sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda2) (string_list1) else sub_check_ta1 (lambda2) (Cons (string1) (string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
forall (string1:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda2) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda2)) (string_list1) else sub_check_ta1 (P (string2) (lambda2)) (Cons (string1) (string_list1))

1 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string) (string_list1:string list), sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda2) (string_list1) else sub_check_ta1 (lambda2) (Cons (string1) (string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
forall (string1:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda2) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda2)) (string_list1) else sub_check_ta1 (P (string2) (lambda2)) (Cons (string1) (string_list1))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 5
intro string1(rank:1)
rewrite IH1 in goal at 0(rank:2)
rewrite IH1 in goal at 1(rank:2)
rewrite IH1 in goal at 2(rank:2)
intro string_list1(rank:1)
=================================================
Progress: 1180


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string) (string_list1:string list), sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda2) (string_list1) else sub_check_ta1 (lambda2) (Cons (string1) (string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
string1 : string
---------------------------------------
forall (string_list1:string list), sub_check_ta1 (lambda2) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda2)) (string_list1) else sub_check_ta1 (P (string2) (lambda2)) (Cons (string1) (string_list1))

1 goal(s) more...

0 conjecture(s) more...
>>> intro string_list1(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string) (string_list1:string list), sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda2) (string_list1) else sub_check_ta1 (lambda2) (Cons (string1) (string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
string1 : string
string_list1 : string list
---------------------------------------
sub_check_ta1 (lambda2) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda2)) (string_list1) else sub_check_ta1 (P (string2) (lambda2)) (Cons (string1) (string_list1))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:1)
case is_mem_ta1 (string_list1) (string1)(rank:2)
=================================================
Progress: 1181


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string) (string_list1:string list), sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda2) (string_list1) else sub_check_ta1 (lambda2) (Cons (string1) (string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
string1 : string
---------------------------------------
forall (string_list1:string list), sub_check_ta1 (lambda2) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda2)) (string_list1) else sub_check_ta1 (P (string2) (lambda2)) (Cons (string1) (string_list1))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string) (string_list1:string list), sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda2) (string_list1) else sub_check_ta1 (lambda2) (Cons (string1) (string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
string1 : string
---------------------------------------
forall (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda2) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda2)) (string_list1) else sub_check_ta1 (P (string2) (lambda2)) (Cons (string1) (string_list1))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 1(rank:2)
=================================================
Progress: 1182


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string) (string_list1:string list), sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda2) (string_list1) else sub_check_ta1 (lambda2) (Cons (string1) (string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
string_list1 : string list
---------------------------------------
forall (string1:string), sub_check_ta1 (lambda2) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda2)) (string_list1) else sub_check_ta1 (P (string2) (lambda2)) (Cons (string1) (string_list1))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string) (string_list1:string list), sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda2) (string_list1) else sub_check_ta1 (lambda2) (Cons (string1) (string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
string_list1 : string list
---------------------------------------
forall (string1:string), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda2) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda2)) (string_list1) else sub_check_ta1 (P (string2) (lambda2)) (Cons (string1) (string_list1))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 1(rank:2)
=================================================
Progress: 1183


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string) (string_list1:string list), sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda2) (string_list1) else sub_check_ta1 (lambda2) (Cons (string1) (string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
forall (string1:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda2) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda2)) (string_list1) else sub_check_ta1 (P (string2) (lambda2)) (Cons (string1) (string_list1))

1 goal(s) more...

0 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string) (string_list1:string list), sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda2) (string_list1) else sub_check_ta1 (lambda2) (Cons (string1) (string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
string1 : string
---------------------------------------
forall (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda2) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda2)) (string_list1) else sub_check_ta1 (P (string2) (lambda2)) (Cons (string1) (string_list1))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
intro string_list1(rank:1)
rewrite IH1 in goal at 0(rank:2)
rewrite IH1 in goal at 1(rank:2)
rewrite IH1 in goal at 2(rank:2)
=================================================
Progress: 1184


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string) (string_list1:string list), sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda2) (string_list1) else sub_check_ta1 (lambda2) (Cons (string1) (string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
forall (string1:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda2) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda2)) (string_list1) else sub_check_ta1 (P (string2) (lambda2)) (Cons (string1) (string_list1))

1 goal(s) more...

0 conjecture(s) more...
>>> intro string_list1(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string) (string_list1:string list), sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda2) (string_list1) else sub_check_ta1 (lambda2) (Cons (string1) (string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
string_list1 : string list
---------------------------------------
forall (string1:string), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda2) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda2)) (string_list1) else sub_check_ta1 (P (string2) (lambda2)) (Cons (string1) (string_list1))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:2)
rewrite IH1 in goal at 1(rank:2)
rewrite IH1 in goal at 2(rank:2)
=================================================
Progress: 1185


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string) (string_list1:string list), sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda2) (string_list1) else sub_check_ta1 (lambda2) (Cons (string1) (string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
string1 : string
string_list1 : string list
---------------------------------------
sub_check_ta1 (lambda2) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda2)) (string_list1) else sub_check_ta1 (P (string2) (lambda2)) (Cons (string1) (string_list1))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string) (string_list1:string list), sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda2) (string_list1) else sub_check_ta1 (lambda2) (Cons (string1) (string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
string1 : string
string_list1 : string list
---------------------------------------
if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda2) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda2)) (string_list1) else sub_check_ta1 (P (string2) (lambda2)) (Cons (string1) (string_list1))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 1(rank:2)
=================================================
Progress: 1186


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string) (string_list1:string list), sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda2) (string_list1) else sub_check_ta1 (lambda2) (Cons (string1) (string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
string1 : string
---------------------------------------
forall (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda2) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda2)) (string_list1) else sub_check_ta1 (P (string2) (lambda2)) (Cons (string1) (string_list1))

1 goal(s) more...

0 conjecture(s) more...
>>> intro string_list1(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string) (string_list1:string list), sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda2) (string_list1) else sub_check_ta1 (lambda2) (Cons (string1) (string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
string1 : string
string_list1 : string list
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda2) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda2)) (string_list1) else sub_check_ta1 (P (string2) (lambda2)) (Cons (string1) (string_list1))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
rewrite IH1 in goal at 0(rank:2)
rewrite IH1 in goal at 1(rank:2)
rewrite IH1 in goal at 2(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank:2)
=================================================
Progress: 1187


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string) (string_list1:string list), sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda2) (string_list1) else sub_check_ta1 (lambda2) (Cons (string1) (string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
forall (string1:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda2) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda2)) (string_list1) else sub_check_ta1 (P (string2) (lambda2)) (Cons (string1) (string_list1))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 1(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string) (string_list1:string list), sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda2) (string_list1) else sub_check_ta1 (lambda2) (Cons (string1) (string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
forall (string1:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda2) (string_list1) else sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda2) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda2)) (string_list1) else sub_check_ta1 (P (string2) (lambda2)) (Cons (string1) (string_list1))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
rewrite <- Case2 in goal at 0
rewrite Case1 in goal at 0
reflexivity
reflexivity
reflexivity
simpl in goal
rewrite IH1 in goal at 0
rewrite IH1 in goal at 1


1st goal of : any
lambda1 : lambda
string2 : string
---------------------------------------
forall (lambda2:lambda) (string1:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda2) (string_list1) else sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda2) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda2)) (string_list1) else sub_check_ta1 (P (string2) (lambda2)) (Cons (string1) (string_list1))

0 goal(s) more...

0 conjecture(s) more...
state_list
New Env

;;
Lemma List
forall (lambda2:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda2) (string_list1) else sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda2) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda2)) (string_list1) else sub_check_ta1 (P (string2) (lambda2)) (Cons (string1) (string_list1))
End of Lemma List
=================================================
Progress: 1188


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string) (string_list1:string list), sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda2) (string_list1) else sub_check_ta1 (lambda2) (Cons (string1) (string_list1))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
forall (string1:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda2) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda2)) (string_list1) else sub_check_ta1 (P (string2) (lambda2)) (Cons (string1) (string_list1))

1 goal(s) more...

0 conjecture(s) more...
>>> assert forall (lambda2:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda2) (string_list1) else sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda2) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda2)) (string_list1) else sub_check_ta1 (P (string2) (lambda2)) (Cons (string1) (string_list1))(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 1189


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
induction lambda1(rank:0)
intro string_list1(rank:1)
intro string1(rank:1)
intro string2(rank:1)
=================================================
Progress: 1190


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
>>> induction lambda1(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
intro string1(rank:1)
intro string2(rank:1)
intro string_list1(rank:1)
=================================================
Progress: 1191


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string2:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
induction lambda1(rank:0)
intro string2(rank:1)
intro string_list1(rank:1)
=================================================
Progress: 1192


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string2:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
>>> induction lambda1(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string2:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
intro string2(rank:1)
intro string_list1(rank:1)
=================================================
Progress: 1193


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string2 : string
---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
induction lambda1(rank:0)
intro string_list1(rank:1)
=================================================
Progress: 1194


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string2 : string
---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
>>> induction lambda1(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
intro string1(rank:1)
intro string_list1(rank:1)
=================================================
Progress: 1195


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
>>> intro string_list1(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string_list1 : string list
---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:0)
=================================================
Progress: 1196


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string_list1 : string list
---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
>>> induction lambda1(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string) (string2:string), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
intro string1(rank:1)
intro string2(rank:1)
=================================================
Progress: 1197


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string2:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
string2 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
induction lambda1(rank:0)
intro string_list1(rank:1)
=================================================
Progress: 1198


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
string2 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
>>> induction lambda1(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro string_list1(rank:1)
=================================================
Progress: 1199


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string2:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
>>> intro string_list1(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
---------------------------------------
forall (lambda1:lambda) (string2:string), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
induction lambda1(rank:0)
case is_mem_ta1 (string_list1) (string1)(rank:2)
=================================================
Progress: 1200


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
---------------------------------------
forall (lambda1:lambda) (string2:string), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
>>> induction lambda1(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string2:string), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
intro string2(rank:1)
case is_mem_ta1 (string_list1) (string1)(rank:2)
=================================================
Progress: 1201


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string2 : string
---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
>>> intro string_list1(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string2 : string
string_list1 : string list
---------------------------------------
forall (lambda1:lambda) (string1:string), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:0)
=================================================
Progress: 1202


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string2 : string
string_list1 : string list
---------------------------------------
forall (lambda1:lambda) (string1:string), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
>>> induction lambda1(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string2 : string
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro string1(rank:1)
=================================================
Progress: 1203


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
string2 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
>>> intro string_list1(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
string2 : string
string_list1 : string list
---------------------------------------
forall (lambda1:lambda), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
induction lambda1(rank:0)
case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank:2)
case is_mem_ta1 (string_list1) (string1)(rank:2)
=================================================
Progress: 1204


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
string2 : string
string_list1 : string list
---------------------------------------
forall (lambda1:lambda), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))

0 goal(s) more...

1 conjecture(s) more...
>>> induction lambda1(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
string2 : string
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank:0)
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 1205


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
string2 : string
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

2 goal(s) more...

1 conjecture(s) more...
>>> case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
string2 : string
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Case1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
---------------------------------------
if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 1206


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
string2 : string
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

2 goal(s) more...

1 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
string2 : string
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Case1 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list1) (string3)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank:0)
case string_eq (string2) (string3)(rank:0)
=================================================
Progress: 1207


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
string2 : string
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Case1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
---------------------------------------
if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

3 goal(s) more...

1 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
string2 : string
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Case1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list1) (string3)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:0)
=================================================
Progress: 1208


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
string2 : string
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Case1 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list1) (string3)

3 goal(s) more...

1 conjecture(s) more...
>>> case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
string2 : string
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list1) (string3)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:0)
=================================================
Progress: 1209


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
string2 : string
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Case1 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list1) (string3)

3 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
string2 : string
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = true

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case2 at 0(rank:0)
rewrite <- string_eqb_eq in Case2 at 0(rank:0)
case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank:2)
=================================================
Progress: 1210


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
string2 : string
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Case1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list1) (string3)

4 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
string2 : string
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Case1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case2 : is_mem_ta1 (string_list1) (string1) = true
Case3 : string_eq (string2) (string3) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = true

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite string_eqb_eq in Case3 at 0(rank:0)
rewrite <- string_eqb_eq in Case3 at 0(rank:0)
=================================================
Progress: 1211


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
string2 : string
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list1) (string3)

4 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
string2 : string
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case3 : string_eq (string2) (string3) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = true

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite string_eqb_eq in Case3 at 0(rank:0)
rewrite <- string_eqb_eq in Case3 at 0(rank:0)
=================================================
Progress: 1212


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
string2 : string
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = true

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
string2 : string
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : string2 = string3
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = true

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
rewrite Case2 in goal at 0(rank:2)
rewrite Case2 in goal at 2(rank:2)
rewrite <- Case2 in goal at 0(rank:2)
rewrite <- Case2 in goal at 1(rank:2)
rewrite <- Case2 in goal at 2(rank:2)
rewrite <- Case2 in goal at 3(rank:2)
rewrite Case2 in goal at 3(rank:2)
rewrite Case2 in goal at 1(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank:2)
=================================================
Progress: 1213


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
string2 : string
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = true

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
string2 : string
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : string3 = string2
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = true

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
rewrite Case2 in goal at 0(rank:2)
rewrite Case2 in goal at 2(rank:2)
rewrite <- Case2 in goal at 0(rank:2)
rewrite <- Case2 in goal at 1(rank:2)
rewrite <- Case2 in goal at 2(rank:2)
rewrite <- Case2 in goal at 3(rank:2)
rewrite Case2 in goal at 3(rank:2)
rewrite Case2 in goal at 1(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank:2)
=================================================
Progress: 1214


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
string2 : string
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Case1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case2 : is_mem_ta1 (string_list1) (string1) = true
Case3 : string_eq (string2) (string3) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = true

5 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
string2 : string
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Case1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case2 : is_mem_ta1 (string_list1) (string1) = true
Case3 : string2 = string3
---------------------------------------
is_mem_ta1 (string_list1) (string3) = true

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- Case3 in goal at 0(rank:2)
=================================================
Progress: 1215


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
string2 : string
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Case1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case2 : is_mem_ta1 (string_list1) (string1) = true
Case3 : string_eq (string2) (string3) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = true

5 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case3 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
string2 : string
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Case1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case2 : is_mem_ta1 (string_list1) (string1) = true
Case3 : string3 = string2
---------------------------------------
is_mem_ta1 (string_list1) (string3) = true

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Case3 in goal at 0(rank:2)
=================================================
Progress: 1216


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
string2 : string
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case3 : string_eq (string2) (string3) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = true

5 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
string2 : string
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case3 : string2 = string3
---------------------------------------
is_mem_ta1 (string_list1) (string3) = true

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- Case3 in goal at 0(rank:2)
=================================================
Progress: 1217


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
string2 : string
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case3 : string_eq (string2) (string3) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = true

5 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case3 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
string2 : string
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case3 : string3 = string2
---------------------------------------
is_mem_ta1 (string_list1) (string3) = true

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Case3 in goal at 0(rank:2)
=================================================
Progress: 1218


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

2 goal(s) more...

1 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
---------------------------------------
forall (string2:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
intro string2(rank:1)
intro string_list1(rank:1)
=================================================
Progress: 1219


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

2 goal(s) more...

1 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
---------------------------------------
forall (string1:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro string_list1(rank:1)
=================================================
Progress: 1220


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

2 goal(s) more...

1 conjecture(s) more...
>>> intro string_list1(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
---------------------------------------
forall (string1:string) (string2:string), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
intro string_list1
state_list
New Env

;;
Lemma List
forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
End of Lemma List
=================================================
Progress: 1221


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

2 goal(s) more...

1 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

---------------------------------------
forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
intro string1(rank:1)
intro string2(rank:1)
intro string3(rank:1)
intro string_list1(rank:1)
=================================================
Progress: 1222


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string2:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

2 goal(s) more...

1 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
---------------------------------------
forall (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro string_list1(rank:1)
=================================================
Progress: 1223


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string2:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

2 goal(s) more...

1 conjecture(s) more...
>>> intro string_list1(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
---------------------------------------
forall (string2:string), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 1224


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
---------------------------------------
forall (string2:string), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

2 goal(s) more...

1 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
forall (string2:string), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list1) (string3)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro string2(rank:1)
=================================================
Progress: 1225


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

2 goal(s) more...

1 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
---------------------------------------
forall (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro string_list1(rank:1)
=================================================
Progress: 1226


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

2 goal(s) more...

1 conjecture(s) more...
>>> intro string_list1(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
---------------------------------------
forall (string1:string), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
intro string_list1
state_list
=================================================
Progress: 1227


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string) (string2:string), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

2 goal(s) more...

1 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
---------------------------------------
forall (string2:string), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
intro string2(rank:1)
case is_mem_ta1 (string_list1) (string1)(rank:2)
=================================================
Progress: 1228


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string) (string2:string), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

2 goal(s) more...

1 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
---------------------------------------
forall (string1:string), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 1229


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

2 goal(s) more...

1 conjecture(s) more...
>>> intro string_list1(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank:0)
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 1230


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

2 goal(s) more...

1 conjecture(s) more...
>>> case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Case1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
---------------------------------------
if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 1231


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

2 goal(s) more...

1 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list1) (string3)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank:0)
case string_eq (string2) (string3)(rank:0)
=================================================
Progress: 1232


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Case1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
---------------------------------------
if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

3 goal(s) more...

1 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Case1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list1) (string3)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:0)
=================================================
Progress: 1233


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list1) (string3)

3 goal(s) more...

1 conjecture(s) more...
>>> case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list1) (string3)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:0)
=================================================
Progress: 1234


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list1) (string3)

3 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = true

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case2 at 0(rank:0)
rewrite <- string_eqb_eq in Case2 at 0(rank:0)
case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank:2)
=================================================
Progress: 1235


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Case1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list1) (string3)

4 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Case1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case2 : is_mem_ta1 (string_list1) (string1) = true
Case3 : string_eq (string2) (string3) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = true

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite string_eqb_eq in Case3 at 0(rank:0)
rewrite <- string_eqb_eq in Case3 at 0(rank:0)
=================================================
Progress: 1236


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list1) (string3)

4 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case3 : string_eq (string2) (string3) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = true

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite string_eqb_eq in Case3 at 0(rank:0)
rewrite <- string_eqb_eq in Case3 at 0(rank:0)
=================================================
Progress: 1237


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = true

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : string2 = string3
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = true

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
rewrite Case2 in goal at 0(rank:2)
rewrite Case2 in goal at 2(rank:2)
rewrite <- Case2 in goal at 0(rank:2)
rewrite <- Case2 in goal at 1(rank:2)
rewrite <- Case2 in goal at 2(rank:2)
rewrite <- Case2 in goal at 3(rank:2)
rewrite Case2 in goal at 3(rank:2)
rewrite Case2 in goal at 1(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank:2)
=================================================
Progress: 1238


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = true

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : string3 = string2
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = true

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
rewrite Case2 in goal at 0(rank:2)
rewrite Case2 in goal at 2(rank:2)
rewrite <- Case2 in goal at 0(rank:2)
rewrite <- Case2 in goal at 1(rank:2)
rewrite <- Case2 in goal at 2(rank:2)
rewrite <- Case2 in goal at 3(rank:2)
rewrite Case2 in goal at 3(rank:2)
rewrite Case2 in goal at 1(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank:2)
=================================================
Progress: 1239


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Case1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case2 : is_mem_ta1 (string_list1) (string1) = true
Case3 : string_eq (string2) (string3) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = true

5 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Case1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case2 : is_mem_ta1 (string_list1) (string1) = true
Case3 : string2 = string3
---------------------------------------
is_mem_ta1 (string_list1) (string3) = true

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- Case3 in goal at 0(rank:2)
=================================================
Progress: 1240


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Case1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case2 : is_mem_ta1 (string_list1) (string1) = true
Case3 : string_eq (string2) (string3) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = true

5 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case3 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Case1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case2 : is_mem_ta1 (string_list1) (string1) = true
Case3 : string3 = string2
---------------------------------------
is_mem_ta1 (string_list1) (string3) = true

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Case3 in goal at 0(rank:2)
=================================================
Progress: 1241


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case3 : string_eq (string2) (string3) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = true

5 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case3 : string2 = string3
---------------------------------------
is_mem_ta1 (string_list1) (string3) = true

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- Case3 in goal at 0(rank:2)
=================================================
Progress: 1242


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case3 : string_eq (string2) (string3) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = true

5 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case3 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case3 : string3 = string2
---------------------------------------
is_mem_ta1 (string_list1) (string3) = true

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Case3 in goal at 0(rank:2)
=================================================
Progress: 1243


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string2:string), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

2 goal(s) more...

1 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank:0)
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 1244


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

2 goal(s) more...

1 conjecture(s) more...
>>> case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Case1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
---------------------------------------
if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 1245


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

2 goal(s) more...

1 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Case1 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list1) (string3)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank:0)
case string_eq (string2) (string3)(rank:0)
=================================================
Progress: 1246


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Case1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
---------------------------------------
if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

3 goal(s) more...

1 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Case1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list1) (string3)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:0)
=================================================
Progress: 1247


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Case1 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list1) (string3)

3 goal(s) more...

1 conjecture(s) more...
>>> case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list1) (string3)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:0)
=================================================
Progress: 1248


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Case1 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list1) (string3)

3 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = true

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case2 at 0(rank:0)
rewrite <- string_eqb_eq in Case2 at 0(rank:0)
case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank:2)
=================================================
Progress: 1249


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Case1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list1) (string3)

4 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Case1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case2 : is_mem_ta1 (string_list1) (string1) = true
Case3 : string_eq (string2) (string3) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = true

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite string_eqb_eq in Case3 at 0(rank:0)
rewrite <- string_eqb_eq in Case3 at 0(rank:0)
=================================================
Progress: 1250


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list1) (string3)

4 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case3 : string_eq (string2) (string3) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = true

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite string_eqb_eq in Case3 at 0(rank:0)
rewrite <- string_eqb_eq in Case3 at 0(rank:0)
=================================================
Progress: 1251


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = true

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : string2 = string3
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = true

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
rewrite Case2 in goal at 0(rank:2)
rewrite Case2 in goal at 2(rank:2)
rewrite <- Case2 in goal at 0(rank:2)
rewrite <- Case2 in goal at 1(rank:2)
rewrite <- Case2 in goal at 2(rank:2)
rewrite <- Case2 in goal at 3(rank:2)
rewrite Case2 in goal at 3(rank:2)
rewrite Case2 in goal at 1(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank:2)
=================================================
Progress: 1252


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = true

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : string3 = string2
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = true

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
rewrite Case2 in goal at 0(rank:2)
rewrite Case2 in goal at 2(rank:2)
rewrite <- Case2 in goal at 0(rank:2)
rewrite <- Case2 in goal at 1(rank:2)
rewrite <- Case2 in goal at 2(rank:2)
rewrite <- Case2 in goal at 3(rank:2)
rewrite Case2 in goal at 3(rank:2)
rewrite Case2 in goal at 1(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank:2)
=================================================
Progress: 1253


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Case1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case2 : is_mem_ta1 (string_list1) (string1) = true
Case3 : string_eq (string2) (string3) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = true

5 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Case1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case2 : is_mem_ta1 (string_list1) (string1) = true
Case3 : string2 = string3
---------------------------------------
is_mem_ta1 (string_list1) (string3) = true

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- Case3 in goal at 0(rank:2)
=================================================
Progress: 1254


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Case1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case2 : is_mem_ta1 (string_list1) (string1) = true
Case3 : string_eq (string2) (string3) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = true

5 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case3 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Case1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case2 : is_mem_ta1 (string_list1) (string1) = true
Case3 : string3 = string2
---------------------------------------
is_mem_ta1 (string_list1) (string3) = true

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Case3 in goal at 0(rank:2)
=================================================
Progress: 1255


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case3 : string_eq (string2) (string3) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = true

5 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case3 : string2 = string3
---------------------------------------
is_mem_ta1 (string_list1) (string3) = true

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- Case3 in goal at 0(rank:2)
=================================================
Progress: 1256


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case3 : string_eq (string2) (string3) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = true

5 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case3 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case3 : string3 = string2
---------------------------------------
is_mem_ta1 (string_list1) (string3) = true

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Case3 in goal at 0(rank:2)
=================================================
Progress: 1257


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string2 : string
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

2 goal(s) more...

1 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string2 : string
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank:0)
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 1258


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string2 : string
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

2 goal(s) more...

1 conjecture(s) more...
>>> case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string2 : string
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Case1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
---------------------------------------
if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 1259


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string2 : string
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

2 goal(s) more...

1 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string2 : string
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Case1 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list1) (string3)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank:0)
case string_eq (string2) (string3)(rank:0)
=================================================
Progress: 1260


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string2 : string
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Case1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
---------------------------------------
if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

3 goal(s) more...

1 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string2 : string
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Case1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list1) (string3)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:0)
=================================================
Progress: 1261


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string2 : string
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Case1 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list1) (string3)

3 goal(s) more...

1 conjecture(s) more...
>>> case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string2 : string
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list1) (string3)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:0)
=================================================
Progress: 1262


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string2 : string
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Case1 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list1) (string3)

3 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string2 : string
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = true

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case2 at 0(rank:0)
rewrite <- string_eqb_eq in Case2 at 0(rank:0)
case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank:2)
=================================================
Progress: 1263


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string2 : string
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Case1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list1) (string3)

4 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string2 : string
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Case1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case2 : is_mem_ta1 (string_list1) (string1) = true
Case3 : string_eq (string2) (string3) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = true

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite string_eqb_eq in Case3 at 0(rank:0)
rewrite <- string_eqb_eq in Case3 at 0(rank:0)
=================================================
Progress: 1264


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string2 : string
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list1) (string3)

4 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string2 : string
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case3 : string_eq (string2) (string3) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = true

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite string_eqb_eq in Case3 at 0(rank:0)
rewrite <- string_eqb_eq in Case3 at 0(rank:0)
=================================================
Progress: 1265


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string2 : string
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = true

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string2 : string
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : string2 = string3
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = true

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
rewrite Case2 in goal at 0(rank:2)
rewrite Case2 in goal at 2(rank:2)
rewrite <- Case2 in goal at 0(rank:2)
rewrite <- Case2 in goal at 1(rank:2)
rewrite <- Case2 in goal at 2(rank:2)
rewrite <- Case2 in goal at 3(rank:2)
rewrite Case2 in goal at 3(rank:2)
rewrite Case2 in goal at 1(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank:2)
=================================================
Progress: 1266


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string2 : string
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = true

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string2 : string
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : string3 = string2
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = true

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
rewrite Case2 in goal at 0(rank:2)
rewrite Case2 in goal at 2(rank:2)
rewrite <- Case2 in goal at 0(rank:2)
rewrite <- Case2 in goal at 1(rank:2)
rewrite <- Case2 in goal at 2(rank:2)
rewrite <- Case2 in goal at 3(rank:2)
rewrite Case2 in goal at 3(rank:2)
rewrite Case2 in goal at 1(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank:2)
=================================================
Progress: 1267


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string2 : string
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Case1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case2 : is_mem_ta1 (string_list1) (string1) = true
Case3 : string_eq (string2) (string3) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = true

5 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string2 : string
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Case1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case2 : is_mem_ta1 (string_list1) (string1) = true
Case3 : string2 = string3
---------------------------------------
is_mem_ta1 (string_list1) (string3) = true

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- Case3 in goal at 0(rank:2)
=================================================
Progress: 1268


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string2 : string
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Case1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case2 : is_mem_ta1 (string_list1) (string1) = true
Case3 : string_eq (string2) (string3) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = true

5 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case3 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string2 : string
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Case1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case2 : is_mem_ta1 (string_list1) (string1) = true
Case3 : string3 = string2
---------------------------------------
is_mem_ta1 (string_list1) (string3) = true

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Case3 in goal at 0(rank:2)
=================================================
Progress: 1269


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string2 : string
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case3 : string_eq (string2) (string3) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = true

5 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string2 : string
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case3 : string2 = string3
---------------------------------------
is_mem_ta1 (string_list1) (string3) = true

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- Case3 in goal at 0(rank:2)
=================================================
Progress: 1270


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string2 : string
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case3 : string_eq (string2) (string3) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = true

5 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case3 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string2 : string
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case3 : string3 = string2
---------------------------------------
is_mem_ta1 (string_list1) (string3) = true

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Case3 in goal at 0(rank:2)
=================================================
Progress: 1271


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
---------------------------------------
forall (string2:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

2 goal(s) more...

1 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
---------------------------------------
forall (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro string_list1(rank:1)
=================================================
Progress: 1272


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
---------------------------------------
forall (string2:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

2 goal(s) more...

1 conjecture(s) more...
>>> intro string_list1(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string_list1 : string list
---------------------------------------
forall (string2:string), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 1273


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string_list1 : string list
---------------------------------------
forall (string2:string), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

2 goal(s) more...

1 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
forall (string2:string), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list1) (string3)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro string2(rank:1)
=================================================
Progress: 1274


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
---------------------------------------
forall (string1:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

2 goal(s) more...

1 conjecture(s) more...
>>> intro string_list1(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
string_list1 : string list
---------------------------------------
forall (string1:string), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 1275


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
---------------------------------------
forall (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

2 goal(s) more...

1 conjecture(s) more...
>>> intro string_list1(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
string_list1 : string list
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank:0)
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 1276


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
string_list1 : string list
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

2 goal(s) more...

1 conjecture(s) more...
>>> case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
string_list1 : string list
Case1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
---------------------------------------
if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 1277


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
string_list1 : string list
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

2 goal(s) more...

1 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list1) (string3)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank:0)
case string_eq (string2) (string3)(rank:0)
=================================================
Progress: 1278


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
string_list1 : string list
Case1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
---------------------------------------
if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

3 goal(s) more...

1 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
string_list1 : string list
Case1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list1) (string3)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:0)
=================================================
Progress: 1279


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list1) (string3)

3 goal(s) more...

1 conjecture(s) more...
>>> case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list1) (string3)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:0)
=================================================
Progress: 1280


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list1) (string3)

3 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = true

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case2 at 0(rank:0)
rewrite <- string_eqb_eq in Case2 at 0(rank:0)
case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank:2)
=================================================
Progress: 1281


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
string_list1 : string list
Case1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list1) (string3)

4 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
string_list1 : string list
Case1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case2 : is_mem_ta1 (string_list1) (string1) = true
Case3 : string_eq (string2) (string3) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = true

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite string_eqb_eq in Case3 at 0(rank:0)
rewrite <- string_eqb_eq in Case3 at 0(rank:0)
=================================================
Progress: 1282


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list1) (string3)

4 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case3 : string_eq (string2) (string3) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = true

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite string_eqb_eq in Case3 at 0(rank:0)
rewrite <- string_eqb_eq in Case3 at 0(rank:0)
=================================================
Progress: 1283


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = true

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : string2 = string3
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = true

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
rewrite Case2 in goal at 0(rank:2)
rewrite Case2 in goal at 2(rank:2)
rewrite <- Case2 in goal at 0(rank:2)
rewrite <- Case2 in goal at 1(rank:2)
rewrite <- Case2 in goal at 2(rank:2)
rewrite <- Case2 in goal at 3(rank:2)
rewrite Case2 in goal at 3(rank:2)
rewrite Case2 in goal at 1(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank:2)
=================================================
Progress: 1284


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = true

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : string3 = string2
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = true

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
rewrite Case2 in goal at 0(rank:2)
rewrite Case2 in goal at 2(rank:2)
rewrite <- Case2 in goal at 0(rank:2)
rewrite <- Case2 in goal at 1(rank:2)
rewrite <- Case2 in goal at 2(rank:2)
rewrite <- Case2 in goal at 3(rank:2)
rewrite Case2 in goal at 3(rank:2)
rewrite Case2 in goal at 1(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank:2)
=================================================
Progress: 1285


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
string_list1 : string list
Case1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case2 : is_mem_ta1 (string_list1) (string1) = true
Case3 : string_eq (string2) (string3) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = true

5 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
string_list1 : string list
Case1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case2 : is_mem_ta1 (string_list1) (string1) = true
Case3 : string2 = string3
---------------------------------------
is_mem_ta1 (string_list1) (string3) = true

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- Case3 in goal at 0(rank:2)
=================================================
Progress: 1286


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
string_list1 : string list
Case1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case2 : is_mem_ta1 (string_list1) (string1) = true
Case3 : string_eq (string2) (string3) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = true

5 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case3 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
string_list1 : string list
Case1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case2 : is_mem_ta1 (string_list1) (string1) = true
Case3 : string3 = string2
---------------------------------------
is_mem_ta1 (string_list1) (string3) = true

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Case3 in goal at 0(rank:2)
=================================================
Progress: 1287


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case3 : string_eq (string2) (string3) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = true

5 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case3 : string2 = string3
---------------------------------------
is_mem_ta1 (string_list1) (string3) = true

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- Case3 in goal at 0(rank:2)
=================================================
Progress: 1288


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case3 : string_eq (string2) (string3) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = true

5 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case3 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case3 : string3 = string2
---------------------------------------
is_mem_ta1 (string_list1) (string3) = true

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Case3 in goal at 0(rank:2)
=================================================
Progress: 1289


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
---------------------------------------
forall (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

2 goal(s) more...

1 conjecture(s) more...
>>> intro string_list1(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string_list1 : string list
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank:0)
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 1290


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string_list1 : string list
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

2 goal(s) more...

1 conjecture(s) more...
>>> case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string_list1 : string list
Case1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
---------------------------------------
if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 1291


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string_list1 : string list
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

2 goal(s) more...

1 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list1) (string3)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank:0)
case string_eq (string2) (string3)(rank:0)
=================================================
Progress: 1292


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string_list1 : string list
Case1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
---------------------------------------
if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

3 goal(s) more...

1 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string_list1 : string list
Case1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list1) (string3)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:0)
=================================================
Progress: 1293


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list1) (string3)

3 goal(s) more...

1 conjecture(s) more...
>>> case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list1) (string3)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:0)
=================================================
Progress: 1294


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list1) (string3)

3 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = true

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case2 at 0(rank:0)
rewrite <- string_eqb_eq in Case2 at 0(rank:0)
case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank:2)
=================================================
Progress: 1295


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string_list1 : string list
Case1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list1) (string3)

4 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string_list1 : string list
Case1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case2 : is_mem_ta1 (string_list1) (string1) = true
Case3 : string_eq (string2) (string3) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = true

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite string_eqb_eq in Case3 at 0(rank:0)
rewrite <- string_eqb_eq in Case3 at 0(rank:0)
=================================================
Progress: 1296


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list1) (string3)

4 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case3 : string_eq (string2) (string3) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = true

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite string_eqb_eq in Case3 at 0(rank:0)
rewrite <- string_eqb_eq in Case3 at 0(rank:0)
=================================================
Progress: 1297


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = true

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : string2 = string3
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = true

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
rewrite Case2 in goal at 0(rank:2)
rewrite Case2 in goal at 2(rank:2)
rewrite <- Case2 in goal at 0(rank:2)
rewrite <- Case2 in goal at 1(rank:2)
rewrite <- Case2 in goal at 2(rank:2)
rewrite <- Case2 in goal at 3(rank:2)
rewrite Case2 in goal at 3(rank:2)
rewrite Case2 in goal at 1(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank:2)
=================================================
Progress: 1298


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = true

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : string3 = string2
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = true

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
rewrite Case2 in goal at 0(rank:2)
rewrite Case2 in goal at 2(rank:2)
rewrite <- Case2 in goal at 0(rank:2)
rewrite <- Case2 in goal at 1(rank:2)
rewrite <- Case2 in goal at 2(rank:2)
rewrite <- Case2 in goal at 3(rank:2)
rewrite Case2 in goal at 3(rank:2)
rewrite Case2 in goal at 1(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank:2)
=================================================
Progress: 1299


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string_list1 : string list
Case1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case2 : is_mem_ta1 (string_list1) (string1) = true
Case3 : string_eq (string2) (string3) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = true

5 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string_list1 : string list
Case1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case2 : is_mem_ta1 (string_list1) (string1) = true
Case3 : string2 = string3
---------------------------------------
is_mem_ta1 (string_list1) (string3) = true

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- Case3 in goal at 0(rank:2)
=================================================
Progress: 1300


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string_list1 : string list
Case1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case2 : is_mem_ta1 (string_list1) (string1) = true
Case3 : string_eq (string2) (string3) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = true

5 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case3 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string_list1 : string list
Case1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case2 : is_mem_ta1 (string_list1) (string1) = true
Case3 : string3 = string2
---------------------------------------
is_mem_ta1 (string_list1) (string3) = true

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Case3 in goal at 0(rank:2)
=================================================
Progress: 1301


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case3 : string_eq (string2) (string3) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = true

5 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case3 : string2 = string3
---------------------------------------
is_mem_ta1 (string_list1) (string3) = true

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- Case3 in goal at 0(rank:2)
=================================================
Progress: 1302


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case3 : string_eq (string2) (string3) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = true

5 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case3 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string2 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case3 : string3 = string2
---------------------------------------
is_mem_ta1 (string_list1) (string3) = true

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Case3 in goal at 0(rank:2)
=================================================
Progress: 1303


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
---------------------------------------
forall (string2:string), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

2 goal(s) more...

1 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank:0)
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 1304


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

2 goal(s) more...

1 conjecture(s) more...
>>> case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Case1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
---------------------------------------
if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 1305


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

2 goal(s) more...

1 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Case1 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list1) (string3)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank:0)
case string_eq (string2) (string3)(rank:0)
=================================================
Progress: 1306


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Case1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
---------------------------------------
if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

3 goal(s) more...

1 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Case1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list1) (string3)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:0)
=================================================
Progress: 1307


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Case1 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list1) (string3)

3 goal(s) more...

1 conjecture(s) more...
>>> case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list1) (string3)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:0)
=================================================
Progress: 1308


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Case1 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list1) (string3)

3 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = true

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case2 at 0(rank:0)
rewrite <- string_eqb_eq in Case2 at 0(rank:0)
case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank:2)
=================================================
Progress: 1309


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Case1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list1) (string3)

4 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Case1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case2 : is_mem_ta1 (string_list1) (string1) = true
Case3 : string_eq (string2) (string3) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = true

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite string_eqb_eq in Case3 at 0(rank:0)
rewrite <- string_eqb_eq in Case3 at 0(rank:0)
=================================================
Progress: 1310


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list1) (string3)

4 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case3 : string_eq (string2) (string3) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = true

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite string_eqb_eq in Case3 at 0(rank:0)
rewrite <- string_eqb_eq in Case3 at 0(rank:0)
=================================================
Progress: 1311


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = true

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : string2 = string3
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = true

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
rewrite Case2 in goal at 0(rank:2)
rewrite Case2 in goal at 2(rank:2)
rewrite <- Case2 in goal at 0(rank:2)
rewrite <- Case2 in goal at 1(rank:2)
rewrite <- Case2 in goal at 2(rank:2)
rewrite <- Case2 in goal at 3(rank:2)
rewrite Case2 in goal at 3(rank:2)
rewrite Case2 in goal at 1(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank:2)
=================================================
Progress: 1312


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = true

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : string3 = string2
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = true

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
rewrite Case2 in goal at 0(rank:2)
rewrite Case2 in goal at 2(rank:2)
rewrite <- Case2 in goal at 0(rank:2)
rewrite <- Case2 in goal at 1(rank:2)
rewrite <- Case2 in goal at 2(rank:2)
rewrite <- Case2 in goal at 3(rank:2)
rewrite Case2 in goal at 3(rank:2)
rewrite Case2 in goal at 1(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank:2)
=================================================
Progress: 1313


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Case1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case2 : is_mem_ta1 (string_list1) (string1) = true
Case3 : string_eq (string2) (string3) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = true

5 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Case1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case2 : is_mem_ta1 (string_list1) (string1) = true
Case3 : string2 = string3
---------------------------------------
is_mem_ta1 (string_list1) (string3) = true

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- Case3 in goal at 0(rank:2)
=================================================
Progress: 1314


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Case1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case2 : is_mem_ta1 (string_list1) (string1) = true
Case3 : string_eq (string2) (string3) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = true

5 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case3 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Case1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case2 : is_mem_ta1 (string_list1) (string1) = true
Case3 : string3 = string2
---------------------------------------
is_mem_ta1 (string_list1) (string3) = true

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Case3 in goal at 0(rank:2)
=================================================
Progress: 1315


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case3 : string_eq (string2) (string3) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = true

5 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case3 : string2 = string3
---------------------------------------
is_mem_ta1 (string_list1) (string3) = true

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- Case3 in goal at 0(rank:2)
=================================================
Progress: 1316


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case3 : string_eq (string2) (string3) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = true

5 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case3 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case3 : string3 = string2
---------------------------------------
is_mem_ta1 (string_list1) (string3) = true

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Case3 in goal at 0(rank:2)
=================================================
Progress: 1317


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
---------------------------------------
forall (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

2 goal(s) more...

1 conjecture(s) more...
>>> intro string_list1(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
string_list1 : string list
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank:0)
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 1318


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
string_list1 : string list
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

2 goal(s) more...

1 conjecture(s) more...
>>> case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
string_list1 : string list
Case1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
---------------------------------------
if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 1319


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
string_list1 : string list
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

2 goal(s) more...

1 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list1) (string3)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank:0)
case string_eq (string2) (string3)(rank:0)
=================================================
Progress: 1320


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
string_list1 : string list
Case1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
---------------------------------------
if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

3 goal(s) more...

1 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
string_list1 : string list
Case1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list1) (string3)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:0)
=================================================
Progress: 1321


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list1) (string3)

3 goal(s) more...

1 conjecture(s) more...
>>> case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list1) (string3)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:0)
=================================================
Progress: 1322


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list1) (string3)

3 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = true

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case2 at 0(rank:0)
rewrite <- string_eqb_eq in Case2 at 0(rank:0)
case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank:2)
=================================================
Progress: 1323


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
string_list1 : string list
Case1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list1) (string3)

4 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
string_list1 : string list
Case1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case2 : is_mem_ta1 (string_list1) (string1) = true
Case3 : string_eq (string2) (string3) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = true

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite string_eqb_eq in Case3 at 0(rank:0)
rewrite <- string_eqb_eq in Case3 at 0(rank:0)
=================================================
Progress: 1324


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list1) (string3)

4 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case3 : string_eq (string2) (string3) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = true

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite string_eqb_eq in Case3 at 0(rank:0)
rewrite <- string_eqb_eq in Case3 at 0(rank:0)
=================================================
Progress: 1325


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = true

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : string2 = string3
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = true

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
rewrite Case2 in goal at 0(rank:2)
rewrite Case2 in goal at 2(rank:2)
rewrite <- Case2 in goal at 0(rank:2)
rewrite <- Case2 in goal at 1(rank:2)
rewrite <- Case2 in goal at 2(rank:2)
rewrite <- Case2 in goal at 3(rank:2)
rewrite Case2 in goal at 3(rank:2)
rewrite Case2 in goal at 1(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank:2)
=================================================
Progress: 1326


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = true

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : string3 = string2
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = true

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
rewrite Case2 in goal at 0(rank:2)
rewrite Case2 in goal at 2(rank:2)
rewrite <- Case2 in goal at 0(rank:2)
rewrite <- Case2 in goal at 1(rank:2)
rewrite <- Case2 in goal at 2(rank:2)
rewrite <- Case2 in goal at 3(rank:2)
rewrite Case2 in goal at 3(rank:2)
rewrite Case2 in goal at 1(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank:2)
=================================================
Progress: 1327


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
string_list1 : string list
Case1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case2 : is_mem_ta1 (string_list1) (string1) = true
Case3 : string_eq (string2) (string3) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = true

5 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
string_list1 : string list
Case1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case2 : is_mem_ta1 (string_list1) (string1) = true
Case3 : string2 = string3
---------------------------------------
is_mem_ta1 (string_list1) (string3) = true

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- Case3 in goal at 0(rank:2)
=================================================
Progress: 1328


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
string_list1 : string list
Case1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case2 : is_mem_ta1 (string_list1) (string1) = true
Case3 : string_eq (string2) (string3) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = true

5 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case3 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
string_list1 : string list
Case1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case2 : is_mem_ta1 (string_list1) (string1) = true
Case3 : string3 = string2
---------------------------------------
is_mem_ta1 (string_list1) (string3) = true

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Case3 in goal at 0(rank:2)
=================================================
Progress: 1329


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case3 : string_eq (string2) (string3) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = true

5 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case3 : string2 = string3
---------------------------------------
is_mem_ta1 (string_list1) (string3) = true

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- Case3 in goal at 0(rank:2)
=================================================
Progress: 1330


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case3 : string_eq (string2) (string3) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = true

5 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case3 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case3 : string3 = string2
---------------------------------------
is_mem_ta1 (string_list1) (string3) = true

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Case3 in goal at 0(rank:2)
=================================================
Progress: 1331


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
forall (string2:string), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list1) (string3)

3 goal(s) more...

1 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list1) (string3)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 6
rewrite <- Case1 in goal at 3(rank:1)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank:2)
case string_eq (string2) (string3)(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
=================================================
Progress: 1332


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
forall (string2:string), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list1) (string3)

3 goal(s) more...

1 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list1) (string3)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 6
rewrite <- Case1 in goal at 3(rank:1)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank:2)
case string_eq (string2) (string3)(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
=================================================
Progress: 1333


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list1) (string3)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 3(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank:0)
case string_eq (string2) (string3)(rank:0)
=================================================
Progress: 1334


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)

3 goal(s) more...

1 conjecture(s) more...
>>> case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:0)
=================================================
Progress: 1335


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)

3 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
Case2 : string_eq (string2) (string3) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = is_mem_ta1 (string_list1) (string1)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case2 at 0(rank:0)
rewrite <- string_eqb_eq in Case2 at 0(rank:0)
case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank:2)
=================================================
Progress: 1336


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)

4 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case3 : string_eq (string2) (string3) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = is_mem_ta1 (string_list1) (string1)

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite string_eqb_eq in Case3 at 0(rank:0)
rewrite <- string_eqb_eq in Case3 at 0(rank:0)
=================================================
Progress: 1337


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
Case2 : string_eq (string2) (string3) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = is_mem_ta1 (string_list1) (string1)

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
Case2 : string2 = string3
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = is_mem_ta1 (string_list1) (string1)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
rewrite Case2 in goal at 0(rank:2)
rewrite Case2 in goal at 2(rank:2)
rewrite <- Case2 in goal at 0(rank:2)
rewrite <- Case2 in goal at 1(rank:2)
rewrite <- Case2 in goal at 2(rank:2)
rewrite <- Case2 in goal at 3(rank:2)
rewrite Case2 in goal at 3(rank:2)
rewrite Case2 in goal at 1(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank:2)
=================================================
Progress: 1338


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
Case2 : string_eq (string2) (string3) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = is_mem_ta1 (string_list1) (string1)

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
Case2 : string3 = string2
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = is_mem_ta1 (string_list1) (string1)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
rewrite Case2 in goal at 0(rank:2)
rewrite Case2 in goal at 2(rank:2)
rewrite <- Case2 in goal at 0(rank:2)
rewrite <- Case2 in goal at 1(rank:2)
rewrite <- Case2 in goal at 2(rank:2)
rewrite <- Case2 in goal at 3(rank:2)
rewrite Case2 in goal at 3(rank:2)
rewrite Case2 in goal at 1(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank:2)
=================================================
Progress: 1339


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case3 : string_eq (string2) (string3) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = is_mem_ta1 (string_list1) (string1)

5 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case3 : string2 = string3
---------------------------------------
is_mem_ta1 (string_list1) (string3) = is_mem_ta1 (string_list1) (string1)

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- Case3 in goal at 0(rank:2)
=================================================
Progress: 1340


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case3 : string_eq (string2) (string3) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = is_mem_ta1 (string_list1) (string1)

5 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case3 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case3 : string3 = string2
---------------------------------------
is_mem_ta1 (string_list1) (string3) = is_mem_ta1 (string_list1) (string1)

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Case3 in goal at 0(rank:2)
=================================================
Progress: 1341


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list1) (string3)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 3(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank:0)
case string_eq (string2) (string3)(rank:0)
=================================================
Progress: 1342


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)

3 goal(s) more...

1 conjecture(s) more...
>>> case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:0)
=================================================
Progress: 1343


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)

3 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
Case2 : string_eq (string2) (string3) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = is_mem_ta1 (string_list1) (string1)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case2 at 0(rank:0)
rewrite <- string_eqb_eq in Case2 at 0(rank:0)
case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank:2)
=================================================
Progress: 1344


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)

4 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case3 : string_eq (string2) (string3) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = is_mem_ta1 (string_list1) (string1)

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite string_eqb_eq in Case3 at 0(rank:0)
rewrite <- string_eqb_eq in Case3 at 0(rank:0)
=================================================
Progress: 1345


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
Case2 : string_eq (string2) (string3) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = is_mem_ta1 (string_list1) (string1)

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
Case2 : string2 = string3
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = is_mem_ta1 (string_list1) (string1)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
rewrite Case2 in goal at 0(rank:2)
rewrite Case2 in goal at 2(rank:2)
rewrite <- Case2 in goal at 0(rank:2)
rewrite <- Case2 in goal at 1(rank:2)
rewrite <- Case2 in goal at 2(rank:2)
rewrite <- Case2 in goal at 3(rank:2)
rewrite Case2 in goal at 3(rank:2)
rewrite Case2 in goal at 1(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank:2)
=================================================
Progress: 1346


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
Case2 : string_eq (string2) (string3) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = is_mem_ta1 (string_list1) (string1)

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
Case2 : string3 = string2
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = is_mem_ta1 (string_list1) (string1)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
rewrite Case2 in goal at 0(rank:2)
rewrite Case2 in goal at 2(rank:2)
rewrite <- Case2 in goal at 0(rank:2)
rewrite <- Case2 in goal at 1(rank:2)
rewrite <- Case2 in goal at 2(rank:2)
rewrite <- Case2 in goal at 3(rank:2)
rewrite Case2 in goal at 3(rank:2)
rewrite Case2 in goal at 1(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank:2)
=================================================
Progress: 1347


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case3 : string_eq (string2) (string3) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = is_mem_ta1 (string_list1) (string1)

5 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case3 : string2 = string3
---------------------------------------
is_mem_ta1 (string_list1) (string3) = is_mem_ta1 (string_list1) (string1)

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- Case3 in goal at 0(rank:2)
=================================================
Progress: 1348


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case3 : string_eq (string2) (string3) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = is_mem_ta1 (string_list1) (string1)

5 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case3 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if is_mem_ta1 (Cons (string1) (string_list1)) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) else sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (lambda1)) (string_list1) else sub_check_ta1 (P (string2) (lambda1)) (Cons (string1) (string_list1))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case3 : string3 = string2
---------------------------------------
is_mem_ta1 (string_list1) (string3) = is_mem_ta1 (string_list1) (string1)

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Case3 in goal at 0(rank:2)
=================================================
Progress: 1349


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

---------------------------------------
forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
---------------------------------------
forall (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
intro string2(rank:1)
intro string3(rank:1)
intro string_list1(rank:1)
=================================================
Progress: 1350


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

---------------------------------------
forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string2 : string
---------------------------------------
forall (string1:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro string3(rank:1)
intro string_list1(rank:1)
=================================================
Progress: 1351


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

---------------------------------------
forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> intro string3(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string3 : string
---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string_list1(rank:1)
=================================================
Progress: 1352


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

---------------------------------------
forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> intro string_list1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string_list1 : string list
---------------------------------------
forall (string1:string) (string2:string) (string3:string), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
state_list
=================================================
Progress: 1353


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
---------------------------------------
forall (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string2 : string
---------------------------------------
forall (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro string3(rank:1)
intro string_list1(rank:1)
=================================================
Progress: 1354


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
---------------------------------------
forall (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> intro string3(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string3 : string
---------------------------------------
forall (string2:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string_list1(rank:1)
=================================================
Progress: 1355


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
---------------------------------------
forall (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> intro string_list1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
---------------------------------------
forall (string2:string) (string3:string), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 1356


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
---------------------------------------
forall (string2:string) (string3:string), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
forall (string2:string) (string3:string), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list1) (string3)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro string2(rank:1)
intro string3(rank:1)
=================================================
Progress: 1357


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string2 : string
---------------------------------------
forall (string1:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> intro string3(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string2 : string
string3 : string
---------------------------------------
forall (string1:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string_list1(rank:1)
=================================================
Progress: 1358


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string2 : string
---------------------------------------
forall (string1:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> intro string_list1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string2 : string
string_list1 : string list
---------------------------------------
forall (string1:string) (string3:string), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
state_list
=================================================
Progress: 1359


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string3 : string
---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> intro string_list1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string3 : string
string_list1 : string list
---------------------------------------
forall (string1:string) (string2:string), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 1360


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string2 : string
---------------------------------------
forall (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> intro string3(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string2 : string
string3 : string
---------------------------------------
forall (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string_list1(rank:1)
=================================================
Progress: 1361


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string2 : string
---------------------------------------
forall (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> intro string_list1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string2 : string
string_list1 : string list
---------------------------------------
forall (string3:string), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank:0)
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 1362


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string2 : string
string_list1 : string list
---------------------------------------
forall (string3:string), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string2 : string
string_list1 : string list
Case1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
---------------------------------------
forall (string3:string), if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro string3(rank:1)
case is_mem_ta1 (string_list1) (string1)(rank:2)
=================================================
Progress: 1363


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string2 : string
string_list1 : string list
---------------------------------------
forall (string3:string), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
forall (string3:string), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list1) (string3)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro string3(rank:1)
case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank:2)
=================================================
Progress: 1364


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string3 : string
---------------------------------------
forall (string2:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> intro string_list1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string3 : string
string_list1 : string list
---------------------------------------
forall (string2:string), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 1365


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string3 : string
string_list1 : string list
---------------------------------------
forall (string2:string), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string3 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
forall (string2:string), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list1) (string3)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string2(rank:1)
=================================================
Progress: 1366


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string2 : string
string3 : string
---------------------------------------
forall (string1:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> intro string_list1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string2 : string
string3 : string
string_list1 : string list
---------------------------------------
forall (string1:string), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 1367


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string2 : string
string3 : string
---------------------------------------
forall (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> intro string_list1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string2 : string
string3 : string
string_list1 : string list
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank:0)
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 1368


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string2 : string
string3 : string
string_list1 : string list
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string2 : string
string3 : string
string_list1 : string list
Case1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
---------------------------------------
if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 1369


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string2 : string
string3 : string
string_list1 : string list
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string2 : string
string3 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list1) (string3)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank:0)
case string_eq (string2) (string3)(rank:0)
=================================================
Progress: 1370


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string2 : string
string3 : string
string_list1 : string list
Case1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
---------------------------------------
if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

1 goal(s) more...

2 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string2 : string
string3 : string
string_list1 : string list
Case1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list1) (string3)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:0)
=================================================
Progress: 1371


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string2 : string
string3 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list1) (string3)

1 goal(s) more...

2 conjecture(s) more...
>>> case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string2 : string
string3 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list1) (string3)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:0)
=================================================
Progress: 1372


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string2 : string
string3 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list1) (string3)

1 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string2 : string
string3 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case2 at 0(rank:0)
rewrite <- string_eqb_eq in Case2 at 0(rank:0)
case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank:2)
=================================================
Progress: 1373


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string2 : string
string3 : string
string_list1 : string list
Case1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list1) (string3)

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string2 : string
string3 : string
string_list1 : string list
Case1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case2 : is_mem_ta1 (string_list1) (string1) = true
Case3 : string_eq (string2) (string3) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite string_eqb_eq in Case3 at 0(rank:0)
rewrite <- string_eqb_eq in Case3 at 0(rank:0)
=================================================
Progress: 1374


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string2 : string
string3 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list1) (string3)

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string2 : string
string3 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case3 : string_eq (string2) (string3) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite string_eqb_eq in Case3 at 0(rank:0)
rewrite <- string_eqb_eq in Case3 at 0(rank:0)
=================================================
Progress: 1375


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string2 : string
string3 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = true

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string2 : string
string3 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : string2 = string3
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 9
rewrite Case2 in goal at 0(rank:2)
rewrite Case2 in goal at 2(rank:2)
rewrite <- Case2 in goal at 0(rank:2)
rewrite <- Case2 in goal at 1(rank:2)
rewrite <- Case2 in goal at 2(rank:2)
rewrite <- Case2 in goal at 3(rank:2)
rewrite Case2 in goal at 3(rank:2)
rewrite Case2 in goal at 1(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank:2)
=================================================
Progress: 1376


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string2 : string
string3 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : string_eq (string2) (string3) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = true

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string2 : string
string3 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : string3 = string2
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = true

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 9
rewrite Case2 in goal at 0(rank:2)
rewrite Case2 in goal at 2(rank:2)
rewrite <- Case2 in goal at 0(rank:2)
rewrite <- Case2 in goal at 1(rank:2)
rewrite <- Case2 in goal at 2(rank:2)
rewrite <- Case2 in goal at 3(rank:2)
rewrite Case2 in goal at 3(rank:2)
rewrite Case2 in goal at 1(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank:2)
=================================================
Progress: 1377


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string2 : string
string3 : string
string_list1 : string list
Case1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case2 : is_mem_ta1 (string_list1) (string1) = true
Case3 : string_eq (string2) (string3) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string2 : string
string3 : string
string_list1 : string list
Case1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case2 : is_mem_ta1 (string_list1) (string1) = true
Case3 : string2 = string3
---------------------------------------
is_mem_ta1 (string_list1) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite <- Case3 in goal at 0(rank:2)
=================================================
Progress: 1378


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string2 : string
string3 : string
string_list1 : string list
Case1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case2 : is_mem_ta1 (string_list1) (string1) = true
Case3 : string_eq (string2) (string3) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case3 at 0(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string2 : string
string3 : string
string_list1 : string list
Case1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case2 : is_mem_ta1 (string_list1) (string1) = true
Case3 : string3 = string2
---------------------------------------
is_mem_ta1 (string_list1) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Case3 in goal at 0(rank:2)
=================================================
Progress: 1379


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string2 : string
string3 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case3 : string_eq (string2) (string3) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string2 : string
string3 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case3 : string2 = string3
---------------------------------------
is_mem_ta1 (string_list1) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite <- Case3 in goal at 0(rank:2)
=================================================
Progress: 1380


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string2 : string
string3 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case3 : string_eq (string2) (string3) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case3 at 0(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string2 : string
string3 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case3 : string3 = string2
---------------------------------------
is_mem_ta1 (string_list1) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Case3 in goal at 0(rank:2)
=================================================
Progress: 1381


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
forall (string2:string) (string3:string), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list1) (string3)

1 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
---------------------------------------
forall (string3:string), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list1) (string3)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
intro string3(rank:1)
rewrite <- Case1 in goal at 3(rank:1)
case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
=================================================
Progress: 1382


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
forall (string2:string) (string3:string), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list1) (string3)

1 goal(s) more...

2 conjecture(s) more...
>>> intro string3(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string3 : string
---------------------------------------
forall (string2:string), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list1) (string3)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
rewrite <- Case1 in goal at 3(rank:1)
rewrite <- Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
=================================================
Progress: 1383


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string2 : string
string_list1 : string list
Case1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
---------------------------------------
forall (string3:string), if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

1 goal(s) more...

2 conjecture(s) more...
>>> intro string3(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string2 : string
string_list1 : string list
Case1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
string3 : string
---------------------------------------
if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 1384


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string2 : string
string_list1 : string list
Case1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
string3 : string
---------------------------------------
if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))

1 goal(s) more...

2 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string2 : string
string_list1 : string list
Case1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
string3 : string
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list1) (string3)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:2)
case string_eq (string2) (string3)(rank:2)
=================================================
Progress: 1385


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
forall (string3:string), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list1) (string3)

1 goal(s) more...

2 conjecture(s) more...
>>> intro string3(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string3 : string
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list1) (string3)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
rewrite <- Case1 in goal at 3(rank:1)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank:2)
case string_eq (string2) (string3)(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
=================================================
Progress: 1386


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string3 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
forall (string2:string), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list1) (string3)

1 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string3 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list1) (string3)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
rewrite <- Case1 in goal at 3(rank:1)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank:2)
case string_eq (string2) (string3)(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
=================================================
Progress: 1387


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
---------------------------------------
forall (string3:string), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list1) (string3)

1 goal(s) more...

2 conjecture(s) more...
>>> intro string3(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
string3 : string
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list1) (string3)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
rewrite <- Case1 in goal at 3(rank:1)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank:2)
case string_eq (string2) (string3)(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
=================================================
Progress: 1388


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
---------------------------------------
forall (string3:string), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list1) (string3)

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 3(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
---------------------------------------
forall (string3:string), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank:0)
=================================================
Progress: 1389


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
---------------------------------------
forall (string3:string), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)

1 goal(s) more...

2 conjecture(s) more...
>>> case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
---------------------------------------
forall (string3:string), is_mem_ta1 (string_list1) (string3) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string3(rank:1)
=================================================
Progress: 1390


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string3 : string
---------------------------------------
forall (string2:string), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list1) (string3)

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 3(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string3 : string
---------------------------------------
forall (string2:string), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
state_list
New Env

;;
Lemma List
forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
End of Lemma List
=================================================
Progress: 1391


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string3 : string
---------------------------------------
forall (string2:string), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list1) (string3)

1 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
induction string_list1(rank:0)
intro string3(rank:1)
intro string1(rank:1)
intro string2(rank:1)
=================================================
Progress: 1392


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)

0 goal(s) more...

3 conjecture(s) more...
>>> induction string_list1(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string) (string2:string) (string3:string), is_mem_ta1 (Nil) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Nil) (string2) then if true then sub_check_ta1 (V (string3)) (Nil) else sub_check_ta1 (V (string3)) (Cons (string1) (Nil)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Nil))) = if string_eq (string2) (string3) then is_mem_ta1 (Nil) (string1) else is_mem_ta1 (Nil) (string3)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:0)
=================================================
Progress: 1393


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string) (string2:string) (string3:string), is_mem_ta1 (Nil) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Nil) (string2) then if true then sub_check_ta1 (V (string3)) (Nil) else sub_check_ta1 (V (string3)) (Cons (string1) (Nil)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Nil))) = if string_eq (string2) (string3) then is_mem_ta1 (Nil) (string1) else is_mem_ta1 (Nil) (string3)

1 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
---------------------------------------
forall (string1:string) (string2:string) (string3:string), is_mem_ta1 (Cons (string4) (string_list2)) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

0 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 1394


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
---------------------------------------
forall (string1:string) (string2:string) (string3:string), is_mem_ta1 (Cons (string4) (string_list2)) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

0 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
---------------------------------------
forall (string1:string) (string2:string) (string3:string), if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
intro string1(rank:1)
intro string2(rank:1)
intro string3(rank:1)
=================================================
Progress: 1395


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string3 : string
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list1) (string3)

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 3(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string3 : string
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank:0)
case string_eq (string2) (string3)(rank:0)
=================================================
Progress: 1396


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string3 : string
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)

1 goal(s) more...

2 conjecture(s) more...
>>> case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string3 : string
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:0)
=================================================
Progress: 1397


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string3 : string
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)

1 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string3 : string
Case2 : string_eq (string2) (string3) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = is_mem_ta1 (string_list1) (string1)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case2 at 0(rank:0)
rewrite <- string_eqb_eq in Case2 at 0(rank:0)
case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank:2)
=================================================
Progress: 1398


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string3 : string
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string3 : string
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case3 : string_eq (string2) (string3) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = is_mem_ta1 (string_list1) (string1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite string_eqb_eq in Case3 at 0(rank:0)
rewrite <- string_eqb_eq in Case3 at 0(rank:0)
=================================================
Progress: 1399


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string3 : string
Case2 : string_eq (string2) (string3) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = is_mem_ta1 (string_list1) (string1)

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string3 : string
Case2 : string2 = string3
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = is_mem_ta1 (string_list1) (string1)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 9
rewrite Case2 in goal at 0(rank:2)
rewrite Case2 in goal at 2(rank:2)
rewrite <- Case2 in goal at 0(rank:2)
rewrite <- Case2 in goal at 1(rank:2)
rewrite <- Case2 in goal at 2(rank:2)
rewrite <- Case2 in goal at 3(rank:2)
rewrite Case2 in goal at 3(rank:2)
rewrite Case2 in goal at 1(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank:2)
=================================================
Progress: 1400


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string3 : string
Case2 : string_eq (string2) (string3) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = is_mem_ta1 (string_list1) (string1)

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string3 : string
Case2 : string3 = string2
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = is_mem_ta1 (string_list1) (string1)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 9
rewrite Case2 in goal at 0(rank:2)
rewrite Case2 in goal at 2(rank:2)
rewrite <- Case2 in goal at 0(rank:2)
rewrite <- Case2 in goal at 1(rank:2)
rewrite <- Case2 in goal at 2(rank:2)
rewrite <- Case2 in goal at 3(rank:2)
rewrite Case2 in goal at 3(rank:2)
rewrite Case2 in goal at 1(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank:2)
=================================================
Progress: 1401


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string3 : string
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case3 : string_eq (string2) (string3) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = is_mem_ta1 (string_list1) (string1)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string3 : string
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case3 : string2 = string3
---------------------------------------
is_mem_ta1 (string_list1) (string3) = is_mem_ta1 (string_list1) (string1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite <- Case3 in goal at 0(rank:2)
=================================================
Progress: 1402


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string3 : string
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case3 : string_eq (string2) (string3) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = is_mem_ta1 (string_list1) (string1)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case3 at 0(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string3 : string
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case3 : string3 = string2
---------------------------------------
is_mem_ta1 (string_list1) (string3) = is_mem_ta1 (string_list1) (string1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Case3 in goal at 0(rank:2)
=================================================
Progress: 1403


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string3 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list1) (string3)

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 3(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string3 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank:0)
case string_eq (string2) (string3)(rank:0)
=================================================
Progress: 1404


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string3 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)

1 goal(s) more...

2 conjecture(s) more...
>>> case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string3 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:0)
=================================================
Progress: 1405


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string3 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)

1 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string3 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
Case2 : string_eq (string2) (string3) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = is_mem_ta1 (string_list1) (string1)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case2 at 0(rank:0)
rewrite <- string_eqb_eq in Case2 at 0(rank:0)
case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank:2)
=================================================
Progress: 1406


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string3 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string3 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case3 : string_eq (string2) (string3) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = is_mem_ta1 (string_list1) (string1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite string_eqb_eq in Case3 at 0(rank:0)
rewrite <- string_eqb_eq in Case3 at 0(rank:0)
=================================================
Progress: 1407


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string3 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
Case2 : string_eq (string2) (string3) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = is_mem_ta1 (string_list1) (string1)

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string3 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
Case2 : string2 = string3
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = is_mem_ta1 (string_list1) (string1)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 9
rewrite Case2 in goal at 0(rank:2)
rewrite Case2 in goal at 2(rank:2)
rewrite <- Case2 in goal at 0(rank:2)
rewrite <- Case2 in goal at 1(rank:2)
rewrite <- Case2 in goal at 2(rank:2)
rewrite <- Case2 in goal at 3(rank:2)
rewrite Case2 in goal at 3(rank:2)
rewrite Case2 in goal at 1(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank:2)
=================================================
Progress: 1408


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string3 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
Case2 : string_eq (string2) (string3) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = is_mem_ta1 (string_list1) (string1)

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string3 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
Case2 : string3 = string2
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = is_mem_ta1 (string_list1) (string1)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 9
rewrite Case2 in goal at 0(rank:2)
rewrite Case2 in goal at 2(rank:2)
rewrite <- Case2 in goal at 0(rank:2)
rewrite <- Case2 in goal at 1(rank:2)
rewrite <- Case2 in goal at 2(rank:2)
rewrite <- Case2 in goal at 3(rank:2)
rewrite Case2 in goal at 3(rank:2)
rewrite Case2 in goal at 1(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank:2)
=================================================
Progress: 1409


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string3 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case3 : string_eq (string2) (string3) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = is_mem_ta1 (string_list1) (string1)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string3 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case3 : string2 = string3
---------------------------------------
is_mem_ta1 (string_list1) (string3) = is_mem_ta1 (string_list1) (string1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite <- Case3 in goal at 0(rank:2)
=================================================
Progress: 1410


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string3 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case3 : string_eq (string2) (string3) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = is_mem_ta1 (string_list1) (string1)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case3 at 0(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string3 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case3 : string3 = string2
---------------------------------------
is_mem_ta1 (string_list1) (string3) = is_mem_ta1 (string_list1) (string1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Case3 in goal at 0(rank:2)
=================================================
Progress: 1411


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
string3 : string
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list1) (string3)

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Case1 in goal at 3(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
string3 : string
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank:0)
case string_eq (string2) (string3)(rank:0)
=================================================
Progress: 1412


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
string3 : string
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)

1 goal(s) more...

2 conjecture(s) more...
>>> case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
string3 : string
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:0)
=================================================
Progress: 1413


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
string3 : string
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)

1 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
string3 : string
Case2 : string_eq (string2) (string3) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = is_mem_ta1 (string_list1) (string1)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case2 at 0(rank:0)
rewrite <- string_eqb_eq in Case2 at 0(rank:0)
case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank:2)
=================================================
Progress: 1414


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
string3 : string
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)

2 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
string3 : string
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case3 : string_eq (string2) (string3) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = is_mem_ta1 (string_list1) (string1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite string_eqb_eq in Case3 at 0(rank:0)
rewrite <- string_eqb_eq in Case3 at 0(rank:0)
=================================================
Progress: 1415


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
string3 : string
Case2 : string_eq (string2) (string3) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = is_mem_ta1 (string_list1) (string1)

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
string3 : string
Case2 : string2 = string3
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = is_mem_ta1 (string_list1) (string1)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 9
rewrite Case2 in goal at 0(rank:2)
rewrite Case2 in goal at 2(rank:2)
rewrite <- Case2 in goal at 0(rank:2)
rewrite <- Case2 in goal at 1(rank:2)
rewrite <- Case2 in goal at 2(rank:2)
rewrite <- Case2 in goal at 3(rank:2)
rewrite Case2 in goal at 3(rank:2)
rewrite Case2 in goal at 1(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank:2)
=================================================
Progress: 1416


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
string3 : string
Case2 : string_eq (string2) (string3) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = is_mem_ta1 (string_list1) (string1)

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
string3 : string
Case2 : string3 = string2
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = is_mem_ta1 (string_list1) (string1)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 9
rewrite Case2 in goal at 0(rank:2)
rewrite Case2 in goal at 2(rank:2)
rewrite <- Case2 in goal at 0(rank:2)
rewrite <- Case2 in goal at 1(rank:2)
rewrite <- Case2 in goal at 2(rank:2)
rewrite <- Case2 in goal at 3(rank:2)
rewrite Case2 in goal at 3(rank:2)
rewrite Case2 in goal at 1(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank:2)
=================================================
Progress: 1417


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
string3 : string
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case3 : string_eq (string2) (string3) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = is_mem_ta1 (string_list1) (string1)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
string3 : string
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case3 : string2 = string3
---------------------------------------
is_mem_ta1 (string_list1) (string3) = is_mem_ta1 (string_list1) (string1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite <- Case3 in goal at 0(rank:2)
=================================================
Progress: 1418


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
string3 : string
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case3 : string_eq (string2) (string3) = true
---------------------------------------
is_mem_ta1 (string_list1) (string3) = is_mem_ta1 (string_list1) (string1)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case3 at 0(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
string3 : string
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
Case3 : string3 = string2
---------------------------------------
is_mem_ta1 (string_list1) (string3) = is_mem_ta1 (string_list1) (string1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Case3 in goal at 0(rank:2)
=================================================
Progress: 1419


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
---------------------------------------
forall (string3:string), is_mem_ta1 (string_list1) (string3) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)

2 goal(s) more...

2 conjecture(s) more...
>>> intro string3(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
string3 : string
---------------------------------------
is_mem_ta1 (string_list1) (string3) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite Case1 in goal at 0(rank:1)
case string_eq (string2) (string3)(rank:2)
=================================================
Progress: 1420


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
string3 : string
---------------------------------------
is_mem_ta1 (string_list1) (string3) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (P (string2) (V (string3))) (string_list1) else sub_check_ta1 (P (string2) (V (string3))) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
Case2 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = true
string3 : string
---------------------------------------
is_mem_ta1 (string_list1) (string3) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list1) (string3)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:2)
case string_eq (string2) (string3)(rank:2)
=================================================
Progress: 1421


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)

0 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string1 : string
---------------------------------------
forall (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
induction string_list1(rank:0)
intro string2(rank:1)
intro string3(rank:1)
=================================================
Progress: 1422


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string1 : string
---------------------------------------
forall (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)

0 goal(s) more...

3 conjecture(s) more...
>>> induction string_list1(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string1 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string2:string) (string3:string), is_mem_ta1 (Nil) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Nil) (string2) then if true then sub_check_ta1 (V (string3)) (Nil) else sub_check_ta1 (V (string3)) (Cons (string1) (Nil)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Nil))) = if string_eq (string2) (string3) then is_mem_ta1 (Nil) (string1) else is_mem_ta1 (Nil) (string3)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:0)
=================================================
Progress: 1423


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string1 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string2:string) (string3:string), is_mem_ta1 (Nil) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Nil) (string2) then if true then sub_check_ta1 (V (string3)) (Nil) else sub_check_ta1 (V (string3)) (Cons (string1) (Nil)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Nil))) = if string_eq (string2) (string3) then is_mem_ta1 (Nil) (string1) else is_mem_ta1 (Nil) (string3)

1 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string1 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
---------------------------------------
forall (string2:string) (string3:string), is_mem_ta1 (Cons (string4) (string_list2)) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

0 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 1424


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string1 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
---------------------------------------
forall (string2:string) (string3:string), is_mem_ta1 (Cons (string4) (string_list2)) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

0 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string1 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
---------------------------------------
forall (string2:string) (string3:string), if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
intro string2(rank:1)
intro string3(rank:1)
case string_eq (string4) (string1)(rank:2)
=================================================
Progress: 1425


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)

0 goal(s) more...

3 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string2 : string
---------------------------------------
forall (string1:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
induction string_list1(rank:0)
intro string3(rank:1)
=================================================
Progress: 1426


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string2 : string
---------------------------------------
forall (string1:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)

0 goal(s) more...

3 conjecture(s) more...
>>> induction string_list1(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string) (string3:string), is_mem_ta1 (Nil) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Nil) (string2) then if true then sub_check_ta1 (V (string3)) (Nil) else sub_check_ta1 (V (string3)) (Cons (string1) (Nil)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Nil))) = if string_eq (string2) (string3) then is_mem_ta1 (Nil) (string1) else is_mem_ta1 (Nil) (string3)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:0)
=================================================
Progress: 1427


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string) (string3:string), is_mem_ta1 (Nil) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Nil) (string2) then if true then sub_check_ta1 (V (string3)) (Nil) else sub_check_ta1 (V (string3)) (Cons (string1) (Nil)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Nil))) = if string_eq (string2) (string3) then is_mem_ta1 (Nil) (string1) else is_mem_ta1 (Nil) (string3)

1 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string2 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
---------------------------------------
forall (string1:string) (string3:string), is_mem_ta1 (Cons (string4) (string_list2)) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

0 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 1428


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string2 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
---------------------------------------
forall (string1:string) (string3:string), is_mem_ta1 (Cons (string4) (string_list2)) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

0 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string2 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
---------------------------------------
forall (string1:string) (string3:string), if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
intro string1(rank:1)
intro string3(rank:1)
=================================================
Progress: 1429


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)

0 goal(s) more...

3 conjecture(s) more...
>>> intro string3(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string3 : string
---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction string_list1(rank:0)
=================================================
Progress: 1430


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string3 : string
---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)

0 goal(s) more...

3 conjecture(s) more...
>>> induction string_list1(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string) (string2:string), is_mem_ta1 (Nil) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Nil) (string2) then if true then sub_check_ta1 (V (string3)) (Nil) else sub_check_ta1 (V (string3)) (Cons (string1) (Nil)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Nil))) = if string_eq (string2) (string3) then is_mem_ta1 (Nil) (string1) else is_mem_ta1 (Nil) (string3)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:0)
=================================================
Progress: 1431


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string) (string2:string), is_mem_ta1 (Nil) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Nil) (string2) then if true then sub_check_ta1 (V (string3)) (Nil) else sub_check_ta1 (V (string3)) (Cons (string1) (Nil)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Nil))) = if string_eq (string2) (string3) then is_mem_ta1 (Nil) (string1) else is_mem_ta1 (Nil) (string3)

1 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string3 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
---------------------------------------
forall (string1:string) (string2:string), is_mem_ta1 (Cons (string4) (string_list2)) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

0 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 1432


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string3 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
---------------------------------------
forall (string1:string) (string2:string), is_mem_ta1 (Cons (string4) (string_list2)) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

0 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string3 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
---------------------------------------
forall (string1:string) (string2:string), if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
intro string1(rank:1)
intro string2(rank:1)
=================================================
Progress: 1433


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
---------------------------------------
forall (string1:string) (string2:string) (string3:string), if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

0 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string1 : string
---------------------------------------
forall (string2:string) (string3:string), if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
intro string2(rank:1)
intro string3(rank:1)
case string_eq (string4) (string1)(rank:2)
=================================================
Progress: 1434


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
---------------------------------------
forall (string1:string) (string2:string) (string3:string), if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

0 goal(s) more...

3 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string2 : string
---------------------------------------
forall (string1:string) (string3:string), if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string3(rank:1)
=================================================
Progress: 1435


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
---------------------------------------
forall (string1:string) (string2:string) (string3:string), if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

0 goal(s) more...

3 conjecture(s) more...
>>> intro string3(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string3 : string
---------------------------------------
forall (string1:string) (string2:string), if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string3


1st goal of : any
string_list1 : string list
string4 : string
string3 : string
---------------------------------------
forall (string_list2:string list) (string1:string) (string2:string), if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

0 goal(s) more...

0 conjecture(s) more...
state_list
New Env

;;
Lemma List
forall (string1:string) (string2:string) (string3:string) (string4:string) (string_list2:string list), if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)
End of Lemma List
=================================================
Progress: 1436


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
---------------------------------------
forall (string1:string) (string2:string) (string3:string), if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

0 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string) (string4:string) (string_list2:string list), if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string4:string) (string_list1:string list), if string_eq (string4) (string1) then true else is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list1)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list1))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list1)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list1)) (string1) else is_mem_ta1 (Cons (string4) (string_list1)) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string) (string4:string) (string_list1:string list), if string_eq (string4) (string1) then true else is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list1)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list1))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list1)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list1)) (string1) else is_mem_ta1 (Cons (string4) (string_list1)) (string3)

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 5
induction string_list1(rank:0)
intro string1(rank:1)
intro string2(rank:1)
intro string3(rank:1)
intro string4(rank:1)
=================================================
Progress: 1437


1st goal of : forall (string1:string) (string2:string) (string3:string) (string4:string) (string_list1:string list), if string_eq (string4) (string1) then true else is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list1)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list1))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list1)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list1)) (string1) else is_mem_ta1 (Cons (string4) (string_list1)) (string3)

---------------------------------------
forall (string1:string) (string2:string) (string3:string) (string4:string) (string_list1:string list), if string_eq (string4) (string1) then true else is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list1)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list1))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list1)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list1)) (string1) else is_mem_ta1 (Cons (string4) (string_list1)) (string3)

0 goal(s) more...

4 conjecture(s) more...
>>> induction string_list1(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string4:string) (string_list1:string list), if string_eq (string4) (string1) then true else is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list1)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list1))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list1)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list1)) (string1) else is_mem_ta1 (Cons (string4) (string_list1)) (string3)
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string) (string2:string) (string3:string) (string4:string), if string_eq (string4) (string1) then true else is_mem_ta1 (Nil) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (Nil)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (Nil)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (Nil))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (Nil)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (Nil)) (string1) else is_mem_ta1 (Cons (string4) (Nil)) (string3)

1 goal(s) more...

4 conjecture(s) more...
Tactic List : 4
intro string1(rank:1)
intro string2(rank:1)
intro string3(rank:1)
intro string4(rank:1)
=================================================
Progress: 1438


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string1 : string
---------------------------------------
forall (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)

0 goal(s) more...

3 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string1 : string
string2 : string
---------------------------------------
forall (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
induction string_list1(rank:0)
intro string3(rank:1)
=================================================
Progress: 1439


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string1 : string
string2 : string
---------------------------------------
forall (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)

0 goal(s) more...

3 conjecture(s) more...
>>> induction string_list1(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string1 : string
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string3:string), is_mem_ta1 (Nil) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Nil) (string2) then if true then sub_check_ta1 (V (string3)) (Nil) else sub_check_ta1 (V (string3)) (Cons (string1) (Nil)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Nil))) = if string_eq (string2) (string3) then is_mem_ta1 (Nil) (string1) else is_mem_ta1 (Nil) (string3)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:0)
=================================================
Progress: 1440


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string1 : string
string2 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string3:string), is_mem_ta1 (Nil) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Nil) (string2) then if true then sub_check_ta1 (V (string3)) (Nil) else sub_check_ta1 (V (string3)) (Cons (string1) (Nil)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Nil))) = if string_eq (string2) (string3) then is_mem_ta1 (Nil) (string1) else is_mem_ta1 (Nil) (string3)

1 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string1 : string
string2 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
---------------------------------------
forall (string3:string), is_mem_ta1 (Cons (string4) (string_list2)) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

0 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 1441


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string1 : string
string2 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
---------------------------------------
forall (string3:string), is_mem_ta1 (Cons (string4) (string_list2)) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

0 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string1 : string
string2 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
---------------------------------------
forall (string3:string), if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
intro string3(rank:1)
case string_eq (string4) (string1)(rank:2)
=================================================
Progress: 1442


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string1 : string
---------------------------------------
forall (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)

0 goal(s) more...

3 conjecture(s) more...
>>> intro string3(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string1 : string
string3 : string
---------------------------------------
forall (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction string_list1(rank:0)
=================================================
Progress: 1443


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string1 : string
string3 : string
---------------------------------------
forall (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)

0 goal(s) more...

3 conjecture(s) more...
>>> induction string_list1(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string1 : string
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string2:string), is_mem_ta1 (Nil) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Nil) (string2) then if true then sub_check_ta1 (V (string3)) (Nil) else sub_check_ta1 (V (string3)) (Cons (string1) (Nil)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Nil))) = if string_eq (string2) (string3) then is_mem_ta1 (Nil) (string1) else is_mem_ta1 (Nil) (string3)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:0)
=================================================
Progress: 1444


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string1 : string
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string2:string), is_mem_ta1 (Nil) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Nil) (string2) then if true then sub_check_ta1 (V (string3)) (Nil) else sub_check_ta1 (V (string3)) (Cons (string1) (Nil)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Nil))) = if string_eq (string2) (string3) then is_mem_ta1 (Nil) (string1) else is_mem_ta1 (Nil) (string3)

1 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string1 : string
string3 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string2:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
---------------------------------------
forall (string2:string), is_mem_ta1 (Cons (string4) (string_list2)) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

0 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 1445


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string1 : string
string3 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string2:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
---------------------------------------
forall (string2:string), is_mem_ta1 (Cons (string4) (string_list2)) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

0 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string1 : string
string3 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string2:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
---------------------------------------
forall (string2:string), if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
intro string2(rank:1)
case string_eq (string4) (string1)(rank:2)
=================================================
Progress: 1446


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string1 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
---------------------------------------
forall (string2:string) (string3:string), if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

0 goal(s) more...

3 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string1 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string2 : string
---------------------------------------
forall (string3:string), if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
intro string3(rank:1)
case if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2)(rank:2)
case string_eq (string4) (string1)(rank:2)
=================================================
Progress: 1447


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string1 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
---------------------------------------
forall (string2:string) (string3:string), if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

0 goal(s) more...

3 conjecture(s) more...
>>> intro string3(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string1 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string3 : string
---------------------------------------
forall (string2:string), if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string4) (string1)(rank:0)
=================================================
Progress: 1448


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string1 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string3 : string
---------------------------------------
forall (string2:string), if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

0 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string4) (string1)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string1 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string3 : string
Case1 : string_eq (string4) (string1) = true
---------------------------------------
forall (string2:string), true = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case1 at 0(rank:0)
intro string2(rank:1)
rewrite <- string_eqb_eq in Case1 at 0(rank:0)
=================================================
Progress: 1449


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string1 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string3 : string
Case1 : string_eq (string4) (string1) = true
---------------------------------------
forall (string2:string), true = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string1 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string3 : string
Case1 : string4 = string1
---------------------------------------
forall (string2:string), true = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
intro string2(rank:1)
rewrite Case1 in goal at 1(rank:2)
rewrite Case1 in goal at 3(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 3(rank:2)
=================================================
Progress: 1450


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string1 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string3 : string
Case1 : string_eq (string4) (string1) = true
---------------------------------------
forall (string2:string), true = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string1 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string3 : string
Case1 : string1 = string4
---------------------------------------
forall (string2:string), true = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
intro string2(rank:1)
rewrite Case1 in goal at 1(rank:2)
rewrite Case1 in goal at 3(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 3(rank:2)
=================================================
Progress: 1451


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string2 : string
---------------------------------------
forall (string1:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)

0 goal(s) more...

3 conjecture(s) more...
>>> intro string3(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string2 : string
string3 : string
---------------------------------------
forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
induction string_list1(rank:0)
case string_eq (string2) (string3)(rank:2)
=================================================
Progress: 1452


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string2 : string
string3 : string
---------------------------------------
forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)

0 goal(s) more...

3 conjecture(s) more...
>>> induction string_list1(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string2 : string
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string), is_mem_ta1 (Nil) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Nil) (string2) then if true then sub_check_ta1 (V (string3)) (Nil) else sub_check_ta1 (V (string3)) (Cons (string1) (Nil)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Nil))) = if string_eq (string2) (string3) then is_mem_ta1 (Nil) (string1) else is_mem_ta1 (Nil) (string3)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:0)
=================================================
Progress: 1453


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string2 : string
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string), is_mem_ta1 (Nil) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Nil) (string2) then if true then sub_check_ta1 (V (string3)) (Nil) else sub_check_ta1 (V (string3)) (Cons (string1) (Nil)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Nil))) = if string_eq (string2) (string3) then is_mem_ta1 (Nil) (string1) else is_mem_ta1 (Nil) (string3)

1 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string2 : string
string3 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
---------------------------------------
forall (string1:string), is_mem_ta1 (Cons (string4) (string_list2)) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

0 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 1454


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string2 : string
string3 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
---------------------------------------
forall (string1:string), is_mem_ta1 (Cons (string4) (string_list2)) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

0 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string2 : string
string3 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
---------------------------------------
forall (string1:string), if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:1)
=================================================
Progress: 1455


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string2 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
---------------------------------------
forall (string1:string) (string3:string), if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

0 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string2 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string1 : string
---------------------------------------
forall (string3:string), if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
intro string3(rank:1)
case if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2)(rank:2)
case string_eq (string4) (string1)(rank:2)
=================================================
Progress: 1456


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string2 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
---------------------------------------
forall (string1:string) (string3:string), if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

0 goal(s) more...

3 conjecture(s) more...
>>> intro string3(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string2 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string3 : string
---------------------------------------
forall (string1:string), if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:0)
=================================================
Progress: 1457


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string2 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string3 : string
---------------------------------------
forall (string1:string), if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

0 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string2 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string3 : string
Case1 : string_eq (string2) (string3) = true
---------------------------------------
forall (string1:string), if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case1 at 0(rank:0)
intro string1(rank:1)
rewrite <- string_eqb_eq in Case1 at 0(rank:0)
=================================================
Progress: 1458


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string2 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string3 : string
Case1 : string_eq (string2) (string3) = true
---------------------------------------
forall (string1:string), if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string2 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string3 : string
Case1 : string2 = string3
---------------------------------------
forall (string1:string), if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
intro string1(rank:1)
rewrite Case1 in goal at 1(rank:2)
rewrite Case1 in goal at 3(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 3(rank:2)
=================================================
Progress: 1459


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string2 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string3 : string
Case1 : string_eq (string2) (string3) = true
---------------------------------------
forall (string1:string), if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string2 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string3 : string
Case1 : string3 = string2
---------------------------------------
forall (string1:string), if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
intro string1(rank:1)
rewrite Case1 in goal at 1(rank:2)
rewrite Case1 in goal at 3(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 3(rank:2)
=================================================
Progress: 1460


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string3 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
---------------------------------------
forall (string1:string) (string2:string), if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

0 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string3 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string1 : string
---------------------------------------
forall (string2:string), if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
intro string2(rank:1)
case string_eq (string4) (string1)(rank:2)
=================================================
Progress: 1461


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string3 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
---------------------------------------
forall (string1:string) (string2:string), if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

0 goal(s) more...

3 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string3 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string2 : string
---------------------------------------
forall (string1:string), if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:0)
=================================================
Progress: 1462


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string3 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string2 : string
---------------------------------------
forall (string1:string), if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

0 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string3 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string2 : string
Case1 : string_eq (string2) (string3) = true
---------------------------------------
forall (string1:string), if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case1 at 0(rank:0)
intro string1(rank:1)
rewrite <- string_eqb_eq in Case1 at 0(rank:0)
=================================================
Progress: 1463


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string3 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string2 : string
Case1 : string_eq (string2) (string3) = true
---------------------------------------
forall (string1:string), if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string3 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string2 : string
Case1 : string2 = string3
---------------------------------------
forall (string1:string), if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
intro string1(rank:1)
rewrite Case1 in goal at 1(rank:2)
rewrite Case1 in goal at 3(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 3(rank:2)
=================================================
Progress: 1464


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string3 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string2 : string
Case1 : string_eq (string2) (string3) = true
---------------------------------------
forall (string1:string), if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string3 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string2 : string
Case1 : string3 = string2
---------------------------------------
forall (string1:string), if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
intro string1(rank:1)
rewrite Case1 in goal at 1(rank:2)
rewrite Case1 in goal at 3(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 3(rank:2)
=================================================
Progress: 1465


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string1 : string
---------------------------------------
forall (string2:string) (string3:string), if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

0 goal(s) more...

3 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string1 : string
string2 : string
---------------------------------------
forall (string3:string), if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
intro string3(rank:1)
case if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2)(rank:2)
case string_eq (string4) (string1)(rank:2)
=================================================
Progress: 1466


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string1 : string
---------------------------------------
forall (string2:string) (string3:string), if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

0 goal(s) more...

3 conjecture(s) more...
>>> intro string3(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string1 : string
string3 : string
---------------------------------------
forall (string2:string), if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string4) (string1)(rank:0)
=================================================
Progress: 1467


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string1 : string
string3 : string
---------------------------------------
forall (string2:string), if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

0 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string4) (string1)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string1 : string
string3 : string
Case1 : string_eq (string4) (string1) = true
---------------------------------------
forall (string2:string), true = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case1 at 0(rank:0)
intro string2(rank:1)
rewrite <- string_eqb_eq in Case1 at 0(rank:0)
=================================================
Progress: 1468


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string1 : string
string3 : string
Case1 : string_eq (string4) (string1) = true
---------------------------------------
forall (string2:string), true = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string1 : string
string3 : string
Case1 : string4 = string1
---------------------------------------
forall (string2:string), true = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
intro string2(rank:1)
rewrite Case1 in goal at 1(rank:2)
rewrite Case1 in goal at 3(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 3(rank:2)
=================================================
Progress: 1469


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string1 : string
string3 : string
Case1 : string_eq (string4) (string1) = true
---------------------------------------
forall (string2:string), true = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string1 : string
string3 : string
Case1 : string1 = string4
---------------------------------------
forall (string2:string), true = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
intro string2(rank:1)
rewrite Case1 in goal at 1(rank:2)
rewrite Case1 in goal at 3(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 3(rank:2)
=================================================
Progress: 1470


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string2 : string
---------------------------------------
forall (string1:string) (string3:string), if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

0 goal(s) more...

3 conjecture(s) more...
>>> intro string3(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string2 : string
string3 : string
---------------------------------------
forall (string1:string), if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:0)
=================================================
Progress: 1471


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string2 : string
string3 : string
---------------------------------------
forall (string1:string), if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

0 goal(s) more...

3 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string2 : string
string3 : string
Case1 : string_eq (string2) (string3) = true
---------------------------------------
forall (string1:string), if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case1 at 0(rank:0)
intro string1(rank:1)
rewrite <- string_eqb_eq in Case1 at 0(rank:0)
=================================================
Progress: 1472


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string2 : string
string3 : string
Case1 : string_eq (string2) (string3) = true
---------------------------------------
forall (string1:string), if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string2 : string
string3 : string
Case1 : string2 = string3
---------------------------------------
forall (string1:string), if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
intro string1(rank:1)
rewrite Case1 in goal at 1(rank:2)
rewrite Case1 in goal at 3(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 3(rank:2)
=================================================
Progress: 1473


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string2 : string
string3 : string
Case1 : string_eq (string2) (string3) = true
---------------------------------------
forall (string1:string), if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string2 : string
string3 : string
Case1 : string3 = string2
---------------------------------------
forall (string1:string), if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
intro string1(rank:1)
rewrite Case1 in goal at 1(rank:2)
rewrite Case1 in goal at 3(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 3(rank:2)
=================================================
Progress: 1474


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string1 : string
string2 : string
---------------------------------------
forall (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)

0 goal(s) more...

3 conjecture(s) more...
>>> intro string3(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string1 : string
string2 : string
string3 : string
---------------------------------------
forall (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
induction string_list1(rank:0)
case string_eq (string2) (string3)(rank:2)
=================================================
Progress: 1475


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string1 : string
string2 : string
string3 : string
---------------------------------------
forall (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)

0 goal(s) more...

3 conjecture(s) more...
>>> induction string_list1(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string1 : string
string2 : string
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
is_mem_ta1 (Nil) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Nil) (string2) then if true then sub_check_ta1 (V (string3)) (Nil) else sub_check_ta1 (V (string3)) (Cons (string1) (Nil)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Nil))) = if string_eq (string2) (string3) then is_mem_ta1 (Nil) (string1) else is_mem_ta1 (Nil) (string3)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
discriminate(rank:0)
=================================================
Progress: 1476


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string1 : string
string2 : string
string3 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
is_mem_ta1 (Nil) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Nil) (string2) then if true then sub_check_ta1 (V (string3)) (Nil) else sub_check_ta1 (V (string3)) (Cons (string1) (Nil)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Nil))) = if string_eq (string2) (string3) then is_mem_ta1 (Nil) (string1) else is_mem_ta1 (Nil) (string3)

1 goal(s) more...

3 conjecture(s) more...
>>> discriminate(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string1 : string
string2 : string
string3 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
---------------------------------------
is_mem_ta1 (Cons (string4) (string_list2)) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

0 goal(s) more...

3 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 1477


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string1 : string
string2 : string
string3 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
---------------------------------------
is_mem_ta1 (Cons (string4) (string_list2)) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

0 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string1 : string
string2 : string
string3 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
---------------------------------------
if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
intro Cond1(rank:1)
case string_eq (string4) (string1)(rank:2)
=================================================
Progress: 1478


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string1 : string
string2 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
---------------------------------------
forall (string3:string), if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

0 goal(s) more...

3 conjecture(s) more...
>>> intro string3(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string1 : string
string2 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string3 : string
---------------------------------------
if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
intro Cond1(rank:1)
case if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2)(rank:2)
case string_eq (string2) (string3)(rank:2)
case string_eq (string4) (string1)(rank:2)
=================================================
Progress: 1479


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string1 : string
string3 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string2:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
---------------------------------------
forall (string2:string), if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

0 goal(s) more...

3 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string1 : string
string3 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string2:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string2 : string
---------------------------------------
if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
intro Cond1(rank:1)
case if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2)(rank:2)
case string_eq (string2) (string3)(rank:2)
case string_eq (string4) (string1)(rank:2)
=================================================
Progress: 1480


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string1 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string2 : string
---------------------------------------
forall (string3:string), if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

0 goal(s) more...

3 conjecture(s) more...
>>> intro string3(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string1 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string2 : string
string3 : string
---------------------------------------
if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
intro Cond1(rank:1)
case if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2)(rank:2)
case string_eq (string2) (string3)(rank:2)
case string_eq (string4) (string1)(rank:2)
=================================================
Progress: 1481


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string2 : string
string3 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
---------------------------------------
forall (string1:string), if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

0 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string2 : string
string3 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string1 : string
---------------------------------------
if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
intro Cond1(rank:1)
case if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2)(rank:2)
case string_eq (string2) (string3)(rank:2)
case string_eq (string4) (string1)(rank:2)
=================================================
Progress: 1482


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string2 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string1 : string
---------------------------------------
forall (string3:string), if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

0 goal(s) more...

3 conjecture(s) more...
>>> intro string3(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string2 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string1 : string
string3 : string
---------------------------------------
if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
intro Cond1(rank:1)
case if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2)(rank:2)
case string_eq (string2) (string3)(rank:2)
case string_eq (string4) (string1)(rank:2)
=================================================
Progress: 1483


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string3 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string1 : string
---------------------------------------
forall (string2:string), if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

0 goal(s) more...

3 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string3 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string1 : string
string2 : string
---------------------------------------
if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
intro Cond1(rank:1)
case if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2)(rank:2)
case string_eq (string2) (string3)(rank:2)
case string_eq (string4) (string1)(rank:2)
=================================================
Progress: 1484


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string1 : string
string2 : string
---------------------------------------
forall (string3:string), if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

0 goal(s) more...

3 conjecture(s) more...
>>> intro string3(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string1 : string
string2 : string
string3 : string
---------------------------------------
if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 4
intro Cond1(rank:1)
case if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2)(rank:2)
case string_eq (string2) (string3)(rank:2)
case string_eq (string4) (string1)(rank:2)
=================================================
Progress: 1485


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string1 : string
string2 : string
string3 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
---------------------------------------
if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string1 : string
string2 : string
string3 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
Cond1 : if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 5
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2)(rank:2)
case string_eq (string2) (string3)(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
=================================================
Progress: 1486


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string1 : string
string2 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string3 : string
---------------------------------------
if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string1 : string
string2 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string3 : string
Cond1 : if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 5
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2)(rank:2)
case string_eq (string2) (string3)(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
=================================================
Progress: 1487


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string1 : string
string3 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string2:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string2 : string
---------------------------------------
if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string1 : string
string3 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string2:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string2 : string
Cond1 : if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 5
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2)(rank:2)
case string_eq (string2) (string3)(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
=================================================
Progress: 1488


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string1 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string2 : string
string3 : string
---------------------------------------
if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string1 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string2 : string
string3 : string
Cond1 : if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 5
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2)(rank:2)
case string_eq (string2) (string3)(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
=================================================
Progress: 1489


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string2 : string
string3 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string1 : string
---------------------------------------
if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string2 : string
string3 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string1 : string
Cond1 : if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 5
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2)(rank:2)
case string_eq (string2) (string3)(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
=================================================
Progress: 1490


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string2 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string1 : string
string3 : string
---------------------------------------
if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string2 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string1 : string
string3 : string
Cond1 : if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 5
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2)(rank:2)
case string_eq (string2) (string3)(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
=================================================
Progress: 1491


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string3 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string1 : string
string2 : string
---------------------------------------
if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string3 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string1 : string
string2 : string
Cond1 : if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 5
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2)(rank:2)
case string_eq (string2) (string3)(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
=================================================
Progress: 1492


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string1 : string
string2 : string
string3 : string
---------------------------------------
if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string1 : string
string2 : string
string3 : string
Cond1 : if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 5
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2)(rank:2)
case string_eq (string2) (string3)(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
=================================================
Progress: 1493


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string1 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string3 : string
Case1 : string_eq (string4) (string1) = true
---------------------------------------
forall (string2:string), true = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

1 goal(s) more...

3 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string1 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string3 : string
Case1 : string_eq (string4) (string1) = true
string2 : string
---------------------------------------
true = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 7
intro Cond1(rank:1)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 3(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2)(rank:2)
case string_eq (string2) (string3)(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
=================================================
Progress: 1494


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string1 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string3 : string
Case1 : string4 = string1
---------------------------------------
forall (string2:string), true = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

1 goal(s) more...

3 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string1 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string3 : string
Case1 : string4 = string1
string2 : string
---------------------------------------
true = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 11
intro Cond1(rank:1)
rewrite Case1 in goal at 1(rank:2)
rewrite Case1 in goal at 3(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 3(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2)(rank:2)
case string_eq (string2) (string3)(rank:2)
=================================================
Progress: 1495


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string1 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string3 : string
Case1 : string1 = string4
---------------------------------------
forall (string2:string), true = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

1 goal(s) more...

3 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string1 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string3 : string
Case1 : string1 = string4
string2 : string
---------------------------------------
true = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 11
intro Cond1(rank:1)
rewrite Case1 in goal at 1(rank:2)
rewrite Case1 in goal at 3(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 3(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2)(rank:2)
case string_eq (string2) (string3)(rank:2)
=================================================
Progress: 1496


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string2 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string3 : string
Case1 : string_eq (string2) (string3) = true
---------------------------------------
forall (string1:string), if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string2 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string3 : string
Case1 : string_eq (string2) (string3) = true
string1 : string
---------------------------------------
if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 7
intro Cond1(rank:1)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 3(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2)(rank:2)
case string_eq (string4) (string1)(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
=================================================
Progress: 1497


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string2 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string3 : string
Case1 : string2 = string3
---------------------------------------
forall (string1:string), if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string2 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string3 : string
Case1 : string2 = string3
string1 : string
---------------------------------------
if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 11
intro Cond1(rank:1)
rewrite Case1 in goal at 1(rank:2)
rewrite Case1 in goal at 3(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 3(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2)(rank:2)
case string_eq (string4) (string1)(rank:2)
=================================================
Progress: 1498


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string2 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string3 : string
Case1 : string3 = string2
---------------------------------------
forall (string1:string), if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string2 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string3 : string
Case1 : string3 = string2
string1 : string
---------------------------------------
if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 11
intro Cond1(rank:1)
rewrite Case1 in goal at 1(rank:2)
rewrite Case1 in goal at 3(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 3(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2)(rank:2)
case string_eq (string4) (string1)(rank:2)
=================================================
Progress: 1499


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string3 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string2 : string
Case1 : string_eq (string2) (string3) = true
---------------------------------------
forall (string1:string), if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string3 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string2 : string
Case1 : string_eq (string2) (string3) = true
string1 : string
---------------------------------------
if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 7
intro Cond1(rank:1)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 3(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2)(rank:2)
case string_eq (string4) (string1)(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
=================================================
Progress: 1500


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string3 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string2 : string
Case1 : string2 = string3
---------------------------------------
forall (string1:string), if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string3 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string2 : string
Case1 : string2 = string3
string1 : string
---------------------------------------
if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 11
intro Cond1(rank:1)
rewrite Case1 in goal at 1(rank:2)
rewrite Case1 in goal at 3(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 3(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2)(rank:2)
case string_eq (string4) (string1)(rank:2)
=================================================
Progress: 1501


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string3 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string2 : string
Case1 : string3 = string2
---------------------------------------
forall (string1:string), if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string3 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string2 : string
Case1 : string3 = string2
string1 : string
---------------------------------------
if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 11
intro Cond1(rank:1)
rewrite Case1 in goal at 1(rank:2)
rewrite Case1 in goal at 3(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 3(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2)(rank:2)
case string_eq (string4) (string1)(rank:2)
=================================================
Progress: 1502


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string1 : string
string3 : string
Case1 : string_eq (string4) (string1) = true
---------------------------------------
forall (string2:string), true = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

1 goal(s) more...

3 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string1 : string
string3 : string
Case1 : string_eq (string4) (string1) = true
string2 : string
---------------------------------------
true = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 7
intro Cond1(rank:1)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 3(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2)(rank:2)
case string_eq (string2) (string3)(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
=================================================
Progress: 1503


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string1 : string
string3 : string
Case1 : string4 = string1
---------------------------------------
forall (string2:string), true = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

1 goal(s) more...

3 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string1 : string
string3 : string
Case1 : string4 = string1
string2 : string
---------------------------------------
true = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 11
intro Cond1(rank:1)
rewrite Case1 in goal at 1(rank:2)
rewrite Case1 in goal at 3(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 3(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2)(rank:2)
case string_eq (string2) (string3)(rank:2)
=================================================
Progress: 1504


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string1 : string
string3 : string
Case1 : string1 = string4
---------------------------------------
forall (string2:string), true = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

1 goal(s) more...

3 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string1 : string
string3 : string
Case1 : string1 = string4
string2 : string
---------------------------------------
true = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 11
intro Cond1(rank:1)
rewrite Case1 in goal at 1(rank:2)
rewrite Case1 in goal at 3(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 3(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2)(rank:2)
case string_eq (string2) (string3)(rank:2)
=================================================
Progress: 1505


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string2 : string
string3 : string
Case1 : string_eq (string2) (string3) = true
---------------------------------------
forall (string1:string), if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string2 : string
string3 : string
Case1 : string_eq (string2) (string3) = true
string1 : string
---------------------------------------
if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 7
intro Cond1(rank:1)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 3(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2)(rank:2)
case string_eq (string4) (string1)(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
=================================================
Progress: 1506


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string2 : string
string3 : string
Case1 : string2 = string3
---------------------------------------
forall (string1:string), if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string2 : string
string3 : string
Case1 : string2 = string3
string1 : string
---------------------------------------
if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 11
intro Cond1(rank:1)
rewrite Case1 in goal at 1(rank:2)
rewrite Case1 in goal at 3(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 3(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2)(rank:2)
case string_eq (string4) (string1)(rank:2)
=================================================
Progress: 1507


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string2 : string
string3 : string
Case1 : string3 = string2
---------------------------------------
forall (string1:string), if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string2 : string
string3 : string
Case1 : string3 = string2
string1 : string
---------------------------------------
if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 11
intro Cond1(rank:1)
rewrite Case1 in goal at 1(rank:2)
rewrite Case1 in goal at 3(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 3(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2)(rank:2)
case string_eq (string4) (string1)(rank:2)
=================================================
Progress: 1508


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string1 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string3 : string
Case1 : string_eq (string4) (string1) = true
string2 : string
---------------------------------------
true = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string1 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string3 : string
Case1 : string_eq (string4) (string1) = true
string2 : string
Cond1 : true = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 5
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2)(rank:2)
case string_eq (string2) (string3)(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
=================================================
Progress: 1509


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string1 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string3 : string
Case1 : string4 = string1
string2 : string
---------------------------------------
true = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string1 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string3 : string
Case1 : string4 = string1
string2 : string
Cond1 : true = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 10
rewrite Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 3(rank:2)
rewrite Case1 in goal at 3(rank:2)
rewrite Case1 in goal at 1(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2)(rank:2)
case string_eq (string2) (string3)(rank:2)
=================================================
Progress: 1510


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string1 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string3 : string
Case1 : string1 = string4
string2 : string
---------------------------------------
true = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string1 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string3 : string
Case1 : string1 = string4
string2 : string
Cond1 : true = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 10
rewrite Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 3(rank:2)
rewrite Case1 in goal at 3(rank:2)
rewrite Case1 in goal at 1(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2)(rank:2)
case string_eq (string2) (string3)(rank:2)
=================================================
Progress: 1511


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string2 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string3 : string
Case1 : string_eq (string2) (string3) = true
string1 : string
---------------------------------------
if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string2 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string3 : string
Case1 : string_eq (string2) (string3) = true
string1 : string
Cond1 : if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 11
rewrite <- Case1 in goal at 3(rank:1)
rewrite Cond1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 3(rank:1)
case if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2)(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
case string_eq (string4) (string1)(rank:2)
=================================================
Progress: 1512


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string2 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string3 : string
Case1 : string2 = string3
string1 : string
---------------------------------------
if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string2 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string3 : string
Case1 : string2 = string3
string1 : string
Cond1 : if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 15
rewrite <- Cond1 in goal at 3(rank:1)
rewrite <- Case1 in goal at 3(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
case string_eq (string4) (string1)(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite Cond1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite Case1 in goal at 3(rank:2)
rewrite Case1 in goal at 1(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2)(rank:2)
=================================================
Progress: 1513


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string2 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string3 : string
Case1 : string3 = string2
string1 : string
---------------------------------------
if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string2 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string3 : string
Case1 : string3 = string2
string1 : string
Cond1 : if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 15
rewrite <- Cond1 in goal at 3(rank:1)
rewrite <- Case1 in goal at 3(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
case string_eq (string4) (string1)(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite Cond1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite Case1 in goal at 3(rank:2)
rewrite Case1 in goal at 1(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2)(rank:2)
=================================================
Progress: 1514


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string3 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string2 : string
Case1 : string_eq (string2) (string3) = true
string1 : string
---------------------------------------
if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string3 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string2 : string
Case1 : string_eq (string2) (string3) = true
string1 : string
Cond1 : if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 11
rewrite <- Case1 in goal at 3(rank:1)
rewrite Cond1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 3(rank:1)
case if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2)(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
case string_eq (string4) (string1)(rank:2)
=================================================
Progress: 1515


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string3 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string2 : string
Case1 : string2 = string3
string1 : string
---------------------------------------
if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string3 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string2 : string
Case1 : string2 = string3
string1 : string
Cond1 : if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 15
rewrite <- Cond1 in goal at 3(rank:1)
rewrite <- Case1 in goal at 3(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
case string_eq (string4) (string1)(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite Cond1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite Case1 in goal at 3(rank:2)
rewrite Case1 in goal at 1(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2)(rank:2)
=================================================
Progress: 1516


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string3 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string2 : string
Case1 : string3 = string2
string1 : string
---------------------------------------
if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string3 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string2 : string
Case1 : string3 = string2
string1 : string
Cond1 : if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 15
rewrite <- Cond1 in goal at 3(rank:1)
rewrite <- Case1 in goal at 3(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
case string_eq (string4) (string1)(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite Cond1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite Case1 in goal at 3(rank:2)
rewrite Case1 in goal at 1(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2)(rank:2)
=================================================
Progress: 1517


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string1 : string
string3 : string
Case1 : string_eq (string4) (string1) = true
string2 : string
---------------------------------------
true = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string1 : string
string3 : string
Case1 : string_eq (string4) (string1) = true
string2 : string
Cond1 : true = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 5
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2)(rank:2)
case string_eq (string2) (string3)(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
=================================================
Progress: 1518


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string1 : string
string3 : string
Case1 : string4 = string1
string2 : string
---------------------------------------
true = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string1 : string
string3 : string
Case1 : string4 = string1
string2 : string
Cond1 : true = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 10
rewrite Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 3(rank:2)
rewrite Case1 in goal at 3(rank:2)
rewrite Case1 in goal at 1(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2)(rank:2)
case string_eq (string2) (string3)(rank:2)
=================================================
Progress: 1519


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string1 : string
string3 : string
Case1 : string1 = string4
string2 : string
---------------------------------------
true = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string1 : string
string3 : string
Case1 : string1 = string4
string2 : string
Cond1 : true = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string2) (string3) then is_mem_ta1 (Cons (string4) (string_list2)) (string1) else is_mem_ta1 (Cons (string4) (string_list2)) (string3)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 10
rewrite Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 3(rank:2)
rewrite Case1 in goal at 3(rank:2)
rewrite Case1 in goal at 1(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2)(rank:2)
case string_eq (string2) (string3)(rank:2)
=================================================
Progress: 1520


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string2 : string
string3 : string
Case1 : string_eq (string2) (string3) = true
string1 : string
---------------------------------------
if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string2 : string
string3 : string
Case1 : string_eq (string2) (string3) = true
string1 : string
Cond1 : if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 11
rewrite <- Case1 in goal at 3(rank:1)
rewrite Cond1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 3(rank:1)
case if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2)(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
case string_eq (string4) (string1)(rank:2)
=================================================
Progress: 1521


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string2 : string
string3 : string
Case1 : string2 = string3
string1 : string
---------------------------------------
if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string2 : string
string3 : string
Case1 : string2 = string3
string1 : string
Cond1 : if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 15
rewrite <- Cond1 in goal at 3(rank:1)
rewrite <- Case1 in goal at 3(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
case string_eq (string4) (string1)(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite Cond1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite Case1 in goal at 3(rank:2)
rewrite Case1 in goal at 1(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2)(rank:2)
=================================================
Progress: 1522


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string2 : string
string3 : string
Case1 : string3 = string2
string1 : string
---------------------------------------
if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string2 : string
string3 : string
Case1 : string3 = string2
string1 : string
Cond1 : if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 15
rewrite <- Cond1 in goal at 3(rank:1)
rewrite <- Case1 in goal at 3(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
case string_eq (string4) (string1)(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite Cond1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite Case1 in goal at 3(rank:2)
rewrite Case1 in goal at 1(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2)(rank:2)
=================================================
Progress: 1523


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string2 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string3 : string
Case1 : string_eq (string2) (string3) = true
string1 : string
Cond1 : if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 3(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string2 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string3 : string
Case1 : string_eq (string2) (string3) = true
string1 : string
Cond1 : if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then string_eq (string2) (string3) else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 7
rewrite string_eqb_eq in Case1 at 0(rank:0)
rewrite <- string_eqb_eq in Case1 at 0(rank:0)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
case string_eq (string4) (string1)(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2)(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 1524


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string2 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string3 : string
Case1 : string_eq (string2) (string3) = true
string1 : string
Cond1 : if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then string_eq (string2) (string3) else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string2 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string3 : string
Case1 : string2 = string3
string1 : string
Cond1 : if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then string_eq (string2) (string3) else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 13
rewrite <- Case1 in goal at 0(rank:1)
rewrite Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite Case1 in goal at 3(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 3(rank:2)
rewrite Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2)(rank:2)
case string_eq (string4) (string1)(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
=================================================
Progress: 1525


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string2 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string3 : string
Case1 : string_eq (string2) (string3) = true
string1 : string
Cond1 : if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then string_eq (string2) (string3) else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string2 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string3 : string
Case1 : string3 = string2
string1 : string
Cond1 : if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then string_eq (string2) (string3) else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 13
rewrite Case1 in goal at 0(rank:1)
rewrite Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 3(rank:2)
rewrite Case1 in goal at 3(rank:2)
rewrite Case1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2)(rank:2)
case string_eq (string4) (string1)(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
=================================================
Progress: 1526


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string2 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string3 : string
Case1 : string_eq (string2) (string3) = true
string1 : string
Cond1 : if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Cond1 in goal at 3(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string2 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string3 : string
Case1 : string_eq (string2) (string3) = true
string1 : string
Cond1 : if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 5
rewrite <- Case1 in goal at 3(rank:1)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2)(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
=================================================
Progress: 1527


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string2 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string3 : string
Case1 : string2 = string3
string1 : string
Cond1 : if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Cond1 in goal at 3(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string2 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string3 : string
Case1 : string2 = string3
string1 : string
Cond1 : if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
rewrite Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 3(rank:2)
rewrite Case1 in goal at 3(rank:2)
rewrite Case1 in goal at 1(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2)(rank:2)
=================================================
Progress: 1528


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string2 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string3 : string
Case1 : string3 = string2
string1 : string
Cond1 : if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Cond1 in goal at 3(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string2 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string3 : string
Case1 : string3 = string2
string1 : string
Cond1 : if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
rewrite Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 3(rank:2)
rewrite Case1 in goal at 3(rank:2)
rewrite Case1 in goal at 1(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2)(rank:2)
=================================================
Progress: 1529


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string3 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string2 : string
Case1 : string_eq (string2) (string3) = true
string1 : string
Cond1 : if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 3(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string3 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string2 : string
Case1 : string_eq (string2) (string3) = true
string1 : string
Cond1 : if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then string_eq (string2) (string3) else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 7
rewrite string_eqb_eq in Case1 at 0(rank:0)
rewrite <- string_eqb_eq in Case1 at 0(rank:0)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
case string_eq (string4) (string1)(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2)(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 1530


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string3 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string2 : string
Case1 : string_eq (string2) (string3) = true
string1 : string
Cond1 : if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then string_eq (string2) (string3) else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string3 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string2 : string
Case1 : string2 = string3
string1 : string
Cond1 : if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then string_eq (string2) (string3) else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 13
rewrite <- Case1 in goal at 0(rank:1)
rewrite Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite Case1 in goal at 3(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 3(rank:2)
rewrite Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2)(rank:2)
case string_eq (string4) (string1)(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
=================================================
Progress: 1531


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string3 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string2 : string
Case1 : string_eq (string2) (string3) = true
string1 : string
Cond1 : if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then string_eq (string2) (string3) else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string3 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string2 : string
Case1 : string3 = string2
string1 : string
Cond1 : if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then string_eq (string2) (string3) else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 13
rewrite Case1 in goal at 0(rank:1)
rewrite Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 3(rank:2)
rewrite Case1 in goal at 3(rank:2)
rewrite Case1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2)(rank:2)
case string_eq (string4) (string1)(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
=================================================
Progress: 1532


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string3 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string2 : string
Case1 : string_eq (string2) (string3) = true
string1 : string
Cond1 : if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Cond1 in goal at 3(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string3 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string2 : string
Case1 : string_eq (string2) (string3) = true
string1 : string
Cond1 : if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 5
rewrite <- Case1 in goal at 3(rank:1)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2)(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
=================================================
Progress: 1533


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string3 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string2 : string
Case1 : string2 = string3
string1 : string
Cond1 : if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Cond1 in goal at 3(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string3 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string2 : string
Case1 : string2 = string3
string1 : string
Cond1 : if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
rewrite Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 3(rank:2)
rewrite Case1 in goal at 3(rank:2)
rewrite Case1 in goal at 1(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2)(rank:2)
=================================================
Progress: 1534


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string3 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string2 : string
Case1 : string3 = string2
string1 : string
Cond1 : if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Cond1 in goal at 3(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string3 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string2 : string
Case1 : string3 = string2
string1 : string
Cond1 : if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
rewrite Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 3(rank:2)
rewrite Case1 in goal at 3(rank:2)
rewrite Case1 in goal at 1(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2)(rank:2)
=================================================
Progress: 1535


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string2 : string
string3 : string
Case1 : string_eq (string2) (string3) = true
string1 : string
Cond1 : if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 3(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string2 : string
string3 : string
Case1 : string_eq (string2) (string3) = true
string1 : string
Cond1 : if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then string_eq (string2) (string3) else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 7
rewrite string_eqb_eq in Case1 at 0(rank:0)
rewrite <- string_eqb_eq in Case1 at 0(rank:0)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
case string_eq (string4) (string1)(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2)(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 1536


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string2 : string
string3 : string
Case1 : string_eq (string2) (string3) = true
string1 : string
Cond1 : if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then string_eq (string2) (string3) else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string2 : string
string3 : string
Case1 : string2 = string3
string1 : string
Cond1 : if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then string_eq (string2) (string3) else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 13
rewrite <- Case1 in goal at 0(rank:1)
rewrite Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite Case1 in goal at 3(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 3(rank:2)
rewrite Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2)(rank:2)
case string_eq (string4) (string1)(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
=================================================
Progress: 1537


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string2 : string
string3 : string
Case1 : string_eq (string2) (string3) = true
string1 : string
Cond1 : if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then string_eq (string2) (string3) else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string2 : string
string3 : string
Case1 : string3 = string2
string1 : string
Cond1 : if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then string_eq (string2) (string3) else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 13
rewrite Case1 in goal at 0(rank:1)
rewrite Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 3(rank:2)
rewrite Case1 in goal at 3(rank:2)
rewrite Case1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2)(rank:2)
case string_eq (string4) (string1)(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
=================================================
Progress: 1538


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string2 : string
string3 : string
Case1 : string_eq (string2) (string3) = true
string1 : string
Cond1 : if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Cond1 in goal at 3(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string2 : string
string3 : string
Case1 : string_eq (string2) (string3) = true
string1 : string
Cond1 : if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 5
rewrite <- Case1 in goal at 3(rank:1)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2)(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
=================================================
Progress: 1539


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string2 : string
string3 : string
Case1 : string2 = string3
string1 : string
Cond1 : if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Cond1 in goal at 3(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string2 : string
string3 : string
Case1 : string2 = string3
string1 : string
Cond1 : if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
rewrite Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 3(rank:2)
rewrite Case1 in goal at 3(rank:2)
rewrite Case1 in goal at 1(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2)(rank:2)
=================================================
Progress: 1540


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string2 : string
string3 : string
Case1 : string3 = string2
string1 : string
Cond1 : if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Cond1 in goal at 3(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string2 : string
string3 : string
Case1 : string3 = string2
string1 : string
Cond1 : if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
rewrite Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 3(rank:2)
rewrite Case1 in goal at 3(rank:2)
rewrite Case1 in goal at 1(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2)(rank:2)
=================================================
Progress: 1541


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string2 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string3 : string
Case1 : string2 = string3
string1 : string
Cond1 : if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then string_eq (string2) (string3) else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string2 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string3 : string
Case1 : string2 = string3
string1 : string
Cond1 : if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string2)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string2)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then string_eq (string2) (string2) else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 5
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2)(rank:2)
case string_eq (string4) (string1)(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
=================================================
Progress: 1542


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string2 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string3 : string
Case1 : string3 = string2
string1 : string
Cond1 : if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then string_eq (string2) (string3) else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string2 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string3 : string
Case1 : string3 = string2
string1 : string
Cond1 : if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string2)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string2)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then string_eq (string2) (string2) else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 5
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2)(rank:2)
case string_eq (string4) (string1)(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
=================================================
Progress: 1543


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string2 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string3 : string
Case1 : string_eq (string2) (string3) = true
string1 : string
Cond1 : if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 3(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string2 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string3 : string
Case1 : string_eq (string2) (string3) = true
string1 : string
Cond1 : if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then if string_eq (string4) (string1) then string_eq (string2) (string3) else is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case1 at 0(rank:0)
rewrite <- string_eqb_eq in Case1 at 0(rank:0)
case if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2)(rank:2)
=================================================
Progress: 1544


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string2 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string3 : string
Case1 : string_eq (string2) (string3) = true
string1 : string
Cond1 : if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then if string_eq (string4) (string1) then string_eq (string2) (string3) else is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string2 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string3 : string
Case1 : string2 = string3
string1 : string
Cond1 : if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then if string_eq (string4) (string1) then string_eq (string2) (string3) else is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
rewrite <- Case1 in goal at 0(rank:1)
rewrite Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite Case1 in goal at 3(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 3(rank:2)
rewrite Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2)(rank:2)
=================================================
Progress: 1545


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string2 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string3 : string
Case1 : string_eq (string2) (string3) = true
string1 : string
Cond1 : if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then if string_eq (string4) (string1) then string_eq (string2) (string3) else is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string2 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string3 : string
Case1 : string3 = string2
string1 : string
Cond1 : if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then if string_eq (string4) (string1) then string_eq (string2) (string3) else is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
rewrite Case1 in goal at 0(rank:1)
rewrite Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 3(rank:2)
rewrite Case1 in goal at 3(rank:2)
rewrite Case1 in goal at 1(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2)(rank:2)
=================================================
Progress: 1546


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string3 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string2 : string
Case1 : string2 = string3
string1 : string
Cond1 : if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then string_eq (string2) (string3) else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string3 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string2 : string
Case1 : string2 = string3
string1 : string
Cond1 : if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string2)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string2)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then string_eq (string2) (string2) else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 5
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2)(rank:2)
case string_eq (string4) (string1)(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
=================================================
Progress: 1547


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string3 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string2 : string
Case1 : string3 = string2
string1 : string
Cond1 : if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then string_eq (string2) (string3) else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string3 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string2 : string
Case1 : string3 = string2
string1 : string
Cond1 : if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string2)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string2)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then string_eq (string2) (string2) else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 5
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2)(rank:2)
case string_eq (string4) (string1)(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
=================================================
Progress: 1548


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string3 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string2 : string
Case1 : string_eq (string2) (string3) = true
string1 : string
Cond1 : if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 3(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string3 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string2 : string
Case1 : string_eq (string2) (string3) = true
string1 : string
Cond1 : if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then if string_eq (string4) (string1) then string_eq (string2) (string3) else is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case1 at 0(rank:0)
rewrite <- string_eqb_eq in Case1 at 0(rank:0)
case if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2)(rank:2)
=================================================
Progress: 1549


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string3 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string2 : string
Case1 : string_eq (string2) (string3) = true
string1 : string
Cond1 : if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then if string_eq (string4) (string1) then string_eq (string2) (string3) else is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string3 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string2 : string
Case1 : string2 = string3
string1 : string
Cond1 : if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then if string_eq (string4) (string1) then string_eq (string2) (string3) else is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
rewrite <- Case1 in goal at 0(rank:1)
rewrite Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite Case1 in goal at 3(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 3(rank:2)
rewrite Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2)(rank:2)
=================================================
Progress: 1550


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string3 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string2 : string
Case1 : string_eq (string2) (string3) = true
string1 : string
Cond1 : if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then if string_eq (string4) (string1) then string_eq (string2) (string3) else is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string3 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string2 : string
Case1 : string3 = string2
string1 : string
Cond1 : if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then if string_eq (string4) (string1) then string_eq (string2) (string3) else is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
rewrite Case1 in goal at 0(rank:1)
rewrite Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 3(rank:2)
rewrite Case1 in goal at 3(rank:2)
rewrite Case1 in goal at 1(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2)(rank:2)
=================================================
Progress: 1551


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string2 : string
string3 : string
Case1 : string2 = string3
string1 : string
Cond1 : if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then string_eq (string2) (string3) else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string2 : string
string3 : string
Case1 : string2 = string3
string1 : string
Cond1 : if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string2)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string2)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then string_eq (string2) (string2) else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 5
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2)(rank:2)
case string_eq (string4) (string1)(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
=================================================
Progress: 1552


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string2 : string
string3 : string
Case1 : string3 = string2
string1 : string
Cond1 : if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then string_eq (string2) (string3) else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string2 : string
string3 : string
Case1 : string3 = string2
string1 : string
Cond1 : if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string2)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string2)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then string_eq (string2) (string2) else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 5
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2)(rank:2)
case string_eq (string4) (string1)(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
=================================================
Progress: 1553


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string2 : string
string3 : string
Case1 : string_eq (string2) (string3) = true
string1 : string
Cond1 : if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 3(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string2 : string
string3 : string
Case1 : string_eq (string2) (string3) = true
string1 : string
Cond1 : if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then if string_eq (string4) (string1) then string_eq (string2) (string3) else is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case1 at 0(rank:0)
rewrite <- string_eqb_eq in Case1 at 0(rank:0)
case if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2)(rank:2)
=================================================
Progress: 1554


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string2 : string
string3 : string
Case1 : string_eq (string2) (string3) = true
string1 : string
Cond1 : if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then if string_eq (string4) (string1) then string_eq (string2) (string3) else is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string2 : string
string3 : string
Case1 : string2 = string3
string1 : string
Cond1 : if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then if string_eq (string4) (string1) then string_eq (string2) (string3) else is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
rewrite <- Case1 in goal at 0(rank:1)
rewrite Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite Case1 in goal at 3(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 3(rank:2)
rewrite Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2)(rank:2)
=================================================
Progress: 1555


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string2 : string
string3 : string
Case1 : string_eq (string2) (string3) = true
string1 : string
Cond1 : if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then if string_eq (string4) (string1) then string_eq (string2) (string3) else is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string2:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string2 : string
string3 : string
Case1 : string3 = string2
string1 : string
Cond1 : if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then if string_eq (string4) (string1) then string_eq (string2) (string3) else is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 9
rewrite Case1 in goal at 0(rank:1)
rewrite Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 3(rank:2)
rewrite Case1 in goal at 3(rank:2)
rewrite Case1 in goal at 1(rank:2)
case if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2)(rank:2)
=================================================
Progress: 1556


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string2 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string3 : string
Case1 : string2 = string3
string1 : string
Cond1 : if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string3)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then if string_eq (string4) (string1) then string_eq (string2) (string3) else is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) then if true then sub_check_ta1 (V (string3)) (string_list1) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list1)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list1))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list1) (string1) else is_mem_ta1 (string_list1) (string3)
string2 : string
string_list1 : string list
string4 : string
string_list2 : string list
IH1 : forall (string1:string) (string3:string), is_mem_ta1 (string_list2) (string1) = true -> if if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) then if true then sub_check_ta1 (V (string3)) (string_list2) else sub_check_ta1 (V (string3)) (Cons (string1) (string_list2)) else sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (string_list2))) = if string_eq (string2) (string3) then is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string3)
Inductive1 : string_list1 = Cons (string4) (string_list2)
string3 : string
Case1 : string2 = string3
string1 : string
Cond1 : if string_eq (string4) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if if string_eq (string1) (string2) then true else is_mem_ta1 (Cons (string4) (string_list2)) (string2) then if true then sub_check_ta1 (V (string2)) (Cons (string4) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string1) (Cons (string4) (string_list2))) else sub_check_ta1 (V (string2)) (Cons (string2) (Cons (string1) (Cons (string4) (string_list2)))) = if string_eq (string4) (string1) then if string_eq (string4) (string1) then string_eq (string2) (string2) else is_mem_ta1 (string_list2) (string1) else is_mem_ta1 (string_list2) (string1)

1 goal(s) more...

3 conjecture(s) more...
