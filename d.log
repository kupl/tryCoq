Choose the proof type :
1) Interactive Mode 	 2) Auto Mode
Enter the goal : =================================================
Progress: 1


No conjecture
>>> assert forall (lambda2:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda2) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda2) (string_list1) else sub_check_ta1 (lambda2) ((string1::string_list1))(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
induction lambda1(rank:0)
intro string1(rank:1)
intro string_list1(rank:1)
=================================================
Progress: 2


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))

0 goal(s) more...

0 conjecture(s) more...
>>> induction lambda1(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string) (string_list1:string list), sub_check_ta1 (V (string2)) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 3


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string) (string_list1:string list), sub_check_ta1 (V (string2)) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

2 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string) (string_list1:string list), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
induction string_list1(rank:0)
intro string1(rank:1)
=================================================
Progress: 4


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string) (string_list1:string list), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

2 goal(s) more...

0 conjecture(s) more...
>>> induction string_list1(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
Base2 : string_list1 = (Nil)
---------------------------------------
forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = if is_mem_ta1 ((Nil)) (string1) then sub_check_ta1 (V (string2)) ((Nil)) else sub_check_ta1 (V (string2)) ((string1::(Nil)))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 5


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
Base2 : string_list1 = (Nil)
---------------------------------------
forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = if is_mem_ta1 ((Nil)) (string1) then sub_check_ta1 (V (string2)) ((Nil)) else sub_check_ta1 (V (string2)) ((string1::(Nil)))

3 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
Base2 : string_list1 = (Nil)
---------------------------------------
forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 6


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
Base2 : string_list1 = (Nil)
---------------------------------------
forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2)

3 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
---------------------------------------
forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 ((string3::string_list2)) (string2) = if is_mem_ta1 ((string3::string_list2)) (string1) then sub_check_ta1 (V (string2)) ((string3::string_list2)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list2)))

2 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 7


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
---------------------------------------
forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 ((string3::string_list2)) (string2) = if is_mem_ta1 ((string3::string_list2)) (string1) then sub_check_ta1 (V (string2)) ((string3::string_list2)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list2)))

2 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
---------------------------------------
forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 ((string3::string_list2)) (string2) = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) ((string3::string_list2)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list2)))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
intro string1(rank:1)
=================================================
Progress: 8


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))

0 goal(s) more...

0 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
induction lambda1(rank:0)
intro string_list1(rank:1)
=================================================
Progress: 9


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))

0 goal(s) more...

0 conjecture(s) more...
>>> induction lambda1(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string_list1:string list), sub_check_ta1 (V (string2)) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 10


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string_list1:string list), sub_check_ta1 (V (string2)) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

2 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string_list1:string list), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
induction string_list1(rank:0)
case string_eq (string1) (string2)(rank:1)
=================================================
Progress: 11


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string_list1:string list), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

2 goal(s) more...

0 conjecture(s) more...
>>> induction string_list1(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
Base2 : string_list1 = (Nil)
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = if is_mem_ta1 ((Nil)) (string1) then sub_check_ta1 (V (string2)) ((Nil)) else sub_check_ta1 (V (string2)) ((string1::(Nil)))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 12


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
Base2 : string_list1 = (Nil)
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = if is_mem_ta1 ((Nil)) (string1) then sub_check_ta1 (V (string2)) ((Nil)) else sub_check_ta1 (V (string2)) ((string1::(Nil)))

3 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
Base2 : string_list1 = (Nil)
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 13


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
Base2 : string_list1 = (Nil)
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2)

3 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((string3::string_list2)) (string2) = if is_mem_ta1 ((string3::string_list2)) (string1) then sub_check_ta1 (V (string2)) ((string3::string_list2)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list2)))

2 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 14


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((string3::string_list2)) (string2) = if is_mem_ta1 ((string3::string_list2)) (string1) then sub_check_ta1 (V (string2)) ((string3::string_list2)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list2)))

2 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((string3::string_list2)) (string2) = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) ((string3::string_list2)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list2)))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)(rank:0)
=================================================
Progress: 15


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((string3::string_list2)) (string2) = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) ((string3::string_list2)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list2)))

2 goal(s) more...

0 conjecture(s) more...
>>> case if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((string3::string_list2)) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case string_eq (string1) (string2)(rank:0)
case string_eq (string3) (string2)(rank:0)
=================================================
Progress: 16


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((string3::string_list2)) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

3 goal(s) more...

0 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string1) (string2) = true
---------------------------------------
true = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case2 at 0(rank:0)
rewrite <- string_eqb_eq in Case2 at 0(rank:0)
case string_eq (string3) (string2)(rank:1)
=================================================
Progress: 17


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((string3::string_list2)) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

3 goal(s) more...

0 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string3) (string2) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((string3::string_list2)) (string2) = true

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case2 at 0(rank:0)
rewrite <- string_eqb_eq in Case2 at 0(rank:0)
case string_eq (string1) (string2)(rank:1)
=================================================
Progress: 18


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string1) (string2) = true
---------------------------------------
true = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string1 = string2
---------------------------------------
true = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
case string_eq (string3) (string2)(rank:1)
rewrite <- Case2 in goal at 2(rank:2)
rewrite <- Case2 in goal at 0(rank:2)
rewrite <- Case2 in goal at 1(rank:2)
=================================================
Progress: 19


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string1) (string2) = true
---------------------------------------
true = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string2 = string1
---------------------------------------
true = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
case string_eq (string3) (string2)(rank:1)
rewrite Case2 in goal at 2(rank:2)
rewrite Case2 in goal at 0(rank:2)
rewrite Case2 in goal at 1(rank:2)
=================================================
Progress: 20


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string3) (string2) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((string3::string_list2)) (string2) = true

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string3 = string2
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((string3::string_list2)) (string2) = true

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 5
case string_eq (string1) (string2)(rank:1)
rewrite Case2 in goal at 0(rank:2)
rewrite <- Case2 in goal at 0(rank:2)
rewrite <- Case2 in goal at 1(rank:2)
rewrite <- Case2 in goal at 2(rank:2)
=================================================
Progress: 21


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string3) (string2) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((string3::string_list2)) (string2) = true

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string2 = string3
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((string3::string_list2)) (string2) = true

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 5
case string_eq (string1) (string2)(rank:1)
rewrite Case2 in goal at 0(rank:2)
rewrite Case2 in goal at 1(rank:2)
rewrite Case2 in goal at 2(rank:2)
rewrite <- Case2 in goal at 0(rank:2)
=================================================
Progress: 22


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))

0 goal(s) more...

0 conjecture(s) more...
>>> intro string_list1(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string_list1 : string list
---------------------------------------
forall (lambda1:lambda) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:0)
=================================================
Progress: 23


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string_list1 : string list
---------------------------------------
forall (lambda1:lambda) (string1:string), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))

0 goal(s) more...

0 conjecture(s) more...
>>> induction lambda1(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string), sub_check_ta1 (V (string2)) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 24


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string), sub_check_ta1 (V (string2)) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

2 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
intro string1(rank:1)
=================================================
Progress: 25


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))

0 goal(s) more...

0 conjecture(s) more...
>>> intro string_list1(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
---------------------------------------
forall (lambda1:lambda), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
induction lambda1(rank:0)
case is_mem_ta1 (string_list1) (string1)(rank:1)
=================================================
Progress: 26


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
---------------------------------------
forall (lambda1:lambda), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))

0 goal(s) more...

0 conjecture(s) more...
>>> induction lambda1(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
sub_check_ta1 (V (string2)) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 27


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
sub_check_ta1 (V (string2)) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

2 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string2)(rank:0)
=================================================
Progress: 28


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

2 goal(s) more...

0 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case1 at 0(rank:0)
rewrite <- string_eqb_eq in Case1 at 0(rank:0)
case is_mem_ta1 (string_list1) (string1)(rank:1)
=================================================
Progress: 29


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 7
case is_mem_ta1 (string_list1) (string1)(rank:1)
rewrite Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 1(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
=================================================
Progress: 30


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 7
case is_mem_ta1 (string_list1) (string1)(rank:1)
rewrite Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 1(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
=================================================
Progress: 31


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
---------------------------------------
forall (lambda1:lambda), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))

0 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
forall (lambda1:lambda), sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:0)
=================================================
Progress: 32


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
forall (lambda1:lambda), sub_check_ta1 (lambda1) ((string1::string_list1)) = sub_check_ta1 (lambda1) (string_list1)

1 goal(s) more...

0 conjecture(s) more...
>>> induction lambda1(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
sub_check_ta1 (V (string2)) ((string1::string_list1)) = sub_check_ta1 (V (string2)) (string_list1)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 33


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
sub_check_ta1 (V (string2)) ((string1::string_list1)) = sub_check_ta1 (V (string2)) (string_list1)

3 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (string_list1) (string2)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case string_eq (string1) (string2)(rank:1)
rewrite <- Case1 in goal at 0(rank:2)
=================================================
Progress: 34


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string) (string_list1:string list), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

2 goal(s) more...

0 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
---------------------------------------
forall (string_list1:string list), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
induction string_list1(rank:0)
case string_eq (string1) (string2)(rank:1)
=================================================
Progress: 35


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
---------------------------------------
forall (string_list1:string list), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

2 goal(s) more...

0 conjecture(s) more...
>>> induction string_list1(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
Base2 : string_list1 = (Nil)
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = if is_mem_ta1 ((Nil)) (string1) then sub_check_ta1 (V (string2)) ((Nil)) else sub_check_ta1 (V (string2)) ((string1::(Nil)))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 36


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
Base2 : string_list1 = (Nil)
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = if is_mem_ta1 ((Nil)) (string1) then sub_check_ta1 (V (string2)) ((Nil)) else sub_check_ta1 (V (string2)) ((string1::(Nil)))

3 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
Base2 : string_list1 = (Nil)
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 37


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
Base2 : string_list1 = (Nil)
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2) = if string_eq (string1) (string2) then true else is_mem_ta1 ((Nil)) (string2)

3 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((string3::string_list2)) (string2) = if is_mem_ta1 ((string3::string_list2)) (string1) then sub_check_ta1 (V (string2)) ((string3::string_list2)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list2)))

2 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 38


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((string3::string_list2)) (string2) = if is_mem_ta1 ((string3::string_list2)) (string1) then sub_check_ta1 (V (string2)) ((string3::string_list2)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list2)))

2 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((string3::string_list2)) (string2) = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) ((string3::string_list2)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list2)))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)(rank:0)
=================================================
Progress: 39


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((string3::string_list2)) (string2) = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) ((string3::string_list2)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list2)))

2 goal(s) more...

0 conjecture(s) more...
>>> case if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((string3::string_list2)) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case string_eq (string1) (string2)(rank:0)
case string_eq (string3) (string2)(rank:0)
=================================================
Progress: 40


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((string3::string_list2)) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

3 goal(s) more...

0 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string1) (string2) = true
---------------------------------------
true = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case2 at 0(rank:0)
rewrite <- string_eqb_eq in Case2 at 0(rank:0)
case string_eq (string3) (string2)(rank:1)
=================================================
Progress: 41


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((string3::string_list2)) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

3 goal(s) more...

0 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string3) (string2) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((string3::string_list2)) (string2) = true

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case2 at 0(rank:0)
rewrite <- string_eqb_eq in Case2 at 0(rank:0)
case string_eq (string1) (string2)(rank:1)
=================================================
Progress: 42


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string1) (string2) = true
---------------------------------------
true = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string1 = string2
---------------------------------------
true = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
case string_eq (string3) (string2)(rank:1)
rewrite <- Case2 in goal at 2(rank:2)
rewrite <- Case2 in goal at 0(rank:2)
rewrite <- Case2 in goal at 1(rank:2)
=================================================
Progress: 43


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string1) (string2) = true
---------------------------------------
true = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string2 = string1
---------------------------------------
true = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
case string_eq (string3) (string2)(rank:1)
rewrite Case2 in goal at 2(rank:2)
rewrite Case2 in goal at 0(rank:2)
rewrite Case2 in goal at 1(rank:2)
=================================================
Progress: 44


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string3) (string2) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((string3::string_list2)) (string2) = true

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string3 = string2
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((string3::string_list2)) (string2) = true

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 5
case string_eq (string1) (string2)(rank:1)
rewrite Case2 in goal at 0(rank:2)
rewrite <- Case2 in goal at 0(rank:2)
rewrite <- Case2 in goal at 1(rank:2)
rewrite <- Case2 in goal at 2(rank:2)
=================================================
Progress: 45


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string3) (string2) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((string3::string_list2)) (string2) = true

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string2 = string3
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((string3::string_list2)) (string2) = true

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 5
case string_eq (string1) (string2)(rank:1)
rewrite Case2 in goal at 0(rank:2)
rewrite Case2 in goal at 1(rank:2)
rewrite Case2 in goal at 2(rank:2)
rewrite <- Case2 in goal at 0(rank:2)
=================================================
Progress: 46


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
---------------------------------------
forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 ((string3::string_list2)) (string2) = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) ((string3::string_list2)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list2)))

2 goal(s) more...

0 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((string3::string_list2)) (string2) = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) ((string3::string_list2)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list2)))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)(rank:0)
case string_eq (string1) (string2)(rank:0)
=================================================
Progress: 47


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((string3::string_list2)) (string2) = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) ((string3::string_list2)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list2)))

2 goal(s) more...

0 conjecture(s) more...
>>> case if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((string3::string_list2)) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
case string_eq (string1) (string2)(rank:1)
rewrite IH1 in goal at 0(rank:2)
case string_eq (string3) (string2)(rank:1)
=================================================
Progress: 48


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((string3::string_list2)) (string2) = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) ((string3::string_list2)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list2)))

2 goal(s) more...

0 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) ((string3::string_list2)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list2)))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case1 at 0(rank:0)
rewrite <- string_eqb_eq in Case1 at 0(rank:0)
case if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)(rank:1)
=================================================
Progress: 49


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) ((string3::string_list2)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list2)))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : string1 = string2
---------------------------------------
true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) ((string3::string_list2)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list2)))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 8
case if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)(rank:1)
rewrite Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite Case1 in goal at 3(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
=================================================
Progress: 50


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) ((string3::string_list2)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list2)))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : string2 = string1
---------------------------------------
true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) ((string3::string_list2)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list2)))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 8
case if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)(rank:1)
rewrite Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 3(rank:2)
=================================================
Progress: 51


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string_list1:string list), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

2 goal(s) more...

0 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case1 at 0(rank:0)
intro string_list1(rank:1)
rewrite <- string_eqb_eq in Case1 at 0(rank:0)
=================================================
Progress: 52


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 7
intro string_list1(rank:1)
rewrite Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite Case1 in goal at 0(rank:2)
=================================================
Progress: 53


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 7
intro string_list1(rank:1)
rewrite Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite Case1 in goal at 0(rank:2)
=================================================
Progress: 54


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

2 goal(s) more...

0 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case is_mem_ta1 (string_list1) (string1)(rank:0)
case string_eq (string1) (string2)(rank:0)
=================================================
Progress: 55


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

2 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (string_list1) (string2)

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string2)(rank:0)
=================================================
Progress: 56


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

2 goal(s) more...

0 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case1 at 0(rank:0)
rewrite <- string_eqb_eq in Case1 at 0(rank:0)
case is_mem_ta1 (string_list1) (string1)(rank:1)
=================================================
Progress: 57


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (string_list1) (string2)

3 goal(s) more...

0 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : string_eq (string1) (string2) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite string_eqb_eq in Case2 at 0(rank:0)
rewrite <- string_eqb_eq in Case2 at 0(rank:0)
=================================================
Progress: 58


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 7
case is_mem_ta1 (string_list1) (string1)(rank:1)
rewrite Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 1(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
=================================================
Progress: 59


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 7
case is_mem_ta1 (string_list1) (string1)(rank:1)
rewrite Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 1(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
=================================================
Progress: 60


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : string_eq (string1) (string2) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : string1 = string2
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:2)
=================================================
Progress: 61


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : string_eq (string1) (string2) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : is_mem_ta1 (string_list1) (string1) = true
Case2 : string2 = string1
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:2)
=================================================
Progress: 62


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
---------------------------------------
forall (string_list1:string list), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

2 goal(s) more...

0 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string_eq (string1) (string2) = true
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case1 at 0(rank:0)
intro string_list1(rank:1)
rewrite <- string_eqb_eq in Case1 at 0(rank:0)
=================================================
Progress: 63


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string_eq (string1) (string2) = true
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 7
intro string_list1(rank:1)
rewrite Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite Case1 in goal at 0(rank:2)
=================================================
Progress: 64


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string_eq (string1) (string2) = true
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 7
intro string_list1(rank:1)
rewrite Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite Case1 in goal at 0(rank:2)
=================================================
Progress: 65


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = true
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite string_eqb_eq in Case1 at 0(rank:0)
rewrite <- string_eqb_eq in Case1 at 0(rank:0)
=================================================
Progress: 66


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = true
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:2)
=================================================
Progress: 67


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = true
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:2)
=================================================
Progress: 68


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:2)
=================================================
Progress: 69


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:2)
=================================================
Progress: 70


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (string_list1) (string2)

3 goal(s) more...

0 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case2 : string_eq (string1) (string2) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case2 at 0(rank:0)
rewrite <- Case1 in goal at 0(rank:1)
rewrite <- string_eqb_eq in Case2 at 0(rank:0)
=================================================
Progress: 71


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case2 : string_eq (string1) (string2) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case2 : string1 = string2
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:1)
rewrite <- Case2 in goal at 0(rank:2)
=================================================
Progress: 72


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case2 : string_eq (string1) (string2) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case2 : string2 = string1
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:1)
rewrite Case2 in goal at 0(rank:2)
=================================================
Progress: 73


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((string3::string_list2)) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

3 goal(s) more...

0 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string1) (string2) = true
---------------------------------------
true = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
rewrite string_eqb_eq in Case2 at 0(rank:0)
rewrite IH1 in goal at 0(rank:2)
rewrite <- string_eqb_eq in Case2 at 0(rank:0)
case string_eq (string3) (string2)(rank:1)
=================================================
Progress: 74


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string1) (string2) = true
---------------------------------------
true = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string1 = string2
---------------------------------------
true = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 5
case string_eq (string3) (string2)(rank:1)
rewrite IH1 in goal at 0(rank:2)
rewrite <- Case2 in goal at 0(rank:2)
rewrite <- Case2 in goal at 1(rank:2)
rewrite <- Case2 in goal at 2(rank:2)
=================================================
Progress: 75


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string1) (string2) = true
---------------------------------------
true = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string2 = string1
---------------------------------------
true = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 5
case string_eq (string3) (string2)(rank:1)
rewrite Case2 in goal at 0(rank:2)
rewrite Case2 in goal at 1(rank:2)
rewrite Case2 in goal at 2(rank:2)
rewrite IH1 in goal at 0(rank:2)
=================================================
Progress: 76


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((string3::string_list2)) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

3 goal(s) more...

0 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string3) (string2) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((string3::string_list2)) (string2) = true

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case2 at 0(rank:0)
rewrite <- string_eqb_eq in Case2 at 0(rank:0)
case string_eq (string1) (string2)(rank:1)
=================================================
Progress: 77


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string3) (string2) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((string3::string_list2)) (string2) = true

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string3 = string2
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((string3::string_list2)) (string2) = true

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 5
case string_eq (string1) (string2)(rank:1)
rewrite Case2 in goal at 0(rank:2)
rewrite <- Case2 in goal at 0(rank:2)
rewrite <- Case2 in goal at 1(rank:2)
rewrite <- Case2 in goal at 2(rank:2)
=================================================
Progress: 78


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string3) (string2) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((string3::string_list2)) (string2) = true

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string2 = string3
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((string3::string_list2)) (string2) = true

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 5
case string_eq (string1) (string2)(rank:1)
rewrite Case2 in goal at 0(rank:2)
rewrite Case2 in goal at 1(rank:2)
rewrite Case2 in goal at 2(rank:2)
rewrite <- Case2 in goal at 0(rank:2)
=================================================
Progress: 79


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) ((string3::string_list2)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list2)))

3 goal(s) more...

0 conjecture(s) more...
>>> case if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : string_eq (string1) (string2) = true
Case2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
true = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
rewrite string_eqb_eq in Case1 at 0(rank:0)
rewrite IH1 in goal at 0(rank:2)
rewrite <- string_eqb_eq in Case1 at 0(rank:0)
case string_eq (string3) (string2)(rank:1)
=================================================
Progress: 80


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : string_eq (string1) (string2) = true
Case2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
true = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : string1 = string2
Case2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
true = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 5
case string_eq (string3) (string2)(rank:1)
rewrite IH1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
=================================================
Progress: 81


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : string_eq (string1) (string2) = true
Case2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
true = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : string2 = string1
Case2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
true = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 5
case string_eq (string3) (string2)(rank:1)
rewrite Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 1(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite IH1 in goal at 0(rank:2)
=================================================
Progress: 82


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : string1 = string2
---------------------------------------
true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) ((string3::string_list2)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list2)))

3 goal(s) more...

0 conjecture(s) more...
>>> case if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : string1 = string2
Case2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
true = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 5
case string_eq (string3) (string2)(rank:1)
rewrite IH1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
=================================================
Progress: 83


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : string2 = string1
---------------------------------------
true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) ((string3::string_list2)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list2)))

3 goal(s) more...

0 conjecture(s) more...
>>> case if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : string2 = string1
Case2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
true = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 5
case string_eq (string3) (string2)(rank:1)
rewrite Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 1(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite IH1 in goal at 0(rank:2)
=================================================
Progress: 84


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = true
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> intro string_list1(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = true
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:1)
case is_mem_ta1 (string_list1) (string1)(rank:1)
=================================================
Progress: 85


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> intro string_list1(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 7
case is_mem_ta1 (string_list1) (string1)(rank:1)
rewrite Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 1(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
=================================================
Progress: 86


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> intro string_list1(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 7
case is_mem_ta1 (string_list1) (string1)(rank:1)
rewrite Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 1(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
=================================================
Progress: 87


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string_eq (string1) (string2) = true
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite string_eqb_eq in Case1 at 0(rank:0)
rewrite <- string_eqb_eq in Case1 at 0(rank:0)
=================================================
Progress: 88


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string_eq (string1) (string2) = true
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:2)
=================================================
Progress: 89


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string_eq (string1) (string2) = true
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:2)
=================================================
Progress: 90


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:2)
=================================================
Progress: 91


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:2)
=================================================
Progress: 92


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string_eq (string1) (string2) = true
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> intro string_list1(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string_eq (string1) (string2) = true
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite <- Case1 in goal at 0(rank:1)
case is_mem_ta1 (string_list1) (string1)(rank:1)
=================================================
Progress: 93


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> intro string_list1(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 7
case is_mem_ta1 (string_list1) (string1)(rank:1)
rewrite Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 1(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
=================================================
Progress: 94


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
---------------------------------------
forall (string_list1:string list), true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> intro string_list1(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 7
case is_mem_ta1 (string_list1) (string1)(rank:1)
rewrite Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 1(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
=================================================
Progress: 95


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = true
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = true
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case1 at 0(rank:0)
rewrite <- string_eqb_eq in Case1 at 0(rank:0)
case is_mem_ta1 (string_list1) (string1)(rank:1)
=================================================
Progress: 96


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = true
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 9
case is_mem_ta1 (string_list1) (string1)(rank:1)
rewrite Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 3(rank:2)
rewrite Case1 in goal at 3(rank:2)
rewrite Case1 in goal at 1(rank:2)
=================================================
Progress: 97


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = true
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 9
case is_mem_ta1 (string_list1) (string1)(rank:1)
rewrite Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 3(rank:2)
rewrite Case1 in goal at 3(rank:2)
rewrite Case1 in goal at 1(rank:2)
=================================================
Progress: 98


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = true
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = true
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case1 at 0(rank:0)
rewrite <- Case1 in goal at 0(rank:1)
rewrite <- string_eqb_eq in Case1 at 0(rank:0)
=================================================
Progress: 99


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = true
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:2)
=================================================
Progress: 100


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = true
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:2)
=================================================
Progress: 101


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:2)
=================================================
Progress: 102


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:2)
=================================================
Progress: 103


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string_eq (string1) (string2) = true
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string_eq (string1) (string2) = true
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case1 at 0(rank:0)
rewrite <- string_eqb_eq in Case1 at 0(rank:0)
case is_mem_ta1 (string_list1) (string1)(rank:1)
=================================================
Progress: 104


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string_eq (string1) (string2) = true
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 9
case is_mem_ta1 (string_list1) (string1)(rank:1)
rewrite Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 3(rank:2)
rewrite Case1 in goal at 3(rank:2)
rewrite Case1 in goal at 1(rank:2)
=================================================
Progress: 105


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string_eq (string1) (string2) = true
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 9
case is_mem_ta1 (string_list1) (string1)(rank:1)
rewrite Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 3(rank:2)
rewrite Case1 in goal at 3(rank:2)
rewrite Case1 in goal at 1(rank:2)
=================================================
Progress: 106


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string_eq (string1) (string2) = true
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string_eq (string1) (string2) = true
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case1 at 0(rank:0)
rewrite <- Case1 in goal at 0(rank:1)
rewrite <- string_eqb_eq in Case1 at 0(rank:0)
=================================================
Progress: 107


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string_eq (string1) (string2) = true
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:2)
=================================================
Progress: 108


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string_eq (string1) (string2) = true
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:2)
=================================================
Progress: 109


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:2)
=================================================
Progress: 110


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:2)
=================================================
Progress: 111


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = true
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = true
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite string_eqb_eq in Case1 at 0(rank:0)
rewrite <- string_eqb_eq in Case1 at 0(rank:0)
=================================================
Progress: 112


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = true
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
rewrite Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
=================================================
Progress: 113


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = true
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
rewrite Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 1(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
=================================================
Progress: 114


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
rewrite Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
=================================================
Progress: 115


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
rewrite Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 1(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
=================================================
Progress: 116


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string_eq (string1) (string2) = true
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string_eq (string1) (string2) = true
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite string_eqb_eq in Case1 at 0(rank:0)
rewrite <- string_eqb_eq in Case1 at 0(rank:0)
=================================================
Progress: 117


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string_eq (string1) (string2) = true
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
rewrite Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
=================================================
Progress: 118


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string_eq (string1) (string2) = true
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
rewrite Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 1(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
=================================================
Progress: 119


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
rewrite Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
=================================================
Progress: 120


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
string_eq (string1) (string2) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
rewrite Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 1(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
=================================================
Progress: 121


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string1) (string2) = true
---------------------------------------
true = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string1) (string2) = true
Case3 : string_eq (string3) (string2) = true
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 122


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string1) (string2) = true
Case3 : string_eq (string3) (string2) = true
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string1) (string2) = true
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite string_eqb_eq in Case2 at 0(rank:0)
rewrite <- string_eqb_eq in Case2 at 0(rank:0)
=================================================
Progress: 123


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string1) (string2) = true
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string1 = string2
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:2)
=================================================
Progress: 124


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string1) (string2) = true
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string2 = string1
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:2)
=================================================
Progress: 125


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string3) (string2) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((string3::string_list2)) (string2) = true

4 goal(s) more...

0 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string3) (string2) = true
Case3 : string_eq (string1) (string2) = true
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 126


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string3) (string2) = true
Case3 : string_eq (string1) (string2) = true
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string3) (string2) = true
Case3 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true

4 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite string_eqb_eq in Case2 at 0(rank:0)
rewrite <- string_eqb_eq in Case2 at 0(rank:0)
=================================================
Progress: 127


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string3) (string2) = true
Case3 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string3 = string2
Case3 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
rewrite Case2 in goal at 0(rank:2)
rewrite <- Case2 in goal at 0(rank:2)
rewrite <- Case2 in goal at 1(rank:2)
rewrite <- Case2 in goal at 2(rank:2)
=================================================
Progress: 128


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string3) (string2) = true
Case3 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string2 = string3
Case3 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
rewrite Case2 in goal at 0(rank:2)
rewrite Case2 in goal at 1(rank:2)
rewrite Case2 in goal at 2(rank:2)
rewrite <- Case2 in goal at 0(rank:2)
=================================================
Progress: 129


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string1 = string2
---------------------------------------
true = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string1 = string2
Case3 : string_eq (string3) (string2) = true
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite string_eqb_eq in Case3 at 0(rank:0)
rewrite <- string_eqb_eq in Case3 at 0(rank:0)
=================================================
Progress: 130


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string1 = string2
Case3 : string_eq (string3) (string2) = true
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string1 = string2
Case3 : string3 = string2
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case2 at 0
case string_eq (string3) (string2)
rewrite string_eqb_eq in Case3 at 0
state_list
=================================================
Progress: 131


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string1 = string2
Case3 : string_eq (string3) (string2) = true
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case3 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string1 = string2
Case3 : string2 = string3
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 132


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string2 = string1
---------------------------------------
true = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string2 = string1
Case3 : string_eq (string3) (string2) = true
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite string_eqb_eq in Case3 at 0(rank:0)
rewrite <- string_eqb_eq in Case3 at 0(rank:0)
=================================================
Progress: 133


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string2 = string1
Case3 : string_eq (string3) (string2) = true
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string2 = string1
Case3 : string3 = string2
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 134


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string2 = string1
Case3 : string_eq (string3) (string2) = true
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case3 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string2 = string1
Case3 : string2 = string3
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 135


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string3 = string2
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((string3::string_list2)) (string2) = true

4 goal(s) more...

0 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string3 = string2
Case3 : string_eq (string1) (string2) = true
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite string_eqb_eq in Case3 at 0(rank:0)
rewrite <- string_eqb_eq in Case3 at 0(rank:0)
=================================================
Progress: 136


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string3 = string2
Case3 : string_eq (string1) (string2) = true
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string3 = string2
Case3 : string1 = string2
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 137


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string3 = string2
Case3 : string_eq (string1) (string2) = true
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case3 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string3 = string2
Case3 : string2 = string1
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 138


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string2 = string3
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((string3::string_list2)) (string2) = true

4 goal(s) more...

0 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string2 = string3
Case3 : string_eq (string1) (string2) = true
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite string_eqb_eq in Case3 at 0(rank:0)
rewrite <- string_eqb_eq in Case3 at 0(rank:0)
=================================================
Progress: 139


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string2 = string3
Case3 : string_eq (string1) (string2) = true
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string2 = string3
Case3 : string1 = string2
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 140


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string2 = string3
Case3 : string_eq (string1) (string2) = true
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case3 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string2 = string3
Case3 : string2 = string1
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 141


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string1) (string2) = true
---------------------------------------
true = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string1) (string2) = true
Case3 : string_eq (string3) (string2) = true
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 142


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string1) (string2) = true
Case3 : string_eq (string3) (string2) = true
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string1) (string2) = true
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite string_eqb_eq in Case2 at 0(rank:0)
rewrite <- string_eqb_eq in Case2 at 0(rank:0)
=================================================
Progress: 143


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string1) (string2) = true
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string1 = string2
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:2)
=================================================
Progress: 144


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string1) (string2) = true
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string2 = string1
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:2)
=================================================
Progress: 145


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string3) (string2) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((string3::string_list2)) (string2) = true

4 goal(s) more...

0 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string3) (string2) = true
Case3 : string_eq (string1) (string2) = true
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 146


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string3) (string2) = true
Case3 : string_eq (string1) (string2) = true
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string3) (string2) = true
Case3 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true

4 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite string_eqb_eq in Case2 at 0(rank:0)
rewrite <- string_eqb_eq in Case2 at 0(rank:0)
=================================================
Progress: 147


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string3) (string2) = true
Case3 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string3 = string2
Case3 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
rewrite Case2 in goal at 0(rank:2)
rewrite <- Case2 in goal at 0(rank:2)
rewrite <- Case2 in goal at 1(rank:2)
rewrite <- Case2 in goal at 2(rank:2)
=================================================
Progress: 148


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string3) (string2) = true
Case3 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string2 = string3
Case3 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
rewrite Case2 in goal at 0(rank:2)
rewrite Case2 in goal at 1(rank:2)
rewrite Case2 in goal at 2(rank:2)
rewrite <- Case2 in goal at 0(rank:2)
=================================================
Progress: 149


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string1 = string2
---------------------------------------
true = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string1 = string2
Case3 : string_eq (string3) (string2) = true
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite string_eqb_eq in Case3 at 0(rank:0)
rewrite <- string_eqb_eq in Case3 at 0(rank:0)
=================================================
Progress: 150


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string1 = string2
Case3 : string_eq (string3) (string2) = true
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string1 = string2
Case3 : string3 = string2
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 151


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string1 = string2
Case3 : string_eq (string3) (string2) = true
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case3 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string1 = string2
Case3 : string2 = string3
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 152


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string2 = string1
---------------------------------------
true = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string2 = string1
Case3 : string_eq (string3) (string2) = true
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite string_eqb_eq in Case3 at 0(rank:0)
rewrite <- string_eqb_eq in Case3 at 0(rank:0)
=================================================
Progress: 153


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string2 = string1
Case3 : string_eq (string3) (string2) = true
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string2 = string1
Case3 : string3 = string2
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 154


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string2 = string1
Case3 : string_eq (string3) (string2) = true
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case3 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string2 = string1
Case3 : string2 = string3
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 155


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string3 = string2
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((string3::string_list2)) (string2) = true

4 goal(s) more...

0 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string3 = string2
Case3 : string_eq (string1) (string2) = true
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite string_eqb_eq in Case3 at 0(rank:0)
rewrite <- string_eqb_eq in Case3 at 0(rank:0)
=================================================
Progress: 156


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string3 = string2
Case3 : string_eq (string1) (string2) = true
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string3 = string2
Case3 : string1 = string2
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 157


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string3 = string2
Case3 : string_eq (string1) (string2) = true
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case3 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string3 = string2
Case3 : string2 = string1
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 158


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string2 = string3
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((string3::string_list2)) (string2) = true

4 goal(s) more...

0 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string2 = string3
Case3 : string_eq (string1) (string2) = true
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite string_eqb_eq in Case3 at 0(rank:0)
rewrite <- string_eqb_eq in Case3 at 0(rank:0)
=================================================
Progress: 159


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string2 = string3
Case3 : string_eq (string1) (string2) = true
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string2 = string3
Case3 : string1 = string2
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 160


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string2 = string3
Case3 : string_eq (string1) (string2) = true
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case3 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string2 = string3
Case3 : string2 = string1
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 161


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case2 : string_eq (string1) (string2) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case2 : string_eq (string1) (string2) = true
---------------------------------------
is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite <- Case1 in goal at 0
state_list
New Env

;;
Lemma List
forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true->string_eq (string1) (string2) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list1) (string2)
End of Lemma List
=================================================
Progress: 162


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case2 : string_eq (string1) (string2) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true->string_eq (string1) (string2) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list1) (string2)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true->string_eq (string1) (string2) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list1) (string2)

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true->string_eq (string1) (string2) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
intro string_list1(rank:0)
intro string1(rank:1)
intro string2(rank:1)
=================================================
Progress: 163


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true->string_eq (string1) (string2) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list1) (string2)

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true->string_eq (string1) (string2) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

1 conjecture(s) more...
>>> intro string_list1(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true->string_eq (string1) (string2) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
---------------------------------------
forall (string1:string) (string2:string), is_mem_ta1 (string_list1) (string1) = true->string_eq (string1) (string2) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
intro string1(rank:1)
intro string2(rank:1)
=================================================
Progress: 164


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case2 : string1 = string2
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case2 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite Case2 in goal at 0(rank:1)
rewrite <- Case2 in goal at 0(rank:1)
=================================================
Progress: 165


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case2 : string2 = string1
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case2 : string2 = string1
---------------------------------------
is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite Case2 in goal at 0(rank:1)
rewrite <- Case2 in goal at 0(rank:1)
=================================================
Progress: 166


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string1) (string2) = true
---------------------------------------
true = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string1) (string2) = true
Case3 : string_eq (string3) (string2) = true
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 167


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string1) (string2) = true
Case3 : string_eq (string3) (string2) = true
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string1) (string2) = true
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite string_eqb_eq in Case2 at 0(rank:0)
rewrite <- string_eqb_eq in Case2 at 0(rank:0)
=================================================
Progress: 168


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string1) (string2) = true
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string1 = string2
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:2)
=================================================
Progress: 169


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string1) (string2) = true
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string2 = string1
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:2)
=================================================
Progress: 170


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string1 = string2
---------------------------------------
true = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string1 = string2
Case3 : string_eq (string3) (string2) = true
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite string_eqb_eq in Case3 at 0(rank:0)
rewrite <- string_eqb_eq in Case3 at 0(rank:0)
=================================================
Progress: 171


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string1 = string2
Case3 : string_eq (string3) (string2) = true
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string1 = string2
Case3 : string3 = string2
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 172


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string1 = string2
Case3 : string_eq (string3) (string2) = true
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case3 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string1 = string2
Case3 : string2 = string3
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 173


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string2 = string1
---------------------------------------
true = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string2 = string1
Case3 : string_eq (string3) (string2) = true
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite string_eqb_eq in Case3 at 0(rank:0)
rewrite <- string_eqb_eq in Case3 at 0(rank:0)
=================================================
Progress: 174


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string2 = string1
Case3 : string_eq (string3) (string2) = true
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string2 = string1
Case3 : string3 = string2
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 175


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string2 = string1
Case3 : string_eq (string3) (string2) = true
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case3 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string2 = string1
Case3 : string2 = string3
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 176


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string3) (string2) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((string3::string_list2)) (string2) = true

4 goal(s) more...

0 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string3) (string2) = true
Case3 : string_eq (string1) (string2) = true
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 177


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string3) (string2) = true
Case3 : string_eq (string1) (string2) = true
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string3) (string2) = true
Case3 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true

4 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 3
rewrite string_eqb_eq in Case2 at 0(rank:0)
rewrite IH1 in goal at 0(rank:2)
rewrite <- string_eqb_eq in Case2 at 0(rank:0)
=================================================
Progress: 178


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string3) (string2) = true
Case3 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string3 = string2
Case3 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 5
rewrite Case2 in goal at 0(rank:2)
rewrite <- Case2 in goal at 0(rank:2)
rewrite <- Case2 in goal at 1(rank:2)
rewrite <- Case2 in goal at 2(rank:2)
rewrite IH1 in goal at 0(rank:2)
=================================================
Progress: 179


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string3) (string2) = true
Case3 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string2 = string3
Case3 : string_eq (string1) (string2) = false
---------------------------------------
if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 5
rewrite Case2 in goal at 0(rank:2)
rewrite Case2 in goal at 2(rank:2)
rewrite IH1 in goal at 0(rank:2)
rewrite <- Case2 in goal at 0(rank:2)
rewrite Case2 in goal at 1(rank:2)
=================================================
Progress: 180


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string3 = string2
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((string3::string_list2)) (string2) = true

4 goal(s) more...

0 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string3 = string2
Case3 : string_eq (string1) (string2) = true
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite string_eqb_eq in Case3 at 0(rank:0)
rewrite <- string_eqb_eq in Case3 at 0(rank:0)
=================================================
Progress: 181


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string3 = string2
Case3 : string_eq (string1) (string2) = true
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string3 = string2
Case3 : string1 = string2
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 182


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string3 = string2
Case3 : string_eq (string1) (string2) = true
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case3 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string3 = string2
Case3 : string2 = string1
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 183


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string2 = string3
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((string3::string_list2)) (string2) = true

4 goal(s) more...

0 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string2 = string3
Case3 : string_eq (string1) (string2) = true
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite string_eqb_eq in Case3 at 0(rank:0)
rewrite <- string_eqb_eq in Case3 at 0(rank:0)
=================================================
Progress: 184


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string2 = string3
Case3 : string_eq (string1) (string2) = true
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string2 = string3
Case3 : string1 = string2
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 185


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string2 = string3
Case3 : string_eq (string1) (string2) = true
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case3 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string2 = string3
Case3 : string2 = string1
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 186


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : string_eq (string1) (string2) = true
Case2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
true = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : string_eq (string1) (string2) = true
Case2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case3 : string_eq (string3) (string2) = true
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 187


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : string_eq (string1) (string2) = true
Case2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case3 : string_eq (string3) (string2) = true
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : string_eq (string1) (string2) = true
Case2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite string_eqb_eq in Case1 at 0(rank:0)
rewrite <- string_eqb_eq in Case1 at 0(rank:0)
=================================================
Progress: 188


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : string_eq (string1) (string2) = true
Case2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : string1 = string2
Case2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:2)
=================================================
Progress: 189


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : string_eq (string1) (string2) = true
Case2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : string2 = string1
Case2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:2)
=================================================
Progress: 190


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : string1 = string2
Case2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
true = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : string1 = string2
Case2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case3 : string_eq (string3) (string2) = true
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite string_eqb_eq in Case3 at 0(rank:0)
rewrite <- string_eqb_eq in Case3 at 0(rank:0)
=================================================
Progress: 191


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : string1 = string2
Case2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case3 : string_eq (string3) (string2) = true
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : string1 = string2
Case2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case3 : string3 = string2
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 192


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : string1 = string2
Case2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case3 : string_eq (string3) (string2) = true
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case3 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : string1 = string2
Case2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case3 : string2 = string3
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 193


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : string2 = string1
Case2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
true = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : string2 = string1
Case2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case3 : string_eq (string3) (string2) = true
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite string_eqb_eq in Case3 at 0(rank:0)
rewrite <- string_eqb_eq in Case3 at 0(rank:0)
=================================================
Progress: 194


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : string2 = string1
Case2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case3 : string_eq (string3) (string2) = true
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : string2 = string1
Case2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case3 : string3 = string2
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 195


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : string2 = string1
Case2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case3 : string_eq (string3) (string2) = true
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case3 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : string2 = string1
Case2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case3 : string2 = string3
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 196


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : string1 = string2
Case2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
true = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : string1 = string2
Case2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case3 : string_eq (string3) (string2) = true
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 197


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : string1 = string2
Case2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case3 : string_eq (string3) (string2) = true
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : string1 = string2
Case2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:2)
=================================================
Progress: 198


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : string2 = string1
Case2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
true = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : string2 = string1
Case2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case3 : string_eq (string3) (string2) = true
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 199


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : string2 = string1
Case2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case3 : string_eq (string3) (string2) = true
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : string2 = string1
Case2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite Case1 in goal at 0(rank:2)
=================================================
Progress: 200


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = true
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = true
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite string_eqb_eq in Case1 at 0(rank:0)
rewrite <- string_eqb_eq in Case1 at 0(rank:0)
=================================================
Progress: 201


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = true
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
rewrite Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
=================================================
Progress: 202


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string_eq (string1) (string2) = true
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
rewrite Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 1(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
=================================================
Progress: 203


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string_eq (string1) (string2) = true
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string_eq (string1) (string2) = true
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite string_eqb_eq in Case1 at 0(rank:0)
rewrite <- string_eqb_eq in Case1 at 0(rank:0)
=================================================
Progress: 204


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string_eq (string1) (string2) = true
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
rewrite Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
=================================================
Progress: 205


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string_eq (string1) (string2) = true
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
string_list1 : string list
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
string_eq (string1) (string2) = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
rewrite Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 1(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
=================================================
Progress: 206


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case2 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case2 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 207


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case2 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case2 : string_eq (string1) (string2) = false
---------------------------------------
is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (string_list1) (string2)

3 goal(s) more...

0 conjecture(s) more...
Deduplication: 9
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 208


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case2 : string_eq (string1) (string2) = false
---------------------------------------
is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (string_list1) (string2)

3 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
sub_check_ta1 (P (string2) (lambda2)) ((string1::string_list1)) = sub_check_ta1 (P (string2) (lambda2)) (string_list1)

2 goal(s) more...

0 conjecture(s) more...
Deduplication: 1
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 209


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
sub_check_ta1 (P (string2) (lambda2)) ((string1::string_list1)) = sub_check_ta1 (P (string2) (lambda2)) (string_list1)

2 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal


1st goal of : any
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
---------------------------------------
forall (lambda2:lambda), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))

0 goal(s) more...

0 conjecture(s) more...


1st goal of : any
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
lambda2 : lambda
string3 : string
---------------------------------------
forall (lambda3:lambda), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda3) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (lambda3) ((string3::(string2::string_list1)))

0 goal(s) more...

0 conjecture(s) more...
state_list
sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))
sub_check_ta1 (lambda3) ((string3::(string2::(string1::string_list1)))) = sub_check_ta1 (lambda3) ((string3::(string2::string_list1)))
sub_check_ta1 (lambda4) ((string4::(string3::(string2::(string1::string_list1))))) = sub_check_ta1 (lambda4) ((string4::(string3::(string2::string_list1))))
lhs_common_subtree
Cons(string2, Cons(string1, string_list1))
Cons(string3, Cons(string2, Cons(string1, string_list1)))
Cons(string4, Cons(string3, Cons(string2, Cons(string1, string_list1))))
rhs_common_subtree
Cons(string2, string_list1)
Cons(string3, Cons(string2, string_list1))
Cons(string4, Cons(string3, Cons(string2, string_list1)))
lhs_increase_subtree
Cons(string3, _)
Cons(string4, _)
rhs_increase_subtree
Cons(string3, _)
Cons(string4, _)
New Env
let rec mk_lhs1 arg_1 arg_2 arg_3 arg_4 =
match (arg_1) with
| Nil  -> (arg_2::(arg_3::arg_4))
| Cons hd tl -> (hd::mk_lhs1 (tl) (arg_2) (arg_3) (arg_4))
;;
let rec mk_rhs1 arg_5 arg_6 arg_7 =
match (arg_5) with
| Nil  -> (arg_6::arg_7)
| Cons hd tl -> (hd::mk_rhs1 (tl) (arg_6) (arg_7))
;;
Lemma List
forall (string2:string) (string1:string) (string_list1:string list), mk_lhs1 ((Nil)) (string2) (string1) (string_list1) = (string2::(string1::string_list1))
forall (hd:string) (tl:string list) (string2:string) (string1:string) (string_list1:string list), mk_lhs1 ((hd::tl)) (string2) (string1) (string_list1) = (hd::mk_lhs1 (tl) (string2) (string1) (string_list1))
forall (string2:string) (string_list1:string list), mk_rhs1 ((Nil)) (string2) (string_list1) = (string2::string_list1)
forall (hd:string) (tl:string list) (string2:string) (string_list1:string list), mk_rhs1 ((hd::tl)) (string2) (string_list1) = (hd::mk_rhs1 (tl) (string2) (string_list1))
forall (lambda2:lambda) (lst:string list) (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda2) (mk_lhs1 (lst) (string2) (string1) (string_list1)) = sub_check_ta1 (lambda2) (mk_rhs1 (lst) (string2) (string_list1))
End of Lemma List
=================================================
Progress: 210


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) ((string1::string_list1)) = sub_check_ta1 (lambda2) (string_list1)
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
sub_check_ta1 (lambda2) ((string2::(string1::string_list1))) = sub_check_ta1 (lambda2) ((string2::string_list1))

2 goal(s) more...

0 conjecture(s) more...
>>> assert forall (lambda2:lambda) (lst:string list) (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> sub_check_ta1 (lambda2) (mk_lhs1 (lst) (string2) (string1) (string_list1)) = sub_check_ta1 (lambda2) (mk_rhs1 (lst) (string2) (string_list1))(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))

---------------------------------------
forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
induction lambda1(rank:0)
intro string_list2(rank:3)
intro string1(rank:3)
intro string2(rank:3)
=================================================
Progress: 211


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))

---------------------------------------
forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))

0 goal(s) more...

1 conjecture(s) more...
>>> induction lambda1(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (V (string3)) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (V (string3)) (mk_rhs1 (string_list1) (string2) (string_list2))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 212


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (V (string3)) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (V (string3)) (mk_rhs1 (string_list1) (string2) (string_list2))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list1) (string2) (string_list2)) (string3)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
induction string_list1(rank:0)
intro string_list1(rank:2)
intro string_list2(rank:3)
intro string1(rank:3)
intro string2(rank:3)
=================================================
Progress: 213


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list1) (string2) (string_list2)) (string3)

2 goal(s) more...

1 conjecture(s) more...
>>> induction string_list1(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
---------------------------------------
forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 ((Nil)) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 ((Nil)) (string2) (string_list2)) (string3)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 214


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
---------------------------------------
forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 ((Nil)) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 ((Nil)) (string2) (string_list2)) (string3)

3 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
---------------------------------------
forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::string_list2)) (string3) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list2) (string3)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
intro string_list2(rank:0)
intro string1(rank:1)
intro string2(rank:1)
=================================================
Progress: 215


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
---------------------------------------
forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::string_list2)) (string3) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list2) (string3)

3 goal(s) more...

1 conjecture(s) more...
>>> intro string_list2(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string_list2 : string list
---------------------------------------
forall (string1:string) (string2:string), is_mem_ta1 (string_list2) (string1) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::string_list2)) (string3) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list2) (string3)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
intro string1(rank:1)
intro string2(rank:1)
=================================================
Progress: 216


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
---------------------------------------
forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::string_list2)) (string3) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list2) (string3)

3 goal(s) more...

1 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string1 : string
---------------------------------------
forall (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::string_list2)) (string3) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list2) (string3)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro string2(rank:1)
=================================================
Progress: 217


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
---------------------------------------
forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::string_list2)) (string3) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list2) (string3)

3 goal(s) more...

1 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string2 : string
---------------------------------------
forall (string1:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::string_list2)) (string3) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list2) (string3)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:0)
=================================================
Progress: 218


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string2 : string
---------------------------------------
forall (string1:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::string_list2)) (string3) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list2) (string3)

3 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string2 : string
Case1 : string_eq (string2) (string3) = true
---------------------------------------
forall (string1:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> true = true

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
rewrite string_eqb_eq in Case1 at 0(rank:0)
rewrite <- string_eqb_eq in Case1 at 0(rank:0)
intro string1(rank:1)
intro string_list2(rank:1)
=================================================
Progress: 219


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string2 : string
Case1 : string_eq (string2) (string3) = true
---------------------------------------
forall (string1:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> true = true

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string2 : string
Case1 : string2 = string3
---------------------------------------
forall (string1:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> true = true

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
intro string1(rank:1)
intro string_list2(rank:1)
=================================================
Progress: 220


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string2 : string
Case1 : string_eq (string2) (string3) = true
---------------------------------------
forall (string1:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> true = true

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string2 : string
Case1 : string3 = string2
---------------------------------------
forall (string1:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> true = true

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
intro string1(rank:1)
intro string_list2(rank:1)
=================================================
Progress: 221


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string_list2 : string list
---------------------------------------
forall (string1:string) (string2:string), is_mem_ta1 (string_list2) (string1) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::string_list2)) (string3) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list2) (string3)

3 goal(s) more...

1 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string_list2 : string list
string1 : string
---------------------------------------
forall (string2:string), is_mem_ta1 (string_list2) (string1) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::string_list2)) (string3) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list2) (string3)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro string2(rank:1)
=================================================
Progress: 222


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string_list2 : string list
---------------------------------------
forall (string1:string) (string2:string), is_mem_ta1 (string_list2) (string1) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::string_list2)) (string3) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list2) (string3)

3 goal(s) more...

1 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string_list2 : string list
string2 : string
---------------------------------------
forall (string1:string), is_mem_ta1 (string_list2) (string1) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::string_list2)) (string3) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list2) (string3)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:0)
=================================================
Progress: 223


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string_list2 : string list
string2 : string
---------------------------------------
forall (string1:string), is_mem_ta1 (string_list2) (string1) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::string_list2)) (string3) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list2) (string3)

3 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string_list2 : string list
string2 : string
Case1 : string_eq (string2) (string3) = true
---------------------------------------
forall (string1:string), is_mem_ta1 (string_list2) (string1) = true -> true = true

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case1 at 0(rank:0)
intro string1(rank:1)
rewrite <- string_eqb_eq in Case1 at 0(rank:0)
=================================================
Progress: 224


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string_list2 : string list
string2 : string
Case1 : string_eq (string2) (string3) = true
---------------------------------------
forall (string1:string), is_mem_ta1 (string_list2) (string1) = true -> true = true

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string_list2 : string list
string2 : string
Case1 : string2 = string3
---------------------------------------
forall (string1:string), is_mem_ta1 (string_list2) (string1) = true -> true = true

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro string1(rank:1)
=================================================
Progress: 225


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string_list2 : string list
string2 : string
Case1 : string_eq (string2) (string3) = true
---------------------------------------
forall (string1:string), is_mem_ta1 (string_list2) (string1) = true -> true = true

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string_list2 : string list
string2 : string
Case1 : string3 = string2
---------------------------------------
forall (string1:string), is_mem_ta1 (string_list2) (string1) = true -> true = true

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro string1(rank:1)
=================================================
Progress: 226


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string1 : string
---------------------------------------
forall (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::string_list2)) (string3) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list2) (string3)

3 goal(s) more...

1 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string1 : string
string2 : string
---------------------------------------
forall (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::string_list2)) (string3) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list2) (string3)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case string_eq (string2) (string3)(rank:0)
=================================================
Progress: 227


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string1 : string
string2 : string
---------------------------------------
forall (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::string_list2)) (string3) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list2) (string3)

3 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string1 : string
string2 : string
Case1 : string_eq (string2) (string3) = true
---------------------------------------
forall (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> true = true

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case1 at 0(rank:0)
intro string_list2(rank:1)
rewrite <- string_eqb_eq in Case1 at 0(rank:0)
=================================================
Progress: 228


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string1 : string
string2 : string
Case1 : string_eq (string2) (string3) = true
---------------------------------------
forall (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> true = true

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string1 : string
string2 : string
Case1 : string2 = string3
---------------------------------------
forall (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> true = true

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro string_list2(rank:1)
=================================================
Progress: 229


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string1 : string
string2 : string
Case1 : string_eq (string2) (string3) = true
---------------------------------------
forall (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> true = true

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string1 : string
string2 : string
Case1 : string3 = string2
---------------------------------------
forall (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> true = true

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro string_list2(rank:1)
=================================================
Progress: 230


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string_list2 : string list
string1 : string
---------------------------------------
forall (string2:string), is_mem_ta1 (string_list2) (string1) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::string_list2)) (string3) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list2) (string3)

3 goal(s) more...

1 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string_list2 : string list
string1 : string
string2 : string
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::string_list2)) (string3) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list2) (string3)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
intro Cond1(rank:1)
case string_eq (string2) (string3)(rank:1)
=================================================
Progress: 231


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string_list2 : string list
string1 : string
string2 : string
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::string_list2)) (string3) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list2) (string3)

3 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string_list2 : string list
string1 : string
string2 : string
Cond1 : is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::string_list2)) (string3) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list2) (string3)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
case string_eq (string2) (string3)(rank:1)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
=================================================
Progress: 232


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string_list2 : string list
string1 : string
string2 : string
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true -> if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::string_list2)) (string3) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list2) (string3)

3 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 1)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string_list2 : string list
string1 : string
string2 : string
Case1 : string_eq (string2) (string3) = true
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true -> true = true

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case1 at 0(rank:0)
intro Cond1(rank:1)
rewrite <- string_eqb_eq in Case1 at 0(rank:0)
=================================================
Progress: 233


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string_list2 : string list
string1 : string
string2 : string
Case1 : string_eq (string2) (string3) = true
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true -> true = true

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string_list2 : string list
string1 : string
string2 : string
Case1 : string2 = string3
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true -> true = true

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:1)
=================================================
Progress: 234


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string_list2 : string list
string1 : string
string2 : string
Case1 : string_eq (string2) (string3) = true
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true -> true = true

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string_list2 : string list
string1 : string
string2 : string
Case1 : string3 = string2
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true -> true = true

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:1)
=================================================
Progress: 235


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string_list2 : string list
string1 : string
string2 : string
Cond1 : is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if string_eq (string2) (string3) then true else is_mem_ta1 ((string1::string_list2)) (string3) = if string_eq (string2) (string3) then true else is_mem_ta1 (string_list2) (string3)

3 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string2) (string3)(rank : 1)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string_list2 : string list
string1 : string
string2 : string
Cond1 : is_mem_ta1 (string_list2) (string1) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 236


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string_list2 : string list
string1 : string
string2 : string
Cond1 : is_mem_ta1 (string_list2) (string1) = true
Case1 : string_eq (string2) (string3) = true
---------------------------------------
true = true

4 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string_list2 : string list
string1 : string
string2 : string
Cond1 : is_mem_ta1 (string_list2) (string1) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 (string_list2) (string3) = is_mem_ta1 (string_list2) (string3)

3 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 2
case string_eq (string1) (string3)(rank:1)
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 237


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string_list2 : string list
string1 : string
string2 : string
Cond1 : is_mem_ta1 (string_list2) (string1) = true
Case1 : string_eq (string2) (string3) = false
---------------------------------------
if string_eq (string1) (string3) then true else is_mem_ta1 (string_list2) (string3) = is_mem_ta1 (string_list2) (string3)

3 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 1)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string_list2 : string list
string1 : string
string2 : string
Cond1 : is_mem_ta1 (string_list2) (string1) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = is_mem_ta1 (string_list2) (string3)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case2 at 0(rank:0)
rewrite <- Cond1 in goal at 0(rank:1)
rewrite <- string_eqb_eq in Case2 at 0(rank:0)
=================================================
Progress: 238


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string_list2 : string list
string1 : string
string2 : string
Cond1 : is_mem_ta1 (string_list2) (string1) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = is_mem_ta1 (string_list2) (string3)

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string_list2 : string list
string1 : string
string2 : string
Cond1 : is_mem_ta1 (string_list2) (string1) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = is_mem_ta1 (string_list2) (string3)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- Cond1 in goal at 0(rank:1)
rewrite <- Case2 in goal at 0(rank:2)
=================================================
Progress: 239


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string_list2 : string list
string1 : string
string2 : string
Cond1 : is_mem_ta1 (string_list2) (string1) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = is_mem_ta1 (string_list2) (string3)

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string_list2 : string list
string1 : string
string2 : string
Cond1 : is_mem_ta1 (string_list2) (string1) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string1
---------------------------------------
true = is_mem_ta1 (string_list2) (string3)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- Cond1 in goal at 0(rank:1)
rewrite Case2 in goal at 0(rank:2)
=================================================
Progress: 240


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string2 : string
Case1 : string_eq (string2) (string3) = true
---------------------------------------
forall (string1:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> true = true

4 goal(s) more...

1 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string2 : string
Case1 : string_eq (string2) (string3) = true
string1 : string
---------------------------------------
forall (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> true = true

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
intro string_list2(rank:1)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 3(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
=================================================
Progress: 241


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string2 : string
Case1 : string_eq (string2) (string3) = true
---------------------------------------
forall (string1:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> true = true

4 goal(s) more...

1 conjecture(s) more...
>>> intro string_list2(rank : 1)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string2 : string
Case1 : string_eq (string2) (string3) = true
string_list2 : string list
---------------------------------------
forall (string1:string), is_mem_ta1 (string_list2) (string1) = true -> true = true

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 3(rank:2)
=================================================
Progress: 242


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string2 : string
Case1 : string2 = string3
---------------------------------------
forall (string1:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> true = true

4 goal(s) more...

1 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string2 : string
Case1 : string2 = string3
string1 : string
---------------------------------------
forall (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> true = true

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro string_list2(rank:1)
=================================================
Progress: 243


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string2 : string
Case1 : string2 = string3
---------------------------------------
forall (string1:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> true = true

4 goal(s) more...

1 conjecture(s) more...
>>> intro string_list2(rank : 1)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string2 : string
Case1 : string2 = string3
string_list2 : string list
---------------------------------------
forall (string1:string), is_mem_ta1 (string_list2) (string1) = true -> true = true

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
case string_eq (string2) (string3)
rewrite string_eqb_eq in Case1 at 0
intro string_list2


1st goal of : any
lambda1 : lambda
string3 : string
string_list1 : string list
string2 : string
---------------------------------------
forall (string_list2:string list) (string1:string), is_mem_ta1 (string_list2) (string1) = true -> true = true

0 goal(s) more...

0 conjecture(s) more...
state_list
New Env

;;
Lemma List
forall (string1:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> true = true
End of Lemma List
=================================================
Progress: 244


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string2 : string
Case1 : string2 = string3
---------------------------------------
forall (string1:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> true = true

4 goal(s) more...

1 conjecture(s) more...
>>> assert forall (string1:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> true = true(rank : 0)


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = true

---------------------------------------
forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro string1(rank:1)
intro string_list1(rank:1)
=================================================
Progress: 245


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string2 : string
Case1 : string3 = string2
---------------------------------------
forall (string1:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> true = true

4 goal(s) more...

1 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string2 : string
Case1 : string3 = string2
string1 : string
---------------------------------------
forall (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> true = true

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro string_list2(rank:1)
=================================================
Progress: 246


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string2 : string
Case1 : string3 = string2
---------------------------------------
forall (string1:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> true = true

4 goal(s) more...

1 conjecture(s) more...
>>> intro string_list2(rank : 1)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string2 : string
Case1 : string3 = string2
string_list2 : string list
---------------------------------------
forall (string1:string), is_mem_ta1 (string_list2) (string1) = true -> true = true

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 247


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string_list2 : string list
string2 : string
Case1 : string_eq (string2) (string3) = true
---------------------------------------
forall (string1:string), is_mem_ta1 (string_list2) (string1) = true -> true = true

4 goal(s) more...

1 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string_list2 : string list
string2 : string
Case1 : string_eq (string2) (string3) = true
string1 : string
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true -> true = true

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
intro Cond1(rank:1)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 3(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
=================================================
Progress: 248


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string_list2 : string list
string2 : string
Case1 : string2 = string3
---------------------------------------
forall (string1:string), is_mem_ta1 (string_list2) (string1) = true -> true = true

4 goal(s) more...

1 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string_list2 : string list
string2 : string
Case1 : string2 = string3
string1 : string
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true -> true = true

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:1)
=================================================
Progress: 249


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string_list2 : string list
string2 : string
Case1 : string3 = string2
---------------------------------------
forall (string1:string), is_mem_ta1 (string_list2) (string1) = true -> true = true

4 goal(s) more...

1 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string_list2 : string list
string2 : string
Case1 : string3 = string2
string1 : string
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true -> true = true

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:1)
=================================================
Progress: 250


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string1 : string
string2 : string
Case1 : string_eq (string2) (string3) = true
---------------------------------------
forall (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> true = true

4 goal(s) more...

1 conjecture(s) more...
>>> intro string_list2(rank : 1)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string1 : string
string2 : string
Case1 : string_eq (string2) (string3) = true
string_list2 : string list
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true -> true = true

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
intro Cond1(rank:1)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 3(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
=================================================
Progress: 251


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string1 : string
string2 : string
Case1 : string2 = string3
---------------------------------------
forall (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> true = true

4 goal(s) more...

1 conjecture(s) more...
>>> intro string_list2(rank : 1)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string1 : string
string2 : string
Case1 : string2 = string3
string_list2 : string list
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true -> true = true

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:1)
=================================================
Progress: 252


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string1 : string
string2 : string
Case1 : string3 = string2
---------------------------------------
forall (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> true = true

4 goal(s) more...

1 conjecture(s) more...
>>> intro string_list2(rank : 1)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string1 : string
string2 : string
Case1 : string3 = string2
string_list2 : string list
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true -> true = true

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:1)
=================================================
Progress: 253


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string_list2 : string list
string1 : string
string2 : string
Case1 : string_eq (string2) (string3) = true
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true -> true = true

4 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string_list2 : string list
string1 : string
string2 : string
Case1 : string_eq (string2) (string3) = true
Cond1 : is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
true = true

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 254


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string_list2 : string list
string1 : string
string2 : string
Case1 : string_eq (string2) (string3) = true
Cond1 : is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
true = true

4 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string_list2 : string list
string1 : string
string2 : string
Case1 : string_eq (string2) (string3) = false
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true -> if string_eq (string1) (string3) then true else is_mem_ta1 (string_list2) (string3) = is_mem_ta1 (string_list2) (string3)

3 goal(s) more...

1 conjecture(s) more...
Deduplication: 2
Tactic List : 1
case string_eq (string1) (string3)(rank:0)
=================================================
Progress: 255


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string_list2 : string list
string1 : string
string2 : string
Case1 : string_eq (string2) (string3) = false
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true -> if string_eq (string1) (string3) then true else is_mem_ta1 (string_list2) (string3) = is_mem_ta1 (string_list2) (string3)

3 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string_list2 : string list
string1 : string
string2 : string
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true -> true = is_mem_ta1 (string_list2) (string3)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case2 at 0(rank:0)
intro Cond1(rank:1)
rewrite <- string_eqb_eq in Case2 at 0(rank:0)
=================================================
Progress: 256


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string_list2 : string list
string1 : string
string2 : string
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true -> true = is_mem_ta1 (string_list2) (string3)

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string_list2 : string list
string1 : string
string2 : string
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true -> true = is_mem_ta1 (string_list2) (string3)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
intro Cond1(rank:1)
rewrite Case2 in goal at 0(rank:2)
rewrite <- Case2 in goal at 0(rank:2)
=================================================
Progress: 257


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string_list2 : string list
string1 : string
string2 : string
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true -> true = is_mem_ta1 (string_list2) (string3)

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string_list2 : string list
string1 : string
string2 : string
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string1
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true -> true = is_mem_ta1 (string_list2) (string3)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
intro Cond1(rank:1)
rewrite Case2 in goal at 0(rank:2)
rewrite <- Case2 in goal at 0(rank:2)
=================================================
Progress: 258


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string_list2 : string list
string1 : string
string2 : string
Cond1 : is_mem_ta1 (string_list2) (string1) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = is_mem_ta1 (string_list2) (string3)

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Cond1 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string_list2 : string list
string1 : string
string2 : string
Cond1 : is_mem_ta1 (string_list2) (string1) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
is_mem_ta1 (string_list2) (string1) = is_mem_ta1 (string_list2) (string3)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string_list2
intro string1
intro string2
intro Cond1
case string_eq (string2) (string3)
reflexivity
case string_eq (string1) (string3)
rewrite <- Cond1 in goal at 0


1st goal of : any
lambda1 : lambda
string3 : string
string_list1 : string list
string1 : string
string2 : string
---------------------------------------
forall (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true->string_eq (string1) (string3) = true -> is_mem_ta1 (string_list2) (string1) = is_mem_ta1 (string_list2) (string3)

0 goal(s) more...

0 conjecture(s) more...
state_list
New Env

;;
Lemma List
forall (string1:string) (string3:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true->string_eq (string1) (string3) = true -> is_mem_ta1 (string_list2) (string1) = is_mem_ta1 (string_list2) (string3)
End of Lemma List
=================================================
Progress: 259


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string_list2 : string list
string1 : string
string2 : string
Cond1 : is_mem_ta1 (string_list2) (string1) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
true = is_mem_ta1 (string_list2) (string3)

4 goal(s) more...

1 conjecture(s) more...
>>> assert forall (string1:string) (string3:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true->string_eq (string1) (string3) = true -> is_mem_ta1 (string_list2) (string1) = is_mem_ta1 (string_list2) (string3)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true->string_eq (string1) (string2) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list1) (string2)

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true->string_eq (string1) (string2) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
intro string_list1(rank:0)
intro string1(rank:1)
intro string2(rank:1)
=================================================
Progress: 260


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true->string_eq (string1) (string2) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list1) (string2)

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true->string_eq (string1) (string2) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

2 conjecture(s) more...
>>> intro string_list1(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true->string_eq (string1) (string2) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
---------------------------------------
forall (string1:string) (string2:string), is_mem_ta1 (string_list1) (string1) = true->string_eq (string1) (string2) = true -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro string1(rank:1)
intro string2(rank:1)
=================================================
Progress: 261


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string_list2 : string list
string1 : string
string2 : string
Cond1 : is_mem_ta1 (string_list2) (string1) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
true = is_mem_ta1 (string_list2) (string3)

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Cond1 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string_list2 : string list
string1 : string
string2 : string
Cond1 : is_mem_ta1 (string_list2) (string1) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
is_mem_ta1 (string_list2) (string1) = is_mem_ta1 (string_list2) (string3)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite Case2 in goal at 0(rank:1)
rewrite <- Case2 in goal at 0(rank:1)
=================================================
Progress: 262


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string_list2 : string list
string1 : string
string2 : string
Cond1 : is_mem_ta1 (string_list2) (string1) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string1
---------------------------------------
true = is_mem_ta1 (string_list2) (string3)

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Cond1 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string_list2 : string list
string1 : string
string2 : string
Cond1 : is_mem_ta1 (string_list2) (string1) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string1
---------------------------------------
is_mem_ta1 (string_list2) (string1) = is_mem_ta1 (string_list2) (string3)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite Case2 in goal at 0(rank:1)
rewrite <- Case2 in goal at 0(rank:1)
=================================================
Progress: 263


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string2 : string
Case1 : string_eq (string2) (string3) = true
string1 : string
---------------------------------------
forall (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> true = true

4 goal(s) more...

1 conjecture(s) more...
>>> intro string_list2(rank : 1)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string2 : string
Case1 : string_eq (string2) (string3) = true
string1 : string
string_list2 : string list
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true -> true = true

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
intro Cond1(rank:1)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 3(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
=================================================
Progress: 264


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string2 : string
Case1 : string2 = string3
string1 : string
---------------------------------------
forall (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> true = true

4 goal(s) more...

1 conjecture(s) more...
>>> intro string_list2(rank : 1)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string2 : string
Case1 : string2 = string3
string1 : string
string_list2 : string list
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true -> true = true

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:1)
=================================================
Progress: 265


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string2 : string
Case1 : string3 = string2
string1 : string
---------------------------------------
forall (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> true = true

4 goal(s) more...

1 conjecture(s) more...
>>> intro string_list2(rank : 1)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string2 : string
Case1 : string3 = string2
string1 : string
string_list2 : string list
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true -> true = true

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:1)
=================================================
Progress: 266


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string_list2 : string list
string2 : string
Case1 : string_eq (string2) (string3) = true
string1 : string
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true -> true = true

4 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string_list2 : string list
string2 : string
Case1 : string_eq (string2) (string3) = true
string1 : string
Cond1 : is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
true = true

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 267


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string_list2 : string list
string2 : string
Case1 : string_eq (string2) (string3) = true
string1 : string
Cond1 : is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
true = true

4 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string_list2 : string list
string2 : string
Case1 : string_eq (string2) (string3) = false
---------------------------------------
forall (string1:string), is_mem_ta1 (string_list2) (string1) = true -> if string_eq (string1) (string3) then true else is_mem_ta1 (string_list2) (string3) = is_mem_ta1 (string_list2) (string3)

3 goal(s) more...

1 conjecture(s) more...
Deduplication: 6
Tactic List : 0
previous tactics
simpl in goal
intro string_list2
intro string2
case string_eq (string2) (string3)
intro string1
intro Cond1
reflexivity


1st goal of : any
lambda1 : lambda
string3 : string
string_list1 : string list
string2 : string
---------------------------------------
forall (string_list2:string list) (string1:string), is_mem_ta1 (string_list2) (string1) = true -> if string_eq (string1) (string3) then true else is_mem_ta1 (string_list2) (string3) = is_mem_ta1 (string_list2) (string3)

0 goal(s) more...

0 conjecture(s) more...
state_list
New Env

;;
Lemma List
forall (string1:string) (string3:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> if string_eq (string1) (string3) then true else is_mem_ta1 (string_list2) (string3) = is_mem_ta1 (string_list2) (string3)
End of Lemma List
=================================================
Progress: 268


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string_list2 : string list
string2 : string
Case1 : string_eq (string2) (string3) = true
string1 : string
Cond1 : is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
true = true

4 goal(s) more...

1 conjecture(s) more...
>>> assert forall (string1:string) (string3:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> if string_eq (string1) (string3) then true else is_mem_ta1 (string_list2) (string3) = is_mem_ta1 (string_list2) (string3)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (string_list1) (string2)

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
intro string_list1(rank:0)
intro string1(rank:1)
intro string2(rank:1)
=================================================
Progress: 269


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (string_list1) (string2)

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

2 conjecture(s) more...
>>> intro string_list1(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
---------------------------------------
forall (string1:string) (string2:string), is_mem_ta1 (string_list1) (string1) = true -> if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro string1(rank:1)
intro string2(rank:1)
=================================================
Progress: 270


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string1 : string
string2 : string
Case1 : string_eq (string2) (string3) = true
string_list2 : string list
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true -> true = true

4 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string1 : string
string2 : string
Case1 : string_eq (string2) (string3) = true
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
true = true

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 271


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string1 : string
string2 : string
Case1 : string_eq (string2) (string3) = true
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
true = true

4 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string1 : string
string2 : string
Case1 : string_eq (string2) (string3) = false
---------------------------------------
forall (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> if string_eq (string1) (string3) then true else is_mem_ta1 (string_list2) (string3) = is_mem_ta1 (string_list2) (string3)

3 goal(s) more...

1 conjecture(s) more...
Deduplication: 6
Tactic List : 1
case string_eq (string1) (string3)(rank:0)
=================================================
Progress: 272


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string1 : string
string2 : string
Case1 : string_eq (string2) (string3) = false
---------------------------------------
forall (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> if string_eq (string1) (string3) then true else is_mem_ta1 (string_list2) (string3) = is_mem_ta1 (string_list2) (string3)

3 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string1) (string3)(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string1 : string
string2 : string
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
forall (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> true = is_mem_ta1 (string_list2) (string3)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
intro string_list2(rank:0)
rewrite string_eqb_eq in Case2 at 0(rank:0)
rewrite <- string_eqb_eq in Case2 at 0(rank:0)
=================================================
Progress: 273


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string1 : string
string2 : string
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
forall (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> true = is_mem_ta1 (string_list2) (string3)

4 goal(s) more...

1 conjecture(s) more...
>>> intro string_list2(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string1 : string
string2 : string
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
string_list2 : string list
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true -> true = is_mem_ta1 (string_list2) (string3)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 6
rewrite string_eqb_eq in Case2 at 0(rank:0)
rewrite <- string_eqb_eq in Case2 at 0(rank:0)
rewrite <- Case2 in goal at 2(rank:1)
rewrite <- Case2 in goal at 0(rank:1)
rewrite <- Case2 in goal at 1(rank:2)
intro Cond1(rank:1)
=================================================
Progress: 274


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string1 : string
string2 : string
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
forall (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> true = is_mem_ta1 (string_list2) (string3)

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string1 : string
string2 : string
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
forall (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> true = is_mem_ta1 (string_list2) (string3)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite Case2 in goal at 0(rank:2)
rewrite <- Case2 in goal at 0(rank:2)
=================================================
Progress: 275


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string1 : string
string2 : string
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
forall (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> true = is_mem_ta1 (string_list2) (string3)

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string1 : string
string2 : string
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string1
---------------------------------------
forall (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> true = is_mem_ta1 (string_list2) (string3)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite Case2 in goal at 0(rank:2)
rewrite <- Case2 in goal at 0(rank:2)
=================================================
Progress: 276


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string1 : string
string2 : string
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
string_list2 : string list
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true -> true = is_mem_ta1 (string_list2) (string3)

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string1 : string
string2 : string
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
string_list2 : string list
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true -> true = is_mem_ta1 (string_list2) (string3)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
intro Cond1(rank:1)
rewrite Case2 in goal at 0(rank:2)
rewrite <- Case2 in goal at 0(rank:2)
=================================================
Progress: 277


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string1 : string
string2 : string
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
string_list2 : string list
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true -> true = is_mem_ta1 (string_list2) (string3)

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string1 : string
string2 : string
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string1
string_list2 : string list
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true -> true = is_mem_ta1 (string_list2) (string3)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
intro Cond1(rank:1)
rewrite Case2 in goal at 0(rank:2)
rewrite <- Case2 in goal at 0(rank:2)
=================================================
Progress: 278


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string_list2 : string list
string1 : string
string2 : string
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true -> true = is_mem_ta1 (string_list2) (string3)

4 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string_list2 : string list
string1 : string
string2 : string
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = true
Cond1 : is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list2) (string3)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- Case2 in goal at 0(rank:1)
rewrite <- Cond1 in goal at 0(rank:1)
=================================================
Progress: 279


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string_list2 : string list
string1 : string
string2 : string
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true -> true = is_mem_ta1 (string_list2) (string3)

4 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string_list2 : string list
string1 : string
string2 : string
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
Cond1 : is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list2) (string3)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- Cond1 in goal at 0(rank:1)
rewrite <- Case2 in goal at 0(rank:2)
=================================================
Progress: 280


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string_list2 : string list
string1 : string
string2 : string
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string1
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true -> true = is_mem_ta1 (string_list2) (string3)

4 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string_list2 : string list
string1 : string
string2 : string
Case1 : string_eq (string2) (string3) = false
Case2 : string3 = string1
Cond1 : is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list2) (string3)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- Cond1 in goal at 0(rank:1)
rewrite Case2 in goal at 0(rank:2)
=================================================
Progress: 281


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string_list2 : string list
string1 : string
string2 : string
Cond1 : is_mem_ta1 (string_list2) (string1) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
is_mem_ta1 (string_list2) (string1) = is_mem_ta1 (string_list2) (string3)

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case2 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string_list2 : string list
string1 : string
string2 : string
Cond1 : is_mem_ta1 (string_list2) (string1) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
is_mem_ta1 (string_list2) (string3) = is_mem_ta1 (string_list2) (string3)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 282


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string_list2 : string list
string1 : string
string2 : string
Cond1 : is_mem_ta1 (string_list2) (string1) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string1 = string3
---------------------------------------
is_mem_ta1 (string_list2) (string3) = is_mem_ta1 (string_list2) (string3)

4 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string_list2 : string list
string1 : string
string2 : string
Cond1 : is_mem_ta1 (string_list2) (string1) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
is_mem_ta1 (string_list2) (string3) = is_mem_ta1 (string_list2) (string3)

3 goal(s) more...

1 conjecture(s) more...
Deduplication: 9
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 283


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = (Nil)
string_list2 : string list
string1 : string
string2 : string
Cond1 : is_mem_ta1 (string_list2) (string1) = true
Case1 : string_eq (string2) (string3) = false
Case2 : string_eq (string1) (string3) = false
---------------------------------------
is_mem_ta1 (string_list2) (string3) = is_mem_ta1 (string_list2) (string3)

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
---------------------------------------
forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 ((string4::string_list3)) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 ((string4::string_list3)) (string2) (string_list2)) (string3)

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 49
Tactic List : 2
simpl in goal(rank:0)
rewrite <- rhs_lemma5 in goal at 2(rank:2)
=================================================
Progress: 284


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
---------------------------------------
forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 ((string4::string_list3)) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 ((string4::string_list3)) (string2) (string_list2)) (string3)

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
---------------------------------------
forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> if string_eq (string4) (string3) then true else is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = if string_eq (string4) (string3) then true else is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
intro string1(rank:1)
intro string_list2(rank:1)
rewrite IH1 in goal at 0(rank:1)
case string_eq (string4) (string3)(rank:1)
intro string2(rank:1)
=================================================
Progress: 285


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
---------------------------------------
forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> if string_eq (string4) (string3) then true else is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = if string_eq (string4) (string3) then true else is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)

2 goal(s) more...

1 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
string1 : string
---------------------------------------
forall (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> if string_eq (string4) (string3) then true else is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = if string_eq (string4) (string3) then true else is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
intro string2(rank:1)
intro string_list2(rank:1)
rewrite IH1 in goal at 0(rank:1)
case string_eq (string4) (string3)(rank:1)
=================================================
Progress: 286


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
---------------------------------------
forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> if string_eq (string4) (string3) then true else is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = if string_eq (string4) (string3) then true else is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)

2 goal(s) more...

1 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
string2 : string
---------------------------------------
forall (string1:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> if string_eq (string4) (string3) then true else is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = if string_eq (string4) (string3) then true else is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
intro string_list2(rank:1)
rewrite IH1 in goal at 0(rank:1)
case string_eq (string4) (string3)(rank:1)
=================================================
Progress: 287


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
---------------------------------------
forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> if string_eq (string4) (string3) then true else is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = if string_eq (string4) (string3) then true else is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)

2 goal(s) more...

1 conjecture(s) more...
>>> intro string_list2(rank : 1)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
string_list2 : string list
---------------------------------------
forall (string1:string) (string2:string), is_mem_ta1 (string_list2) (string1) = true -> if string_eq (string4) (string3) then true else is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = if string_eq (string4) (string3) then true else is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:1)
case string_eq (string4) (string3)(rank:1)
=================================================
Progress: 288


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
---------------------------------------
forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> if string_eq (string4) (string3) then true else is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = if string_eq (string4) (string3) then true else is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
---------------------------------------
forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> if string_eq (string4) (string3) then true else is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3) = if string_eq (string4) (string3) then true else is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
intro string1(rank:1)
intro string2(rank:1)
intro string_list2(rank:1)
case string_eq (string4) (string3)(rank:1)
=================================================
Progress: 289


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
---------------------------------------
forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> if string_eq (string4) (string3) then true else is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = if string_eq (string4) (string3) then true else is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string4) (string3)(rank : 1)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
Case1 : string_eq (string4) (string3) = true
---------------------------------------
forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> true = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
rewrite string_eqb_eq in Case1 at 0(rank:0)
intro string_list2(rank:1)
rewrite <- string_eqb_eq in Case1 at 0(rank:0)
intro string1(rank:1)
intro string2(rank:1)
=================================================
Progress: 290


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
Case1 : string_eq (string4) (string3) = true
---------------------------------------
forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> true = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
Case1 : string4 = string3
---------------------------------------
forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> true = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
intro string1(rank:1)
intro string2(rank:1)
intro string_list2(rank:1)
=================================================
Progress: 291


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
Case1 : string_eq (string4) (string3) = true
---------------------------------------
forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> true = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
Case1 : string3 = string4
---------------------------------------
forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> true = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
intro string1(rank:1)
intro string2(rank:1)
intro string_list2(rank:1)
=================================================
Progress: 292


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
string1 : string
---------------------------------------
forall (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> if string_eq (string4) (string3) then true else is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = if string_eq (string4) (string3) then true else is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)

2 goal(s) more...

1 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
string1 : string
string2 : string
---------------------------------------
forall (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> if string_eq (string4) (string3) then true else is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = if string_eq (string4) (string3) then true else is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
intro string_list2(rank:1)
rewrite IH1 in goal at 0(rank:1)
case string_eq (string4) (string3)(rank:1)
=================================================
Progress: 293


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
string1 : string
---------------------------------------
forall (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> if string_eq (string4) (string3) then true else is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = if string_eq (string4) (string3) then true else is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)

2 goal(s) more...

1 conjecture(s) more...
>>> intro string_list2(rank : 1)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
string1 : string
string_list2 : string list
---------------------------------------
forall (string2:string), is_mem_ta1 (string_list2) (string1) = true -> if string_eq (string4) (string3) then true else is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = if string_eq (string4) (string3) then true else is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:1)
case string_eq (string4) (string3)(rank:1)
=================================================
Progress: 294


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
string1 : string
---------------------------------------
forall (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> if string_eq (string4) (string3) then true else is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = if string_eq (string4) (string3) then true else is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
string1 : string
---------------------------------------
forall (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> if string_eq (string4) (string3) then true else is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3) = if string_eq (string4) (string3) then true else is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
intro string2(rank:1)
intro string_list2(rank:1)
case string_eq (string4) (string3)(rank:1)
=================================================
Progress: 295


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
string1 : string
---------------------------------------
forall (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> if string_eq (string4) (string3) then true else is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = if string_eq (string4) (string3) then true else is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string4) (string3)(rank : 1)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
string1 : string
Case1 : string_eq (string4) (string3) = true
---------------------------------------
forall (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> true = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
rewrite string_eqb_eq in Case1 at 0(rank:0)
rewrite <- string_eqb_eq in Case1 at 0(rank:0)
intro string2(rank:1)
intro string_list2(rank:1)
=================================================
Progress: 296


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
string1 : string
Case1 : string_eq (string4) (string3) = true
---------------------------------------
forall (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> true = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
string1 : string
Case1 : string4 = string3
---------------------------------------
forall (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> true = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
intro string2(rank:1)
intro string_list2(rank:1)
=================================================
Progress: 297


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
string1 : string
Case1 : string_eq (string4) (string3) = true
---------------------------------------
forall (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> true = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
string1 : string
Case1 : string3 = string4
---------------------------------------
forall (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> true = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
intro string2(rank:1)
intro string_list2(rank:1)
=================================================
Progress: 298


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
string2 : string
---------------------------------------
forall (string1:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> if string_eq (string4) (string3) then true else is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = if string_eq (string4) (string3) then true else is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)

2 goal(s) more...

1 conjecture(s) more...
>>> intro string_list2(rank : 1)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
string2 : string
string_list2 : string list
---------------------------------------
forall (string1:string), is_mem_ta1 (string_list2) (string1) = true -> if string_eq (string4) (string3) then true else is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = if string_eq (string4) (string3) then true else is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:1)
case string_eq (string4) (string3)(rank:1)
=================================================
Progress: 299


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
string2 : string
---------------------------------------
forall (string1:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> if string_eq (string4) (string3) then true else is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = if string_eq (string4) (string3) then true else is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
string2 : string
---------------------------------------
forall (string1:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> if string_eq (string4) (string3) then true else is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3) = if string_eq (string4) (string3) then true else is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
intro string1(rank:1)
intro string_list2(rank:1)
case string_eq (string4) (string3)(rank:1)
=================================================
Progress: 300


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
string2 : string
---------------------------------------
forall (string1:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> if string_eq (string4) (string3) then true else is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = if string_eq (string4) (string3) then true else is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string4) (string3)(rank : 1)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
string2 : string
Case1 : string_eq (string4) (string3) = true
---------------------------------------
forall (string1:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> true = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
rewrite string_eqb_eq in Case1 at 0(rank:0)
rewrite <- string_eqb_eq in Case1 at 0(rank:0)
intro string1(rank:1)
intro string_list2(rank:1)
=================================================
Progress: 301


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
string2 : string
Case1 : string_eq (string4) (string3) = true
---------------------------------------
forall (string1:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> true = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
string2 : string
Case1 : string4 = string3
---------------------------------------
forall (string1:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> true = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
intro string1(rank:1)
intro string_list2(rank:1)
=================================================
Progress: 302


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
string2 : string
Case1 : string_eq (string4) (string3) = true
---------------------------------------
forall (string1:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> true = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
string2 : string
Case1 : string3 = string4
---------------------------------------
forall (string1:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> true = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
intro string1(rank:1)
intro string_list2(rank:1)
=================================================
Progress: 303


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
string_list2 : string list
---------------------------------------
forall (string1:string) (string2:string), is_mem_ta1 (string_list2) (string1) = true -> if string_eq (string4) (string3) then true else is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = if string_eq (string4) (string3) then true else is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
string_list2 : string list
---------------------------------------
forall (string1:string) (string2:string), is_mem_ta1 (string_list2) (string1) = true -> if string_eq (string4) (string3) then true else is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3) = if string_eq (string4) (string3) then true else is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
intro string1(rank:1)
intro string2(rank:1)
case string_eq (string4) (string3)(rank:1)
=================================================
Progress: 304


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
string_list2 : string list
---------------------------------------
forall (string1:string) (string2:string), is_mem_ta1 (string_list2) (string1) = true -> if string_eq (string4) (string3) then true else is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = if string_eq (string4) (string3) then true else is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string4) (string3)(rank : 1)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
string_list2 : string list
Case1 : string_eq (string4) (string3) = true
---------------------------------------
forall (string1:string) (string2:string), is_mem_ta1 (string_list2) (string1) = true -> true = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
rewrite string_eqb_eq in Case1 at 0(rank:0)
rewrite <- string_eqb_eq in Case1 at 0(rank:0)
intro string1(rank:1)
intro string2(rank:1)
=================================================
Progress: 305


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
string_list2 : string list
Case1 : string_eq (string4) (string3) = true
---------------------------------------
forall (string1:string) (string2:string), is_mem_ta1 (string_list2) (string1) = true -> true = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
string_list2 : string list
Case1 : string4 = string3
---------------------------------------
forall (string1:string) (string2:string), is_mem_ta1 (string_list2) (string1) = true -> true = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
intro string1(rank:1)
intro string2(rank:1)
=================================================
Progress: 306


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
string_list2 : string list
Case1 : string_eq (string4) (string3) = true
---------------------------------------
forall (string1:string) (string2:string), is_mem_ta1 (string_list2) (string1) = true -> true = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
string_list2 : string list
Case1 : string3 = string4
---------------------------------------
forall (string1:string) (string2:string), is_mem_ta1 (string_list2) (string1) = true -> true = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
intro string1(rank:1)
intro string2(rank:1)
=================================================
Progress: 307


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
string1 : string
string2 : string
---------------------------------------
forall (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> if string_eq (string4) (string3) then true else is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = if string_eq (string4) (string3) then true else is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)

2 goal(s) more...

1 conjecture(s) more...
>>> intro string_list2(rank : 1)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
string1 : string
string2 : string
string_list2 : string list
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true -> if string_eq (string4) (string3) then true else is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = if string_eq (string4) (string3) then true else is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
intro Cond1(rank:1)
rewrite IH1 in goal at 0(rank:1)
case string_eq (string4) (string3)(rank:1)
=================================================
Progress: 308


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
string1 : string
string2 : string
---------------------------------------
forall (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> if string_eq (string4) (string3) then true else is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = if string_eq (string4) (string3) then true else is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
string1 : string
string2 : string
---------------------------------------
forall (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> if string_eq (string4) (string3) then true else is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3) = if string_eq (string4) (string3) then true else is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
intro string_list2(rank:1)
case string_eq (string4) (string3)(rank:1)
=================================================
Progress: 309


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
string1 : string
string2 : string
---------------------------------------
forall (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> if string_eq (string4) (string3) then true else is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = if string_eq (string4) (string3) then true else is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string4) (string3)(rank : 1)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
string1 : string
string2 : string
Case1 : string_eq (string4) (string3) = true
---------------------------------------
forall (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> true = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case1 at 0(rank:0)
intro string_list2(rank:1)
rewrite <- string_eqb_eq in Case1 at 0(rank:0)
=================================================
Progress: 310


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
string1 : string
string2 : string
Case1 : string_eq (string4) (string3) = true
---------------------------------------
forall (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> true = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
string1 : string
string2 : string
Case1 : string4 = string3
---------------------------------------
forall (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> true = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro string_list2(rank:1)
=================================================
Progress: 311


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
string1 : string
string2 : string
Case1 : string_eq (string4) (string3) = true
---------------------------------------
forall (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> true = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
string1 : string
string2 : string
Case1 : string3 = string4
---------------------------------------
forall (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> true = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro string_list2(rank:1)
=================================================
Progress: 312


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
string1 : string
string_list2 : string list
---------------------------------------
forall (string2:string), is_mem_ta1 (string_list2) (string1) = true -> if string_eq (string4) (string3) then true else is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = if string_eq (string4) (string3) then true else is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
string1 : string
string_list2 : string list
---------------------------------------
forall (string2:string), is_mem_ta1 (string_list2) (string1) = true -> if string_eq (string4) (string3) then true else is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3) = if string_eq (string4) (string3) then true else is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
intro string2(rank:1)
case string_eq (string4) (string3)(rank:1)
=================================================
Progress: 313


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
string1 : string
string_list2 : string list
---------------------------------------
forall (string2:string), is_mem_ta1 (string_list2) (string1) = true -> if string_eq (string4) (string3) then true else is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = if string_eq (string4) (string3) then true else is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string4) (string3)(rank : 1)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
string1 : string
string_list2 : string list
Case1 : string_eq (string4) (string3) = true
---------------------------------------
forall (string2:string), is_mem_ta1 (string_list2) (string1) = true -> true = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case1 at 0(rank:0)
intro string2(rank:1)
rewrite <- string_eqb_eq in Case1 at 0(rank:0)
=================================================
Progress: 314


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
string1 : string
string_list2 : string list
Case1 : string_eq (string4) (string3) = true
---------------------------------------
forall (string2:string), is_mem_ta1 (string_list2) (string1) = true -> true = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
string1 : string
string_list2 : string list
Case1 : string4 = string3
---------------------------------------
forall (string2:string), is_mem_ta1 (string_list2) (string1) = true -> true = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro string2(rank:1)
=================================================
Progress: 315


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
string1 : string
string_list2 : string list
Case1 : string_eq (string4) (string3) = true
---------------------------------------
forall (string2:string), is_mem_ta1 (string_list2) (string1) = true -> true = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
string1 : string
string_list2 : string list
Case1 : string3 = string4
---------------------------------------
forall (string2:string), is_mem_ta1 (string_list2) (string1) = true -> true = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro string2(rank:1)
=================================================
Progress: 316


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
string2 : string
string_list2 : string list
---------------------------------------
forall (string1:string), is_mem_ta1 (string_list2) (string1) = true -> if string_eq (string4) (string3) then true else is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = if string_eq (string4) (string3) then true else is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
string2 : string
string_list2 : string list
---------------------------------------
forall (string1:string), is_mem_ta1 (string_list2) (string1) = true -> if string_eq (string4) (string3) then true else is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3) = if string_eq (string4) (string3) then true else is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
intro string1(rank:1)
case string_eq (string4) (string3)(rank:1)
=================================================
Progress: 317


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
string2 : string
string_list2 : string list
---------------------------------------
forall (string1:string), is_mem_ta1 (string_list2) (string1) = true -> if string_eq (string4) (string3) then true else is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = if string_eq (string4) (string3) then true else is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string4) (string3)(rank : 1)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
string2 : string
string_list2 : string list
Case1 : string_eq (string4) (string3) = true
---------------------------------------
forall (string1:string), is_mem_ta1 (string_list2) (string1) = true -> true = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case1 at 0(rank:0)
intro string1(rank:1)
rewrite <- string_eqb_eq in Case1 at 0(rank:0)
=================================================
Progress: 318


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
string2 : string
string_list2 : string list
Case1 : string_eq (string4) (string3) = true
---------------------------------------
forall (string1:string), is_mem_ta1 (string_list2) (string1) = true -> true = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
string2 : string
string_list2 : string list
Case1 : string4 = string3
---------------------------------------
forall (string1:string), is_mem_ta1 (string_list2) (string1) = true -> true = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro string1(rank:1)
=================================================
Progress: 319


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
string2 : string
string_list2 : string list
Case1 : string_eq (string4) (string3) = true
---------------------------------------
forall (string1:string), is_mem_ta1 (string_list2) (string1) = true -> true = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
string2 : string
string_list2 : string list
Case1 : string3 = string4
---------------------------------------
forall (string1:string), is_mem_ta1 (string_list2) (string1) = true -> true = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro string1(rank:1)
=================================================
Progress: 320


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
string1 : string
string2 : string
string_list2 : string list
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true -> if string_eq (string4) (string3) then true else is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = if string_eq (string4) (string3) then true else is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
string1 : string
string2 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if string_eq (string4) (string3) then true else is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = if string_eq (string4) (string3) then true else is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
rewrite IH1 in goal at 0(rank:1)
rewrite <- Cond1 in goal at 0(rank:2)
case string_eq (string4) (string3)(rank:1)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
=================================================
Progress: 321


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
string1 : string
string2 : string
string_list2 : string list
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true -> if string_eq (string4) (string3) then true else is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = if string_eq (string4) (string3) then true else is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
string1 : string
string2 : string
string_list2 : string list
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true -> if string_eq (string4) (string3) then true else is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3) = if string_eq (string4) (string3) then true else is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
intro Cond1(rank:1)
case string_eq (string4) (string3)(rank:1)
=================================================
Progress: 322


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
string1 : string
string2 : string
string_list2 : string list
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true -> if string_eq (string4) (string3) then true else is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = if string_eq (string4) (string3) then true else is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string4) (string3)(rank : 1)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
string1 : string
string2 : string
string_list2 : string list
Case1 : string_eq (string4) (string3) = true
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true -> true = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case1 at 0(rank:0)
intro Cond1(rank:1)
rewrite <- string_eqb_eq in Case1 at 0(rank:0)
=================================================
Progress: 323


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
string1 : string
string2 : string
string_list2 : string list
Case1 : string_eq (string4) (string3) = true
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true -> true = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
string1 : string
string2 : string
string_list2 : string list
Case1 : string4 = string3
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true -> true = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:1)
=================================================
Progress: 324


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
string1 : string
string2 : string
string_list2 : string list
Case1 : string_eq (string4) (string3) = true
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true -> true = true

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
string1 : string
string2 : string
string_list2 : string list
Case1 : string3 = string4
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true -> true = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:1)
=================================================
Progress: 325


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
string1 : string
string2 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if string_eq (string4) (string3) then true else is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = if string_eq (string4) (string3) then true else is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
string1 : string
string2 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if string_eq (string4) (string3) then true else is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3) = if string_eq (string4) (string3) then true else is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 326


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
string1 : string
string2 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if string_eq (string4) (string3) then true else is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3) = if string_eq (string4) (string3) then true else is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
string1 : string
string2 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 2
rewrite Cond1 in goal at 0(rank:1)
rewrite <- Cond1 in goal at 0(rank:1)
=================================================
Progress: 327


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
string1 : string
string2 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if string_eq (string4) (string3) then true else is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = if string_eq (string4) (string3) then true else is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)

2 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string4) (string3)(rank : 1)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
string1 : string
string2 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
Case1 : string_eq (string4) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 328


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
string1 : string
string2 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
Case1 : string_eq (string4) (string3) = true
---------------------------------------
true = true

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
string1 : string
string2 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
Case1 : string_eq (string4) (string3) = false
---------------------------------------
is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite IH1 in goal at 0(rank:1)
=================================================
Progress: 329


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
string1 : string
string2 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
is_mem_ta1 (string_list2) (string1) = true

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
string1 : string
string2 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
true = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 330


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
string4 : string
string_list3 : string list
IH1 : forall (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> is_mem_ta1 (mk_lhs1 (string_list3) (string2) (string1) (string_list2)) (string3) = is_mem_ta1 (mk_rhs1 (string_list3) (string2) (string_list2)) (string3)
Inductive1 : string_list1 = (string4::string_list3)
string1 : string
string2 : string
string_list2 : string list
Cond1 : is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
true = true

2 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = P (string3) (lambda2)
---------------------------------------
forall (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (P (string3) (lambda2)) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (P (string3) (lambda2)) (mk_rhs1 (string_list1) (string2) (string_list2))

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 70
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 331


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = P (string3) (lambda2)
---------------------------------------
forall (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (P (string3) (lambda2)) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (P (string3) (lambda2)) (mk_rhs1 (string_list1) (string2) (string_list2))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda1) (mk_rhs1 (string_list1) (string2) (string_list2))
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string2) (string1) (string_list2)) = sub_check_ta1 (lambda2) (mk_rhs1 (string_list1) (string2) (string_list2))
Inductive1 : lambda1 = P (string3) (lambda2)
---------------------------------------
forall (string_list1:string list) (string1:string) (string2:string) (string_list2:string list), is_mem_ta1 (string_list2) (string1) = true -> sub_check_ta1 (lambda2) ((string3::mk_lhs1 (string_list1) (string2) (string1) (string_list2))) = sub_check_ta1 (lambda2) ((string3::mk_rhs1 (string_list1) (string2) (string_list2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 8
intro string_list1(rank:2)
induction string_list1(rank:2)
rewrite <- rhs_lemma5 in goal at 2(rank:2)
rewrite <- rhs_lemma6 in goal at 0(rank:2)
intro string1(rank:3)
intro string2(rank:3)
rewrite <- lhs_lemma4 in goal at 0(rank:2)
intro string_list2(rank:3)
=================================================
Progress: 332


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string2::string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string2)(rank:0)
=================================================
Progress: 333


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string2::string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
Case2 : is_mem_ta1 (string_list1) (string2) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite Case1 in goal at 0
case is_mem_ta1 (string_list1) (string2)
state_list
New Env

;;
Lemma List
forall (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string2) = true -> true = is_mem_ta1 (string_list1) (string2)
End of Lemma List
=================================================
Progress: 334


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string2::string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> assert forall (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string2) = true -> true = is_mem_ta1 (string_list1) (string2)(rank : 0)


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)

---------------------------------------
forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
intro string_list1(rank:0)
intro string1(rank:1)
=================================================
Progress: 335


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)

---------------------------------------
forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> intro string_list1(rank : 0)


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
---------------------------------------
forall (string1:string), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro string1(rank:1)
=================================================
Progress: 336


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)

---------------------------------------
forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)
string1 : string
---------------------------------------
forall (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
state_list
New Env

;;
Lemma List
forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)
End of Lemma List
=================================================
Progress: 337


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)

---------------------------------------
forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> assert forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)

---------------------------------------
forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro string_list1(rank:0)
intro string1(rank:1)
=================================================
Progress: 338


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)

---------------------------------------
forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro string_list1(rank : 0)


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
---------------------------------------
forall (string1:string), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:1)
=================================================
Progress: 339


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
---------------------------------------
forall (string1:string), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string1 : string
---------------------------------------
is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:1)
=================================================
Progress: 340


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string1 : string
---------------------------------------
is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string1 : string
Cond1 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite Cond1 in goal at 0(rank:1)
rewrite <- Cond1 in goal at 0(rank:1)
=================================================
Progress: 341


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string1 : string
Cond1 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string1 : string
Cond1 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = true

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 342


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> true = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
string1 : string
Cond1 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = true

0 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string2::string_list1))

3 goal(s) more...

0 conjecture(s) more...
Deduplication: 3
Tactic List : 2
rewrite <- lemma3 in goal at 0(rank:1)
case is_mem_ta1 (string_list1) (string2)(rank:1)
=================================================
Progress: 343


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string2::string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- lemma3 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = if true then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string2::string_list1))

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 344


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = if true then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string2::string_list1))

4 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite <- lemma3 in goal at 0(rank:1)
rewrite <- Case1 in goal at 0(rank:2)
=================================================
Progress: 345


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string2::string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string2)(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
Case2 : is_mem_ta1 (string_list1) (string2) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 346


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- lemma3 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 347


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list1) (string2) = true

4 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite <- Case1 in goal at 0(rank:2)
=================================================
Progress: 348


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 1(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string2)(rank:0)
=================================================
Progress: 349


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
Case2 : is_mem_ta1 (string_list1) (string2) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 350


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 2(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string2::string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 351


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string2::string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 352


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string1)) ((string1::string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 353


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string1)) ((string1::string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 0
case is_mem_ta1 (string_list1) (string1)
state_list
=================================================
Progress: 354


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1
state_list
New Env

;;
Lemma List
forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))
End of Lemma List
=================================================
Progress: 355


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
intro string1(rank:1)
intro string2(rank:1)
intro string_list1(rank:1)
=================================================
Progress: 356


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

0 goal(s) more...

1 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))
string1 : string
---------------------------------------
forall (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
intro string2(rank:1)
intro string_list1(rank:1)
=================================================
Progress: 357


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

0 goal(s) more...

1 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))
string2 : string
---------------------------------------
forall (string1:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro string_list1(rank:1)
=================================================
Progress: 358


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

0 goal(s) more...

1 conjecture(s) more...
>>> intro string_list1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))
string_list1 : string list
---------------------------------------
forall (string1:string) (string2:string), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
state_list
=================================================
Progress: 359


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))
string1 : string
---------------------------------------
forall (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

0 goal(s) more...

1 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))
string1 : string
string2 : string
---------------------------------------
forall (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro string_list1(rank:1)
=================================================
Progress: 360


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))
string1 : string
---------------------------------------
forall (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

0 goal(s) more...

1 conjecture(s) more...
>>> intro string_list1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))
string1 : string
string_list1 : string list
---------------------------------------
forall (string2:string), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 361


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))
string1 : string
string_list1 : string list
---------------------------------------
forall (string2:string), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

0 goal(s) more...

1 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
forall (string2:string), string1 = string2 -> true = is_mem_ta1 (string_list1) (string1)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro string2(rank:1)
=================================================
Progress: 362


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))
string2 : string
---------------------------------------
forall (string1:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

0 goal(s) more...

1 conjecture(s) more...
>>> intro string_list1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))
string2 : string
string_list1 : string list
---------------------------------------
forall (string1:string), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
state_list
=================================================
Progress: 363


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))
string1 : string
string2 : string
---------------------------------------
forall (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

0 goal(s) more...

1 conjecture(s) more...
>>> intro string_list1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))
string1 : string
string2 : string
string_list1 : string list
---------------------------------------
string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
intro Cond1(rank:1)
case is_mem_ta1 (string_list1) (string1)(rank:1)
=================================================
Progress: 364


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))
string1 : string
string2 : string
string_list1 : string list
---------------------------------------
string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

0 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))
string1 : string
string2 : string
string_list1 : string list
Cond1 : string1 = string2
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 6
case is_mem_ta1 (string_list1) (string1)(rank:1)
rewrite Cond1 in goal at 0(rank:2)
rewrite Cond1 in goal at 1(rank:2)
rewrite Cond1 in goal at 2(rank:2)
rewrite Cond1 in goal at 3(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 365


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))
string1 : string
string2 : string
string_list1 : string list
---------------------------------------
string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

0 goal(s) more...

1 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))
string1 : string
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
string1 = string2 -> true = is_mem_ta1 (string_list1) (string1)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:1)
=================================================
Progress: 366


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))
string1 : string
string2 : string
string_list1 : string list
Cond1 : string1 = string2
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

0 goal(s) more...

1 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))
string1 : string
string2 : string
string_list1 : string list
Cond1 : string1 = string2
Case1 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string1)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Cond1 in goal at 0(rank:2)
=================================================
Progress: 367


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
forall (string2:string), string1 = string2 -> true = is_mem_ta1 (string_list1) (string1)

1 goal(s) more...

1 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
---------------------------------------
string1 = string2 -> true = is_mem_ta1 (string_list1) (string1)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
intro Cond1(rank:1)
rewrite Case1 in goal at 0(rank:1)
rewrite <- Case1 in goal at 0(rank:1)
=================================================
Progress: 368


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))
string1 : string
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
string1 = string2 -> true = is_mem_ta1 (string_list1) (string1)

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))
string1 : string
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
Cond1 : string1 = string2
---------------------------------------
true = is_mem_ta1 (string_list1) (string1)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite Case1 in goal at 0(rank:1)
rewrite Cond1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 0(rank:1)
=================================================
Progress: 369


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
---------------------------------------
string1 = string2 -> true = is_mem_ta1 (string_list1) (string1)

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
Cond1 : string1 = string2
---------------------------------------
true = is_mem_ta1 (string_list1) (string1)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite Case1 in goal at 0(rank:1)
rewrite Cond1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 0(rank:1)
=================================================
Progress: 370


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
---------------------------------------
string1 = string2 -> true = is_mem_ta1 (string_list1) (string1)

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
---------------------------------------
string1 = string2 -> true = true

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
state_list
New Env

;;
Lemma List
forall (string1:string) (string2:string), string1 = string2 -> true = true
End of Lemma List
=================================================
Progress: 371


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
---------------------------------------
string1 = string2 -> true = is_mem_ta1 (string_list1) (string1)

1 goal(s) more...

1 conjecture(s) more...
>>> assert forall (string1:string) (string2:string), string1 = string2 -> true = true(rank : 0)


1st goal of : forall (string1:string) (string2:string), string1 = string2 -> true = true

---------------------------------------
forall (string1:string) (string2:string), string1 = string2 -> true = true

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro string1(rank:1)
intro string2(rank:1)
=================================================
Progress: 372


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
---------------------------------------
string1 = string2 -> true = is_mem_ta1 (string_list1) (string1)

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
---------------------------------------
string1 = string2 -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list1) (string1)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
state_list
New Env

;;
Lemma List
forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> string1 = string2 -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list1) (string1)
End of Lemma List
=================================================
Progress: 373


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
---------------------------------------
string1 = string2 -> true = is_mem_ta1 (string_list1) (string1)

1 goal(s) more...

1 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> string1 = string2 -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> string1 = string2 -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list1) (string1)

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> string1 = string2 -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
intro string_list1(rank:0)
intro string1(rank:1)
intro string2(rank:1)
=================================================
Progress: 374


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> string1 = string2 -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list1) (string1)

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> string1 = string2 -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro string_list1(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = true -> string1 = string2 -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
---------------------------------------
forall (string1:string) (string2:string), is_mem_ta1 (string_list1) (string1) = true -> string1 = string2 -> is_mem_ta1 (string_list1) (string1) = is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro string1(rank:1)
intro string2(rank:1)
=================================================
Progress: 375


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))
string1 : string
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
Cond1 : string1 = string2
---------------------------------------
true = is_mem_ta1 (string_list1) (string1)

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))
string1 : string
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
Cond1 : string1 = string2
---------------------------------------
true = true

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 376


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))
string1 : string
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
Cond1 : string1 = string2
---------------------------------------
true = true

1 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))
string1 : string
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = false
---------------------------------------
string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 2
Tactic List : 2
intro Cond1(rank:1)
case string_eq (string1) (string2)(rank:1)
=================================================
Progress: 377


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))
string1 : string
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = false
---------------------------------------
string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))
string1 : string
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = false
Cond1 : string1 = string2
---------------------------------------
true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
case string_eq (string1) (string2)(rank:1)
rewrite Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
=================================================
Progress: 378


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))
string1 : string
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = false
---------------------------------------
string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))
string1 : string
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = false
Case2 : string_eq (string1) (string2) = true
---------------------------------------
string1 = string2 -> true = true

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case2 at 0(rank:0)
intro Cond1(rank:1)
rewrite <- string_eqb_eq in Case2 at 0(rank:0)
=================================================
Progress: 379


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))
string1 : string
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = false
Case2 : string_eq (string1) (string2) = true
---------------------------------------
string1 = string2 -> true = true

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))
string1 : string
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = false
Case2 : string1 = string2
---------------------------------------
string1 = string2 -> true = true

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
intro Cond1(rank:1)
rewrite Case2 in goal at 0(rank:2)
rewrite <- Case2 in goal at 0(rank:2)
=================================================
Progress: 380


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))
string1 : string
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = false
Case2 : string_eq (string1) (string2) = true
---------------------------------------
string1 = string2 -> true = true

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))
string1 : string
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = false
Case2 : string2 = string1
---------------------------------------
string1 = string2 -> true = true

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
intro Cond1(rank:1)
rewrite Case2 in goal at 0(rank:2)
rewrite <- Case2 in goal at 0(rank:2)
=================================================
Progress: 381


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))
string1 : string
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = false
Cond1 : string1 = string2
---------------------------------------
true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))
string1 : string
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = false
Cond1 : string1 = string2
Case2 : string_eq (string1) (string2) = true
---------------------------------------
true = true

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 382


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))
string1 : string
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = false
Cond1 : string1 = string2
Case2 : string_eq (string1) (string2) = true
---------------------------------------
true = true

1 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))
string1 : string
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = false
Cond1 : string1 = string2
Case2 : string_eq (string1) (string2) = false
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 383


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
Cond1 : string1 = string2
---------------------------------------
true = is_mem_ta1 (string_list1) (string1)

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
Cond1 : string1 = string2
---------------------------------------
true = true

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 384


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
Cond1 : string1 = string2
---------------------------------------
true = true

1 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = false
---------------------------------------
forall (string2:string), string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 8
Tactic List : 0
state_list
New Env

;;
Lemma List
forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)
End of Lemma List
=================================================
Progress: 385


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))
string1 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = true
string2 : string
Cond1 : string1 = string2
---------------------------------------
true = true

1 goal(s) more...

1 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
intro string_list1(rank:0)
intro string1(rank:1)
intro string2(rank:1)
=================================================
Progress: 386


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

2 conjecture(s) more...
>>> intro string_list1(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)
string_list1 : string list
---------------------------------------
forall (string1:string) (string2:string), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro string1(rank:1)
intro string2(rank:1)
=================================================
Progress: 387


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))
string1 : string
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = false
Case2 : string_eq (string1) (string2) = true
---------------------------------------
string1 = string2 -> true = true

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))
string1 : string
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = false
Case2 : string_eq (string1) (string2) = true
Cond1 : string1 = string2
---------------------------------------
true = true

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 388


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))
string1 : string
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = false
Case2 : string_eq (string1) (string2) = true
Cond1 : string1 = string2
---------------------------------------
true = true

1 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))
string1 : string
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = false
Case2 : string_eq (string1) (string2) = false
---------------------------------------
string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 6
Tactic List : 0
state_list
New Env

;;
Lemma List
forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false->string_eq (string1) (string2) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)
End of Lemma List
=================================================
Progress: 389


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))
string1 : string
string2 : string
string_list1 : string list
Case1 : is_mem_ta1 (string_list1) (string1) = false
Case2 : string_eq (string1) (string2) = true
Cond1 : string1 = string2
---------------------------------------
true = true

1 goal(s) more...

1 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false->string_eq (string1) (string2) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false->string_eq (string1) (string2) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false->string_eq (string1) (string2) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
intro string_list1(rank:0)
intro string1(rank:1)
intro string2(rank:1)
=================================================
Progress: 390


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false->string_eq (string1) (string2) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false->string_eq (string1) (string2) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

2 conjecture(s) more...
>>> intro string_list1(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false->string_eq (string1) (string2) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
---------------------------------------
forall (string1:string) (string2:string), is_mem_ta1 (string_list1) (string1) = false->string_eq (string1) (string2) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro string1(rank:1)
intro string2(rank:1)
=================================================
Progress: 391


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)
string1 : string
---------------------------------------
forall (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string2(rank:1)
=================================================
Progress: 392


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)
string2 : string
---------------------------------------
forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
state_list
=================================================
Progress: 393


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)
string_list1 : string list
---------------------------------------
forall (string1:string) (string2:string), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string1 : string
---------------------------------------
forall (string2:string), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string2(rank:1)
=================================================
Progress: 394


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)
string_list1 : string list
---------------------------------------
forall (string1:string) (string2:string), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string2 : string
---------------------------------------
forall (string1:string), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
state_list
=================================================
Progress: 395


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false->string_eq (string1) (string2) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false->string_eq (string1) (string2) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false->string_eq (string1) (string2) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)
string1 : string
---------------------------------------
forall (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false->string_eq (string1) (string2) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string2(rank:1)
=================================================
Progress: 396


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false->string_eq (string1) (string2) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false->string_eq (string1) (string2) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false->string_eq (string1) (string2) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)
string2 : string
---------------------------------------
forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false->string_eq (string1) (string2) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
state_list
=================================================
Progress: 397


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false->string_eq (string1) (string2) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
---------------------------------------
forall (string1:string) (string2:string), is_mem_ta1 (string_list1) (string1) = false->string_eq (string1) (string2) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false->string_eq (string1) (string2) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string1 : string
---------------------------------------
forall (string2:string), is_mem_ta1 (string_list1) (string1) = false->string_eq (string1) (string2) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string2(rank:1)
=================================================
Progress: 398


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false->string_eq (string1) (string2) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
---------------------------------------
forall (string1:string) (string2:string), is_mem_ta1 (string_list1) (string1) = false->string_eq (string1) (string2) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false->string_eq (string1) (string2) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string2 : string
---------------------------------------
forall (string1:string), is_mem_ta1 (string_list1) (string1) = false->string_eq (string1) (string2) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
state_list
=================================================
Progress: 399


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)
string1 : string
---------------------------------------
forall (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
---------------------------------------
forall (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string2)(rank:0)
=================================================
Progress: 400


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
---------------------------------------
forall (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
Case1 : string_eq (string1) (string2) = true
---------------------------------------
forall (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = true

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case1 at 0(rank:0)
intro string_list1(rank:1)
rewrite <- string_eqb_eq in Case1 at 0(rank:0)
=================================================
Progress: 401


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
Case1 : string_eq (string1) (string2) = true
---------------------------------------
forall (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = true

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
Case1 : string1 = string2
---------------------------------------
forall (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = true

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 5
intro string_list1(rank:1)
rewrite Case1 in goal at 1(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 0(rank:2)
=================================================
Progress: 402


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
Case1 : string_eq (string1) (string2) = true
---------------------------------------
forall (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = true

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
Case1 : string2 = string1
---------------------------------------
forall (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = true

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 5
intro string_list1(rank:1)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite Case1 in goal at 0(rank:2)
=================================================
Progress: 403


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string1 : string
---------------------------------------
forall (string2:string), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string1 : string
string2 : string
---------------------------------------
is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro Cond1(rank:1)
case string_eq (string1) (string2)(rank:1)
=================================================
Progress: 404


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false->string_eq (string1) (string2) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)
string1 : string
---------------------------------------
forall (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false->string_eq (string1) (string2) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false->string_eq (string1) (string2) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
---------------------------------------
forall (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false->string_eq (string1) (string2) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
state_list
=================================================
Progress: 405


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false->string_eq (string1) (string2) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string1 : string
---------------------------------------
forall (string2:string), is_mem_ta1 (string_list1) (string1) = false->string_eq (string1) (string2) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

2 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false->string_eq (string1) (string2) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string1 : string
string2 : string
---------------------------------------
is_mem_ta1 (string_list1) (string1) = false->string_eq (string1) (string2) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:1)
=================================================
Progress: 406


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string1 : string
string2 : string
---------------------------------------
is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string1 : string
string2 : string
Cond1 : is_mem_ta1 (string_list1) (string1) = false
---------------------------------------
string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro Cond2(rank:1)
case string_eq (string1) (string2)(rank:1)
=================================================
Progress: 407


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string1 : string
string2 : string
---------------------------------------
is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string1 : string
string2 : string
Case1 : string_eq (string1) (string2) = true
---------------------------------------
is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = true

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case1 at 0(rank:0)
intro Cond1(rank:1)
rewrite <- string_eqb_eq in Case1 at 0(rank:0)
=================================================
Progress: 408


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string1 : string
string2 : string
Case1 : string_eq (string1) (string2) = true
---------------------------------------
is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = true

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string1 : string
string2 : string
Case1 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = true

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 5
intro Cond1(rank:1)
rewrite Case1 in goal at 1(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 0(rank:2)
=================================================
Progress: 409


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string1 : string
string2 : string
Case1 : string_eq (string1) (string2) = true
---------------------------------------
is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = true

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string1 : string
string2 : string
Case1 : string2 = string1
---------------------------------------
is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = true

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 5
intro Cond1(rank:1)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite Case1 in goal at 0(rank:2)
=================================================
Progress: 410


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false->string_eq (string1) (string2) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string1 : string
string2 : string
---------------------------------------
is_mem_ta1 (string_list1) (string1) = false->string_eq (string1) (string2) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false->string_eq (string1) (string2) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string1 : string
string2 : string
Cond1 : is_mem_ta1 (string_list1) (string1) = false
---------------------------------------
string_eq (string1) (string2) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
intro Cond2(rank:1)
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 411


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string1 : string
string2 : string
Cond1 : is_mem_ta1 (string_list1) (string1) = false
---------------------------------------
string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string1 : string
string2 : string
Cond1 : is_mem_ta1 (string_list1) (string1) = false
Cond2 : string1 = string2
---------------------------------------
true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 5
case string_eq (string1) (string2)(rank:1)
rewrite Cond2 in goal at 0(rank:2)
rewrite <- Cond2 in goal at 0(rank:2)
rewrite <- Cond2 in goal at 1(rank:2)
rewrite <- Cond2 in goal at 2(rank:2)
=================================================
Progress: 412


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string1 : string
string2 : string
Cond1 : is_mem_ta1 (string_list1) (string1) = false
---------------------------------------
string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string1 : string
string2 : string
Cond1 : is_mem_ta1 (string_list1) (string1) = false
Case1 : string_eq (string1) (string2) = true
---------------------------------------
string1 = string2 -> true = true

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case1 at 0(rank:0)
intro Cond2(rank:1)
rewrite <- string_eqb_eq in Case1 at 0(rank:0)
=================================================
Progress: 413


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string1 : string
string2 : string
Cond1 : is_mem_ta1 (string_list1) (string1) = false
Case1 : string_eq (string1) (string2) = true
---------------------------------------
string1 = string2 -> true = true

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string1 : string
string2 : string
Cond1 : is_mem_ta1 (string_list1) (string1) = false
Case1 : string1 = string2
---------------------------------------
string1 = string2 -> true = true

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
intro Cond2(rank:1)
rewrite Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
=================================================
Progress: 414


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string1 : string
string2 : string
Cond1 : is_mem_ta1 (string_list1) (string1) = false
Case1 : string_eq (string1) (string2) = true
---------------------------------------
string1 = string2 -> true = true

1 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string1 : string
string2 : string
Cond1 : is_mem_ta1 (string_list1) (string1) = false
Case1 : string2 = string1
---------------------------------------
string1 = string2 -> true = true

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
intro Cond2(rank:1)
rewrite Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
=================================================
Progress: 415


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false->string_eq (string1) (string2) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string1 : string
string2 : string
Cond1 : is_mem_ta1 (string_list1) (string1) = false
---------------------------------------
string_eq (string1) (string2) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false->string_eq (string1) (string2) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string1 : string
string2 : string
Cond1 : is_mem_ta1 (string_list1) (string1) = false
Cond2 : string_eq (string1) (string2) = false
---------------------------------------
string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:1)
=================================================
Progress: 416


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string1 : string
string2 : string
Cond1 : is_mem_ta1 (string_list1) (string1) = false
Cond2 : string1 = string2
---------------------------------------
true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

2 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string1 : string
string2 : string
Cond1 : is_mem_ta1 (string_list1) (string1) = false
Cond2 : string1 = string2
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = true

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 417


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string1 : string
string2 : string
Cond1 : is_mem_ta1 (string_list1) (string1) = false
Cond2 : string1 = string2
Case1 : string_eq (string1) (string2) = true
---------------------------------------
true = true

1 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string1 : string
string2 : string
Cond1 : is_mem_ta1 (string_list1) (string1) = false
Cond2 : string1 = string2
Case1 : string_eq (string1) (string2) = false
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite <- Cond2 in goal at 0(rank:2)
=================================================
Progress: 418


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false->string_eq (string1) (string2) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string1 : string
string2 : string
Cond1 : is_mem_ta1 (string_list1) (string1) = false
Cond2 : string_eq (string1) (string2) = false
---------------------------------------
string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond3(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false->string_eq (string1) (string2) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string1 : string
string2 : string
Cond1 : is_mem_ta1 (string_list1) (string1) = false
Cond2 : string_eq (string1) (string2) = false
Cond3 : string1 = string2
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite <- Cond3 in goal at 0(rank:2)
=================================================
Progress: 419


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
Case1 : string_eq (string1) (string2) = true
---------------------------------------
forall (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = true

1 goal(s) more...

2 conjecture(s) more...
>>> intro string_list1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
Case1 : string_eq (string1) (string2) = true
string_list1 : string list
---------------------------------------
is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = true

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
intro Cond1(rank:1)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
=================================================
Progress: 420


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
Case1 : string1 = string2
---------------------------------------
forall (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = true

1 goal(s) more...

2 conjecture(s) more...
>>> intro string_list1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = true

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 5
intro Cond1(rank:1)
rewrite Case1 in goal at 1(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 0(rank:2)
=================================================
Progress: 421


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
Case1 : string2 = string1
---------------------------------------
forall (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = true

1 goal(s) more...

2 conjecture(s) more...
>>> intro string_list1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = true

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 5
intro Cond1(rank:1)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite Case1 in goal at 0(rank:2)
=================================================
Progress: 422


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string1 : string
string2 : string
Case1 : string_eq (string1) (string2) = true
---------------------------------------
is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = true

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string1 : string
string2 : string
Case1 : string_eq (string1) (string2) = true
Cond1 : is_mem_ta1 (string_list1) (string1) = false
---------------------------------------
string1 = string2 -> true = true

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
intro Cond2(rank:1)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
=================================================
Progress: 423


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string1 : string
string2 : string
Case1 : string1 = string2
---------------------------------------
is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = true

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string1 : string
string2 : string
Case1 : string1 = string2
Cond1 : is_mem_ta1 (string_list1) (string1) = false
---------------------------------------
string1 = string2 -> true = true

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
intro Cond2(rank:1)
rewrite Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
=================================================
Progress: 424


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string1 : string
string2 : string
Case1 : string2 = string1
---------------------------------------
is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = true

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string1 : string
string2 : string
Case1 : string2 = string1
Cond1 : is_mem_ta1 (string_list1) (string1) = false
---------------------------------------
string1 = string2 -> true = true

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
intro Cond2(rank:1)
rewrite Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
=================================================
Progress: 425


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string1 : string
string2 : string
Cond1 : is_mem_ta1 (string_list1) (string1) = false
Case1 : string_eq (string1) (string2) = true
---------------------------------------
string1 = string2 -> true = true

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string1 : string
string2 : string
Cond1 : is_mem_ta1 (string_list1) (string1) = false
Case1 : string_eq (string1) (string2) = true
Cond2 : string1 = string2
---------------------------------------
true = true

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 426


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string1 : string
string2 : string
Cond1 : is_mem_ta1 (string_list1) (string1) = false
Case1 : string_eq (string1) (string2) = true
Cond2 : string1 = string2
---------------------------------------
true = true

1 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string1 : string
string2 : string
Cond1 : is_mem_ta1 (string_list1) (string1) = false
Case1 : string_eq (string1) (string2) = false
---------------------------------------
string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

2 conjecture(s) more...
Deduplication: 6
Tactic List : 0
=================================================
Progress: 427


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
Case1 : string_eq (string1) (string2) = true
string_list1 : string list
---------------------------------------
is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = true

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
Case1 : string_eq (string1) (string2) = true
string_list1 : string list
Cond1 : is_mem_ta1 (string_list1) (string1) = false
---------------------------------------
string1 = string2 -> true = true

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
intro Cond2(rank:1)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
=================================================
Progress: 428


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
Case1 : string1 = string2
string_list1 : string list
---------------------------------------
is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = true

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
Case1 : string1 = string2
string_list1 : string list
Cond1 : is_mem_ta1 (string_list1) (string1) = false
---------------------------------------
string1 = string2 -> true = true

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
intro Cond2(rank:1)
rewrite Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
=================================================
Progress: 429


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
Case1 : string2 = string1
string_list1 : string list
---------------------------------------
is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = true

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
Case1 : string2 = string1
string_list1 : string list
Cond1 : is_mem_ta1 (string_list1) (string1) = false
---------------------------------------
string1 = string2 -> true = true

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
intro Cond2(rank:1)
rewrite Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
=================================================
Progress: 430


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string1 : string
string2 : string
Case1 : string_eq (string1) (string2) = true
Cond1 : is_mem_ta1 (string_list1) (string1) = false
---------------------------------------
string1 = string2 -> true = true

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string1 : string
string2 : string
Case1 : string_eq (string1) (string2) = true
Cond1 : is_mem_ta1 (string_list1) (string1) = false
Cond2 : string1 = string2
---------------------------------------
true = true

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 431


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string1 : string
string2 : string
Case1 : string_eq (string1) (string2) = true
Cond1 : is_mem_ta1 (string_list1) (string1) = false
Cond2 : string1 = string2
---------------------------------------
true = true

1 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string1 : string
string2 : string
Case1 : string_eq (string1) (string2) = false
---------------------------------------
is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

2 conjecture(s) more...
Deduplication: 17
Tactic List : 0
state_list
New Env

;;
Lemma List
forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = false -> is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)
End of Lemma List
=================================================
Progress: 432


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)
string_list1 : string list
string1 : string
string2 : string
Case1 : string_eq (string1) (string2) = true
Cond1 : is_mem_ta1 (string_list1) (string1) = false
Cond2 : string1 = string2
---------------------------------------
true = true

1 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = false -> is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = false -> is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = false -> is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 3
induction string_list1(rank:0)
intro string1(rank:1)
intro string2(rank:1)
=================================================
Progress: 433


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = false -> is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = false -> is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

3 conjecture(s) more...
>>> induction string_list1(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = false -> is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
Base1 : string_list1 = (Nil)
---------------------------------------
forall (string1:string) (string2:string), string_eq (string1) (string2) = false -> is_mem_ta1 ((Nil)) (string1) = false -> string1 = string2 -> true = is_mem_ta1 ((Nil)) (string2)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 434


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = false -> is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
Base1 : string_list1 = (Nil)
---------------------------------------
forall (string1:string) (string2:string), string_eq (string1) (string2) = false -> is_mem_ta1 ((Nil)) (string1) = false -> string1 = string2 -> true = is_mem_ta1 ((Nil)) (string2)

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = false -> is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
Base1 : string_list1 = (Nil)
---------------------------------------
forall (string1:string) (string2:string), string_eq (string1) (string2) = false -> false = false -> string1 = string2 -> true = false

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
intro string1(rank:1)
intro string2(rank:1)
=================================================
Progress: 435


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
Case1 : string_eq (string1) (string2) = true
string_list1 : string list
Cond1 : is_mem_ta1 (string_list1) (string1) = false
---------------------------------------
string1 = string2 -> true = true

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
Case1 : string_eq (string1) (string2) = true
string_list1 : string list
Cond1 : is_mem_ta1 (string_list1) (string1) = false
Cond2 : string1 = string2
---------------------------------------
true = true

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 436


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
Case1 : string_eq (string1) (string2) = true
string_list1 : string list
Cond1 : is_mem_ta1 (string_list1) (string1) = false
Cond2 : string1 = string2
---------------------------------------
true = true

1 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = if string_eq (string1) (string2) then true else is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
Case1 : string_eq (string1) (string2) = false
---------------------------------------
forall (string_list1:string list), is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

2 conjecture(s) more...
Deduplication: 28
Tactic List : 0
state_list
=================================================
Progress: 437


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = false -> is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = false -> is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = false -> is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)
string1 : string
---------------------------------------
forall (string2:string) (string_list1:string list), string_eq (string1) (string2) = false -> is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
induction string_list1(rank:0)
intro string2(rank:1)
=================================================
Progress: 438


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = false -> is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)
string1 : string
---------------------------------------
forall (string2:string) (string_list1:string list), string_eq (string1) (string2) = false -> is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

3 conjecture(s) more...
>>> induction string_list1(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = false -> is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
Base1 : string_list1 = (Nil)
---------------------------------------
forall (string2:string), string_eq (string1) (string2) = false -> is_mem_ta1 ((Nil)) (string1) = false -> string1 = string2 -> true = is_mem_ta1 ((Nil)) (string2)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 439


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = false -> is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
Base1 : string_list1 = (Nil)
---------------------------------------
forall (string2:string), string_eq (string1) (string2) = false -> is_mem_ta1 ((Nil)) (string1) = false -> string1 = string2 -> true = is_mem_ta1 ((Nil)) (string2)

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = false -> is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
Base1 : string_list1 = (Nil)
---------------------------------------
forall (string2:string), string_eq (string1) (string2) = false -> false = false -> string1 = string2 -> true = false

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string2(rank:1)
=================================================
Progress: 440


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = false -> is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = false -> is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

3 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = false -> is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)
string2 : string
---------------------------------------
forall (string1:string) (string_list1:string list), string_eq (string1) (string2) = false -> is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction string_list1(rank:0)
=================================================
Progress: 441


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = false -> is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)
string2 : string
---------------------------------------
forall (string1:string) (string_list1:string list), string_eq (string1) (string2) = false -> is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

3 conjecture(s) more...
>>> induction string_list1(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = false -> is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)
string2 : string
string_list1 : string list
Base1 : string_list1 = (Nil)
---------------------------------------
forall (string1:string), string_eq (string1) (string2) = false -> is_mem_ta1 ((Nil)) (string1) = false -> string1 = string2 -> true = is_mem_ta1 ((Nil)) (string2)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 442


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = false -> is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)
string2 : string
string_list1 : string list
Base1 : string_list1 = (Nil)
---------------------------------------
forall (string1:string), string_eq (string1) (string2) = false -> is_mem_ta1 ((Nil)) (string1) = false -> string1 = string2 -> true = is_mem_ta1 ((Nil)) (string2)

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = false -> is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)
string2 : string
string_list1 : string list
Base1 : string_list1 = (Nil)
---------------------------------------
forall (string1:string), string_eq (string1) (string2) = false -> false = false -> string1 = string2 -> true = false

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:1)
=================================================
Progress: 443


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = false -> is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)
string1 : string
---------------------------------------
forall (string2:string) (string_list1:string list), string_eq (string1) (string2) = false -> is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

3 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = false -> is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
---------------------------------------
forall (string_list1:string list), string_eq (string1) (string2) = false -> is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction string_list1(rank:0)
=================================================
Progress: 444


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = false -> is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
---------------------------------------
forall (string_list1:string list), string_eq (string1) (string2) = false -> is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)

0 goal(s) more...

3 conjecture(s) more...
>>> induction string_list1(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = false -> is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
Base1 : string_list1 = (Nil)
---------------------------------------
string_eq (string1) (string2) = false -> is_mem_ta1 ((Nil)) (string1) = false -> string1 = string2 -> true = is_mem_ta1 ((Nil)) (string2)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 445


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = false -> is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
Base1 : string_list1 = (Nil)
---------------------------------------
string_eq (string1) (string2) = false -> is_mem_ta1 ((Nil)) (string1) = false -> string1 = string2 -> true = is_mem_ta1 ((Nil)) (string2)

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = false -> is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
Base1 : string_list1 = (Nil)
---------------------------------------
string_eq (string1) (string2) = false -> false = false -> string1 = string2 -> true = false

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:1)
=================================================
Progress: 446


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = false -> is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
Base1 : string_list1 = (Nil)
---------------------------------------
forall (string1:string) (string2:string), string_eq (string1) (string2) = false -> false = false -> string1 = string2 -> true = false

1 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = false -> is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
Base1 : string_list1 = (Nil)
string1 : string
---------------------------------------
forall (string2:string), string_eq (string1) (string2) = false -> false = false -> string1 = string2 -> true = false

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string2(rank:1)
=================================================
Progress: 447


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = false -> is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
Base1 : string_list1 = (Nil)
---------------------------------------
forall (string1:string) (string2:string), string_eq (string1) (string2) = false -> false = false -> string1 = string2 -> true = false

1 goal(s) more...

3 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = false -> is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
Base1 : string_list1 = (Nil)
string2 : string
---------------------------------------
forall (string1:string), string_eq (string1) (string2) = false -> false = false -> string1 = string2 -> true = false

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string2
state_list
New Env

;;
Lemma List
forall (string1:string) (string2:string), string_eq (string1) (string2) = false -> false = false -> string1 = string2 -> true = false
End of Lemma List
=================================================
Progress: 448


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = false -> is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
Base1 : string_list1 = (Nil)
---------------------------------------
forall (string1:string) (string2:string), string_eq (string1) (string2) = false -> false = false -> string1 = string2 -> true = false

1 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string2:string), string_eq (string1) (string2) = false -> false = false -> string1 = string2 -> true = false(rank : 0)


1st goal of : forall (string1:string) (string2:string), string_eq (string1) (string2) = false -> false = false -> string1 = string2 -> true = false

---------------------------------------
forall (string1:string) (string2:string), string_eq (string1) (string2) = false -> false = false -> string1 = string2 -> true = false

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
intro string1(rank:1)
intro string2(rank:1)
=================================================
Progress: 449


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = false -> is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
Base1 : string_list1 = (Nil)
---------------------------------------
forall (string2:string), string_eq (string1) (string2) = false -> false = false -> string1 = string2 -> true = false

1 goal(s) more...

3 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = false -> is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
Base1 : string_list1 = (Nil)
string2 : string
---------------------------------------
string_eq (string1) (string2) = false -> false = false -> string1 = string2 -> true = false

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:1)
=================================================
Progress: 450


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = false -> is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)
string2 : string
string_list1 : string list
Base1 : string_list1 = (Nil)
---------------------------------------
forall (string1:string), string_eq (string1) (string2) = false -> false = false -> string1 = string2 -> true = false

1 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = false -> is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)
string2 : string
string_list1 : string list
Base1 : string_list1 = (Nil)
string1 : string
---------------------------------------
string_eq (string1) (string2) = false -> false = false -> string1 = string2 -> true = false

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:1)
=================================================
Progress: 451


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = false -> is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
Base1 : string_list1 = (Nil)
---------------------------------------
string_eq (string1) (string2) = false -> false = false -> string1 = string2 -> true = false

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = false -> is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
Base1 : string_list1 = (Nil)
Cond1 : string_eq (string1) (string2) = false
---------------------------------------
false = false -> string1 = string2 -> true = false

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 5
intro Cond2(rank:1)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 3(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 452


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = false -> is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
Base1 : string_list1 = (Nil)
string1 : string
---------------------------------------
forall (string2:string), string_eq (string1) (string2) = false -> false = false -> string1 = string2 -> true = false

1 goal(s) more...

3 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = false -> is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
Base1 : string_list1 = (Nil)
string1 : string
string2 : string
---------------------------------------
string_eq (string1) (string2) = false -> false = false -> string1 = string2 -> true = false

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:1)
=================================================
Progress: 453


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = false -> is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
Base1 : string_list1 = (Nil)
string2 : string
---------------------------------------
string_eq (string1) (string2) = false -> false = false -> string1 = string2 -> true = false

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = false -> is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
Base1 : string_list1 = (Nil)
string2 : string
Cond1 : string_eq (string1) (string2) = false
---------------------------------------
false = false -> string1 = string2 -> true = false

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 5
intro Cond2(rank:1)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 3(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 454


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = false -> is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)
string2 : string
string_list1 : string list
Base1 : string_list1 = (Nil)
string1 : string
---------------------------------------
string_eq (string1) (string2) = false -> false = false -> string1 = string2 -> true = false

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = false -> is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)
string2 : string
string_list1 : string list
Base1 : string_list1 = (Nil)
string1 : string
Cond1 : string_eq (string1) (string2) = false
---------------------------------------
false = false -> string1 = string2 -> true = false

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 5
intro Cond2(rank:1)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 3(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 455


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = false -> is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
Base1 : string_list1 = (Nil)
Cond1 : string_eq (string1) (string2) = false
---------------------------------------
false = false -> string1 = string2 -> true = false

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = false -> is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
Base1 : string_list1 = (Nil)
Cond1 : string_eq (string1) (string2) = false
Cond2 : false = false
---------------------------------------
string1 = string2 -> true = false

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
intro Cond3(rank:1)
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 456


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = false -> is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
Base1 : string_list1 = (Nil)
string1 : string
string2 : string
---------------------------------------
string_eq (string1) (string2) = false -> false = false -> string1 = string2 -> true = false

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = false -> is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
Base1 : string_list1 = (Nil)
string1 : string
string2 : string
Cond1 : string_eq (string1) (string2) = false
---------------------------------------
false = false -> string1 = string2 -> true = false

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 5
intro Cond2(rank:1)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 3(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 457


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = false -> is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
Base1 : string_list1 = (Nil)
string2 : string
Cond1 : string_eq (string1) (string2) = false
---------------------------------------
false = false -> string1 = string2 -> true = false

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = false -> is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
Base1 : string_list1 = (Nil)
string2 : string
Cond1 : string_eq (string1) (string2) = false
Cond2 : false = false
---------------------------------------
string1 = string2 -> true = false

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
intro Cond3(rank:1)
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 458


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = false -> is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)
string2 : string
string_list1 : string list
Base1 : string_list1 = (Nil)
string1 : string
Cond1 : string_eq (string1) (string2) = false
---------------------------------------
false = false -> string1 = string2 -> true = false

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = false -> is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)
string2 : string
string_list1 : string list
Base1 : string_list1 = (Nil)
string1 : string
Cond1 : string_eq (string1) (string2) = false
Cond2 : false = false
---------------------------------------
string1 = string2 -> true = false

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
intro Cond3(rank:1)
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 459


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = false -> is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
Base1 : string_list1 = (Nil)
Cond1 : string_eq (string1) (string2) = false
Cond2 : false = false
---------------------------------------
string1 = string2 -> true = false

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond3(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = false -> is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)
string1 : string
string2 : string
string_list1 : string list
Base1 : string_list1 = (Nil)
Cond1 : string_eq (string1) (string2) = false
Cond2 : false = false
Cond3 : string1 = string2
---------------------------------------
true = false

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 460


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = false -> is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
Base1 : string_list1 = (Nil)
string1 : string
string2 : string
Cond1 : string_eq (string1) (string2) = false
---------------------------------------
false = false -> string1 = string2 -> true = false

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = false -> is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
Base1 : string_list1 = (Nil)
string1 : string
string2 : string
Cond1 : string_eq (string1) (string2) = false
Cond2 : false = false
---------------------------------------
string1 = string2 -> true = false

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
intro Cond3(rank:1)
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 461


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = false -> is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
Base1 : string_list1 = (Nil)
string2 : string
Cond1 : string_eq (string1) (string2) = false
Cond2 : false = false
---------------------------------------
string1 = string2 -> true = false

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond3(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = false -> is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)
string1 : string
string_list1 : string list
Base1 : string_list1 = (Nil)
string2 : string
Cond1 : string_eq (string1) (string2) = false
Cond2 : false = false
Cond3 : string1 = string2
---------------------------------------
true = false

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 462


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = false -> is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)
string2 : string
string_list1 : string list
Base1 : string_list1 = (Nil)
string1 : string
Cond1 : string_eq (string1) (string2) = false
Cond2 : false = false
---------------------------------------
string1 = string2 -> true = false

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond3(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = false -> is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)
string2 : string
string_list1 : string list
Base1 : string_list1 = (Nil)
string1 : string
Cond1 : string_eq (string1) (string2) = false
Cond2 : false = false
Cond3 : string1 = string2
---------------------------------------
true = false

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 463


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = false -> is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
Base1 : string_list1 = (Nil)
string1 : string
string2 : string
Cond1 : string_eq (string1) (string2) = false
Cond2 : false = false
---------------------------------------
string1 = string2 -> true = false

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond3(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), string_eq (string1) (string2) = false -> is_mem_ta1 (string_list1) (string1) = false -> string1 = string2 -> true = is_mem_ta1 (string_list1) (string2)
string_list1 : string list
Base1 : string_list1 = (Nil)
string1 : string
string2 : string
Cond1 : string_eq (string1) (string2) = false
Cond2 : false = false
Cond3 : string1 = string2
---------------------------------------
true = false

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 464


1st goal of : forall (string1:string) (string2:string), string_eq (string1) (string2) = false -> false = false -> string1 = string2 -> true = false

---------------------------------------
forall (string1:string) (string2:string), string_eq (string1) (string2) = false -> false = false -> string1 = string2 -> true = false

0 goal(s) more...

4 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (string1:string) (string2:string), string_eq (string1) (string2) = false -> false = false -> string1 = string2 -> true = false
string1 : string
---------------------------------------
forall (string2:string), string_eq (string1) (string2) = false -> false = false -> string1 = string2 -> true = false

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro string2(rank:1)
=================================================
Progress: 465


1st goal of : forall (string1:string) (string2:string), string_eq (string1) (string2) = false -> false = false -> string1 = string2 -> true = false

---------------------------------------
forall (string1:string) (string2:string), string_eq (string1) (string2) = false -> false = false -> string1 = string2 -> true = false

0 goal(s) more...

4 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string), string_eq (string1) (string2) = false -> false = false -> string1 = string2 -> true = false
string2 : string
---------------------------------------
forall (string1:string), string_eq (string1) (string2) = false -> false = false -> string1 = string2 -> true = false

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 466


1st goal of : forall (string1:string) (string2:string), string_eq (string1) (string2) = false -> false = false -> string1 = string2 -> true = false
string1 : string
---------------------------------------
forall (string2:string), string_eq (string1) (string2) = false -> false = false -> string1 = string2 -> true = false

0 goal(s) more...

4 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string), string_eq (string1) (string2) = false -> false = false -> string1 = string2 -> true = false
string1 : string
string2 : string
---------------------------------------
string_eq (string1) (string2) = false -> false = false -> string1 = string2 -> true = false

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:1)
=================================================
Progress: 467


1st goal of : forall (string1:string) (string2:string), string_eq (string1) (string2) = false -> false = false -> string1 = string2 -> true = false
string1 : string
string2 : string
---------------------------------------
string_eq (string1) (string2) = false -> false = false -> string1 = string2 -> true = false

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string), string_eq (string1) (string2) = false -> false = false -> string1 = string2 -> true = false
string1 : string
string2 : string
Cond1 : string_eq (string1) (string2) = false
---------------------------------------
false = false -> string1 = string2 -> true = false

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 5
intro Cond2(rank:1)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 3(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 468


1st goal of : forall (string1:string) (string2:string), string_eq (string1) (string2) = false -> false = false -> string1 = string2 -> true = false
string1 : string
string2 : string
Cond1 : string_eq (string1) (string2) = false
---------------------------------------
false = false -> string1 = string2 -> true = false

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond2(rank : 1)


1st goal of : forall (string1:string) (string2:string), string_eq (string1) (string2) = false -> false = false -> string1 = string2 -> true = false
string1 : string
string2 : string
Cond1 : string_eq (string1) (string2) = false
Cond2 : false = false
---------------------------------------
string1 = string2 -> true = false

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 2
intro Cond3(rank:1)
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 469


1st goal of : forall (string1:string) (string2:string), string_eq (string1) (string2) = false -> false = false -> string1 = string2 -> true = false
string1 : string
string2 : string
Cond1 : string_eq (string1) (string2) = false
Cond2 : false = false
---------------------------------------
string1 = string2 -> true = false

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond3(rank : 1)


1st goal of : forall (string1:string) (string2:string), string_eq (string1) (string2) = false -> false = false -> string1 = string2 -> true = false
string1 : string
string2 : string
Cond1 : string_eq (string1) (string2) = false
Cond2 : false = false
Cond3 : string1 = string2
---------------------------------------
true = false

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 470


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) ((string1::string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 471


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) ((string1::string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 472


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string1)) ((string1::string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 473


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string1)) ((string1::string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 474


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 1(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 475


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 2(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) ((string1::string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 476


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string1)) ((string1::string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 477


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
---------------------------------------
true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string2::string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string2)(rank:0)
=================================================
Progress: 478


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
---------------------------------------
true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string2::string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
Case2 : is_mem_ta1 (string_list1) (string2) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 479


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
---------------------------------------
true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string2)(rank:0)
=================================================
Progress: 480


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
---------------------------------------
true = if is_mem_ta1 (string_list1) (string2) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
Case2 : is_mem_ta1 (string_list1) (string2) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 481


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string1::string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 2(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string2::string_list1))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 482


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
---------------------------------------
true = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) ((string2::string_list1))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
Case2 : is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 483


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((string3::string_list2)) (string2) = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((string3::string_list2)) (string2) = if is_mem_ta1 (string_list2) (string3) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string3::string_list2))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case is_mem_ta1 (string_list2) (string3)(rank:0)
case string_eq (string1) (string2)(rank:0)
=================================================
Progress: 484


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((string3::string_list2)) (string2) = if is_mem_ta1 (string_list2) (string3) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string3::string_list2))

3 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list2) (string3)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : is_mem_ta1 (string_list2) (string3) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((string3::string_list2)) (string2) = is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case string_eq (string1) (string2)(rank:0)
=================================================
Progress: 485


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((string3::string_list2)) (string2) = if is_mem_ta1 (string_list2) (string3) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string3::string_list2))

3 goal(s) more...

0 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string1) (string2) = true
---------------------------------------
true = if is_mem_ta1 (string_list2) (string3) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string3::string_list2))

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case2 at 0(rank:0)
rewrite <- string_eqb_eq in Case2 at 0(rank:0)
case is_mem_ta1 (string_list2) (string3)(rank:1)
=================================================
Progress: 486


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : is_mem_ta1 (string_list2) (string3) = true
---------------------------------------
if string_eq (string1) (string2) then true else is_mem_ta1 ((string3::string_list2)) (string2) = is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> case string_eq (string1) (string2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : is_mem_ta1 (string_list2) (string3) = true
Case3 : string_eq (string1) (string2) = true
---------------------------------------
true = is_mem_ta1 (string_list2) (string2)

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite string_eqb_eq in Case3 at 0(rank:0)
rewrite <- string_eqb_eq in Case3 at 0(rank:0)
=================================================
Progress: 487


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string1) (string2) = true
---------------------------------------
true = if is_mem_ta1 (string_list2) (string3) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string3::string_list2))

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string1 = string2
---------------------------------------
true = if is_mem_ta1 (string_list2) (string3) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string3::string_list2))

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
case is_mem_ta1 (string_list2) (string3)(rank:1)
rewrite <- Case2 in goal at 2(rank:2)
rewrite <- Case2 in goal at 0(rank:2)
rewrite <- Case2 in goal at 1(rank:2)
=================================================
Progress: 488


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string1) (string2) = true
---------------------------------------
true = if is_mem_ta1 (string_list2) (string3) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string3::string_list2))

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string2 = string1
---------------------------------------
true = if is_mem_ta1 (string_list2) (string3) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string3::string_list2))

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
case is_mem_ta1 (string_list2) (string3)(rank:1)
rewrite Case2 in goal at 2(rank:2)
rewrite Case2 in goal at 0(rank:2)
rewrite Case2 in goal at 1(rank:2)
=================================================
Progress: 489


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : is_mem_ta1 (string_list2) (string3) = true
Case3 : string_eq (string1) (string2) = true
---------------------------------------
true = is_mem_ta1 (string_list2) (string2)

5 goal(s) more...

0 conjecture(s) more...
>>> rewrite string_eqb_eq in Case3 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : is_mem_ta1 (string_list2) (string3) = true
Case3 : string1 = string2
---------------------------------------
true = is_mem_ta1 (string_list2) (string2)

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- Case3 in goal at 0(rank:2)
=================================================
Progress: 490


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : is_mem_ta1 (string_list2) (string3) = true
Case3 : string_eq (string1) (string2) = true
---------------------------------------
true = is_mem_ta1 (string_list2) (string2)

5 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case3 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : is_mem_ta1 (string_list2) (string3) = true
Case3 : string2 = string1
---------------------------------------
true = is_mem_ta1 (string_list2) (string2)

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case3 in goal at 0(rank:2)
=================================================
Progress: 491


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string1) (string2) = true
---------------------------------------
true = if is_mem_ta1 (string_list2) (string3) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string3::string_list2))

4 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list2) (string3)(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string1) (string2) = true
Case3 : is_mem_ta1 (string_list2) (string3) = true
---------------------------------------
true = is_mem_ta1 (string_list2) (string2)

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite string_eqb_eq in Case2 at 0(rank:0)
rewrite <- string_eqb_eq in Case2 at 0(rank:0)
=================================================
Progress: 492


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string1) (string2) = true
Case3 : is_mem_ta1 (string_list2) (string3) = true
---------------------------------------
true = is_mem_ta1 (string_list2) (string2)

5 goal(s) more...

0 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string1 = string2
Case3 : is_mem_ta1 (string_list2) (string3) = true
---------------------------------------
true = is_mem_ta1 (string_list2) (string2)

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:2)
=================================================
Progress: 493


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string_eq (string1) (string2) = true
Case3 : is_mem_ta1 (string_list2) (string3) = true
---------------------------------------
true = is_mem_ta1 (string_list2) (string2)

5 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string2 = string1
Case3 : is_mem_ta1 (string_list2) (string3) = true
---------------------------------------
true = is_mem_ta1 (string_list2) (string2)

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:2)
=================================================
Progress: 494


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string1 = string2
---------------------------------------
true = if is_mem_ta1 (string_list2) (string3) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string3::string_list2))

4 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list2) (string3)(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string1 = string2
Case3 : is_mem_ta1 (string_list2) (string3) = true
---------------------------------------
true = is_mem_ta1 (string_list2) (string2)

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:2)
=================================================
Progress: 495


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string2 = string1
---------------------------------------
true = if is_mem_ta1 (string_list2) (string3) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string3::string_list2))

4 goal(s) more...

0 conjecture(s) more...
>>> case is_mem_ta1 (string_list2) (string3)(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case2 : string2 = string1
Case3 : is_mem_ta1 (string_list2) (string3) = true
---------------------------------------
true = is_mem_ta1 (string_list2) (string2)

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:2)
=================================================
Progress: 496


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : string1 = string2
---------------------------------------
true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) ((string3::string_list2)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list2)))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : string1 = string2
---------------------------------------
true = if if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) then sub_check_ta1 (V (string2)) ((string3::string_list2)) else sub_check_ta1 (V (string2)) ((string2::(string3::string_list2)))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)(rank:1)
rewrite IH1 in goal at 0(rank:2)
=================================================
Progress: 497


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : string1 = string2
---------------------------------------
true = if if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) then sub_check_ta1 (V (string2)) ((string3::string_list2)) else sub_check_ta1 (V (string2)) ((string2::(string3::string_list2)))

3 goal(s) more...

0 conjecture(s) more...
>>> case if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : string1 = string2
Case2 : if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true
---------------------------------------
true = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case string_eq (string3) (string2)(rank:1)
rewrite IH1 in goal at 0(rank:2)
=================================================
Progress: 498


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : string1 = string2
Case2 : if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true
---------------------------------------
true = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : string1 = string2
Case2 : if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true
Case3 : string_eq (string3) (string2) = true
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 499


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : string1 = string2
Case2 : if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true
Case3 : string_eq (string3) (string2) = true
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : string1 = string2
Case2 : if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2) = true
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:2)
=================================================
Progress: 500


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : string1 = string2
---------------------------------------
true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) ((string3::string_list2)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list2)))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 1(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : string1 = string2
---------------------------------------
true = if if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) ((string3::string_list2)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list2)))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string1)(rank:0)
=================================================
Progress: 501


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : string1 = string2
---------------------------------------
true = if if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) ((string3::string_list2)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list2)))

3 goal(s) more...

0 conjecture(s) more...
>>> case if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : string1 = string2
Case2 : if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
true = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case string_eq (string3) (string2)(rank:1)
rewrite IH1 in goal at 0(rank:2)
=================================================
Progress: 502


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : string1 = string2
Case2 : if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
true = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : string1 = string2
Case2 : if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string1) = true
Case3 : string_eq (string3) (string2) = true
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 503


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : string1 = string2
Case2 : if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string1) = true
Case3 : string_eq (string3) (string2) = true
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : string1 = string2
Case2 : if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string1) = true
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:2)
=================================================
Progress: 504


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : string1 = string2
---------------------------------------
true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) ((string3::string_list2)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list2)))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 2(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : string1 = string2
---------------------------------------
true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string2) then sub_check_ta1 (V (string2)) ((string3::string_list2)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list2)))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string2)(rank:0)
=================================================
Progress: 505


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : string1 = string2
---------------------------------------
true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string2) then sub_check_ta1 (V (string2)) ((string3::string_list2)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list2)))

3 goal(s) more...

0 conjecture(s) more...
>>> case if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : string1 = string2
Case2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string2) = true
---------------------------------------
true = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case string_eq (string3) (string2)(rank:1)
rewrite IH1 in goal at 0(rank:2)
=================================================
Progress: 506


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : string1 = string2
Case2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string2) = true
---------------------------------------
true = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : string1 = string2
Case2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string2) = true
Case3 : string_eq (string3) (string2) = true
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 507


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : string1 = string2
Case2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string2) = true
Case3 : string_eq (string3) (string2) = true
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : string1 = string2
Case2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string2) = true
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:2)
=================================================
Progress: 508


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : string1 = string2
---------------------------------------
true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) ((string3::string_list2)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list2)))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 3(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : string1 = string2
---------------------------------------
true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) ((string3::string_list2)) else sub_check_ta1 (V (string2)) ((string2::(string3::string_list2)))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)(rank:0)
=================================================
Progress: 509


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : string1 = string2
---------------------------------------
true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) ((string3::string_list2)) else sub_check_ta1 (V (string2)) ((string2::(string3::string_list2)))

3 goal(s) more...

0 conjecture(s) more...
>>> case if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : string1 = string2
Case2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
true = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case string_eq (string3) (string2)(rank:1)
rewrite IH1 in goal at 0(rank:2)
=================================================
Progress: 510


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : string1 = string2
Case2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
true = if string_eq (string3) (string2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
>>> case string_eq (string3) (string2)(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : string1 = string2
Case2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case3 : string_eq (string3) (string2) = true
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 511


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : string1 = string2
Case2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case3 : string_eq (string3) (string2) = true
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : string1 = string2
Case2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case3 : string_eq (string3) (string2) = false
---------------------------------------
true = is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:2)
=================================================
Progress: 512


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : string1 = string2
---------------------------------------
true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) ((string3::string_list2)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list2)))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 0(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : string1 = string2
---------------------------------------
true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list2)) else sub_check_ta1 (V (string1)) ((string1::(string3::string_list2)))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)(rank:0)
=================================================
Progress: 513


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : string1 = string2
---------------------------------------
true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list2)) else sub_check_ta1 (V (string1)) ((string1::(string3::string_list2)))

3 goal(s) more...

0 conjecture(s) more...
>>> case if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : string1 = string2
Case2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
true = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case string_eq (string3) (string1)(rank:0)
=================================================
Progress: 514


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : string1 = string2
Case2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
---------------------------------------
true = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1)

4 goal(s) more...

0 conjecture(s) more...
>>> case string_eq (string3) (string1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : string1 = string2
Case2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case3 : string_eq (string3) (string1) = true
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 515


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : string1 = string2
Case2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case3 : string_eq (string3) (string1) = true
---------------------------------------
true = true

5 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : string1 = string2
Case2 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) = true
Case3 : string_eq (string3) (string1) = false
---------------------------------------
true = is_mem_ta1 (string_list2) (string1)

4 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite <- Case2 in goal at 0(rank:2)
=================================================
Progress: 516


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : string1 = string2
---------------------------------------
true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) ((string3::string_list2)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list2)))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- Case1 in goal at 1(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : string1 = string2
---------------------------------------
true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list2)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list2)))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
case string_eq (string1) (string2)
rewrite string_eqb_eq in Case1 at 0
rewrite <- Case1 in goal at 1


1st goal of : any
lambda1 : lambda
string2 : string
string_list1 : string list
string3 : string
string1 : string
---------------------------------------
forall (string_list2:string list), string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list2)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list2)))

0 goal(s) more...

0 conjecture(s) more...


1st goal of : any
lambda1 : lambda
string2 : string
string_list1 : string list
string3 : string
string1 : string
string_list2 : string list
string4 : string
---------------------------------------
forall (string_list3:string list), true = if if string_eq (string3) (string1) then true else is_mem_ta1 ((string4::string_list3)) (string1) then sub_check_ta1 (V (string1)) ((string3::(string4::string_list3))) else sub_check_ta1 (V (string1)) ((string1::(string3::(string4::string_list3))))

0 goal(s) more...

0 conjecture(s) more...
state_list
New Env

;;
Lemma List
forall (string1:string) (string2:string) (string3:string) (string_list2:string list), string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list2)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list2)))
End of Lemma List
=================================================
Progress: 517


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) ((string1::string_list1)) = if is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) ((string1::string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if string_eq (string1) (string2) then true else is_mem_ta1 (string_list2) (string2) = if is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) ((string1::string_list2))
Inductive1 : string_list1 = (string3::string_list2)
string1 : string
Case1 : string1 = string2
---------------------------------------
true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string2)) ((string3::string_list2)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list2)))

3 goal(s) more...

0 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string) (string_list2:string list), string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list2) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list2)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list2)))(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))

---------------------------------------
forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
intro string1(rank:1)
intro string2(rank:1)
intro string3(rank:1)
intro string_list1(rank:1)
=================================================
Progress: 518


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))

---------------------------------------
forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))

0 goal(s) more...

1 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))
string1 : string
---------------------------------------
forall (string2:string) (string3:string) (string_list1:string list), string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
intro string2(rank:1)
intro string3(rank:1)
intro string_list1(rank:1)
=================================================
Progress: 519


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))

---------------------------------------
forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))

0 goal(s) more...

1 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))
string2 : string
---------------------------------------
forall (string1:string) (string3:string) (string_list1:string list), string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
intro string3(rank:1)
intro string_list1(rank:1)
=================================================
Progress: 520


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))

---------------------------------------
forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))

0 goal(s) more...

1 conjecture(s) more...
>>> intro string3(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))
string3 : string
---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro string_list1(rank:1)
=================================================
Progress: 521


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))

---------------------------------------
forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))

0 goal(s) more...

1 conjecture(s) more...
>>> intro string_list1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))
string_list1 : string list
---------------------------------------
forall (string1:string) (string2:string) (string3:string), string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
state_list
New Env

;;
Lemma List
forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))
End of Lemma List
=================================================
Progress: 522


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))

---------------------------------------
forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))

0 goal(s) more...

1 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))

---------------------------------------
forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
intro string1(rank:1)
intro string2(rank:1)
intro string3(rank:1)
intro string_list1(rank:1)
=================================================
Progress: 523


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))
string1 : string
---------------------------------------
forall (string2:string) (string3:string) (string_list1:string list), string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))

0 goal(s) more...

1 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))
string1 : string
string2 : string
---------------------------------------
forall (string3:string) (string_list1:string list), string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
intro string3(rank:1)
intro string_list1(rank:1)
=================================================
Progress: 524


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))
string1 : string
---------------------------------------
forall (string2:string) (string3:string) (string_list1:string list), string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))

0 goal(s) more...

1 conjecture(s) more...
>>> intro string3(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))
string1 : string
string3 : string
---------------------------------------
forall (string2:string) (string_list1:string list), string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro string_list1(rank:1)
=================================================
Progress: 525


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))
string1 : string
---------------------------------------
forall (string2:string) (string3:string) (string_list1:string list), string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))

0 goal(s) more...

1 conjecture(s) more...
>>> intro string_list1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))
string1 : string
string_list1 : string list
---------------------------------------
forall (string2:string) (string3:string), string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
state_list
=================================================
Progress: 526


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))
string2 : string
---------------------------------------
forall (string1:string) (string3:string) (string_list1:string list), string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))

0 goal(s) more...

1 conjecture(s) more...
>>> intro string3(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))
string2 : string
string3 : string
---------------------------------------
forall (string1:string) (string_list1:string list), string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro string_list1(rank:1)
=================================================
Progress: 527


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))
string2 : string
---------------------------------------
forall (string1:string) (string3:string) (string_list1:string list), string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))

0 goal(s) more...

1 conjecture(s) more...
>>> intro string_list1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))
string2 : string
string_list1 : string list
---------------------------------------
forall (string1:string) (string3:string), string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
state_list
=================================================
Progress: 528


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))
string3 : string
---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))

0 goal(s) more...

1 conjecture(s) more...
>>> intro string_list1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))
string3 : string
string_list1 : string list
---------------------------------------
forall (string1:string) (string2:string), string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
state_list
=================================================
Progress: 529


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))
string1 : string
string2 : string
---------------------------------------
forall (string3:string) (string_list1:string list), string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))

0 goal(s) more...

1 conjecture(s) more...
>>> intro string3(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))
string1 : string
string2 : string
string3 : string
---------------------------------------
forall (string_list1:string list), string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro string_list1(rank:1)
=================================================
Progress: 530


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))
string1 : string
string2 : string
---------------------------------------
forall (string3:string) (string_list1:string list), string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))

0 goal(s) more...

1 conjecture(s) more...
>>> intro string_list1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))
string1 : string
string2 : string
string_list1 : string list
---------------------------------------
forall (string3:string), string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
state_list
=================================================
Progress: 531


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))
string1 : string
string3 : string
---------------------------------------
forall (string2:string) (string_list1:string list), string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))

0 goal(s) more...

1 conjecture(s) more...
>>> intro string_list1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))
string1 : string
string3 : string
string_list1 : string list
---------------------------------------
forall (string2:string), string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1)(rank:0)
=================================================
Progress: 532


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))
string1 : string
string3 : string
string_list1 : string list
---------------------------------------
forall (string2:string), string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))

0 goal(s) more...

1 conjecture(s) more...
>>> case if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))
string1 : string
string3 : string
string_list1 : string list
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
forall (string2:string), string1 = string2 -> true = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
intro string2(rank:1)
case string_eq (string3) (string1)(rank:1)
=================================================
Progress: 533


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))
string2 : string
string3 : string
---------------------------------------
forall (string1:string) (string_list1:string list), string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))

0 goal(s) more...

1 conjecture(s) more...
>>> intro string_list1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))
string2 : string
string3 : string
string_list1 : string list
---------------------------------------
forall (string1:string), string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
state_list
=================================================
Progress: 534


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))
string1 : string
string2 : string
string3 : string
---------------------------------------
forall (string_list1:string list), string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))

0 goal(s) more...

1 conjecture(s) more...
>>> intro string_list1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))
string1 : string
string2 : string
string3 : string
string_list1 : string list
---------------------------------------
string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
intro Cond1(rank:1)
case if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1)(rank:1)
=================================================
Progress: 535


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))
string1 : string
string2 : string
string3 : string
string_list1 : string list
---------------------------------------
string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))

0 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))
string1 : string
string2 : string
string3 : string
string_list1 : string list
Cond1 : string1 = string2
---------------------------------------
true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 6
case if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1)(rank:1)
rewrite Cond1 in goal at 0(rank:2)
rewrite Cond1 in goal at 1(rank:2)
rewrite Cond1 in goal at 2(rank:2)
rewrite Cond1 in goal at 3(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 536


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))
string1 : string
string2 : string
string3 : string
string_list1 : string list
---------------------------------------
string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))

0 goal(s) more...

1 conjecture(s) more...
>>> case if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1)(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))
string1 : string
string2 : string
string3 : string
string_list1 : string list
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
string1 = string2 -> true = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
intro Cond1(rank:1)
case string_eq (string3) (string1)(rank:1)
=================================================
Progress: 537


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))
string1 : string
string2 : string
string3 : string
string_list1 : string list
Cond1 : string1 = string2
---------------------------------------
true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))

0 goal(s) more...

1 conjecture(s) more...
>>> case if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1)(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))
string1 : string
string2 : string
string3 : string
string_list1 : string list
Cond1 : string1 = string2
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
case string_eq (string3) (string1)(rank:1)
rewrite Cond1 in goal at 2(rank:2)
rewrite Cond1 in goal at 0(rank:2)
rewrite Cond1 in goal at 1(rank:2)
=================================================
Progress: 538


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))
string1 : string
string3 : string
string_list1 : string list
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
forall (string2:string), string1 = string2 -> true = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1)

1 goal(s) more...

1 conjecture(s) more...
>>> intro string2(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))
string1 : string
string3 : string
string_list1 : string list
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) = true
string2 : string
---------------------------------------
string1 = string2 -> true = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 6
intro Cond1(rank:1)
rewrite <- Case1 in goal at 1(rank:1)
rewrite <- Case1 in goal at 0(rank:2)
case string_eq (string3) (string1)(rank:1)
rewrite <- Case1 in goal at 2(rank:2)
rewrite Case1 in goal at 0(rank:1)
=================================================
Progress: 539


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))
string1 : string
string3 : string
string_list1 : string list
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
forall (string2:string), string1 = string2 -> true = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1)

1 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string3) (string1)(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))
string1 : string
string3 : string
string_list1 : string list
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) = true
Case2 : string_eq (string3) (string1) = true
---------------------------------------
forall (string2:string), string1 = string2 -> true = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 6
rewrite string_eqb_eq in Case2 at 0(rank:0)
rewrite <- string_eqb_eq in Case2 at 0(rank:0)
rewrite <- Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
intro string2(rank:1)
=================================================
Progress: 540


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))
string1 : string
string3 : string
string_list1 : string list
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) = true
Case2 : string_eq (string3) (string1) = true
---------------------------------------
forall (string2:string), string1 = string2 -> true = true

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))
string1 : string
string3 : string
string_list1 : string list
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) = true
Case2 : string3 = string1
---------------------------------------
forall (string2:string), string1 = string2 -> true = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
intro string2(rank:1)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite <- Case2 in goal at 0(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
=================================================
Progress: 541


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))
string1 : string
string3 : string
string_list1 : string list
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) = true
Case2 : string_eq (string3) (string1) = true
---------------------------------------
forall (string2:string), string1 = string2 -> true = true

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))
string1 : string
string3 : string
string_list1 : string list
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) = true
Case2 : string1 = string3
---------------------------------------
forall (string2:string), string1 = string2 -> true = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
intro string2(rank:1)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite Case2 in goal at 0(rank:2)
=================================================
Progress: 542


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))
string1 : string
string2 : string
string3 : string
string_list1 : string list
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
string1 = string2 -> true = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1)

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))
string1 : string
string2 : string
string3 : string
string_list1 : string list
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) = true
Cond1 : string1 = string2
---------------------------------------
true = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 8
rewrite Case1 in goal at 0(rank:1)
rewrite <- Case1 in goal at 1(rank:1)
case string_eq (string3) (string1)(rank:1)
rewrite <- Case1 in goal at 2(rank:2)
rewrite Cond1 in goal at 1(rank:2)
rewrite Cond1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite Cond1 in goal at 0(rank:2)
=================================================
Progress: 543


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))
string1 : string
string2 : string
string3 : string
string_list1 : string list
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
string1 = string2 -> true = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1)

1 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string3) (string1)(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))
string1 : string
string2 : string
string3 : string
string_list1 : string list
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) = true
Case2 : string_eq (string3) (string1) = true
---------------------------------------
string1 = string2 -> true = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 6
rewrite string_eqb_eq in Case2 at 0(rank:0)
rewrite <- string_eqb_eq in Case2 at 0(rank:0)
rewrite <- Case1 in goal at 2(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
intro Cond1(rank:1)
=================================================
Progress: 544


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))
string1 : string
string2 : string
string3 : string
string_list1 : string list
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) = true
Case2 : string_eq (string3) (string1) = true
---------------------------------------
string1 = string2 -> true = true

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))
string1 : string
string2 : string
string3 : string
string_list1 : string list
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) = true
Case2 : string3 = string1
---------------------------------------
string1 = string2 -> true = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
intro Cond1(rank:1)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite <- Case2 in goal at 0(rank:2)
rewrite <- Case1 in goal at 0(rank:2)
=================================================
Progress: 545


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))
string1 : string
string2 : string
string3 : string
string_list1 : string list
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) = true
Case2 : string_eq (string3) (string1) = true
---------------------------------------
string1 = string2 -> true = true

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))
string1 : string
string2 : string
string3 : string
string_list1 : string list
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) = true
Case2 : string1 = string3
---------------------------------------
string1 = string2 -> true = true

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
intro Cond1(rank:1)
rewrite <- Case1 in goal at 0(rank:2)
rewrite <- Case1 in goal at 1(rank:2)
rewrite <- Case1 in goal at 2(rank:2)
rewrite Case2 in goal at 0(rank:2)
=================================================
Progress: 546


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))
string1 : string
string2 : string
string3 : string
string_list1 : string list
Cond1 : string1 = string2
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) = true
---------------------------------------
true = if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1)

1 goal(s) more...

1 conjecture(s) more...
>>> case string_eq (string3) (string1)(rank : 1)


1st goal of : forall (string1:string) (string2:string) (string3:string) (string_list1:string list), string1 = string2 -> true = if if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) then sub_check_ta1 (V (string1)) ((string3::string_list1)) else sub_check_ta1 (V (string2)) ((string1::(string3::string_list1)))
string1 : string
string2 : string
string3 : string
string_list1 : string list
Cond1 : string1 = string2
Case1 : if string_eq (string3) (string1) then true else is_mem_ta1 (string_list1) (string1) = true
Case2 : string_eq (string3) (string1) = true
---------------------------------------
true = true

2 goal(s) more...

1 conjecture(s) more...
