Enter the definition file path (1/2) : 
> Enter the definition file path (2/2) : 
> Choose the proof type :
1) Interactive Mode 	 2) Auto Mode
Enter the goal : =================================================
Progress: 1


No conjecture
>>> assert forall (lst:idlist), main (lst) = mainNew (lst)(rank : 0.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)

---------------------------------------
forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:3.)
=================================================
Progress: 2


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)

---------------------------------------
forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 3.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)

---------------------------------------
forall (idlist1:idlist), if isindexed (idlist1) then spec (repr (target (idlist1) (idlist1))) else ZERO = if isindexed (idlist1) then fst3 (targetNew (idlist1)) else ZERO

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
induction idlist1(rank:4.)
=================================================
Progress: 3


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)

---------------------------------------
forall (idlist1:idlist), if isindexed (idlist1) then spec (repr (target (idlist1) (idlist1))) else ZERO = if isindexed (idlist1) then fst3 (targetNew (idlist1)) else ZERO

0 goal(s) more...

0 conjecture(s) more...
>>> induction idlist1(rank : 4.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
Base1 : idlist1 = Inil
---------------------------------------
if isindexed (Inil) then spec (repr (target (Inil) (Inil))) else ZERO = if isindexed (Inil) then fst3 (targetNew (Inil)) else ZERO

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:3.)
=================================================
Progress: 4


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
Base1 : idlist1 = Inil
---------------------------------------
if isindexed (Inil) then spec (repr (target (Inil) (Inil))) else ZERO = if isindexed (Inil) then fst3 (targetNew (Inil)) else ZERO

1 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 3.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : if isindexed (idlist2) then spec (repr (target (idlist2) (idlist2))) else ZERO = if isindexed (idlist2) then fst3 (targetNew (idlist2)) else ZERO
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
---------------------------------------
if isindexed (Icons (nat1) (nat2) (idlist2)) then spec (repr (target (Icons (nat1) (nat2) (idlist2)) (Icons (nat1) (nat2) (idlist2)))) else ZERO = if isindexed (Icons (nat1) (nat2) (idlist2)) then fst3 (targetNew (Icons (nat1) (nat2) (idlist2))) else ZERO

0 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:3.)
=================================================
Progress: 5


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : if isindexed (idlist2) then spec (repr (target (idlist2) (idlist2))) else ZERO = if isindexed (idlist2) then fst3 (targetNew (idlist2)) else ZERO
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
---------------------------------------
if isindexed (Icons (nat1) (nat2) (idlist2)) then spec (repr (target (Icons (nat1) (nat2) (idlist2)) (Icons (nat1) (nat2) (idlist2)))) else ZERO = if isindexed (Icons (nat1) (nat2) (idlist2)) then fst3 (targetNew (Icons (nat1) (nat2) (idlist2))) else ZERO

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 3.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : if isindexed (idlist2) then spec (repr (target (idlist2) (idlist2))) else ZERO = if isindexed (idlist2) then fst3 (targetNew (idlist2)) else ZERO
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
---------------------------------------
if if isindexed (idlist2) then nat_eq (nat2) (length (idlist2)) else false then spec (repr (target (Icons (nat1) (nat2) (idlist2)) (Icons (nat1) (nat2) (idlist2)))) else ZERO = if if isindexed (idlist2) then nat_eq (nat2) (length (idlist2)) else false then fst3 (targetNew (Icons (nat1) (nat2) (idlist2))) else ZERO

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case isindexed (idlist2)(rank:4.)
=================================================
Progress: 6


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : if isindexed (idlist2) then spec (repr (target (idlist2) (idlist2))) else ZERO = if isindexed (idlist2) then fst3 (targetNew (idlist2)) else ZERO
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
---------------------------------------
if if isindexed (idlist2) then nat_eq (nat2) (length (idlist2)) else false then spec (repr (target (Icons (nat1) (nat2) (idlist2)) (Icons (nat1) (nat2) (idlist2)))) else ZERO = if if isindexed (idlist2) then nat_eq (nat2) (length (idlist2)) else false then fst3 (targetNew (Icons (nat1) (nat2) (idlist2))) else ZERO

0 goal(s) more...

0 conjecture(s) more...
>>> case isindexed (idlist2)(rank : 4.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
---------------------------------------
if nat_eq (nat2) (length (idlist2)) then spec (repr (target (Icons (nat1) (nat2) (idlist2)) (Icons (nat1) (nat2) (idlist2)))) else ZERO = if nat_eq (nat2) (length (idlist2)) then fst3 (targetNew (Icons (nat1) (nat2) (idlist2))) else ZERO

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case nat_eq (nat2) (length (idlist2))(rank:5.)
=================================================
Progress: 7


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
---------------------------------------
if nat_eq (nat2) (length (idlist2)) then spec (repr (target (Icons (nat1) (nat2) (idlist2)) (Icons (nat1) (nat2) (idlist2)))) else ZERO = if nat_eq (nat2) (length (idlist2)) then fst3 (targetNew (Icons (nat1) (nat2) (idlist2))) else ZERO

1 goal(s) more...

0 conjecture(s) more...
>>> case nat_eq (nat2) (length (idlist2))(rank : 5.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
---------------------------------------
if gq (nat1) (len (repr (target (idlist2) (idlist2)))) then plus (nat1) (spec (repr (target (idlist2) (idlist2)))) else spec (repr (target (idlist2) (idlist2))) = if leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (nat1) (fst3 (targetNew (idlist2)))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 5
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)(rank:6.)
rewrite IH1 in goal at 2(rank:21.)
case gq (nat1) (len (repr (target (idlist2) (idlist2))))(rank:6.)
rewrite IH1 in goal at 0(rank:21.)
rewrite IH1 in goal at 1(rank:21.)
=================================================
Progress: 8


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
---------------------------------------
if gq (nat1) (len (repr (target (idlist2) (idlist2)))) then plus (nat1) (spec (repr (target (idlist2) (idlist2)))) else spec (repr (target (idlist2) (idlist2))) = if leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (nat1) (fst3 (targetNew (idlist2)))

2 goal(s) more...

0 conjecture(s) more...
>>> case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)(rank : 6.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
if gq (nat1) (len (repr (target (idlist2) (idlist2)))) then plus (nat1) (spec (repr (target (idlist2) (idlist2)))) else spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 5
case gq (nat1) (len (repr (target (idlist2) (idlist2))))(rank:7.)
rewrite IH1 in goal at 1(rank:14.)
rewrite IH1 in goal at 0(rank:22.)
rewrite IH1 in goal at 2(rank:14.)
rewrite <- IH1 in goal at 0(rank:14.)
=================================================
Progress: 9


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
---------------------------------------
if gq (nat1) (len (repr (target (idlist2) (idlist2)))) then plus (nat1) (spec (repr (target (idlist2) (idlist2)))) else spec (repr (target (idlist2) (idlist2))) = if leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (nat1) (fst3 (targetNew (idlist2)))

2 goal(s) more...

0 conjecture(s) more...
>>> case gq (nat1) (len (repr (target (idlist2) (idlist2))))(rank : 6.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (spec (repr (target (idlist2) (idlist2)))) = if leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (nat1) (fst3 (targetNew (idlist2)))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)(rank:7.)
rewrite IH1 in goal at 0(rank:14.)
=================================================
Progress: 10


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
if gq (nat1) (len (repr (target (idlist2) (idlist2)))) then plus (nat1) (spec (repr (target (idlist2) (idlist2)))) else spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

3 goal(s) more...

0 conjecture(s) more...
>>> case gq (nat1) (len (repr (target (idlist2) (idlist2))))(rank : 7.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (spec (repr (target (idlist2) (idlist2)))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:15.)
rewrite <- IH1 in goal at 0(rank:15.)
=================================================
Progress: 11


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (spec (repr (target (idlist2) (idlist2)))) = if leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (nat1) (fst3 (targetNew (idlist2)))

3 goal(s) more...

0 conjecture(s) more...
>>> case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)(rank : 7.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
Case4 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
plus (nat1) (spec (repr (target (idlist2) (idlist2)))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:15.)
rewrite <- IH1 in goal at 0(rank:15.)
=================================================
Progress: 12


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
if gq (nat1) (len (repr (target (idlist2) (idlist2)))) then plus (nat1) (spec (repr (target (idlist2) (idlist2)))) else spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 1(rank : 14.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
if gq (nat1) (len (repr (target (idlist2) (idlist2)))) then plus (nat1) (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) else spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
rewrite IH1 in goal at 1
Prop: if gq (SUCC (ZERO)) (len (repr (target (Inil) (Inil)))) then plus (SUCC (ZERO)) (7) else spec (repr (target (Inil) (Inil))) = 7
Prop: if gq (ZERO) (len (repr (target (Icons (ZERO) (SUCC (SUCC (ZERO))) (Icons (SUCC (ZERO)) (ZERO) (Icons (ZERO) (ZERO) (Icons (ZERO) (ZERO) (Inil))))) (Icons (ZERO) (SUCC (SUCC (ZERO))) (Icons (SUCC (ZERO)) (ZERO) (Icons (ZERO) (ZERO) (Icons (ZERO) (ZERO) (Inil)))))))) then plus (ZERO) (4) else spec (repr (target (Icons (ZERO) (SUCC (SUCC (ZERO))) (Icons (SUCC (ZERO)) (ZERO) (Icons (ZERO) (ZERO) (Icons (ZERO) (ZERO) (Inil))))) (Icons (ZERO) (SUCC (SUCC (ZERO))) (Icons (SUCC (ZERO)) (ZERO) (Icons (ZERO) (ZERO) (Icons (ZERO) (ZERO) (Inil))))))) = 4
Prop: if gq (SUCC (ZERO)) (len (repr (target (Inil) (Inil)))) then plus (SUCC (ZERO)) (6) else spec (repr (target (Inil) (Inil))) = 6
validate generalize_common_subterm_goal
Prop: if gq (ZERO) (len (repr (target (Inil) (Inil)))) then plus (ZERO) (4) else spec (repr (target (Inil) (Inil))) = 4
Prop: if gq (SUCC (ZERO)) (len (repr (target (Inil) (Inil)))) then plus (SUCC (ZERO)) (7) else spec (repr (target (Inil) (Inil))) = 7
Prop: if gq (ZERO) (len (repr (target (Inil) (Inil)))) then plus (ZERO) (5) else spec (repr (target (Inil) (Inil))) = 5
Prop: if gq (SUCC (SUCC (ZERO))) (len (repr (target (Inil) (Inil)))) then plus (SUCC (SUCC (ZERO))) (match (targetNew (Inil)) with
| Tuple2 a _ -> a) else spec (repr (target (Inil) (Inil))) = match (targetNew (Inil)) with
| Tuple2 a _ -> a
Prop: if gq (SUCC (ZERO)) (len (repr (target (Inil) (Inil)))) then plus (SUCC (ZERO)) (match (targetNew (Inil)) with
| Tuple2 a _ -> a) else spec (repr (target (Inil) (Inil))) = match (targetNew (Inil)) with
| Tuple2 a _ -> a
Prop: if gq (ZERO) (len (repr (target (Icons (SUCC (ZERO)) (ZERO) (Inil)) (Icons (SUCC (ZERO)) (ZERO) (Inil))))) then plus (ZERO) (match (targetNew (Icons (SUCC (ZERO)) (ZERO) (Inil))) with
| Tuple2 a _ -> a) else spec (repr (target (Icons (SUCC (ZERO)) (ZERO) (Inil)) (Icons (SUCC (ZERO)) (ZERO) (Inil)))) = match (targetNew (Icons (SUCC (ZERO)) (ZERO) (Inil))) with
| Tuple2 a _ -> a
asdf
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
validate generalize_common_subterm_goal
Prop: if gq (ZERO) (len (repr (target (Icons (SUCC (ZERO)) (ZERO) (Inil)) (Icons (SUCC (ZERO)) (ZERO) (Inil))))) then plus (ZERO) (spec (repr (target (Icons (SUCC (ZERO)) (ZERO) (Inil)) (Icons (SUCC (ZERO)) (ZERO) (Inil))))) else spec (repr (target (Icons (SUCC (ZERO)) (ZERO) (Inil)) (Icons (SUCC (ZERO)) (ZERO) (Inil)))) = match (targetNew (Icons (SUCC (ZERO)) (ZERO) (Inil))) with
| Tuple2 a _ -> a
Prop: if gq (ZERO) (len (repr (target (Inil) (Inil)))) then plus (ZERO) (spec (repr (target (Inil) (Inil)))) else spec (repr (target (Inil) (Inil))) = match (targetNew (Inil)) with
| Tuple2 a _ -> a
Prop: if gq (ZERO) (len (repr (target (Inil) (Inil)))) then plus (ZERO) (spec (repr (target (Inil) (Inil)))) else spec (repr (target (Inil) (Inil))) = match (targetNew (Inil)) with
| Tuple2 a _ -> a
asdf
=================================================
Progress: 13


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
if gq (nat1) (len (repr (target (idlist2) (idlist2)))) then plus (nat1) (spec (repr (target (idlist2) (idlist2)))) else spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 2(rank : 14.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
if gq (nat1) (len (repr (target (idlist2) (idlist2)))) then plus (nat1) (spec (repr (target (idlist2) (idlist2)))) else match (targetNew (idlist2)) with
| Tuple2 a _ -> a = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case gq (nat1) (len (repr (target (idlist2) (idlist2))))(rank:7.)
=================================================
Progress: 14


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
if gq (nat1) (len (repr (target (idlist2) (idlist2)))) then plus (nat1) (spec (repr (target (idlist2) (idlist2)))) else match (targetNew (idlist2)) with
| Tuple2 a _ -> a = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

3 goal(s) more...

0 conjecture(s) more...
>>> case gq (nat1) (len (repr (target (idlist2) (idlist2))))(rank : 7.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (spec (repr (target (idlist2) (idlist2)))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:15.)
rewrite <- IH1 in goal at 0(rank:15.)
=================================================
Progress: 15


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
if gq (nat1) (len (repr (target (idlist2) (idlist2)))) then plus (nat1) (spec (repr (target (idlist2) (idlist2)))) else spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 14.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
if gq (nat1) (len (repr (target (idlist2) (idlist2)))) then plus (nat1) (spec (repr (target (idlist2) (idlist2)))) else spec (repr (target (idlist2) (idlist2))) = spec (repr (target (idlist2) (idlist2)))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case gq (nat1) (len (repr (target (idlist2) (idlist2))))(rank:7.)
=================================================
Progress: 16


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
if gq (nat1) (len (repr (target (idlist2) (idlist2)))) then plus (nat1) (spec (repr (target (idlist2) (idlist2)))) else spec (repr (target (idlist2) (idlist2))) = spec (repr (target (idlist2) (idlist2)))

3 goal(s) more...

0 conjecture(s) more...
>>> case gq (nat1) (len (repr (target (idlist2) (idlist2))))(rank : 7.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (spec (repr (target (idlist2) (idlist2)))) = spec (repr (target (idlist2) (idlist2)))

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:23.)
rewrite IH1 in goal at 1(rank:23.)
rewrite IH1 in goal at 2(rank:23.)
=================================================
Progress: 17


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (spec (repr (target (idlist2) (idlist2)))) = if leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (nat1) (fst3 (targetNew (idlist2)))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 14.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) = if leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (nat1) (fst3 (targetNew (idlist2)))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)(rank:7.)
=================================================
Progress: 18


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) = if leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (nat1) (fst3 (targetNew (idlist2)))

3 goal(s) more...

0 conjecture(s) more...
>>> case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)(rank : 7.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
Case4 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
plus (nat1) (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
rewrite <- IH1 in goal at 0(rank:23.)
rewrite <- IH1 in goal at 1(rank:23.)
rewrite <- IH1 in goal at 2(rank:23.)
=================================================
Progress: 19


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (spec (repr (target (idlist2) (idlist2)))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 15.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
case gq (nat1) (len (repr (target (idlist2) (idlist2))))
rewrite IH1 in goal at 0
Prop: plus (ZERO) (2) = 2
Prop: plus (SUCC (ZERO)) (0) = 0
Prop: plus (SUCC (ZERO)) (5) = 5
validate generalize_common_subterm_goal
Prop: plus (ZERO) (0) = 0
Prop: plus (ZERO) (2) = 2
Prop: plus (ZERO) (7) = 7
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
case gq (nat1) (len (repr (target (idlist2) (idlist2))))
parent
plus (nat1) (spec (repr (target (idlist2) (idlist2))))
lower
plus(_, spec(repr(target(idlist2, idlist2))))
upper
_
remove upper
spec(repr(target(idlist2, idlist2)))
remove lower
spec(repr(target(idlist2, idlist2)))
remove upper
plus(nat1, spec(repr(target(idlist2, idlist2))))
remove lower
plus(nat1, spec(repr(target(idlist2, idlist2))))
remove upper
plus(nat1, _)
remove lower
plus(nat1, _)
remove upper
plus(nat1, _)
remove lower
plus(nat1, _)
validate generalize_common_subterm_goal
Prop: plus (ZERO) (spec (repr (target (Inil) (Inil)))) = match (targetNew (Inil)) with
| Tuple2 a _ -> a
Prop: plus (SUCC (SUCC (ZERO))) (spec (repr (target (Inil) (Inil)))) = match (targetNew (Inil)) with
| Tuple2 a _ -> a
Prop: plus (ZERO) (spec (repr (target (Inil) (Inil)))) = match (targetNew (Inil)) with
| Tuple2 a _ -> a
asdf
Lemma List
forall (any1:any) (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (any1) = any1
End of Lemma List


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

4 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 20


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

4 goal(s) more...

0 conjecture(s) more...
>>> assert forall (any1:any) (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (any1) = any1(rank : 0.)


1st goal of : forall (any1:any) (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (any1) = any1

---------------------------------------
forall (any1:any) (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (any1) = any1

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro idlist1(rank:9.)
=================================================
Progress: 21


1st goal of : forall (any1:any) (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (any1) = any1

---------------------------------------
forall (any1:any) (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (any1) = any1

0 goal(s) more...

1 conjecture(s) more...
>>> intro idlist1(rank : 9.)


1st goal of : forall (any1:any) (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (any1) = any1
idlist1 : idlist
---------------------------------------
forall (any1:any) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (any1) = any1

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
intro any1(rank:9.)
intro nat1(rank:9.)
induction nat1(rank:18.)
=================================================
Progress: 22


1st goal of : forall (any1:any) (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (any1) = any1
idlist1 : idlist
---------------------------------------
forall (any1:any) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (any1) = any1

0 goal(s) more...

1 conjecture(s) more...
>>> intro any1(rank : 9.)


1st goal of : forall (any1:any) (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (any1) = any1
idlist1 : idlist
any1 : any
---------------------------------------
forall (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (any1) = any1

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction nat1(rank:10.)
=================================================
Progress: 23


1st goal of : forall (any1:any) (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (any1) = any1
idlist1 : idlist
---------------------------------------
forall (any1:any) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (any1) = any1

0 goal(s) more...

1 conjecture(s) more...
>>> intro nat1(rank : 9.)


1st goal of : forall (any1:any) (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (any1) = any1
idlist1 : idlist
nat1 : nat
---------------------------------------
forall (any1:any), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (any1) = any1

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 24


1st goal of : forall (any1:any) (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (any1) = any1
idlist1 : idlist
nat1 : nat
---------------------------------------
forall (any1:any), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (any1) = any1

0 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (any1:any) (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (any1) = any1
idlist1 : idlist
nat1 : nat
Cond1 : isindexed (idlist1) = true
---------------------------------------
forall (any1:any), gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (any1) = any1

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:9.)
=================================================
Progress: 25


1st goal of : forall (any1:any) (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (any1) = any1
idlist1 : idlist
nat1 : nat
Cond1 : isindexed (idlist1) = true
---------------------------------------
forall (any1:any), gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (any1) = any1

0 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 9.)


1st goal of : forall (any1:any) (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (any1) = any1
idlist1 : idlist
nat1 : nat
Cond1 : isindexed (idlist1) = true
Cond2 : gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true
---------------------------------------
forall (any1:any), plus (nat1) (any1) = any1

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro any1(rank:9.)
=================================================
Progress: 26


1st goal of : forall (any1:any) (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (any1) = any1
idlist1 : idlist
nat1 : nat
Cond1 : isindexed (idlist1) = true
Cond2 : gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true
---------------------------------------
forall (any1:any), plus (nat1) (any1) = any1

0 goal(s) more...

1 conjecture(s) more...
>>> intro any1(rank : 9.)


1st goal of : forall (any1:any) (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (any1) = any1
idlist1 : idlist
nat1 : nat
Cond1 : isindexed (idlist1) = true
Cond2 : gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true
any1 : any
---------------------------------------
plus (nat1) (any1) = any1

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: plus (ZERO) (5) = 5
Prop: plus (SUCC (ZERO)) (5) = 5
Prop: plus (ZERO) (7) = 7
asdf
=================================================
Progress: 27


1st goal of : forall (any1:any) (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (any1) = any1
idlist1 : idlist
any1 : any
---------------------------------------
forall (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (any1) = any1

0 goal(s) more...

1 conjecture(s) more...
>>> induction nat1(rank : 10.)


1st goal of : forall (any1:any) (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (any1) = any1
idlist1 : idlist
any1 : any
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
isindexed (idlist1) = true->gq (ZERO) (len (repr (target (idlist1) (idlist1)))) = true -> plus (ZERO) (any1) = any1

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 28


1st goal of : forall (any1:any) (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (any1) = any1
idlist1 : idlist
any1 : any
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
isindexed (idlist1) = true->gq (ZERO) (len (repr (target (idlist1) (idlist1)))) = true -> plus (ZERO) (any1) = any1

1 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (any1:any) (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (any1) = any1
idlist1 : idlist
any1 : any
nat1 : nat
nat2 : nat
IH1 : isindexed (idlist1) = true->gq (nat2) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat2) (any1) = any1
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
isindexed (idlist1) = true->gq (SUCC (nat2)) (len (repr (target (idlist1) (idlist1)))) = true -> plus (SUCC (nat2)) (any1) = any1

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 29


1st goal of : forall (any1:any) (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (any1) = any1
idlist1 : idlist
any1 : any
nat1 : nat
nat2 : nat
IH1 : isindexed (idlist1) = true->gq (nat2) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat2) (any1) = any1
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
isindexed (idlist1) = true->gq (SUCC (nat2)) (len (repr (target (idlist1) (idlist1)))) = true -> plus (SUCC (nat2)) (any1) = any1

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (any1:any) (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (any1) = any1
idlist1 : idlist
any1 : any
nat1 : nat
nat2 : nat
IH1 : isindexed (idlist1) = true->gq (nat2) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat2) (any1) = any1
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
isindexed (idlist1) = true->gq (SUCC (nat2)) (len (repr (target (idlist1) (idlist1)))) = true -> SUCC (plus (nat2) (any1)) = any1

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 30


1st goal of : forall (any1:any) (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (any1) = any1
idlist1 : idlist
any1 : any
nat1 : nat
nat2 : nat
IH1 : isindexed (idlist1) = true->gq (nat2) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat2) (any1) = any1
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
isindexed (idlist1) = true->gq (SUCC (nat2)) (len (repr (target (idlist1) (idlist1)))) = true -> SUCC (plus (nat2) (any1)) = any1

0 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (any1:any) (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (any1) = any1
idlist1 : idlist
any1 : any
nat1 : nat
nat2 : nat
IH1 : isindexed (idlist1) = true->gq (nat2) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat2) (any1) = any1
Inductive1 : nat1 = SUCC (nat2)
Cond1 : isindexed (idlist1) = true
---------------------------------------
gq (SUCC (nat2)) (len (repr (target (idlist1) (idlist1)))) = true -> SUCC (plus (nat2) (any1)) = any1

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:9.)
=================================================
Progress: 31


1st goal of : forall (any1:any) (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (any1) = any1
idlist1 : idlist
any1 : any
nat1 : nat
nat2 : nat
IH1 : isindexed (idlist1) = true->gq (nat2) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat2) (any1) = any1
Inductive1 : nat1 = SUCC (nat2)
Cond1 : isindexed (idlist1) = true
---------------------------------------
gq (SUCC (nat2)) (len (repr (target (idlist1) (idlist1)))) = true -> SUCC (plus (nat2) (any1)) = any1

0 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 9.)


1st goal of : forall (any1:any) (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (any1) = any1
idlist1 : idlist
any1 : any
nat1 : nat
nat2 : nat
IH1 : isindexed (idlist1) = true->gq (nat2) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat2) (any1) = any1
Inductive1 : nat1 = SUCC (nat2)
Cond1 : isindexed (idlist1) = true
Cond2 : gq (SUCC (nat2)) (len (repr (target (idlist1) (idlist1)))) = true
---------------------------------------
SUCC (plus (nat2) (any1)) = any1

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:11.)
=================================================
Progress: 32


1st goal of : forall (any1:any) (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (any1) = any1
idlist1 : idlist
any1 : any
nat1 : nat
nat2 : nat
IH1 : isindexed (idlist1) = true->gq (nat2) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat2) (any1) = any1
Inductive1 : nat1 = SUCC (nat2)
Cond1 : isindexed (idlist1) = true
Cond2 : gq (SUCC (nat2)) (len (repr (target (idlist1) (idlist1)))) = true
---------------------------------------
SUCC (plus (nat2) (any1)) = any1

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 11.)


1st goal of : forall (any1:any) (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (any1) = any1
idlist1 : idlist
any1 : any
nat1 : nat
nat2 : nat
IH1 : isindexed (idlist1) = true->gq (nat2) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat2) (any1) = any1
Inductive1 : nat1 = SUCC (nat2)
Cond1 : isindexed (idlist1) = true
Cond2 : gq (SUCC (nat2)) (len (repr (target (idlist1) (idlist1)))) = true
---------------------------------------
SUCC (any1) = any1

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: SUCC (4) = 4
Prop: SUCC (6) = 6
Prop: SUCC (8) = 8
asdf
previous tactics
simpl in goal
intro Cond1
intro Cond2
validate generalize_common_subterm_goal
Prop: SUCC (plus (ZERO) (5)) = 5
Prop: SUCC (plus (ZERO) (3)) = 3
Prop: SUCC (plus (ZERO) (1)) = 1
asdf
=================================================
Progress: 33


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (spec (repr (target (idlist2) (idlist2)))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 15.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (spec (repr (target (idlist2) (idlist2)))) = spec (repr (target (idlist2) (idlist2)))

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
case gq (nat1) (len (repr (target (idlist2) (idlist2))))
rewrite <- IH1 in goal at 0
Prop: plus (ZERO) (ZERO) = ZERO
Prop: plus (ZERO) (ZERO) = ZERO
Prop: plus (SUCC (ZERO)) (SUCC (ZERO)) = SUCC (ZERO)
validate generalize_common_subterm_goal
Prop: plus (ZERO) (ZERO) = ZERO
Prop: plus (SUCC (ZERO)) (ZERO) = ZERO
Prop: plus (SUCC (SUCC (ZERO))) (ZERO) = ZERO
Prop: plus (ZERO) (spec (repr (target (Inil) (Inil)))) = spec (repr (target (Inil) (Inil)))
Prop: plus (ZERO) (spec (repr (target (Inil) (Inil)))) = spec (repr (target (Inil) (Inil)))
Prop: plus (SUCC (SUCC (ZERO))) (spec (repr (target (Icons (ZERO) (ZERO) (Icons (ZERO) (ZERO) (Inil))) (Icons (ZERO) (ZERO) (Icons (ZERO) (ZERO) (Inil)))))) = spec (repr (target (Icons (ZERO) (ZERO) (Icons (ZERO) (ZERO) (Inil))) (Icons (ZERO) (ZERO) (Icons (ZERO) (ZERO) (Inil)))))
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
case gq (nat1) (len (repr (target (idlist2) (idlist2))))
parent
plus (nat1) (spec (repr (target (idlist2) (idlist2))))
lower
plus(_, spec(repr(target(idlist2, idlist2))))
upper
_
remove upper
spec(repr(target(idlist2, idlist2)))
remove lower
spec(repr(target(idlist2, idlist2)))
remove upper
plus(nat1, spec(repr(target(idlist2, idlist2))))
remove lower
plus(nat1, spec(repr(target(idlist2, idlist2))))
remove upper
plus(nat1, _)
remove lower
plus(nat1, _)
remove upper
plus(nat1, _)
remove lower
plus(nat1, _)
validate generalize_common_subterm_goal
Prop: plus (SUCC (SUCC (ZERO))) (spec (repr (target (Inil) (Inil)))) = match (targetNew (Inil)) with
| Tuple2 a _ -> a
Prop: plus (ZERO) (spec (repr (target (Inil) (Inil)))) = match (targetNew (Inil)) with
| Tuple2 a _ -> a
Prop: plus (ZERO) (spec (repr (target (Inil) (Inil)))) = match (targetNew (Inil)) with
| Tuple2 a _ -> a
asdf
Lemma List
forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (spec (repr (target (idlist1) (idlist1)))) = spec (repr (target (idlist1) (idlist1)))
End of Lemma List


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (spec (repr (target (idlist2) (idlist2)))) = spec (repr (target (idlist2) (idlist2)))

4 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 34


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (spec (repr (target (idlist2) (idlist2)))) = spec (repr (target (idlist2) (idlist2)))

4 goal(s) more...

0 conjecture(s) more...
>>> assert forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (spec (repr (target (idlist1) (idlist1)))) = spec (repr (target (idlist1) (idlist1)))(rank : 0.)


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (spec (repr (target (idlist1) (idlist1)))) = spec (repr (target (idlist1) (idlist1)))

---------------------------------------
forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (spec (repr (target (idlist1) (idlist1)))) = spec (repr (target (idlist1) (idlist1)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction idlist1(rank:10.)
=================================================
Progress: 35


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (spec (repr (target (idlist1) (idlist1)))) = spec (repr (target (idlist1) (idlist1)))

---------------------------------------
forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (spec (repr (target (idlist1) (idlist1)))) = spec (repr (target (idlist1) (idlist1)))

0 goal(s) more...

1 conjecture(s) more...
>>> induction idlist1(rank : 10.)


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (spec (repr (target (idlist1) (idlist1)))) = spec (repr (target (idlist1) (idlist1)))
idlist1 : idlist
Base1 : idlist1 = Inil
---------------------------------------
forall (nat1:nat), isindexed (Inil) = true->gq (nat1) (len (repr (target (Inil) (Inil)))) = true -> plus (nat1) (spec (repr (target (Inil) (Inil)))) = spec (repr (target (Inil) (Inil)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 36


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (spec (repr (target (idlist1) (idlist1)))) = spec (repr (target (idlist1) (idlist1)))
idlist1 : idlist
Base1 : idlist1 = Inil
---------------------------------------
forall (nat1:nat), isindexed (Inil) = true->gq (nat1) (len (repr (target (Inil) (Inil)))) = true -> plus (nat1) (spec (repr (target (Inil) (Inil)))) = spec (repr (target (Inil) (Inil)))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (spec (repr (target (idlist1) (idlist1)))) = spec (repr (target (idlist1) (idlist1)))
idlist1 : idlist
Base1 : idlist1 = Inil
---------------------------------------
forall (nat1:nat), true = true->gq (nat1) (ZERO) = true -> plus (nat1) (ZERO) = ZERO

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction nat1(rank:11.)
=================================================
Progress: 37


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (spec (repr (target (idlist1) (idlist1)))) = spec (repr (target (idlist1) (idlist1)))
idlist1 : idlist
Base1 : idlist1 = Inil
---------------------------------------
forall (nat1:nat), true = true->gq (nat1) (ZERO) = true -> plus (nat1) (ZERO) = ZERO

1 goal(s) more...

1 conjecture(s) more...
>>> induction nat1(rank : 11.)


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (spec (repr (target (idlist1) (idlist1)))) = spec (repr (target (idlist1) (idlist1)))
idlist1 : idlist
Base1 : idlist1 = Inil
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
true = true->gq (ZERO) (ZERO) = true -> plus (ZERO) (ZERO) = ZERO

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 38


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (spec (repr (target (idlist1) (idlist1)))) = spec (repr (target (idlist1) (idlist1)))
idlist1 : idlist
Base1 : idlist1 = Inil
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
true = true->gq (ZERO) (ZERO) = true -> plus (ZERO) (ZERO) = ZERO

2 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (spec (repr (target (idlist1) (idlist1)))) = spec (repr (target (idlist1) (idlist1)))
idlist1 : idlist
Base1 : idlist1 = Inil
nat1 : nat
nat2 : nat
IH1 : true = true->gq (nat2) (ZERO) = true -> plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
true = true->gq (SUCC (nat2)) (ZERO) = true -> plus (SUCC (nat2)) (ZERO) = ZERO

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 39


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (spec (repr (target (idlist1) (idlist1)))) = spec (repr (target (idlist1) (idlist1)))
idlist1 : idlist
Base1 : idlist1 = Inil
nat1 : nat
nat2 : nat
IH1 : true = true->gq (nat2) (ZERO) = true -> plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
true = true->gq (SUCC (nat2)) (ZERO) = true -> plus (SUCC (nat2)) (ZERO) = ZERO

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (spec (repr (target (idlist1) (idlist1)))) = spec (repr (target (idlist1) (idlist1)))
idlist1 : idlist
Base1 : idlist1 = Inil
nat1 : nat
nat2 : nat
IH1 : true = true->gq (nat2) (ZERO) = true -> plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
true = true->true = true -> SUCC (plus (nat2) (ZERO)) = ZERO

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:10.)
=================================================
Progress: 40


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (spec (repr (target (idlist1) (idlist1)))) = spec (repr (target (idlist1) (idlist1)))
idlist1 : idlist
Base1 : idlist1 = Inil
nat1 : nat
nat2 : nat
IH1 : true = true->gq (nat2) (ZERO) = true -> plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
true = true->true = true -> SUCC (plus (nat2) (ZERO)) = ZERO

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 10.)


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (spec (repr (target (idlist1) (idlist1)))) = spec (repr (target (idlist1) (idlist1)))
idlist1 : idlist
Base1 : idlist1 = Inil
nat1 : nat
nat2 : nat
IH1 : true = true->gq (nat2) (ZERO) = true -> plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
Cond1 : true = true
---------------------------------------
true = true -> SUCC (plus (nat2) (ZERO)) = ZERO

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:10.)
=================================================
Progress: 41


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (spec (repr (target (idlist1) (idlist1)))) = spec (repr (target (idlist1) (idlist1)))
idlist1 : idlist
Base1 : idlist1 = Inil
nat1 : nat
nat2 : nat
IH1 : true = true->gq (nat2) (ZERO) = true -> plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
Cond1 : true = true
---------------------------------------
true = true -> SUCC (plus (nat2) (ZERO)) = ZERO

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 10.)


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (spec (repr (target (idlist1) (idlist1)))) = spec (repr (target (idlist1) (idlist1)))
idlist1 : idlist
Base1 : idlist1 = Inil
nat1 : nat
nat2 : nat
IH1 : true = true->gq (nat2) (ZERO) = true -> plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
Cond1 : true = true
Cond2 : true = true
---------------------------------------
SUCC (plus (nat2) (ZERO)) = ZERO

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:12.)
=================================================
Progress: 42


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (spec (repr (target (idlist1) (idlist1)))) = spec (repr (target (idlist1) (idlist1)))
idlist1 : idlist
Base1 : idlist1 = Inil
nat1 : nat
nat2 : nat
IH1 : true = true->gq (nat2) (ZERO) = true -> plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
Cond1 : true = true
Cond2 : true = true
---------------------------------------
SUCC (plus (nat2) (ZERO)) = ZERO

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 12.)


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (spec (repr (target (idlist1) (idlist1)))) = spec (repr (target (idlist1) (idlist1)))
idlist1 : idlist
Base1 : idlist1 = Inil
nat1 : nat
nat2 : nat
IH1 : true = true->gq (nat2) (ZERO) = true -> plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
Cond1 : true = true
Cond2 : true = true
---------------------------------------
SUCC (ZERO) = ZERO

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
rewrite IH1 in goal at 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
validate generalize_common_subterm_goal
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
Prop: SUCC (plus (SUCC (ZERO)) (ZERO)) = ZERO
asdf
=================================================
Progress: 43


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
Case4 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
plus (nat1) (spec (repr (target (idlist2) (idlist2)))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 15.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
Case4 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
plus (nat1) (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
case gq (nat1) (len (repr (target (idlist2) (idlist2))))
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
rewrite IH1 in goal at 0
Prop: plus (ZERO) (8) = 8
Prop: plus (ZERO) (0) = 0
Prop: plus (SUCC (ZERO)) (0) = 0
validate generalize_common_subterm_goal
Prop: plus (ZERO) (4) = 4
Prop: plus (ZERO) (4) = 4
Prop: plus (SUCC (SUCC (ZERO))) (1) = 1
Prop: plus (ZERO) (match (targetNew (Inil)) with
| Tuple2 a _ -> a) = match (targetNew (Inil)) with
| Tuple2 a _ -> a
Prop: plus (SUCC (ZERO)) (match (targetNew (Inil)) with
| Tuple2 a _ -> a) = match (targetNew (Inil)) with
| Tuple2 a _ -> a
Prop: plus (ZERO) (match (targetNew (Icons (ZERO) (ZERO) (Icons (ZERO) (SUCC (ZERO)) (Inil)))) with
| Tuple2 a _ -> a) = match (targetNew (Icons (ZERO) (ZERO) (Icons (ZERO) (SUCC (ZERO)) (Inil)))) with
| Tuple2 a _ -> a
asdf
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
case gq (nat1) (len (repr (target (idlist2) (idlist2))))
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
parent
plus (nat1) (spec (repr (target (idlist2) (idlist2))))
lower
plus(_, spec(repr(target(idlist2, idlist2))))
upper
_
remove upper
spec(repr(target(idlist2, idlist2)))
remove lower
spec(repr(target(idlist2, idlist2)))
remove upper
plus(nat1, spec(repr(target(idlist2, idlist2))))
remove lower
plus(nat1, spec(repr(target(idlist2, idlist2))))
remove upper
plus(nat1, _)
remove lower
plus(nat1, _)
remove upper
plus(nat1, _)
remove lower
plus(nat1, _)
validate generalize_common_subterm_goal
Prop: plus (ZERO) (spec (repr (target (Inil) (Inil)))) = match (targetNew (Inil)) with
| Tuple2 a _ -> a
Prop: plus (ZERO) (spec (repr (target (Inil) (Inil)))) = match (targetNew (Inil)) with
| Tuple2 a _ -> a
Prop: plus (SUCC (ZERO)) (spec (repr (target (Inil) (Inil)))) = match (targetNew (Inil)) with
| Tuple2 a _ -> a
asdf
=================================================
Progress: 44


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
Case4 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
plus (nat1) (spec (repr (target (idlist2) (idlist2)))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 15.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
Case4 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
plus (nat1) (spec (repr (target (idlist2) (idlist2)))) = spec (repr (target (idlist2) (idlist2)))

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
case gq (nat1) (len (repr (target (idlist2) (idlist2))))
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
rewrite <- IH1 in goal at 0
Prop: plus (ZERO) (ZERO) = ZERO
Prop: plus (SUCC (ZERO)) (SUCC (SUCC (ZERO))) = SUCC (SUCC (ZERO))
Prop: plus (SUCC (ZERO)) (ZERO) = ZERO
validate generalize_common_subterm_goal
Prop: plus (ZERO) (ZERO) = ZERO
Prop: plus (SUCC (SUCC (SUCC (SUCC (ZERO))))) (ZERO) = ZERO
Prop: plus (SUCC (ZERO)) (ZERO) = ZERO
Prop: plus (SUCC (SUCC (SUCC (SUCC (SUCC (ZERO)))))) (spec (repr (target (Icons (SUCC (ZERO)) (ZERO) (Icons (ZERO) (SUCC (ZERO)) (Inil))) (Icons (SUCC (ZERO)) (ZERO) (Icons (ZERO) (SUCC (ZERO)) (Inil)))))) = spec (repr (target (Icons (SUCC (ZERO)) (ZERO) (Icons (ZERO) (SUCC (ZERO)) (Inil))) (Icons (SUCC (ZERO)) (ZERO) (Icons (ZERO) (SUCC (ZERO)) (Inil)))))
Prop: plus (SUCC (ZERO)) (spec (repr (target (Inil) (Inil)))) = spec (repr (target (Inil) (Inil)))
Prop: plus (ZERO) (spec (repr (target (Inil) (Inil)))) = spec (repr (target (Inil) (Inil)))
asdf
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
case gq (nat1) (len (repr (target (idlist2) (idlist2))))
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
parent
plus (nat1) (spec (repr (target (idlist2) (idlist2))))
lower
plus(_, spec(repr(target(idlist2, idlist2))))
upper
_
remove upper
spec(repr(target(idlist2, idlist2)))
remove lower
spec(repr(target(idlist2, idlist2)))
remove upper
plus(nat1, spec(repr(target(idlist2, idlist2))))
remove lower
plus(nat1, spec(repr(target(idlist2, idlist2))))
remove upper
plus(nat1, _)
remove lower
plus(nat1, _)
remove upper
plus(nat1, _)
remove lower
plus(nat1, _)
validate generalize_common_subterm_goal
Prop: plus (SUCC (ZERO)) (spec (repr (target (Inil) (Inil)))) = match (targetNew (Inil)) with
| Tuple2 a _ -> a
Prop: plus (ZERO) (spec (repr (target (Icons (SUCC (SUCC (ZERO))) (ZERO) (Inil)) (Icons (SUCC (SUCC (ZERO))) (ZERO) (Inil))))) = match (targetNew (Icons (SUCC (SUCC (ZERO))) (ZERO) (Inil))) with
| Tuple2 a _ -> a
Prop: plus (ZERO) (spec (repr (target (Inil) (Inil)))) = match (targetNew (Inil)) with
| Tuple2 a _ -> a
asdf
=================================================
Progress: 45


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (spec (repr (target (idlist2) (idlist2)))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 15.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
rewrite IH1 in goal at 2
case gq (nat1) (len (repr (target (idlist2) (idlist2))))
rewrite IH1 in goal at 0
Prop: plus (SUCC (SUCC (ZERO))) (0) = 0
Prop: plus (SUCC (SUCC (SUCC (ZERO)))) (4) = 4
Prop: plus (ZERO) (0) = 0
validate generalize_common_subterm_goal
Prop: plus (SUCC (ZERO)) (5) = 5
Prop: plus (SUCC (ZERO)) (4) = 4
Prop: plus (ZERO) (0) = 0
Prop: plus (SUCC (SUCC (ZERO))) (match (targetNew (Icons (SUCC (ZERO)) (ZERO) (Icons (ZERO) (ZERO) (Icons (ZERO) (SUCC (ZERO)) (Icons (ZERO) (ZERO) (Inil)))))) with
| Tuple2 a _ -> a) = match (targetNew (Icons (SUCC (ZERO)) (ZERO) (Icons (ZERO) (ZERO) (Icons (ZERO) (SUCC (ZERO)) (Icons (ZERO) (ZERO) (Inil)))))) with
| Tuple2 a _ -> a
Prop: plus (ZERO) (match (targetNew (Icons (ZERO) (ZERO) (Inil))) with
| Tuple2 a _ -> a) = match (targetNew (Icons (ZERO) (ZERO) (Inil))) with
| Tuple2 a _ -> a
Prop: plus (SUCC (SUCC (ZERO))) (match (targetNew (Inil)) with
| Tuple2 a _ -> a) = match (targetNew (Inil)) with
| Tuple2 a _ -> a
asdf
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
rewrite IH1 in goal at 2
case gq (nat1) (len (repr (target (idlist2) (idlist2))))
validate generalize_common_subterm_goal
Prop: plus (SUCC (ZERO)) (spec (repr (target (Inil) (Inil)))) = match (targetNew (Inil)) with
| Tuple2 a _ -> a
Prop: plus (ZERO) (spec (repr (target (Inil) (Inil)))) = match (targetNew (Inil)) with
| Tuple2 a _ -> a
Prop: plus (ZERO) (spec (repr (target (Inil) (Inil)))) = match (targetNew (Inil)) with
| Tuple2 a _ -> a
asdf
=================================================
Progress: 46


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (spec (repr (target (idlist2) (idlist2)))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 15.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (spec (repr (target (idlist2) (idlist2)))) = spec (repr (target (idlist2) (idlist2)))

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
rewrite IH1 in goal at 2
case gq (nat1) (len (repr (target (idlist2) (idlist2))))
rewrite <- IH1 in goal at 0
Prop: plus (SUCC (SUCC (ZERO))) (SUCC (SUCC (SUCC (ZERO)))) = SUCC (SUCC (SUCC (ZERO)))
Prop: plus (SUCC (ZERO)) (SUCC (ZERO)) = SUCC (ZERO)
Prop: plus (SUCC (ZERO)) (SUCC (ZERO)) = SUCC (ZERO)
validate generalize_common_subterm_goal
Prop: plus (ZERO) (SUCC (SUCC (SUCC (ZERO)))) = SUCC (SUCC (SUCC (ZERO)))
Prop: plus (ZERO) (ZERO) = ZERO
Prop: plus (ZERO) (SUCC (ZERO)) = SUCC (ZERO)
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
rewrite IH1 in goal at 2
case gq (nat1) (len (repr (target (idlist2) (idlist2))))
validate generalize_common_subterm_goal
Prop: plus (SUCC (ZERO)) (spec (repr (target (Icons (SUCC (SUCC (ZERO))) (ZERO) (Inil)) (Icons (SUCC (SUCC (ZERO))) (ZERO) (Inil))))) = match (targetNew (Icons (SUCC (SUCC (ZERO))) (ZERO) (Inil))) with
| Tuple2 a _ -> a
Prop: plus (ZERO) (spec (repr (target (Icons (ZERO) (ZERO) (Icons (ZERO) (SUCC (ZERO)) (Inil))) (Icons (ZERO) (ZERO) (Icons (ZERO) (SUCC (ZERO)) (Inil)))))) = match (targetNew (Icons (ZERO) (ZERO) (Icons (ZERO) (SUCC (ZERO)) (Inil)))) with
| Tuple2 a _ -> a
Prop: plus (ZERO) (spec (repr (target (Icons (ZERO) (SUCC (ZERO)) (Inil)) (Icons (ZERO) (SUCC (ZERO)) (Inil))))) = match (targetNew (Icons (ZERO) (SUCC (ZERO)) (Inil))) with
| Tuple2 a _ -> a
Lemma List
forall (nat1:nat) (idlist1:idlist) (nat2:nat), isindexed (idlist1) = true->gq (nat2) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat2) (nat1) = nat1
End of Lemma List


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (spec (repr (target (idlist2) (idlist2)))) = spec (repr (target (idlist2) (idlist2)))

4 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 47


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (spec (repr (target (idlist2) (idlist2)))) = spec (repr (target (idlist2) (idlist2)))

4 goal(s) more...

0 conjecture(s) more...
>>> assert forall (nat1:nat) (idlist1:idlist) (nat2:nat), isindexed (idlist1) = true->gq (nat2) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat2) (nat1) = nat1(rank : 0.)


1st goal of : forall (nat1:nat) (idlist1:idlist) (nat2:nat), isindexed (idlist1) = true->gq (nat2) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat2) (nat1) = nat1

---------------------------------------
forall (nat1:nat) (idlist1:idlist) (nat2:nat), isindexed (idlist1) = true->gq (nat2) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat2) (nat1) = nat1

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro idlist1(rank:9.)
=================================================
Progress: 48


1st goal of : forall (nat1:nat) (idlist1:idlist) (nat2:nat), isindexed (idlist1) = true->gq (nat2) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat2) (nat1) = nat1

---------------------------------------
forall (nat1:nat) (idlist1:idlist) (nat2:nat), isindexed (idlist1) = true->gq (nat2) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat2) (nat1) = nat1

0 goal(s) more...

1 conjecture(s) more...
>>> intro idlist1(rank : 9.)


1st goal of : forall (nat1:nat) (idlist1:idlist) (nat2:nat), isindexed (idlist1) = true->gq (nat2) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat2) (nat1) = nat1
idlist1 : idlist
---------------------------------------
forall (nat1:nat) (nat2:nat), isindexed (idlist1) = true->gq (nat2) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat2) (nat1) = nat1

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
intro nat1(rank:9.)
intro nat2(rank:9.)
induction nat2(rank:18.)
=================================================
Progress: 49


1st goal of : forall (nat1:nat) (idlist1:idlist) (nat2:nat), isindexed (idlist1) = true->gq (nat2) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat2) (nat1) = nat1
idlist1 : idlist
---------------------------------------
forall (nat1:nat) (nat2:nat), isindexed (idlist1) = true->gq (nat2) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat2) (nat1) = nat1

0 goal(s) more...

1 conjecture(s) more...
>>> intro nat1(rank : 9.)


1st goal of : forall (nat1:nat) (idlist1:idlist) (nat2:nat), isindexed (idlist1) = true->gq (nat2) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat2) (nat1) = nat1
idlist1 : idlist
nat1 : nat
---------------------------------------
forall (nat2:nat), isindexed (idlist1) = true->gq (nat2) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat2) (nat1) = nat1

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction nat2(rank:10.)
=================================================
Progress: 50


1st goal of : forall (nat1:nat) (idlist1:idlist) (nat2:nat), isindexed (idlist1) = true->gq (nat2) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat2) (nat1) = nat1
idlist1 : idlist
---------------------------------------
forall (nat1:nat) (nat2:nat), isindexed (idlist1) = true->gq (nat2) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat2) (nat1) = nat1

0 goal(s) more...

1 conjecture(s) more...
>>> intro nat2(rank : 9.)


1st goal of : forall (nat1:nat) (idlist1:idlist) (nat2:nat), isindexed (idlist1) = true->gq (nat2) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat2) (nat1) = nat1
idlist1 : idlist
nat2 : nat
---------------------------------------
forall (nat1:nat), isindexed (idlist1) = true->gq (nat2) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat2) (nat1) = nat1

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 51


1st goal of : forall (nat1:nat) (idlist1:idlist) (nat2:nat), isindexed (idlist1) = true->gq (nat2) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat2) (nat1) = nat1
idlist1 : idlist
nat2 : nat
---------------------------------------
forall (nat1:nat), isindexed (idlist1) = true->gq (nat2) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat2) (nat1) = nat1

0 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (nat1:nat) (idlist1:idlist) (nat2:nat), isindexed (idlist1) = true->gq (nat2) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat2) (nat1) = nat1
idlist1 : idlist
nat2 : nat
Cond1 : isindexed (idlist1) = true
---------------------------------------
forall (nat1:nat), gq (nat2) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat2) (nat1) = nat1

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:9.)
=================================================
Progress: 52


1st goal of : forall (nat1:nat) (idlist1:idlist) (nat2:nat), isindexed (idlist1) = true->gq (nat2) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat2) (nat1) = nat1
idlist1 : idlist
nat2 : nat
Cond1 : isindexed (idlist1) = true
---------------------------------------
forall (nat1:nat), gq (nat2) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat2) (nat1) = nat1

0 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 9.)


1st goal of : forall (nat1:nat) (idlist1:idlist) (nat2:nat), isindexed (idlist1) = true->gq (nat2) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat2) (nat1) = nat1
idlist1 : idlist
nat2 : nat
Cond1 : isindexed (idlist1) = true
Cond2 : gq (nat2) (len (repr (target (idlist1) (idlist1)))) = true
---------------------------------------
forall (nat1:nat), plus (nat2) (nat1) = nat1

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro nat1(rank:9.)
=================================================
Progress: 53


1st goal of : forall (nat1:nat) (idlist1:idlist) (nat2:nat), isindexed (idlist1) = true->gq (nat2) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat2) (nat1) = nat1
idlist1 : idlist
nat2 : nat
Cond1 : isindexed (idlist1) = true
Cond2 : gq (nat2) (len (repr (target (idlist1) (idlist1)))) = true
---------------------------------------
forall (nat1:nat), plus (nat2) (nat1) = nat1

0 goal(s) more...

1 conjecture(s) more...
>>> intro nat1(rank : 9.)


1st goal of : forall (nat1:nat) (idlist1:idlist) (nat2:nat), isindexed (idlist1) = true->gq (nat2) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat2) (nat1) = nat1
idlist1 : idlist
nat2 : nat
Cond1 : isindexed (idlist1) = true
Cond2 : gq (nat2) (len (repr (target (idlist1) (idlist1)))) = true
nat1 : nat
---------------------------------------
plus (nat2) (nat1) = nat1

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: plus (SUCC (ZERO)) (ZERO) = ZERO
Prop: plus (ZERO) (ZERO) = ZERO
Prop: plus (ZERO) (ZERO) = ZERO
asdf
=================================================
Progress: 54


1st goal of : forall (nat1:nat) (idlist1:idlist) (nat2:nat), isindexed (idlist1) = true->gq (nat2) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat2) (nat1) = nat1
idlist1 : idlist
nat1 : nat
---------------------------------------
forall (nat2:nat), isindexed (idlist1) = true->gq (nat2) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat2) (nat1) = nat1

0 goal(s) more...

1 conjecture(s) more...
>>> induction nat2(rank : 10.)


1st goal of : forall (nat1:nat) (idlist1:idlist) (nat2:nat), isindexed (idlist1) = true->gq (nat2) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat2) (nat1) = nat1
idlist1 : idlist
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
isindexed (idlist1) = true->gq (ZERO) (len (repr (target (idlist1) (idlist1)))) = true -> plus (ZERO) (nat1) = nat1

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 55


1st goal of : forall (nat1:nat) (idlist1:idlist) (nat2:nat), isindexed (idlist1) = true->gq (nat2) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat2) (nat1) = nat1
idlist1 : idlist
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
isindexed (idlist1) = true->gq (ZERO) (len (repr (target (idlist1) (idlist1)))) = true -> plus (ZERO) (nat1) = nat1

1 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (nat1:nat) (idlist1:idlist) (nat2:nat), isindexed (idlist1) = true->gq (nat2) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat2) (nat1) = nat1
idlist1 : idlist
nat1 : nat
nat2 : nat
nat3 : nat
IH1 : isindexed (idlist1) = true->gq (nat3) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat3) (nat1) = nat1
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
isindexed (idlist1) = true->gq (SUCC (nat3)) (len (repr (target (idlist1) (idlist1)))) = true -> plus (SUCC (nat3)) (nat1) = nat1

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 56


1st goal of : forall (nat1:nat) (idlist1:idlist) (nat2:nat), isindexed (idlist1) = true->gq (nat2) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat2) (nat1) = nat1
idlist1 : idlist
nat1 : nat
nat2 : nat
nat3 : nat
IH1 : isindexed (idlist1) = true->gq (nat3) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat3) (nat1) = nat1
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
isindexed (idlist1) = true->gq (SUCC (nat3)) (len (repr (target (idlist1) (idlist1)))) = true -> plus (SUCC (nat3)) (nat1) = nat1

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (nat1:nat) (idlist1:idlist) (nat2:nat), isindexed (idlist1) = true->gq (nat2) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat2) (nat1) = nat1
idlist1 : idlist
nat1 : nat
nat2 : nat
nat3 : nat
IH1 : isindexed (idlist1) = true->gq (nat3) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat3) (nat1) = nat1
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
isindexed (idlist1) = true->gq (SUCC (nat3)) (len (repr (target (idlist1) (idlist1)))) = true -> SUCC (plus (nat3) (nat1)) = nat1

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 57


1st goal of : forall (nat1:nat) (idlist1:idlist) (nat2:nat), isindexed (idlist1) = true->gq (nat2) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat2) (nat1) = nat1
idlist1 : idlist
nat1 : nat
nat2 : nat
nat3 : nat
IH1 : isindexed (idlist1) = true->gq (nat3) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat3) (nat1) = nat1
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
isindexed (idlist1) = true->gq (SUCC (nat3)) (len (repr (target (idlist1) (idlist1)))) = true -> SUCC (plus (nat3) (nat1)) = nat1

0 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (nat1:nat) (idlist1:idlist) (nat2:nat), isindexed (idlist1) = true->gq (nat2) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat2) (nat1) = nat1
idlist1 : idlist
nat1 : nat
nat2 : nat
nat3 : nat
IH1 : isindexed (idlist1) = true->gq (nat3) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat3) (nat1) = nat1
Inductive1 : nat2 = SUCC (nat3)
Cond1 : isindexed (idlist1) = true
---------------------------------------
gq (SUCC (nat3)) (len (repr (target (idlist1) (idlist1)))) = true -> SUCC (plus (nat3) (nat1)) = nat1

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:9.)
=================================================
Progress: 58


1st goal of : forall (nat1:nat) (idlist1:idlist) (nat2:nat), isindexed (idlist1) = true->gq (nat2) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat2) (nat1) = nat1
idlist1 : idlist
nat1 : nat
nat2 : nat
nat3 : nat
IH1 : isindexed (idlist1) = true->gq (nat3) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat3) (nat1) = nat1
Inductive1 : nat2 = SUCC (nat3)
Cond1 : isindexed (idlist1) = true
---------------------------------------
gq (SUCC (nat3)) (len (repr (target (idlist1) (idlist1)))) = true -> SUCC (plus (nat3) (nat1)) = nat1

0 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 9.)


1st goal of : forall (nat1:nat) (idlist1:idlist) (nat2:nat), isindexed (idlist1) = true->gq (nat2) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat2) (nat1) = nat1
idlist1 : idlist
nat1 : nat
nat2 : nat
nat3 : nat
IH1 : isindexed (idlist1) = true->gq (nat3) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat3) (nat1) = nat1
Inductive1 : nat2 = SUCC (nat3)
Cond1 : isindexed (idlist1) = true
Cond2 : gq (SUCC (nat3)) (len (repr (target (idlist1) (idlist1)))) = true
---------------------------------------
SUCC (plus (nat3) (nat1)) = nat1

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:11.)
=================================================
Progress: 59


1st goal of : forall (nat1:nat) (idlist1:idlist) (nat2:nat), isindexed (idlist1) = true->gq (nat2) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat2) (nat1) = nat1
idlist1 : idlist
nat1 : nat
nat2 : nat
nat3 : nat
IH1 : isindexed (idlist1) = true->gq (nat3) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat3) (nat1) = nat1
Inductive1 : nat2 = SUCC (nat3)
Cond1 : isindexed (idlist1) = true
Cond2 : gq (SUCC (nat3)) (len (repr (target (idlist1) (idlist1)))) = true
---------------------------------------
SUCC (plus (nat3) (nat1)) = nat1

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 11.)


1st goal of : forall (nat1:nat) (idlist1:idlist) (nat2:nat), isindexed (idlist1) = true->gq (nat2) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat2) (nat1) = nat1
idlist1 : idlist
nat1 : nat
nat2 : nat
nat3 : nat
IH1 : isindexed (idlist1) = true->gq (nat3) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat3) (nat1) = nat1
Inductive1 : nat2 = SUCC (nat3)
Cond1 : isindexed (idlist1) = true
Cond2 : gq (SUCC (nat3)) (len (repr (target (idlist1) (idlist1)))) = true
---------------------------------------
SUCC (nat1) = nat1

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: SUCC (SUCC (SUCC (SUCC (ZERO)))) = SUCC (SUCC (SUCC (ZERO)))
Prop: SUCC (ZERO) = ZERO
Prop: SUCC (ZERO) = ZERO
asdf
previous tactics
simpl in goal
intro Cond1
intro Cond2
validate generalize_common_subterm_goal
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
asdf
=================================================
Progress: 60


1st goal of : forall (any1:any) (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (any1) = any1
idlist1 : idlist
---------------------------------------
forall (any1:any) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (any1) = any1

0 goal(s) more...

1 conjecture(s) more...
>>> induction nat1(rank : 18.)


1st goal of : forall (any1:any) (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (any1) = any1
idlist1 : idlist
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (any1:any), isindexed (idlist1) = true->gq (ZERO) (len (repr (target (idlist1) (idlist1)))) = true -> plus (ZERO) (any1) = any1

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 61


1st goal of : forall (any1:any) (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (any1) = any1
idlist1 : idlist
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (any1:any), isindexed (idlist1) = true->gq (ZERO) (len (repr (target (idlist1) (idlist1)))) = true -> plus (ZERO) (any1) = any1

1 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (any1:any) (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (any1) = any1
idlist1 : idlist
nat1 : nat
nat2 : nat
IH1 : forall (any1:any), isindexed (idlist1) = true->gq (nat2) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat2) (any1) = any1
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (any1:any), isindexed (idlist1) = true->gq (SUCC (nat2)) (len (repr (target (idlist1) (idlist1)))) = true -> plus (SUCC (nat2)) (any1) = any1

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 62


1st goal of : forall (any1:any) (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (any1) = any1
idlist1 : idlist
nat1 : nat
nat2 : nat
IH1 : forall (any1:any), isindexed (idlist1) = true->gq (nat2) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat2) (any1) = any1
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (any1:any), isindexed (idlist1) = true->gq (SUCC (nat2)) (len (repr (target (idlist1) (idlist1)))) = true -> plus (SUCC (nat2)) (any1) = any1

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (any1:any) (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (any1) = any1
idlist1 : idlist
nat1 : nat
nat2 : nat
IH1 : forall (any1:any), isindexed (idlist1) = true->gq (nat2) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat2) (any1) = any1
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (any1:any), isindexed (idlist1) = true->gq (SUCC (nat2)) (len (repr (target (idlist1) (idlist1)))) = true -> SUCC (plus (nat2) (any1)) = any1

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 63


1st goal of : forall (any1:any) (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (any1) = any1
idlist1 : idlist
nat1 : nat
nat2 : nat
IH1 : forall (any1:any), isindexed (idlist1) = true->gq (nat2) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat2) (any1) = any1
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (any1:any), isindexed (idlist1) = true->gq (SUCC (nat2)) (len (repr (target (idlist1) (idlist1)))) = true -> SUCC (plus (nat2) (any1)) = any1

0 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (any1:any) (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (any1) = any1
idlist1 : idlist
nat1 : nat
nat2 : nat
IH1 : forall (any1:any), isindexed (idlist1) = true->gq (nat2) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat2) (any1) = any1
Inductive1 : nat1 = SUCC (nat2)
Cond1 : isindexed (idlist1) = true
---------------------------------------
forall (any1:any), gq (SUCC (nat2)) (len (repr (target (idlist1) (idlist1)))) = true -> SUCC (plus (nat2) (any1)) = any1

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:9.)
=================================================
Progress: 64


1st goal of : forall (any1:any) (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (any1) = any1
idlist1 : idlist
nat1 : nat
nat2 : nat
IH1 : forall (any1:any), isindexed (idlist1) = true->gq (nat2) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat2) (any1) = any1
Inductive1 : nat1 = SUCC (nat2)
Cond1 : isindexed (idlist1) = true
---------------------------------------
forall (any1:any), gq (SUCC (nat2)) (len (repr (target (idlist1) (idlist1)))) = true -> SUCC (plus (nat2) (any1)) = any1

0 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 9.)


1st goal of : forall (any1:any) (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (any1) = any1
idlist1 : idlist
nat1 : nat
nat2 : nat
IH1 : forall (any1:any), isindexed (idlist1) = true->gq (nat2) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat2) (any1) = any1
Inductive1 : nat1 = SUCC (nat2)
Cond1 : isindexed (idlist1) = true
Cond2 : gq (SUCC (nat2)) (len (repr (target (idlist1) (idlist1)))) = true
---------------------------------------
forall (any1:any), SUCC (plus (nat2) (any1)) = any1

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
intro any1(rank:9.)
rewrite IH1 in goal at 0(rank:19.)
=================================================
Progress: 65


1st goal of : forall (any1:any) (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (any1) = any1
idlist1 : idlist
nat1 : nat
nat2 : nat
IH1 : forall (any1:any), isindexed (idlist1) = true->gq (nat2) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat2) (any1) = any1
Inductive1 : nat1 = SUCC (nat2)
Cond1 : isindexed (idlist1) = true
Cond2 : gq (SUCC (nat2)) (len (repr (target (idlist1) (idlist1)))) = true
---------------------------------------
forall (any1:any), SUCC (plus (nat2) (any1)) = any1

0 goal(s) more...

1 conjecture(s) more...
>>> intro any1(rank : 9.)


1st goal of : forall (any1:any) (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (any1) = any1
idlist1 : idlist
nat1 : nat
nat2 : nat
IH1 : forall (any1:any), isindexed (idlist1) = true->gq (nat2) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat2) (any1) = any1
Inductive1 : nat1 = SUCC (nat2)
Cond1 : isindexed (idlist1) = true
Cond2 : gq (SUCC (nat2)) (len (repr (target (idlist1) (idlist1)))) = true
any1 : any
---------------------------------------
SUCC (plus (nat2) (any1)) = any1

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:11.)
=================================================
Progress: 66


1st goal of : forall (any1:any) (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (any1) = any1
idlist1 : idlist
nat1 : nat
nat2 : nat
IH1 : forall (any1:any), isindexed (idlist1) = true->gq (nat2) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat2) (any1) = any1
Inductive1 : nat1 = SUCC (nat2)
Cond1 : isindexed (idlist1) = true
Cond2 : gq (SUCC (nat2)) (len (repr (target (idlist1) (idlist1)))) = true
any1 : any
---------------------------------------
SUCC (plus (nat2) (any1)) = any1

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 11.)


1st goal of : forall (any1:any) (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (any1) = any1
idlist1 : idlist
nat1 : nat
nat2 : nat
IH1 : forall (any1:any), isindexed (idlist1) = true->gq (nat2) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat2) (any1) = any1
Inductive1 : nat1 = SUCC (nat2)
Cond1 : isindexed (idlist1) = true
Cond2 : gq (SUCC (nat2)) (len (repr (target (idlist1) (idlist1)))) = true
any1 : any
---------------------------------------
SUCC (any1) = any1

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro any1
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: SUCC (0) = 0
Prop: SUCC (0) = 0
Prop: SUCC (0) = 0
asdf
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro any1
validate generalize_common_subterm_goal
Prop: SUCC (plus (ZERO) (8)) = 8
Prop: SUCC (plus (SUCC (ZERO)) (3)) = 3
Prop: SUCC (plus (ZERO) (5)) = 5
asdf
=================================================
Progress: 67


1st goal of : forall (nat1:nat) (idlist1:idlist) (nat2:nat), isindexed (idlist1) = true->gq (nat2) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat2) (nat1) = nat1
idlist1 : idlist
---------------------------------------
forall (nat1:nat) (nat2:nat), isindexed (idlist1) = true->gq (nat2) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat2) (nat1) = nat1

0 goal(s) more...

1 conjecture(s) more...
>>> induction nat2(rank : 18.)


1st goal of : forall (nat1:nat) (idlist1:idlist) (nat2:nat), isindexed (idlist1) = true->gq (nat2) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat2) (nat1) = nat1
idlist1 : idlist
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (nat1:nat), isindexed (idlist1) = true->gq (ZERO) (len (repr (target (idlist1) (idlist1)))) = true -> plus (ZERO) (nat1) = nat1

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 68


1st goal of : forall (nat1:nat) (idlist1:idlist) (nat2:nat), isindexed (idlist1) = true->gq (nat2) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat2) (nat1) = nat1
idlist1 : idlist
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (nat1:nat), isindexed (idlist1) = true->gq (ZERO) (len (repr (target (idlist1) (idlist1)))) = true -> plus (ZERO) (nat1) = nat1

1 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (nat1:nat) (idlist1:idlist) (nat2:nat), isindexed (idlist1) = true->gq (nat2) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat2) (nat1) = nat1
idlist1 : idlist
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat), isindexed (idlist1) = true->gq (nat3) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat3) (nat1) = nat1
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
forall (nat1:nat), isindexed (idlist1) = true->gq (SUCC (nat3)) (len (repr (target (idlist1) (idlist1)))) = true -> plus (SUCC (nat3)) (nat1) = nat1

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 69


1st goal of : forall (nat1:nat) (idlist1:idlist) (nat2:nat), isindexed (idlist1) = true->gq (nat2) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat2) (nat1) = nat1
idlist1 : idlist
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat), isindexed (idlist1) = true->gq (nat3) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat3) (nat1) = nat1
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
forall (nat1:nat), isindexed (idlist1) = true->gq (SUCC (nat3)) (len (repr (target (idlist1) (idlist1)))) = true -> plus (SUCC (nat3)) (nat1) = nat1

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (nat1:nat) (idlist1:idlist) (nat2:nat), isindexed (idlist1) = true->gq (nat2) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat2) (nat1) = nat1
idlist1 : idlist
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat), isindexed (idlist1) = true->gq (nat3) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat3) (nat1) = nat1
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
forall (nat1:nat), isindexed (idlist1) = true->gq (SUCC (nat3)) (len (repr (target (idlist1) (idlist1)))) = true -> SUCC (plus (nat3) (nat1)) = nat1

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 70


1st goal of : forall (nat1:nat) (idlist1:idlist) (nat2:nat), isindexed (idlist1) = true->gq (nat2) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat2) (nat1) = nat1
idlist1 : idlist
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat), isindexed (idlist1) = true->gq (nat3) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat3) (nat1) = nat1
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
forall (nat1:nat), isindexed (idlist1) = true->gq (SUCC (nat3)) (len (repr (target (idlist1) (idlist1)))) = true -> SUCC (plus (nat3) (nat1)) = nat1

0 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (nat1:nat) (idlist1:idlist) (nat2:nat), isindexed (idlist1) = true->gq (nat2) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat2) (nat1) = nat1
idlist1 : idlist
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat), isindexed (idlist1) = true->gq (nat3) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat3) (nat1) = nat1
Inductive1 : nat2 = SUCC (nat3)
Cond1 : isindexed (idlist1) = true
---------------------------------------
forall (nat1:nat), gq (SUCC (nat3)) (len (repr (target (idlist1) (idlist1)))) = true -> SUCC (plus (nat3) (nat1)) = nat1

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:9.)
=================================================
Progress: 71


1st goal of : forall (nat1:nat) (idlist1:idlist) (nat2:nat), isindexed (idlist1) = true->gq (nat2) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat2) (nat1) = nat1
idlist1 : idlist
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat), isindexed (idlist1) = true->gq (nat3) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat3) (nat1) = nat1
Inductive1 : nat2 = SUCC (nat3)
Cond1 : isindexed (idlist1) = true
---------------------------------------
forall (nat1:nat), gq (SUCC (nat3)) (len (repr (target (idlist1) (idlist1)))) = true -> SUCC (plus (nat3) (nat1)) = nat1

0 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 9.)


1st goal of : forall (nat1:nat) (idlist1:idlist) (nat2:nat), isindexed (idlist1) = true->gq (nat2) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat2) (nat1) = nat1
idlist1 : idlist
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat), isindexed (idlist1) = true->gq (nat3) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat3) (nat1) = nat1
Inductive1 : nat2 = SUCC (nat3)
Cond1 : isindexed (idlist1) = true
Cond2 : gq (SUCC (nat3)) (len (repr (target (idlist1) (idlist1)))) = true
---------------------------------------
forall (nat1:nat), SUCC (plus (nat3) (nat1)) = nat1

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
intro nat1(rank:9.)
rewrite IH1 in goal at 0(rank:19.)
=================================================
Progress: 72


1st goal of : forall (nat1:nat) (idlist1:idlist) (nat2:nat), isindexed (idlist1) = true->gq (nat2) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat2) (nat1) = nat1
idlist1 : idlist
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat), isindexed (idlist1) = true->gq (nat3) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat3) (nat1) = nat1
Inductive1 : nat2 = SUCC (nat3)
Cond1 : isindexed (idlist1) = true
Cond2 : gq (SUCC (nat3)) (len (repr (target (idlist1) (idlist1)))) = true
---------------------------------------
forall (nat1:nat), SUCC (plus (nat3) (nat1)) = nat1

0 goal(s) more...

1 conjecture(s) more...
>>> intro nat1(rank : 9.)


1st goal of : forall (nat1:nat) (idlist1:idlist) (nat2:nat), isindexed (idlist1) = true->gq (nat2) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat2) (nat1) = nat1
idlist1 : idlist
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat), isindexed (idlist1) = true->gq (nat3) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat3) (nat1) = nat1
Inductive1 : nat2 = SUCC (nat3)
Cond1 : isindexed (idlist1) = true
Cond2 : gq (SUCC (nat3)) (len (repr (target (idlist1) (idlist1)))) = true
nat1 : nat
---------------------------------------
SUCC (plus (nat3) (nat1)) = nat1

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:11.)
=================================================
Progress: 73


1st goal of : forall (nat1:nat) (idlist1:idlist) (nat2:nat), isindexed (idlist1) = true->gq (nat2) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat2) (nat1) = nat1
idlist1 : idlist
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat), isindexed (idlist1) = true->gq (nat3) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat3) (nat1) = nat1
Inductive1 : nat2 = SUCC (nat3)
Cond1 : isindexed (idlist1) = true
Cond2 : gq (SUCC (nat3)) (len (repr (target (idlist1) (idlist1)))) = true
nat1 : nat
---------------------------------------
SUCC (plus (nat3) (nat1)) = nat1

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 11.)


1st goal of : forall (nat1:nat) (idlist1:idlist) (nat2:nat), isindexed (idlist1) = true->gq (nat2) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat2) (nat1) = nat1
idlist1 : idlist
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat), isindexed (idlist1) = true->gq (nat3) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat3) (nat1) = nat1
Inductive1 : nat2 = SUCC (nat3)
Cond1 : isindexed (idlist1) = true
Cond2 : gq (SUCC (nat3)) (len (repr (target (idlist1) (idlist1)))) = true
nat1 : nat
---------------------------------------
SUCC (nat1) = nat1

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro nat1
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: SUCC (ZERO) = ZERO
Prop: SUCC (ZERO) = ZERO
Prop: SUCC (SUCC (ZERO)) = SUCC (ZERO)
asdf
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro nat1
validate generalize_common_subterm_goal
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
asdf
=================================================
Progress: 74


1st goal of : forall (any1:any) (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (any1) = any1
idlist1 : idlist
nat1 : nat
nat2 : nat
IH1 : forall (any1:any), isindexed (idlist1) = true->gq (nat2) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat2) (any1) = any1
Inductive1 : nat1 = SUCC (nat2)
Cond1 : isindexed (idlist1) = true
Cond2 : gq (SUCC (nat2)) (len (repr (target (idlist1) (idlist1)))) = true
---------------------------------------
forall (any1:any), SUCC (plus (nat2) (any1)) = any1

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 19.)


1st goal of : forall (any1:any) (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (any1) = any1
idlist1 : idlist
nat1 : nat
nat2 : nat
IH1 : forall (any1:any), isindexed (idlist1) = true->gq (nat2) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat2) (any1) = any1
Inductive1 : nat1 = SUCC (nat2)
Cond1 : isindexed (idlist1) = true
Cond2 : gq (SUCC (nat2)) (len (repr (target (idlist1) (idlist1)))) = true
---------------------------------------
forall (any1:any), SUCC (any1) = any1

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro any1(rank:11.)
=================================================
Progress: 75


1st goal of : forall (any1:any) (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (any1) = any1
idlist1 : idlist
nat1 : nat
nat2 : nat
IH1 : forall (any1:any), isindexed (idlist1) = true->gq (nat2) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat2) (any1) = any1
Inductive1 : nat1 = SUCC (nat2)
Cond1 : isindexed (idlist1) = true
Cond2 : gq (SUCC (nat2)) (len (repr (target (idlist1) (idlist1)))) = true
---------------------------------------
forall (any1:any), SUCC (any1) = any1

2 goal(s) more...

1 conjecture(s) more...
>>> intro any1(rank : 11.)


1st goal of : forall (any1:any) (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (any1) = any1
idlist1 : idlist
nat1 : nat
nat2 : nat
IH1 : forall (any1:any), isindexed (idlist1) = true->gq (nat2) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat2) (any1) = any1
Inductive1 : nat1 = SUCC (nat2)
Cond1 : isindexed (idlist1) = true
Cond2 : gq (SUCC (nat2)) (len (repr (target (idlist1) (idlist1)))) = true
any1 : any
---------------------------------------
SUCC (any1) = any1

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
rewrite IH1 in goal at 0
intro any1
validate generalize_common_subterm_goal
Prop: SUCC (7) = 7
Prop: SUCC (5) = 5
Prop: SUCC (0) = 0
asdf
=================================================
Progress: 76


1st goal of : forall (nat1:nat) (idlist1:idlist) (nat2:nat), isindexed (idlist1) = true->gq (nat2) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat2) (nat1) = nat1
idlist1 : idlist
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat), isindexed (idlist1) = true->gq (nat3) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat3) (nat1) = nat1
Inductive1 : nat2 = SUCC (nat3)
Cond1 : isindexed (idlist1) = true
Cond2 : gq (SUCC (nat3)) (len (repr (target (idlist1) (idlist1)))) = true
---------------------------------------
forall (nat1:nat), SUCC (plus (nat3) (nat1)) = nat1

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 19.)


1st goal of : forall (nat1:nat) (idlist1:idlist) (nat2:nat), isindexed (idlist1) = true->gq (nat2) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat2) (nat1) = nat1
idlist1 : idlist
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat), isindexed (idlist1) = true->gq (nat3) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat3) (nat1) = nat1
Inductive1 : nat2 = SUCC (nat3)
Cond1 : isindexed (idlist1) = true
Cond2 : gq (SUCC (nat3)) (len (repr (target (idlist1) (idlist1)))) = true
---------------------------------------
forall (nat1:nat), SUCC (nat1) = nat1

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro nat1(rank:11.)
=================================================
Progress: 77


1st goal of : forall (nat1:nat) (idlist1:idlist) (nat2:nat), isindexed (idlist1) = true->gq (nat2) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat2) (nat1) = nat1
idlist1 : idlist
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat), isindexed (idlist1) = true->gq (nat3) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat3) (nat1) = nat1
Inductive1 : nat2 = SUCC (nat3)
Cond1 : isindexed (idlist1) = true
Cond2 : gq (SUCC (nat3)) (len (repr (target (idlist1) (idlist1)))) = true
---------------------------------------
forall (nat1:nat), SUCC (nat1) = nat1

2 goal(s) more...

1 conjecture(s) more...
>>> intro nat1(rank : 11.)


1st goal of : forall (nat1:nat) (idlist1:idlist) (nat2:nat), isindexed (idlist1) = true->gq (nat2) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat2) (nat1) = nat1
idlist1 : idlist
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat), isindexed (idlist1) = true->gq (nat3) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat3) (nat1) = nat1
Inductive1 : nat2 = SUCC (nat3)
Cond1 : isindexed (idlist1) = true
Cond2 : gq (SUCC (nat3)) (len (repr (target (idlist1) (idlist1)))) = true
nat1 : nat
---------------------------------------
SUCC (nat1) = nat1

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
rewrite IH1 in goal at 0
intro nat1
validate generalize_common_subterm_goal
Prop: SUCC (ZERO) = ZERO
Prop: SUCC (ZERO) = ZERO
Prop: SUCC (ZERO) = ZERO
asdf
=================================================
Progress: 78


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
---------------------------------------
if gq (nat1) (len (repr (target (idlist2) (idlist2)))) then plus (nat1) (spec (repr (target (idlist2) (idlist2)))) else spec (repr (target (idlist2) (idlist2))) = if leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (nat1) (fst3 (targetNew (idlist2)))

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 21.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
---------------------------------------
if gq (nat1) (len (repr (target (idlist2) (idlist2)))) then plus (nat1) (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) else match (targetNew (idlist2)) with
| Tuple2 a _ -> a = if leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (nat1) (fst3 (targetNew (idlist2)))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)(rank:6.)
case gq (nat1) (len (repr (target (idlist2) (idlist2))))(rank:6.)
=================================================
Progress: 79


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
---------------------------------------
if gq (nat1) (len (repr (target (idlist2) (idlist2)))) then plus (nat1) (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) else match (targetNew (idlist2)) with
| Tuple2 a _ -> a = if leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (nat1) (fst3 (targetNew (idlist2)))

2 goal(s) more...

0 conjecture(s) more...
>>> case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)(rank : 6.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
if gq (nat1) (len (repr (target (idlist2) (idlist2)))) then plus (nat1) (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) else match (targetNew (idlist2)) with
| Tuple2 a _ -> a = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 5
case gq (nat1) (len (repr (target (idlist2) (idlist2))))(rank:7.)
rewrite <- IH1 in goal at 0(rank:14.)
rewrite <- IH1 in goal at 1(rank:14.)
rewrite <- IH1 in goal at 2(rank:14.)
rewrite <- IH1 in goal at 3(rank:22.)
=================================================
Progress: 80


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
---------------------------------------
if gq (nat1) (len (repr (target (idlist2) (idlist2)))) then plus (nat1) (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) else match (targetNew (idlist2)) with
| Tuple2 a _ -> a = if leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (nat1) (fst3 (targetNew (idlist2)))

2 goal(s) more...

0 conjecture(s) more...
>>> case gq (nat1) (len (repr (target (idlist2) (idlist2))))(rank : 6.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) = if leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (nat1) (fst3 (targetNew (idlist2)))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)(rank:7.)
rewrite <- IH1 in goal at 0(rank:22.)
=================================================
Progress: 81


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
if gq (nat1) (len (repr (target (idlist2) (idlist2)))) then plus (nat1) (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) else match (targetNew (idlist2)) with
| Tuple2 a _ -> a = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

3 goal(s) more...

0 conjecture(s) more...
>>> case gq (nat1) (len (repr (target (idlist2) (idlist2))))(rank : 7.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
rewrite <- IH1 in goal at 0(rank:23.)
rewrite <- IH1 in goal at 1(rank:23.)
rewrite <- IH1 in goal at 2(rank:23.)
=================================================
Progress: 82


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) = if leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (nat1) (fst3 (targetNew (idlist2)))

3 goal(s) more...

0 conjecture(s) more...
>>> case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)(rank : 7.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
Case4 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
plus (nat1) (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
rewrite <- IH1 in goal at 0(rank:23.)
rewrite <- IH1 in goal at 1(rank:23.)
rewrite <- IH1 in goal at 2(rank:23.)
=================================================
Progress: 83


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
if gq (nat1) (len (repr (target (idlist2) (idlist2)))) then plus (nat1) (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) else match (targetNew (idlist2)) with
| Tuple2 a _ -> a = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 14.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
if gq (nat1) (len (repr (target (idlist2) (idlist2)))) then plus (nat1) (spec (repr (target (idlist2) (idlist2)))) else spec (repr (target (idlist2) (idlist2))) = spec (repr (target (idlist2) (idlist2)))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case gq (nat1) (len (repr (target (idlist2) (idlist2))))(rank:7.)
=================================================
Progress: 84


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
if gq (nat1) (len (repr (target (idlist2) (idlist2)))) then plus (nat1) (spec (repr (target (idlist2) (idlist2)))) else spec (repr (target (idlist2) (idlist2))) = spec (repr (target (idlist2) (idlist2)))

3 goal(s) more...

0 conjecture(s) more...
>>> case gq (nat1) (len (repr (target (idlist2) (idlist2))))(rank : 7.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (spec (repr (target (idlist2) (idlist2)))) = spec (repr (target (idlist2) (idlist2)))

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:23.)
rewrite IH1 in goal at 1(rank:23.)
rewrite IH1 in goal at 2(rank:23.)
=================================================
Progress: 85


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
if gq (nat1) (len (repr (target (idlist2) (idlist2)))) then plus (nat1) (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) else match (targetNew (idlist2)) with
| Tuple2 a _ -> a = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 1(rank : 14.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
if gq (nat1) (len (repr (target (idlist2) (idlist2)))) then plus (nat1) (spec (repr (target (idlist2) (idlist2)))) else match (targetNew (idlist2)) with
| Tuple2 a _ -> a = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
rewrite IH1 in goal at 0
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
rewrite <- IH1 in goal at 1
Prop: if gq (ZERO) (len (repr (target (Inil) (Inil)))) then plus (ZERO) (spec (repr (target (Inil) (Inil)))) else 2 = 2
Prop: if gq (ZERO) (len (repr (target (Icons (ZERO) (ZERO) (Inil)) (Icons (ZERO) (ZERO) (Inil))))) then plus (ZERO) (spec (repr (target (Icons (ZERO) (ZERO) (Inil)) (Icons (ZERO) (ZERO) (Inil))))) else 6 = 6
Prop: if gq (ZERO) (len (repr (target (Inil) (Inil)))) then plus (ZERO) (spec (repr (target (Inil) (Inil)))) else 0 = 0
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
rewrite IH1 in goal at 0
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
Prop: if gq (ZERO) (len (repr (target (Inil) (Inil)))) then plus (ZERO) (3) else 3 = 3
Prop: if gq (ZERO) (len (repr (target (Inil) (Inil)))) then plus (ZERO) (4) else 4 = 4
Prop: if gq (ZERO) (len (repr (target (Inil) (Inil)))) then plus (ZERO) (8) else 8 = 8
Lemma List
forall (any1:any) (idlist1:idlist) (nat1:nat), if gq (nat1) (len (repr (target (idlist1) (idlist1)))) then plus (nat1) (any1) else any1 = any1
End of Lemma List


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
if gq (nat1) (len (repr (target (idlist2) (idlist2)))) then plus (nat1) (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) else match (targetNew (idlist2)) with
| Tuple2 a _ -> a = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

3 goal(s) more...

0 conjecture(s) more...
Lemma List
forall (any1:any) (idlist1:idlist) (nat1:nat), if gq (nat1) (len (repr (target (idlist1) (idlist1)))) then plus (nat1) (spec (repr (target (idlist1) (idlist1)))) else any1 = any1
End of Lemma List


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
if gq (nat1) (len (repr (target (idlist2) (idlist2)))) then plus (nat1) (spec (repr (target (idlist2) (idlist2)))) else match (targetNew (idlist2)) with
| Tuple2 a _ -> a = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

3 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 86


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
if gq (nat1) (len (repr (target (idlist2) (idlist2)))) then plus (nat1) (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) else match (targetNew (idlist2)) with
| Tuple2 a _ -> a = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

3 goal(s) more...

0 conjecture(s) more...
>>> assert forall (any1:any) (idlist1:idlist) (nat1:nat), if gq (nat1) (len (repr (target (idlist1) (idlist1)))) then plus (nat1) (any1) else any1 = any1(rank : 0.)


1st goal of : forall (any1:any) (idlist1:idlist) (nat1:nat), if gq (nat1) (len (repr (target (idlist1) (idlist1)))) then plus (nat1) (any1) else any1 = any1

---------------------------------------
forall (any1:any) (idlist1:idlist) (nat1:nat), if gq (nat1) (len (repr (target (idlist1) (idlist1)))) then plus (nat1) (any1) else any1 = any1

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro any1(rank:5.)
=================================================
Progress: 87


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
if gq (nat1) (len (repr (target (idlist2) (idlist2)))) then plus (nat1) (spec (repr (target (idlist2) (idlist2)))) else match (targetNew (idlist2)) with
| Tuple2 a _ -> a = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

3 goal(s) more...

0 conjecture(s) more...
>>> assert forall (any1:any) (idlist1:idlist) (nat1:nat), if gq (nat1) (len (repr (target (idlist1) (idlist1)))) then plus (nat1) (spec (repr (target (idlist1) (idlist1)))) else any1 = any1(rank : 0.)


1st goal of : forall (any1:any) (idlist1:idlist) (nat1:nat), if gq (nat1) (len (repr (target (idlist1) (idlist1)))) then plus (nat1) (spec (repr (target (idlist1) (idlist1)))) else any1 = any1

---------------------------------------
forall (any1:any) (idlist1:idlist) (nat1:nat), if gq (nat1) (len (repr (target (idlist1) (idlist1)))) then plus (nat1) (spec (repr (target (idlist1) (idlist1)))) else any1 = any1

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro any1(rank:5.)
=================================================
Progress: 88


1st goal of : forall (any1:any) (idlist1:idlist) (nat1:nat), if gq (nat1) (len (repr (target (idlist1) (idlist1)))) then plus (nat1) (any1) else any1 = any1

---------------------------------------
forall (any1:any) (idlist1:idlist) (nat1:nat), if gq (nat1) (len (repr (target (idlist1) (idlist1)))) then plus (nat1) (any1) else any1 = any1

0 goal(s) more...

1 conjecture(s) more...
>>> intro any1(rank : 5.)


1st goal of : forall (any1:any) (idlist1:idlist) (nat1:nat), if gq (nat1) (len (repr (target (idlist1) (idlist1)))) then plus (nat1) (any1) else any1 = any1
any1 : any
---------------------------------------
forall (idlist1:idlist) (nat1:nat), if gq (nat1) (len (repr (target (idlist1) (idlist1)))) then plus (nat1) (any1) else any1 = any1

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro idlist1(rank:5.)
=================================================
Progress: 89


1st goal of : forall (any1:any) (idlist1:idlist) (nat1:nat), if gq (nat1) (len (repr (target (idlist1) (idlist1)))) then plus (nat1) (spec (repr (target (idlist1) (idlist1)))) else any1 = any1

---------------------------------------
forall (any1:any) (idlist1:idlist) (nat1:nat), if gq (nat1) (len (repr (target (idlist1) (idlist1)))) then plus (nat1) (spec (repr (target (idlist1) (idlist1)))) else any1 = any1

0 goal(s) more...

1 conjecture(s) more...
>>> intro any1(rank : 5.)


1st goal of : forall (any1:any) (idlist1:idlist) (nat1:nat), if gq (nat1) (len (repr (target (idlist1) (idlist1)))) then plus (nat1) (spec (repr (target (idlist1) (idlist1)))) else any1 = any1
any1 : any
---------------------------------------
forall (idlist1:idlist) (nat1:nat), if gq (nat1) (len (repr (target (idlist1) (idlist1)))) then plus (nat1) (spec (repr (target (idlist1) (idlist1)))) else any1 = any1

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction nat1(rank:6.)
=================================================
Progress: 90


1st goal of : forall (any1:any) (idlist1:idlist) (nat1:nat), if gq (nat1) (len (repr (target (idlist1) (idlist1)))) then plus (nat1) (any1) else any1 = any1
any1 : any
---------------------------------------
forall (idlist1:idlist) (nat1:nat), if gq (nat1) (len (repr (target (idlist1) (idlist1)))) then plus (nat1) (any1) else any1 = any1

0 goal(s) more...

1 conjecture(s) more...
>>> intro idlist1(rank : 5.)


1st goal of : forall (any1:any) (idlist1:idlist) (nat1:nat), if gq (nat1) (len (repr (target (idlist1) (idlist1)))) then plus (nat1) (any1) else any1 = any1
any1 : any
idlist1 : idlist
---------------------------------------
forall (nat1:nat), if gq (nat1) (len (repr (target (idlist1) (idlist1)))) then plus (nat1) (any1) else any1 = any1

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction nat1(rank:6.)
=================================================
Progress: 91


1st goal of : forall (any1:any) (idlist1:idlist) (nat1:nat), if gq (nat1) (len (repr (target (idlist1) (idlist1)))) then plus (nat1) (spec (repr (target (idlist1) (idlist1)))) else any1 = any1
any1 : any
---------------------------------------
forall (idlist1:idlist) (nat1:nat), if gq (nat1) (len (repr (target (idlist1) (idlist1)))) then plus (nat1) (spec (repr (target (idlist1) (idlist1)))) else any1 = any1

0 goal(s) more...

1 conjecture(s) more...
>>> induction nat1(rank : 6.)


1st goal of : forall (any1:any) (idlist1:idlist) (nat1:nat), if gq (nat1) (len (repr (target (idlist1) (idlist1)))) then plus (nat1) (spec (repr (target (idlist1) (idlist1)))) else any1 = any1
any1 : any
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (idlist1:idlist), if gq (ZERO) (len (repr (target (idlist1) (idlist1)))) then plus (ZERO) (spec (repr (target (idlist1) (idlist1)))) else any1 = any1

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:5.)
=================================================
Progress: 92


1st goal of : forall (any1:any) (idlist1:idlist) (nat1:nat), if gq (nat1) (len (repr (target (idlist1) (idlist1)))) then plus (nat1) (spec (repr (target (idlist1) (idlist1)))) else any1 = any1
any1 : any
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (idlist1:idlist), if gq (ZERO) (len (repr (target (idlist1) (idlist1)))) then plus (ZERO) (spec (repr (target (idlist1) (idlist1)))) else any1 = any1

1 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 5.)


1st goal of : forall (any1:any) (idlist1:idlist) (nat1:nat), if gq (nat1) (len (repr (target (idlist1) (idlist1)))) then plus (nat1) (spec (repr (target (idlist1) (idlist1)))) else any1 = any1
any1 : any
nat1 : nat
nat2 : nat
IH1 : forall (idlist1:idlist), if gq (nat2) (len (repr (target (idlist1) (idlist1)))) then plus (nat2) (spec (repr (target (idlist1) (idlist1)))) else any1 = any1
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (idlist1:idlist), if gq (SUCC (nat2)) (len (repr (target (idlist1) (idlist1)))) then plus (SUCC (nat2)) (spec (repr (target (idlist1) (idlist1)))) else any1 = any1

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
induction idlist1(rank:6.)
=================================================
Progress: 93


1st goal of : forall (any1:any) (idlist1:idlist) (nat1:nat), if gq (nat1) (len (repr (target (idlist1) (idlist1)))) then plus (nat1) (any1) else any1 = any1
any1 : any
idlist1 : idlist
---------------------------------------
forall (nat1:nat), if gq (nat1) (len (repr (target (idlist1) (idlist1)))) then plus (nat1) (any1) else any1 = any1

0 goal(s) more...

1 conjecture(s) more...
>>> induction nat1(rank : 6.)


1st goal of : forall (any1:any) (idlist1:idlist) (nat1:nat), if gq (nat1) (len (repr (target (idlist1) (idlist1)))) then plus (nat1) (any1) else any1 = any1
any1 : any
idlist1 : idlist
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
if gq (ZERO) (len (repr (target (idlist1) (idlist1)))) then plus (ZERO) (any1) else any1 = any1

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:5.)
=================================================
Progress: 94


1st goal of : forall (any1:any) (idlist1:idlist) (nat1:nat), if gq (nat1) (len (repr (target (idlist1) (idlist1)))) then plus (nat1) (any1) else any1 = any1
any1 : any
idlist1 : idlist
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
if gq (ZERO) (len (repr (target (idlist1) (idlist1)))) then plus (ZERO) (any1) else any1 = any1

1 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 5.)


1st goal of : forall (any1:any) (idlist1:idlist) (nat1:nat), if gq (nat1) (len (repr (target (idlist1) (idlist1)))) then plus (nat1) (any1) else any1 = any1
any1 : any
idlist1 : idlist
nat1 : nat
nat2 : nat
IH1 : if gq (nat2) (len (repr (target (idlist1) (idlist1)))) then plus (nat2) (any1) else any1 = any1
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
if gq (SUCC (nat2)) (len (repr (target (idlist1) (idlist1)))) then plus (SUCC (nat2)) (any1) else any1 = any1

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
case gq (SUCC (nat2)) (len (repr (target (idlist1) (idlist1))))(rank:6.)
=================================================
Progress: 95


1st goal of : forall (any1:any) (idlist1:idlist) (nat1:nat), if gq (nat1) (len (repr (target (idlist1) (idlist1)))) then plus (nat1) (spec (repr (target (idlist1) (idlist1)))) else any1 = any1
any1 : any
nat1 : nat
nat2 : nat
IH1 : forall (idlist1:idlist), if gq (nat2) (len (repr (target (idlist1) (idlist1)))) then plus (nat2) (spec (repr (target (idlist1) (idlist1)))) else any1 = any1
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (idlist1:idlist), if gq (SUCC (nat2)) (len (repr (target (idlist1) (idlist1)))) then plus (SUCC (nat2)) (spec (repr (target (idlist1) (idlist1)))) else any1 = any1

0 goal(s) more...

1 conjecture(s) more...
>>> induction idlist1(rank : 6.)


1st goal of : forall (any1:any) (idlist1:idlist) (nat1:nat), if gq (nat1) (len (repr (target (idlist1) (idlist1)))) then plus (nat1) (spec (repr (target (idlist1) (idlist1)))) else any1 = any1
any1 : any
nat1 : nat
nat2 : nat
IH1 : forall (idlist1:idlist), if gq (nat2) (len (repr (target (idlist1) (idlist1)))) then plus (nat2) (spec (repr (target (idlist1) (idlist1)))) else any1 = any1
Inductive1 : nat1 = SUCC (nat2)
idlist1 : idlist
Base1 : idlist1 = Inil
---------------------------------------
if gq (SUCC (nat2)) (len (repr (target (Inil) (Inil)))) then plus (SUCC (nat2)) (spec (repr (target (Inil) (Inil)))) else any1 = any1

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:6.)
=================================================
Progress: 96


1st goal of : forall (any1:any) (idlist1:idlist) (nat1:nat), if gq (nat1) (len (repr (target (idlist1) (idlist1)))) then plus (nat1) (any1) else any1 = any1
any1 : any
idlist1 : idlist
nat1 : nat
nat2 : nat
IH1 : if gq (nat2) (len (repr (target (idlist1) (idlist1)))) then plus (nat2) (any1) else any1 = any1
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
if gq (SUCC (nat2)) (len (repr (target (idlist1) (idlist1)))) then plus (SUCC (nat2)) (any1) else any1 = any1

0 goal(s) more...

1 conjecture(s) more...
>>> case gq (SUCC (nat2)) (len (repr (target (idlist1) (idlist1))))(rank : 6.)


1st goal of : forall (any1:any) (idlist1:idlist) (nat1:nat), if gq (nat1) (len (repr (target (idlist1) (idlist1)))) then plus (nat1) (any1) else any1 = any1
any1 : any
idlist1 : idlist
nat1 : nat
nat2 : nat
IH1 : if gq (nat2) (len (repr (target (idlist1) (idlist1)))) then plus (nat2) (any1) else any1 = any1
Inductive1 : nat1 = SUCC (nat2)
Case1 : gq (SUCC (nat2)) (len (repr (target (idlist1) (idlist1)))) = true
---------------------------------------
SUCC (plus (nat2) (any1)) = any1

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
case gq (SUCC (nat2)) (len (repr (target (idlist1) (idlist1))))
validate generalize_common_subterm_goal
Prop: SUCC (plus (ZERO) (8)) = 8
Prop: SUCC (plus (SUCC (ZERO)) (6)) = 6
Prop: SUCC (plus (SUCC (ZERO)) (0)) = 0
asdf
=================================================
Progress: 97


1st goal of : forall (any1:any) (idlist1:idlist) (nat1:nat), if gq (nat1) (len (repr (target (idlist1) (idlist1)))) then plus (nat1) (spec (repr (target (idlist1) (idlist1)))) else any1 = any1
any1 : any
nat1 : nat
nat2 : nat
IH1 : forall (idlist1:idlist), if gq (nat2) (len (repr (target (idlist1) (idlist1)))) then plus (nat2) (spec (repr (target (idlist1) (idlist1)))) else any1 = any1
Inductive1 : nat1 = SUCC (nat2)
idlist1 : idlist
Base1 : idlist1 = Inil
---------------------------------------
if gq (SUCC (nat2)) (len (repr (target (Inil) (Inil)))) then plus (SUCC (nat2)) (spec (repr (target (Inil) (Inil)))) else any1 = any1

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6.)


1st goal of : forall (any1:any) (idlist1:idlist) (nat1:nat), if gq (nat1) (len (repr (target (idlist1) (idlist1)))) then plus (nat1) (spec (repr (target (idlist1) (idlist1)))) else any1 = any1
any1 : any
nat1 : nat
nat2 : nat
IH1 : forall (idlist1:idlist), if gq (nat2) (len (repr (target (idlist1) (idlist1)))) then plus (nat2) (spec (repr (target (idlist1) (idlist1)))) else any1 = any1
Inductive1 : nat1 = SUCC (nat2)
idlist1 : idlist
Base1 : idlist1 = Inil
---------------------------------------
SUCC (plus (nat2) (ZERO)) = any1

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: SUCC (plus (ZERO) (ZERO)) = 5
Prop: SUCC (plus (ZERO) (ZERO)) = 1
Prop: SUCC (plus (ZERO) (ZERO)) = 0
asdf
=================================================
Progress: 98


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
if gq (nat1) (len (repr (target (idlist2) (idlist2)))) then plus (nat1) (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) else match (targetNew (idlist2)) with
| Tuple2 a _ -> a = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 2(rank : 14.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
if gq (nat1) (len (repr (target (idlist2) (idlist2)))) then plus (nat1) (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) else spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case gq (nat1) (len (repr (target (idlist2) (idlist2))))(rank:7.)
=================================================
Progress: 99


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
if gq (nat1) (len (repr (target (idlist2) (idlist2)))) then plus (nat1) (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) else spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

3 goal(s) more...

0 conjecture(s) more...
>>> case gq (nat1) (len (repr (target (idlist2) (idlist2))))(rank : 7.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
rewrite <- IH1 in goal at 0(rank:23.)
rewrite <- IH1 in goal at 1(rank:23.)
rewrite <- IH1 in goal at 2(rank:23.)
=================================================
Progress: 100


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
---------------------------------------
if gq (nat1) (len (repr (target (idlist2) (idlist2)))) then plus (nat1) (spec (repr (target (idlist2) (idlist2)))) else spec (repr (target (idlist2) (idlist2))) = if leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (nat1) (fst3 (targetNew (idlist2)))

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 1(rank : 21.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
---------------------------------------
if gq (nat1) (len (repr (target (idlist2) (idlist2)))) then plus (nat1) (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) else spec (repr (target (idlist2) (idlist2))) = if leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (nat1) (fst3 (targetNew (idlist2)))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)(rank:6.)
=================================================
Progress: 101


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
---------------------------------------
if gq (nat1) (len (repr (target (idlist2) (idlist2)))) then plus (nat1) (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) else spec (repr (target (idlist2) (idlist2))) = if leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (nat1) (fst3 (targetNew (idlist2)))

2 goal(s) more...

0 conjecture(s) more...
>>> case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)(rank : 6.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
if gq (nat1) (len (repr (target (idlist2) (idlist2)))) then plus (nat1) (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) else spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 5
case gq (nat1) (len (repr (target (idlist2) (idlist2))))(rank:7.)
rewrite IH1 in goal at 0(rank:22.)
rewrite <- IH1 in goal at 0(rank:22.)
rewrite <- IH1 in goal at 1(rank:22.)
rewrite <- IH1 in goal at 2(rank:22.)
=================================================
Progress: 102


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
if gq (nat1) (len (repr (target (idlist2) (idlist2)))) then plus (nat1) (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) else spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

3 goal(s) more...

0 conjecture(s) more...
>>> case gq (nat1) (len (repr (target (idlist2) (idlist2))))(rank : 7.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
rewrite <- IH1 in goal at 0(rank:23.)
rewrite <- IH1 in goal at 1(rank:23.)
rewrite <- IH1 in goal at 2(rank:23.)
=================================================
Progress: 103


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
---------------------------------------
if gq (nat1) (len (repr (target (idlist2) (idlist2)))) then plus (nat1) (spec (repr (target (idlist2) (idlist2)))) else spec (repr (target (idlist2) (idlist2))) = if leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (nat1) (fst3 (targetNew (idlist2)))

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 2(rank : 21.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
---------------------------------------
if gq (nat1) (len (repr (target (idlist2) (idlist2)))) then plus (nat1) (spec (repr (target (idlist2) (idlist2)))) else match (targetNew (idlist2)) with
| Tuple2 a _ -> a = if leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (nat1) (fst3 (targetNew (idlist2)))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)(rank:6.)
=================================================
Progress: 104


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
---------------------------------------
if gq (nat1) (len (repr (target (idlist2) (idlist2)))) then plus (nat1) (spec (repr (target (idlist2) (idlist2)))) else match (targetNew (idlist2)) with
| Tuple2 a _ -> a = if leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (nat1) (fst3 (targetNew (idlist2)))

2 goal(s) more...

0 conjecture(s) more...
>>> case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)(rank : 6.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
if gq (nat1) (len (repr (target (idlist2) (idlist2)))) then plus (nat1) (spec (repr (target (idlist2) (idlist2)))) else match (targetNew (idlist2)) with
| Tuple2 a _ -> a = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 5
case gq (nat1) (len (repr (target (idlist2) (idlist2))))(rank:7.)
rewrite IH1 in goal at 0(rank:22.)
rewrite <- IH1 in goal at 0(rank:22.)
rewrite <- IH1 in goal at 1(rank:22.)
rewrite <- IH1 in goal at 2(rank:22.)
=================================================
Progress: 105


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
if gq (nat1) (len (repr (target (idlist2) (idlist2)))) then plus (nat1) (spec (repr (target (idlist2) (idlist2)))) else match (targetNew (idlist2)) with
| Tuple2 a _ -> a = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

3 goal(s) more...

0 conjecture(s) more...
>>> case gq (nat1) (len (repr (target (idlist2) (idlist2))))(rank : 7.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (spec (repr (target (idlist2) (idlist2)))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:15.)
rewrite <- IH1 in goal at 0(rank:15.)
=================================================
Progress: 106


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (spec (repr (target (idlist2) (idlist2)))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 15.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
rewrite IH1 in goal at 2
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
case gq (nat1) (len (repr (target (idlist2) (idlist2))))
rewrite IH1 in goal at 0
Prop: plus (ZERO) (1) = 1
Prop: plus (ZERO) (0) = 0
Prop: plus (ZERO) (6) = 6
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
rewrite IH1 in goal at 2
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
case gq (nat1) (len (repr (target (idlist2) (idlist2))))
validate generalize_common_subterm_goal
Prop: plus (ZERO) (spec (repr (target (Inil) (Inil)))) = match (targetNew (Inil)) with
| Tuple2 a _ -> a
Prop: plus (ZERO) (spec (repr (target (Inil) (Inil)))) = match (targetNew (Inil)) with
| Tuple2 a _ -> a
Prop: plus (SUCC (ZERO)) (spec (repr (target (Icons (SUCC (ZERO)) (ZERO) (Inil)) (Icons (SUCC (ZERO)) (ZERO) (Inil))))) = match (targetNew (Icons (SUCC (ZERO)) (ZERO) (Inil))) with
| Tuple2 a _ -> a
Lemma List
forall (any1:any) (nat1:nat), plus (nat1) (any1) = any1
End of Lemma List


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

4 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 107


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

4 goal(s) more...

0 conjecture(s) more...
>>> assert forall (any1:any) (nat1:nat), plus (nat1) (any1) = any1(rank : 0.)


1st goal of : forall (any1:any) (nat1:nat), plus (nat1) (any1) = any1

---------------------------------------
forall (any1:any) (nat1:nat), plus (nat1) (any1) = any1

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction nat1(rank:6.)
=================================================
Progress: 108


1st goal of : forall (any1:any) (nat1:nat), plus (nat1) (any1) = any1

---------------------------------------
forall (any1:any) (nat1:nat), plus (nat1) (any1) = any1

0 goal(s) more...

1 conjecture(s) more...
>>> induction nat1(rank : 6.)


1st goal of : forall (any1:any) (nat1:nat), plus (nat1) (any1) = any1
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (any1:any), plus (ZERO) (any1) = any1

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:5.)
=================================================
Progress: 109


1st goal of : forall (any1:any) (nat1:nat), plus (nat1) (any1) = any1
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (any1:any), plus (ZERO) (any1) = any1

1 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 5.)


1st goal of : forall (any1:any) (nat1:nat), plus (nat1) (any1) = any1
nat1 : nat
nat2 : nat
IH1 : forall (any1:any), plus (nat2) (any1) = any1
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (any1:any), plus (SUCC (nat2)) (any1) = any1

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:5.)
=================================================
Progress: 110


1st goal of : forall (any1:any) (nat1:nat), plus (nat1) (any1) = any1
nat1 : nat
nat2 : nat
IH1 : forall (any1:any), plus (nat2) (any1) = any1
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (any1:any), plus (SUCC (nat2)) (any1) = any1

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 5.)


1st goal of : forall (any1:any) (nat1:nat), plus (nat1) (any1) = any1
nat1 : nat
nat2 : nat
IH1 : forall (any1:any), plus (nat2) (any1) = any1
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (any1:any), SUCC (plus (nat2) (any1)) = any1

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
intro any1(rank:5.)
rewrite IH1 in goal at 0(rank:13.)
=================================================
Progress: 111


1st goal of : forall (any1:any) (nat1:nat), plus (nat1) (any1) = any1
nat1 : nat
nat2 : nat
IH1 : forall (any1:any), plus (nat2) (any1) = any1
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (any1:any), SUCC (plus (nat2) (any1)) = any1

0 goal(s) more...

1 conjecture(s) more...
>>> intro any1(rank : 5.)


1st goal of : forall (any1:any) (nat1:nat), plus (nat1) (any1) = any1
nat1 : nat
nat2 : nat
IH1 : forall (any1:any), plus (nat2) (any1) = any1
Inductive1 : nat1 = SUCC (nat2)
any1 : any
---------------------------------------
SUCC (plus (nat2) (any1)) = any1

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:5.)
=================================================
Progress: 112


1st goal of : forall (any1:any) (nat1:nat), plus (nat1) (any1) = any1
nat1 : nat
nat2 : nat
IH1 : forall (any1:any), plus (nat2) (any1) = any1
Inductive1 : nat1 = SUCC (nat2)
any1 : any
---------------------------------------
SUCC (plus (nat2) (any1)) = any1

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 5.)


1st goal of : forall (any1:any) (nat1:nat), plus (nat1) (any1) = any1
nat1 : nat
nat2 : nat
IH1 : forall (any1:any), plus (nat2) (any1) = any1
Inductive1 : nat1 = SUCC (nat2)
any1 : any
---------------------------------------
SUCC (any1) = any1

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro any1
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: SUCC (7) = 7
Prop: SUCC (4) = 4
Prop: SUCC (1) = 1
asdf
previous tactics
simpl in goal
intro any1
validate generalize_common_subterm_goal
Prop: SUCC (plus (SUCC (ZERO)) (4)) = 4
Prop: SUCC (plus (ZERO) (5)) = 5
Prop: SUCC (plus (ZERO) (7)) = 7
asdf
=================================================
Progress: 113


1st goal of : forall (any1:any) (nat1:nat), plus (nat1) (any1) = any1
nat1 : nat
nat2 : nat
IH1 : forall (any1:any), plus (nat2) (any1) = any1
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (any1:any), SUCC (plus (nat2) (any1)) = any1

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 13.)


1st goal of : forall (any1:any) (nat1:nat), plus (nat1) (any1) = any1
nat1 : nat
nat2 : nat
IH1 : forall (any1:any), plus (nat2) (any1) = any1
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (any1:any), SUCC (any1) = any1

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: SUCC (plus (ZERO) (7)) = 7
Prop: SUCC (plus (ZERO) (3)) = 3
Prop: SUCC (plus (ZERO) (7)) = 7
asdf
=================================================
Progress: 114


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (spec (repr (target (idlist2) (idlist2)))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 15.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (spec (repr (target (idlist2) (idlist2)))) = spec (repr (target (idlist2) (idlist2)))

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
rewrite IH1 in goal at 2
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
case gq (nat1) (len (repr (target (idlist2) (idlist2))))
rewrite <- IH1 in goal at 0
Prop: plus (ZERO) (ZERO) = ZERO
Prop: plus (ZERO) (SUCC (SUCC (SUCC (ZERO)))) = SUCC (SUCC (SUCC (ZERO)))
Prop: plus (ZERO) (ZERO) = ZERO
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
rewrite IH1 in goal at 2
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
case gq (nat1) (len (repr (target (idlist2) (idlist2))))
validate generalize_common_subterm_goal
Prop: plus (ZERO) (spec (repr (target (Inil) (Inil)))) = match (targetNew (Inil)) with
| Tuple2 a _ -> a
Prop: plus (ZERO) (spec (repr (target (Icons (ZERO) (ZERO) (Inil)) (Icons (ZERO) (ZERO) (Inil))))) = match (targetNew (Icons (ZERO) (ZERO) (Inil))) with
| Tuple2 a _ -> a
Prop: plus (ZERO) (spec (repr (target (Inil) (Inil)))) = match (targetNew (Inil)) with
| Tuple2 a _ -> a
Lemma List
forall (nat1:nat) (nat2:nat), plus (nat2) (nat1) = nat1
End of Lemma List


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (spec (repr (target (idlist2) (idlist2)))) = spec (repr (target (idlist2) (idlist2)))

4 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 115


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (spec (repr (target (idlist2) (idlist2)))) = spec (repr (target (idlist2) (idlist2)))

4 goal(s) more...

0 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat), plus (nat2) (nat1) = nat1(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat), plus (nat2) (nat1) = nat1

---------------------------------------
forall (nat1:nat) (nat2:nat), plus (nat2) (nat1) = nat1

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction nat2(rank:6.)
=================================================
Progress: 116


1st goal of : forall (nat1:nat) (nat2:nat), plus (nat2) (nat1) = nat1

---------------------------------------
forall (nat1:nat) (nat2:nat), plus (nat2) (nat1) = nat1

0 goal(s) more...

1 conjecture(s) more...
>>> induction nat2(rank : 6.)


1st goal of : forall (nat1:nat) (nat2:nat), plus (nat2) (nat1) = nat1
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (nat1:nat), plus (ZERO) (nat1) = nat1

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:5.)
=================================================
Progress: 117


1st goal of : forall (nat1:nat) (nat2:nat), plus (nat2) (nat1) = nat1
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (nat1:nat), plus (ZERO) (nat1) = nat1

1 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 5.)


1st goal of : forall (nat1:nat) (nat2:nat), plus (nat2) (nat1) = nat1
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat), plus (nat3) (nat1) = nat1
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
forall (nat1:nat), plus (SUCC (nat3)) (nat1) = nat1

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:5.)
=================================================
Progress: 118


1st goal of : forall (nat1:nat) (nat2:nat), plus (nat2) (nat1) = nat1
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat), plus (nat3) (nat1) = nat1
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
forall (nat1:nat), plus (SUCC (nat3)) (nat1) = nat1

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 5.)


1st goal of : forall (nat1:nat) (nat2:nat), plus (nat2) (nat1) = nat1
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat), plus (nat3) (nat1) = nat1
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
forall (nat1:nat), SUCC (plus (nat3) (nat1)) = nat1

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
intro nat1(rank:5.)
rewrite IH1 in goal at 0(rank:13.)
=================================================
Progress: 119


1st goal of : forall (nat1:nat) (nat2:nat), plus (nat2) (nat1) = nat1
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat), plus (nat3) (nat1) = nat1
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
forall (nat1:nat), SUCC (plus (nat3) (nat1)) = nat1

0 goal(s) more...

1 conjecture(s) more...
>>> intro nat1(rank : 5.)


1st goal of : forall (nat1:nat) (nat2:nat), plus (nat2) (nat1) = nat1
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat), plus (nat3) (nat1) = nat1
Inductive1 : nat2 = SUCC (nat3)
nat1 : nat
---------------------------------------
SUCC (plus (nat3) (nat1)) = nat1

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:5.)
=================================================
Progress: 120


1st goal of : forall (nat1:nat) (nat2:nat), plus (nat2) (nat1) = nat1
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat), plus (nat3) (nat1) = nat1
Inductive1 : nat2 = SUCC (nat3)
nat1 : nat
---------------------------------------
SUCC (plus (nat3) (nat1)) = nat1

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 5.)


1st goal of : forall (nat1:nat) (nat2:nat), plus (nat2) (nat1) = nat1
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat), plus (nat3) (nat1) = nat1
Inductive1 : nat2 = SUCC (nat3)
nat1 : nat
---------------------------------------
SUCC (nat1) = nat1

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro nat1
rewrite IH1 in goal at 0
validate generalize_common_subterm_goal
Prop: SUCC (SUCC (ZERO)) = SUCC (ZERO)
Prop: SUCC (ZERO) = ZERO
Prop: SUCC (ZERO) = ZERO
asdf
previous tactics
simpl in goal
intro nat1
validate generalize_common_subterm_goal
Prop: SUCC (plus (SUCC (ZERO)) (ZERO)) = ZERO
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
asdf
=================================================
Progress: 121


1st goal of : forall (nat1:nat) (nat2:nat), plus (nat2) (nat1) = nat1
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat), plus (nat3) (nat1) = nat1
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
forall (nat1:nat), SUCC (plus (nat3) (nat1)) = nat1

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat), plus (nat2) (nat1) = nat1
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat), plus (nat3) (nat1) = nat1
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
forall (nat1:nat), SUCC (nat1) = nat1

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
Prop: SUCC (plus (SUCC (SUCC (ZERO))) (ZERO)) = ZERO
Prop: SUCC (plus (SUCC (ZERO)) (SUCC (ZERO))) = SUCC (ZERO)
asdf
=================================================
Progress: 122


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
if gq (nat1) (len (repr (target (idlist2) (idlist2)))) then plus (nat1) (spec (repr (target (idlist2) (idlist2)))) else spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 22.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
if gq (nat1) (len (repr (target (idlist2) (idlist2)))) then plus (nat1) (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) else match (targetNew (idlist2)) with
| Tuple2 a _ -> a = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
rewrite IH1 in goal at 0
Prop: if gq (ZERO) (len (repr (target (Inil) (Inil)))) then plus (ZERO) (5) else 5 = 5
Prop: if gq (ZERO) (len (repr (target (Inil) (Inil)))) then plus (ZERO) (7) else 7 = 7
Prop: if gq (ZERO) (len (repr (target (Inil) (Inil)))) then plus (ZERO) (0) else 0 = 0
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
validate generalize_common_subterm_goal
Prop: if gq (ZERO) (len (repr (target (Icons (ZERO) (ZERO) (Inil)) (Icons (ZERO) (ZERO) (Inil))))) then plus (ZERO) (spec (repr (target (Icons (ZERO) (ZERO) (Inil)) (Icons (ZERO) (ZERO) (Inil))))) else spec (repr (target (Icons (ZERO) (ZERO) (Inil)) (Icons (ZERO) (ZERO) (Inil)))) = match (targetNew (Icons (ZERO) (ZERO) (Inil))) with
| Tuple2 a _ -> a
Prop: if gq (ZERO) (len (repr (target (Inil) (Inil)))) then plus (ZERO) (spec (repr (target (Inil) (Inil)))) else spec (repr (target (Inil) (Inil))) = match (targetNew (Inil)) with
| Tuple2 a _ -> a
Prop: if gq (ZERO) (len (repr (target (Icons (ZERO) (ZERO) (Inil)) (Icons (ZERO) (ZERO) (Inil))))) then plus (ZERO) (spec (repr (target (Icons (ZERO) (ZERO) (Inil)) (Icons (ZERO) (ZERO) (Inil))))) else spec (repr (target (Icons (ZERO) (ZERO) (Inil)) (Icons (ZERO) (ZERO) (Inil)))) = match (targetNew (Icons (ZERO) (ZERO) (Inil))) with
| Tuple2 a _ -> a
=================================================
Progress: 123


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
if gq (nat1) (len (repr (target (idlist2) (idlist2)))) then plus (nat1) (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) else match (targetNew (idlist2)) with
| Tuple2 a _ -> a = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 3(rank : 22.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
if gq (nat1) (len (repr (target (idlist2) (idlist2)))) then plus (nat1) (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) else match (targetNew (idlist2)) with
| Tuple2 a _ -> a = spec (repr (target (idlist2) (idlist2)))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case gq (nat1) (len (repr (target (idlist2) (idlist2))))(rank:7.)
=================================================
Progress: 124


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
if gq (nat1) (len (repr (target (idlist2) (idlist2)))) then plus (nat1) (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) else match (targetNew (idlist2)) with
| Tuple2 a _ -> a = spec (repr (target (idlist2) (idlist2)))

3 goal(s) more...

0 conjecture(s) more...
>>> case gq (nat1) (len (repr (target (idlist2) (idlist2))))(rank : 7.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) = spec (repr (target (idlist2) (idlist2)))

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:15.)
rewrite <- IH1 in goal at 0(rank:15.)
=================================================
Progress: 125


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) = spec (repr (target (idlist2) (idlist2)))

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 15.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
rewrite IH1 in goal at 0
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
rewrite <- IH1 in goal at 3
case gq (nat1) (len (repr (target (idlist2) (idlist2))))
rewrite IH1 in goal at 0
Prop: plus (ZERO) (4) = 4
Prop: plus (ZERO) (4) = 4
Prop: plus (SUCC (ZERO)) (7) = 7
validate generalize_common_subterm_goal
Prop: plus (ZERO) (0) = 0
Prop: plus (SUCC (SUCC (ZERO))) (6) = 6
Prop: plus (SUCC (ZERO)) (1) = 1
Prop: plus (ZERO) (match (targetNew (Icons (SUCC (ZERO)) (ZERO) (Inil))) with
| Tuple2 a _ -> a) = match (targetNew (Icons (SUCC (ZERO)) (ZERO) (Inil))) with
| Tuple2 a _ -> a
Prop: plus (SUCC (ZERO)) (match (targetNew (Icons (SUCC (ZERO)) (SUCC (SUCC (ZERO))) (Inil))) with
| Tuple2 a _ -> a) = match (targetNew (Icons (SUCC (ZERO)) (SUCC (SUCC (ZERO))) (Inil))) with
| Tuple2 a _ -> a
Prop: plus (ZERO) (match (targetNew (Inil)) with
| Tuple2 a _ -> a) = match (targetNew (Inil)) with
| Tuple2 a _ -> a
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
rewrite IH1 in goal at 0
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
rewrite <- IH1 in goal at 3
case gq (nat1) (len (repr (target (idlist2) (idlist2))))
validate generalize_common_subterm_goal
Prop: plus (ZERO) (match (targetNew (Icons (SUCC (ZERO)) (ZERO) (Inil))) with
| Tuple2 a _ -> a) = spec (repr (target (Icons (SUCC (ZERO)) (ZERO) (Inil)) (Icons (SUCC (ZERO)) (ZERO) (Inil))))
Prop: plus (ZERO) (match (targetNew (Inil)) with
| Tuple2 a _ -> a) = spec (repr (target (Inil) (Inil)))
Prop: plus (ZERO) (match (targetNew (Inil)) with
| Tuple2 a _ -> a) = spec (repr (target (Inil) (Inil)))
Lemma List
forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) = spec (repr (target (idlist1) (idlist1)))
End of Lemma List


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) = spec (repr (target (idlist2) (idlist2)))

4 goal(s) more...

0 conjecture(s) more...
Lemma List
forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) = match (targetNew (idlist1)) with
| Tuple2 a _ -> a
End of Lemma List


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

4 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 126


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) = spec (repr (target (idlist2) (idlist2)))

4 goal(s) more...

0 conjecture(s) more...
>>> assert forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) = spec (repr (target (idlist1) (idlist1)))(rank : 0.)


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) = spec (repr (target (idlist1) (idlist1)))

---------------------------------------
forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) = spec (repr (target (idlist1) (idlist1)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction idlist1(rank:10.)
=================================================
Progress: 127


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

4 goal(s) more...

0 conjecture(s) more...
>>> assert forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) = match (targetNew (idlist1)) with
| Tuple2 a _ -> a(rank : 0.)


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) = match (targetNew (idlist1)) with
| Tuple2 a _ -> a

---------------------------------------
forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) = match (targetNew (idlist1)) with
| Tuple2 a _ -> a

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction idlist1(rank:10.)
=================================================
Progress: 128


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) = spec (repr (target (idlist1) (idlist1)))

---------------------------------------
forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) = spec (repr (target (idlist1) (idlist1)))

0 goal(s) more...

1 conjecture(s) more...
>>> induction idlist1(rank : 10.)


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) = spec (repr (target (idlist1) (idlist1)))
idlist1 : idlist
Base1 : idlist1 = Inil
---------------------------------------
forall (nat1:nat), isindexed (Inil) = true->gq (nat1) (len (repr (target (Inil) (Inil)))) = true -> plus (nat1) (match (targetNew (Inil)) with
| Tuple2 a _ -> a) = spec (repr (target (Inil) (Inil)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 129


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) = match (targetNew (idlist1)) with
| Tuple2 a _ -> a

---------------------------------------
forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) = match (targetNew (idlist1)) with
| Tuple2 a _ -> a

0 goal(s) more...

1 conjecture(s) more...
>>> induction idlist1(rank : 10.)


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) = match (targetNew (idlist1)) with
| Tuple2 a _ -> a
idlist1 : idlist
Base1 : idlist1 = Inil
---------------------------------------
forall (nat1:nat), isindexed (Inil) = true->gq (nat1) (len (repr (target (Inil) (Inil)))) = true -> plus (nat1) (match (targetNew (Inil)) with
| Tuple2 a _ -> a) = match (targetNew (Inil)) with
| Tuple2 a _ -> a

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 130


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) = spec (repr (target (idlist1) (idlist1)))
idlist1 : idlist
Base1 : idlist1 = Inil
---------------------------------------
forall (nat1:nat), isindexed (Inil) = true->gq (nat1) (len (repr (target (Inil) (Inil)))) = true -> plus (nat1) (match (targetNew (Inil)) with
| Tuple2 a _ -> a) = spec (repr (target (Inil) (Inil)))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) = spec (repr (target (idlist1) (idlist1)))
idlist1 : idlist
Base1 : idlist1 = Inil
---------------------------------------
forall (nat1:nat), true = true->gq (nat1) (ZERO) = true -> plus (nat1) (ZERO) = ZERO

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction nat1(rank:11.)
=================================================
Progress: 131


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) = match (targetNew (idlist1)) with
| Tuple2 a _ -> a
idlist1 : idlist
Base1 : idlist1 = Inil
---------------------------------------
forall (nat1:nat), isindexed (Inil) = true->gq (nat1) (len (repr (target (Inil) (Inil)))) = true -> plus (nat1) (match (targetNew (Inil)) with
| Tuple2 a _ -> a) = match (targetNew (Inil)) with
| Tuple2 a _ -> a

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) = match (targetNew (idlist1)) with
| Tuple2 a _ -> a
idlist1 : idlist
Base1 : idlist1 = Inil
---------------------------------------
forall (nat1:nat), true = true->gq (nat1) (ZERO) = true -> plus (nat1) (ZERO) = ZERO

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction nat1(rank:11.)
=================================================
Progress: 132


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) = spec (repr (target (idlist1) (idlist1)))
idlist1 : idlist
Base1 : idlist1 = Inil
---------------------------------------
forall (nat1:nat), true = true->gq (nat1) (ZERO) = true -> plus (nat1) (ZERO) = ZERO

1 goal(s) more...

1 conjecture(s) more...
>>> induction nat1(rank : 11.)


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) = spec (repr (target (idlist1) (idlist1)))
idlist1 : idlist
Base1 : idlist1 = Inil
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
true = true->gq (ZERO) (ZERO) = true -> plus (ZERO) (ZERO) = ZERO

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 133


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) = spec (repr (target (idlist1) (idlist1)))
idlist1 : idlist
Base1 : idlist1 = Inil
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
true = true->gq (ZERO) (ZERO) = true -> plus (ZERO) (ZERO) = ZERO

2 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) = spec (repr (target (idlist1) (idlist1)))
idlist1 : idlist
Base1 : idlist1 = Inil
nat1 : nat
nat2 : nat
IH1 : true = true->gq (nat2) (ZERO) = true -> plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
true = true->gq (SUCC (nat2)) (ZERO) = true -> plus (SUCC (nat2)) (ZERO) = ZERO

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 134


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) = spec (repr (target (idlist1) (idlist1)))
idlist1 : idlist
Base1 : idlist1 = Inil
nat1 : nat
nat2 : nat
IH1 : true = true->gq (nat2) (ZERO) = true -> plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
true = true->gq (SUCC (nat2)) (ZERO) = true -> plus (SUCC (nat2)) (ZERO) = ZERO

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) = spec (repr (target (idlist1) (idlist1)))
idlist1 : idlist
Base1 : idlist1 = Inil
nat1 : nat
nat2 : nat
IH1 : true = true->gq (nat2) (ZERO) = true -> plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
true = true->true = true -> SUCC (plus (nat2) (ZERO)) = ZERO

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:10.)
=================================================
Progress: 135


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) = spec (repr (target (idlist1) (idlist1)))
idlist1 : idlist
Base1 : idlist1 = Inil
nat1 : nat
nat2 : nat
IH1 : true = true->gq (nat2) (ZERO) = true -> plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
true = true->true = true -> SUCC (plus (nat2) (ZERO)) = ZERO

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 10.)


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) = spec (repr (target (idlist1) (idlist1)))
idlist1 : idlist
Base1 : idlist1 = Inil
nat1 : nat
nat2 : nat
IH1 : true = true->gq (nat2) (ZERO) = true -> plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
Cond1 : true = true
---------------------------------------
true = true -> SUCC (plus (nat2) (ZERO)) = ZERO

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:10.)
=================================================
Progress: 136


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) = spec (repr (target (idlist1) (idlist1)))
idlist1 : idlist
Base1 : idlist1 = Inil
nat1 : nat
nat2 : nat
IH1 : true = true->gq (nat2) (ZERO) = true -> plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
Cond1 : true = true
---------------------------------------
true = true -> SUCC (plus (nat2) (ZERO)) = ZERO

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 10.)


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) = spec (repr (target (idlist1) (idlist1)))
idlist1 : idlist
Base1 : idlist1 = Inil
nat1 : nat
nat2 : nat
IH1 : true = true->gq (nat2) (ZERO) = true -> plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
Cond1 : true = true
Cond2 : true = true
---------------------------------------
SUCC (plus (nat2) (ZERO)) = ZERO

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:12.)
=================================================
Progress: 137


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) = match (targetNew (idlist1)) with
| Tuple2 a _ -> a
idlist1 : idlist
Base1 : idlist1 = Inil
---------------------------------------
forall (nat1:nat), true = true->gq (nat1) (ZERO) = true -> plus (nat1) (ZERO) = ZERO

1 goal(s) more...

1 conjecture(s) more...
>>> induction nat1(rank : 11.)


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) = match (targetNew (idlist1)) with
| Tuple2 a _ -> a
idlist1 : idlist
Base1 : idlist1 = Inil
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
true = true->gq (ZERO) (ZERO) = true -> plus (ZERO) (ZERO) = ZERO

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 138


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) = match (targetNew (idlist1)) with
| Tuple2 a _ -> a
idlist1 : idlist
Base1 : idlist1 = Inil
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
true = true->gq (ZERO) (ZERO) = true -> plus (ZERO) (ZERO) = ZERO

2 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) = match (targetNew (idlist1)) with
| Tuple2 a _ -> a
idlist1 : idlist
Base1 : idlist1 = Inil
nat1 : nat
nat2 : nat
IH1 : true = true->gq (nat2) (ZERO) = true -> plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
true = true->gq (SUCC (nat2)) (ZERO) = true -> plus (SUCC (nat2)) (ZERO) = ZERO

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 139


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) = match (targetNew (idlist1)) with
| Tuple2 a _ -> a
idlist1 : idlist
Base1 : idlist1 = Inil
nat1 : nat
nat2 : nat
IH1 : true = true->gq (nat2) (ZERO) = true -> plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
true = true->gq (SUCC (nat2)) (ZERO) = true -> plus (SUCC (nat2)) (ZERO) = ZERO

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) = match (targetNew (idlist1)) with
| Tuple2 a _ -> a
idlist1 : idlist
Base1 : idlist1 = Inil
nat1 : nat
nat2 : nat
IH1 : true = true->gq (nat2) (ZERO) = true -> plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
true = true->true = true -> SUCC (plus (nat2) (ZERO)) = ZERO

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:10.)
=================================================
Progress: 140


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) = match (targetNew (idlist1)) with
| Tuple2 a _ -> a
idlist1 : idlist
Base1 : idlist1 = Inil
nat1 : nat
nat2 : nat
IH1 : true = true->gq (nat2) (ZERO) = true -> plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
true = true->true = true -> SUCC (plus (nat2) (ZERO)) = ZERO

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 10.)


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) = match (targetNew (idlist1)) with
| Tuple2 a _ -> a
idlist1 : idlist
Base1 : idlist1 = Inil
nat1 : nat
nat2 : nat
IH1 : true = true->gq (nat2) (ZERO) = true -> plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
Cond1 : true = true
---------------------------------------
true = true -> SUCC (plus (nat2) (ZERO)) = ZERO

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:10.)
=================================================
Progress: 141


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) = match (targetNew (idlist1)) with
| Tuple2 a _ -> a
idlist1 : idlist
Base1 : idlist1 = Inil
nat1 : nat
nat2 : nat
IH1 : true = true->gq (nat2) (ZERO) = true -> plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
Cond1 : true = true
---------------------------------------
true = true -> SUCC (plus (nat2) (ZERO)) = ZERO

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 10.)


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) = match (targetNew (idlist1)) with
| Tuple2 a _ -> a
idlist1 : idlist
Base1 : idlist1 = Inil
nat1 : nat
nat2 : nat
IH1 : true = true->gq (nat2) (ZERO) = true -> plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
Cond1 : true = true
Cond2 : true = true
---------------------------------------
SUCC (plus (nat2) (ZERO)) = ZERO

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:12.)
=================================================
Progress: 142


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) = spec (repr (target (idlist1) (idlist1)))
idlist1 : idlist
Base1 : idlist1 = Inil
nat1 : nat
nat2 : nat
IH1 : true = true->gq (nat2) (ZERO) = true -> plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
Cond1 : true = true
Cond2 : true = true
---------------------------------------
SUCC (plus (nat2) (ZERO)) = ZERO

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 12.)


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) = spec (repr (target (idlist1) (idlist1)))
idlist1 : idlist
Base1 : idlist1 = Inil
nat1 : nat
nat2 : nat
IH1 : true = true->gq (nat2) (ZERO) = true -> plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
Cond1 : true = true
Cond2 : true = true
---------------------------------------
SUCC (ZERO) = ZERO

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
rewrite IH1 in goal at 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
validate generalize_common_subterm_goal
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
asdf
=================================================
Progress: 143


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) = match (targetNew (idlist1)) with
| Tuple2 a _ -> a
idlist1 : idlist
Base1 : idlist1 = Inil
nat1 : nat
nat2 : nat
IH1 : true = true->gq (nat2) (ZERO) = true -> plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
Cond1 : true = true
Cond2 : true = true
---------------------------------------
SUCC (plus (nat2) (ZERO)) = ZERO

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 12.)


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) = match (targetNew (idlist1)) with
| Tuple2 a _ -> a
idlist1 : idlist
Base1 : idlist1 = Inil
nat1 : nat
nat2 : nat
IH1 : true = true->gq (nat2) (ZERO) = true -> plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
Cond1 : true = true
Cond2 : true = true
---------------------------------------
SUCC (ZERO) = ZERO

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
rewrite IH1 in goal at 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
validate generalize_common_subterm_goal
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
asdf
=================================================
Progress: 144


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) = spec (repr (target (idlist2) (idlist2)))

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 15.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (spec (repr (target (idlist2) (idlist2)))) = spec (repr (target (idlist2) (idlist2)))

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
rewrite IH1 in goal at 0
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
rewrite <- IH1 in goal at 3
case gq (nat1) (len (repr (target (idlist2) (idlist2))))
rewrite <- IH1 in goal at 0
Prop: plus (SUCC (ZERO)) (SUCC (ZERO)) = SUCC (ZERO)
Prop: plus (ZERO) (SUCC (ZERO)) = SUCC (ZERO)
Prop: plus (SUCC (SUCC (ZERO))) (ZERO) = ZERO
validate generalize_common_subterm_goal
Prop: plus (ZERO) (SUCC (ZERO)) = SUCC (ZERO)
Prop: plus (ZERO) (SUCC (SUCC (ZERO))) = SUCC (SUCC (ZERO))
Prop: plus (ZERO) (SUCC (ZERO)) = SUCC (ZERO)
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
rewrite IH1 in goal at 0
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
rewrite <- IH1 in goal at 3
case gq (nat1) (len (repr (target (idlist2) (idlist2))))
validate generalize_common_subterm_goal
Prop: plus (ZERO) (match (targetNew (Inil)) with
| Tuple2 a _ -> a) = spec (repr (target (Inil) (Inil)))
Prop: plus (SUCC (ZERO)) (match (targetNew (Icons (SUCC (ZERO)) (ZERO) (Inil))) with
| Tuple2 a _ -> a) = spec (repr (target (Icons (SUCC (ZERO)) (ZERO) (Inil)) (Icons (SUCC (ZERO)) (ZERO) (Inil))))
Prop: plus (ZERO) (match (targetNew (Inil)) with
| Tuple2 a _ -> a) = spec (repr (target (Inil) (Inil)))
=================================================
Progress: 145


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) = if leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (nat1) (fst3 (targetNew (idlist2)))

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 22.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (spec (repr (target (idlist2) (idlist2)))) = if leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (nat1) (fst3 (targetNew (idlist2)))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)(rank:7.)
=================================================
Progress: 146


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (spec (repr (target (idlist2) (idlist2)))) = if leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (nat1) (fst3 (targetNew (idlist2)))

3 goal(s) more...

0 conjecture(s) more...
>>> case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)(rank : 7.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
Case4 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
plus (nat1) (spec (repr (target (idlist2) (idlist2)))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:15.)
rewrite <- IH1 in goal at 0(rank:15.)
=================================================
Progress: 147


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
Case4 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
plus (nat1) (spec (repr (target (idlist2) (idlist2)))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 15.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
Case4 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
plus (nat1) (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
rewrite IH1 in goal at 0
case gq (nat1) (len (repr (target (idlist2) (idlist2))))
rewrite <- IH1 in goal at 0
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
rewrite IH1 in goal at 0
Prop: plus (ZERO) (0) = 0
Prop: plus (ZERO) (3) = 3
Prop: plus (SUCC (ZERO)) (6) = 6
validate generalize_common_subterm_goal
Prop: plus (ZERO) (0) = 0
Prop: plus (ZERO) (0) = 0
Prop: plus (ZERO) (1) = 1
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
rewrite IH1 in goal at 0
case gq (nat1) (len (repr (target (idlist2) (idlist2))))
rewrite <- IH1 in goal at 0
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
validate generalize_common_subterm_goal
Prop: plus (SUCC (ZERO)) (spec (repr (target (Icons (SUCC (SUCC (ZERO))) (SUCC (ZERO)) (Inil)) (Icons (SUCC (SUCC (ZERO))) (SUCC (ZERO)) (Inil))))) = match (targetNew (Icons (SUCC (SUCC (ZERO))) (SUCC (ZERO)) (Inil))) with
| Tuple2 a _ -> a
Prop: plus (ZERO) (spec (repr (target (Icons (SUCC (ZERO)) (ZERO) (Inil)) (Icons (SUCC (ZERO)) (ZERO) (Inil))))) = match (targetNew (Icons (SUCC (ZERO)) (ZERO) (Inil))) with
| Tuple2 a _ -> a
Prop: plus (ZERO) (spec (repr (target (Icons (SUCC (ZERO)) (SUCC (ZERO)) (Icons (ZERO) (ZERO) (Inil))) (Icons (SUCC (ZERO)) (SUCC (ZERO)) (Icons (ZERO) (ZERO) (Inil)))))) = match (targetNew (Icons (SUCC (ZERO)) (SUCC (ZERO)) (Icons (ZERO) (ZERO) (Inil)))) with
| Tuple2 a _ -> a
=================================================
Progress: 148


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
Case4 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
plus (nat1) (spec (repr (target (idlist2) (idlist2)))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 15.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
Case4 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
plus (nat1) (spec (repr (target (idlist2) (idlist2)))) = spec (repr (target (idlist2) (idlist2)))

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
rewrite IH1 in goal at 0
case gq (nat1) (len (repr (target (idlist2) (idlist2))))
rewrite <- IH1 in goal at 0
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
rewrite <- IH1 in goal at 0
Prop: plus (ZERO) (SUCC (SUCC (ZERO))) = SUCC (SUCC (ZERO))
Prop: plus (ZERO) (ZERO) = ZERO
Prop: plus (SUCC (SUCC (ZERO))) (ZERO) = ZERO
validate generalize_common_subterm_goal
Prop: plus (SUCC (ZERO)) (ZERO) = ZERO
Prop: plus (ZERO) (SUCC (ZERO)) = SUCC (ZERO)
Prop: plus (ZERO) (ZERO) = ZERO
Prop: plus (ZERO) (spec (repr (target (Icons (SUCC (ZERO)) (ZERO) (Inil)) (Icons (SUCC (ZERO)) (ZERO) (Inil))))) = spec (repr (target (Icons (SUCC (ZERO)) (ZERO) (Inil)) (Icons (SUCC (ZERO)) (ZERO) (Inil))))
Prop: plus (ZERO) (spec (repr (target (Inil) (Inil)))) = spec (repr (target (Inil) (Inil)))
Prop: plus (ZERO) (spec (repr (target (Icons (ZERO) (SUCC (SUCC (ZERO))) (Icons (ZERO) (SUCC (SUCC (ZERO))) (Inil))) (Icons (ZERO) (SUCC (SUCC (ZERO))) (Icons (ZERO) (SUCC (SUCC (ZERO))) (Inil)))))) = spec (repr (target (Icons (ZERO) (SUCC (SUCC (ZERO))) (Icons (ZERO) (SUCC (SUCC (ZERO))) (Inil))) (Icons (ZERO) (SUCC (SUCC (ZERO))) (Icons (ZERO) (SUCC (SUCC (ZERO))) (Inil)))))
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
rewrite IH1 in goal at 0
case gq (nat1) (len (repr (target (idlist2) (idlist2))))
rewrite <- IH1 in goal at 0
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
validate generalize_common_subterm_goal
Prop: plus (ZERO) (spec (repr (target (Inil) (Inil)))) = match (targetNew (Inil)) with
| Tuple2 a _ -> a
Prop: plus (ZERO) (spec (repr (target (Inil) (Inil)))) = match (targetNew (Inil)) with
| Tuple2 a _ -> a
Prop: plus (SUCC (ZERO)) (spec (repr (target (Inil) (Inil)))) = match (targetNew (Inil)) with
| Tuple2 a _ -> a
asdf
=================================================
Progress: 149


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
if gq (nat1) (len (repr (target (idlist2) (idlist2)))) then plus (nat1) (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) else spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 22.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
if gq (nat1) (len (repr (target (idlist2) (idlist2)))) then plus (nat1) (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) else match (targetNew (idlist2)) with
| Tuple2 a _ -> a = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case gq (nat1) (len (repr (target (idlist2) (idlist2))))(rank:7.)
=================================================
Progress: 150


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
if gq (nat1) (len (repr (target (idlist2) (idlist2)))) then plus (nat1) (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) else match (targetNew (idlist2)) with
| Tuple2 a _ -> a = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

3 goal(s) more...

0 conjecture(s) more...
>>> case gq (nat1) (len (repr (target (idlist2) (idlist2))))(rank : 7.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
rewrite <- IH1 in goal at 0(rank:23.)
rewrite <- IH1 in goal at 1(rank:23.)
rewrite <- IH1 in goal at 2(rank:23.)
=================================================
Progress: 151


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
if gq (nat1) (len (repr (target (idlist2) (idlist2)))) then plus (nat1) (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) else spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 22.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
if gq (nat1) (len (repr (target (idlist2) (idlist2)))) then plus (nat1) (spec (repr (target (idlist2) (idlist2)))) else spec (repr (target (idlist2) (idlist2))) = spec (repr (target (idlist2) (idlist2)))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case gq (nat1) (len (repr (target (idlist2) (idlist2))))(rank:7.)
=================================================
Progress: 152


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
if gq (nat1) (len (repr (target (idlist2) (idlist2)))) then plus (nat1) (spec (repr (target (idlist2) (idlist2)))) else spec (repr (target (idlist2) (idlist2))) = spec (repr (target (idlist2) (idlist2)))

3 goal(s) more...

0 conjecture(s) more...
>>> case gq (nat1) (len (repr (target (idlist2) (idlist2))))(rank : 7.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (spec (repr (target (idlist2) (idlist2)))) = spec (repr (target (idlist2) (idlist2)))

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:23.)
rewrite IH1 in goal at 1(rank:23.)
rewrite IH1 in goal at 2(rank:23.)
=================================================
Progress: 153


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
if gq (nat1) (len (repr (target (idlist2) (idlist2)))) then plus (nat1) (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) else spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 1(rank : 22.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
if gq (nat1) (len (repr (target (idlist2) (idlist2)))) then plus (nat1) (spec (repr (target (idlist2) (idlist2)))) else spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
rewrite IH1 in goal at 1
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
rewrite <- IH1 in goal at 1
validate generalize_common_subterm_goal
Prop: if gq (ZERO) (len (repr (target (Inil) (Inil)))) then plus (ZERO) (spec (repr (target (Inil) (Inil)))) else spec (repr (target (Inil) (Inil))) = match (targetNew (Inil)) with
| Tuple2 a _ -> a
Prop: if gq (ZERO) (len (repr (target (Inil) (Inil)))) then plus (ZERO) (spec (repr (target (Inil) (Inil)))) else spec (repr (target (Inil) (Inil))) = match (targetNew (Inil)) with
| Tuple2 a _ -> a
Prop: if gq (ZERO) (len (repr (target (Inil) (Inil)))) then plus (ZERO) (spec (repr (target (Inil) (Inil)))) else spec (repr (target (Inil) (Inil))) = match (targetNew (Inil)) with
| Tuple2 a _ -> a
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
rewrite IH1 in goal at 1
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
Prop: if gq (SUCC (SUCC (ZERO))) (len (repr (target (Icons (SUCC (SUCC (ZERO))) (ZERO) (Inil)) (Icons (SUCC (SUCC (ZERO))) (ZERO) (Inil))))) then plus (SUCC (SUCC (ZERO))) (2) else spec (repr (target (Icons (SUCC (SUCC (ZERO))) (ZERO) (Inil)) (Icons (SUCC (SUCC (ZERO))) (ZERO) (Inil)))) = 2
Prop: if gq (SUCC (SUCC (ZERO))) (len (repr (target (Icons (ZERO) (ZERO) (Inil)) (Icons (ZERO) (ZERO) (Inil))))) then plus (SUCC (SUCC (ZERO))) (7) else spec (repr (target (Icons (ZERO) (ZERO) (Inil)) (Icons (ZERO) (ZERO) (Inil)))) = 7
Prop: if gq (SUCC (ZERO)) (len (repr (target (Inil) (Inil)))) then plus (SUCC (ZERO)) (3) else spec (repr (target (Inil) (Inil))) = 3
validate generalize_common_subterm_goal
Prop: if gq (SUCC (ZERO)) (len (repr (target (Inil) (Inil)))) then plus (SUCC (ZERO)) (3) else spec (repr (target (Inil) (Inil))) = 3
Prop: if gq (ZERO) (len (repr (target (Icons (ZERO) (ZERO) (Icons (SUCC (SUCC (SUCC (ZERO)))) (SUCC (ZERO)) (Inil))) (Icons (ZERO) (ZERO) (Icons (SUCC (SUCC (SUCC (ZERO)))) (SUCC (ZERO)) (Inil)))))) then plus (ZERO) (4) else spec (repr (target (Icons (ZERO) (ZERO) (Icons (SUCC (SUCC (SUCC (ZERO)))) (SUCC (ZERO)) (Inil))) (Icons (ZERO) (ZERO) (Icons (SUCC (SUCC (SUCC (ZERO)))) (SUCC (ZERO)) (Inil))))) = 4
Prop: if gq (SUCC (ZERO)) (len (repr (target (Icons (ZERO) (SUCC (SUCC (SUCC (ZERO)))) (Icons (ZERO) (SUCC (ZERO)) (Inil))) (Icons (ZERO) (SUCC (SUCC (SUCC (ZERO)))) (Icons (ZERO) (SUCC (ZERO)) (Inil)))))) then plus (SUCC (ZERO)) (1) else spec (repr (target (Icons (ZERO) (SUCC (SUCC (SUCC (ZERO)))) (Icons (ZERO) (SUCC (ZERO)) (Inil))) (Icons (ZERO) (SUCC (SUCC (SUCC (ZERO)))) (Icons (ZERO) (SUCC (ZERO)) (Inil))))) = 1
Prop: if gq (ZERO) (len (repr (target (Inil) (Inil)))) then plus (ZERO) (match (targetNew (Inil)) with
| Tuple2 a _ -> a) else spec (repr (target (Inil) (Inil))) = match (targetNew (Inil)) with
| Tuple2 a _ -> a
Prop: if gq (SUCC (ZERO)) (len (repr (target (Inil) (Inil)))) then plus (SUCC (ZERO)) (match (targetNew (Inil)) with
| Tuple2 a _ -> a) else spec (repr (target (Inil) (Inil))) = match (targetNew (Inil)) with
| Tuple2 a _ -> a
Prop: if gq (ZERO) (len (repr (target (Inil) (Inil)))) then plus (ZERO) (match (targetNew (Inil)) with
| Tuple2 a _ -> a) else spec (repr (target (Inil) (Inil))) = match (targetNew (Inil)) with
| Tuple2 a _ -> a
asdf
Lemma List
forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true -> if gq (nat1) (len (repr (target (idlist1) (idlist1)))) then plus (nat1) (spec (repr (target (idlist1) (idlist1)))) else spec (repr (target (idlist1) (idlist1))) = match (targetNew (idlist1)) with
| Tuple2 a _ -> a
End of Lemma List


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
if gq (nat1) (len (repr (target (idlist2) (idlist2)))) then plus (nat1) (spec (repr (target (idlist2) (idlist2)))) else spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

3 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 154


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
if gq (nat1) (len (repr (target (idlist2) (idlist2)))) then plus (nat1) (spec (repr (target (idlist2) (idlist2)))) else spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

3 goal(s) more...

0 conjecture(s) more...
>>> assert forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true -> if gq (nat1) (len (repr (target (idlist1) (idlist1)))) then plus (nat1) (spec (repr (target (idlist1) (idlist1)))) else spec (repr (target (idlist1) (idlist1))) = match (targetNew (idlist1)) with
| Tuple2 a _ -> a(rank : 0.)


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true -> if gq (nat1) (len (repr (target (idlist1) (idlist1)))) then plus (nat1) (spec (repr (target (idlist1) (idlist1)))) else spec (repr (target (idlist1) (idlist1))) = match (targetNew (idlist1)) with
| Tuple2 a _ -> a

---------------------------------------
forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true -> if gq (nat1) (len (repr (target (idlist1) (idlist1)))) then plus (nat1) (spec (repr (target (idlist1) (idlist1)))) else spec (repr (target (idlist1) (idlist1))) = match (targetNew (idlist1)) with
| Tuple2 a _ -> a

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction idlist1(rank:6.)
=================================================
Progress: 155


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true -> if gq (nat1) (len (repr (target (idlist1) (idlist1)))) then plus (nat1) (spec (repr (target (idlist1) (idlist1)))) else spec (repr (target (idlist1) (idlist1))) = match (targetNew (idlist1)) with
| Tuple2 a _ -> a

---------------------------------------
forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true -> if gq (nat1) (len (repr (target (idlist1) (idlist1)))) then plus (nat1) (spec (repr (target (idlist1) (idlist1)))) else spec (repr (target (idlist1) (idlist1))) = match (targetNew (idlist1)) with
| Tuple2 a _ -> a

0 goal(s) more...

1 conjecture(s) more...
>>> induction idlist1(rank : 6.)


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true -> if gq (nat1) (len (repr (target (idlist1) (idlist1)))) then plus (nat1) (spec (repr (target (idlist1) (idlist1)))) else spec (repr (target (idlist1) (idlist1))) = match (targetNew (idlist1)) with
| Tuple2 a _ -> a
idlist1 : idlist
Base1 : idlist1 = Inil
---------------------------------------
forall (nat1:nat), isindexed (Inil) = true -> if gq (nat1) (len (repr (target (Inil) (Inil)))) then plus (nat1) (spec (repr (target (Inil) (Inil)))) else spec (repr (target (Inil) (Inil))) = match (targetNew (Inil)) with
| Tuple2 a _ -> a

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:6.)
=================================================
Progress: 156


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true -> if gq (nat1) (len (repr (target (idlist1) (idlist1)))) then plus (nat1) (spec (repr (target (idlist1) (idlist1)))) else spec (repr (target (idlist1) (idlist1))) = match (targetNew (idlist1)) with
| Tuple2 a _ -> a
idlist1 : idlist
Base1 : idlist1 = Inil
---------------------------------------
forall (nat1:nat), isindexed (Inil) = true -> if gq (nat1) (len (repr (target (Inil) (Inil)))) then plus (nat1) (spec (repr (target (Inil) (Inil)))) else spec (repr (target (Inil) (Inil))) = match (targetNew (Inil)) with
| Tuple2 a _ -> a

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6.)


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true -> if gq (nat1) (len (repr (target (idlist1) (idlist1)))) then plus (nat1) (spec (repr (target (idlist1) (idlist1)))) else spec (repr (target (idlist1) (idlist1))) = match (targetNew (idlist1)) with
| Tuple2 a _ -> a
idlist1 : idlist
Base1 : idlist1 = Inil
---------------------------------------
forall (nat1:nat), true = true -> if gq (nat1) (ZERO) then plus (nat1) (spec (repr (target (Inil) (Inil)))) else spec (repr (target (Inil) (Inil))) = ZERO

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:6.)
=================================================
Progress: 157


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true -> if gq (nat1) (len (repr (target (idlist1) (idlist1)))) then plus (nat1) (spec (repr (target (idlist1) (idlist1)))) else spec (repr (target (idlist1) (idlist1))) = match (targetNew (idlist1)) with
| Tuple2 a _ -> a
idlist1 : idlist
Base1 : idlist1 = Inil
---------------------------------------
forall (nat1:nat), true = true -> if gq (nat1) (ZERO) then plus (nat1) (spec (repr (target (Inil) (Inil)))) else spec (repr (target (Inil) (Inil))) = ZERO

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 6.)


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true -> if gq (nat1) (len (repr (target (idlist1) (idlist1)))) then plus (nat1) (spec (repr (target (idlist1) (idlist1)))) else spec (repr (target (idlist1) (idlist1))) = match (targetNew (idlist1)) with
| Tuple2 a _ -> a
idlist1 : idlist
Base1 : idlist1 = Inil
Cond1 : true = true
---------------------------------------
forall (nat1:nat), if gq (nat1) (ZERO) then plus (nat1) (spec (repr (target (Inil) (Inil)))) else spec (repr (target (Inil) (Inil))) = ZERO

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction nat1(rank:7.)
=================================================
Progress: 158


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true -> if gq (nat1) (len (repr (target (idlist1) (idlist1)))) then plus (nat1) (spec (repr (target (idlist1) (idlist1)))) else spec (repr (target (idlist1) (idlist1))) = match (targetNew (idlist1)) with
| Tuple2 a _ -> a
idlist1 : idlist
Base1 : idlist1 = Inil
Cond1 : true = true
---------------------------------------
forall (nat1:nat), if gq (nat1) (ZERO) then plus (nat1) (spec (repr (target (Inil) (Inil)))) else spec (repr (target (Inil) (Inil))) = ZERO

1 goal(s) more...

1 conjecture(s) more...
>>> induction nat1(rank : 7.)


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true -> if gq (nat1) (len (repr (target (idlist1) (idlist1)))) then plus (nat1) (spec (repr (target (idlist1) (idlist1)))) else spec (repr (target (idlist1) (idlist1))) = match (targetNew (idlist1)) with
| Tuple2 a _ -> a
idlist1 : idlist
Base1 : idlist1 = Inil
Cond1 : true = true
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
if gq (ZERO) (ZERO) then plus (ZERO) (spec (repr (target (Inil) (Inil)))) else spec (repr (target (Inil) (Inil))) = ZERO

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:6.)
=================================================
Progress: 159


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true -> if gq (nat1) (len (repr (target (idlist1) (idlist1)))) then plus (nat1) (spec (repr (target (idlist1) (idlist1)))) else spec (repr (target (idlist1) (idlist1))) = match (targetNew (idlist1)) with
| Tuple2 a _ -> a
idlist1 : idlist
Base1 : idlist1 = Inil
Cond1 : true = true
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
if gq (ZERO) (ZERO) then plus (ZERO) (spec (repr (target (Inil) (Inil)))) else spec (repr (target (Inil) (Inil))) = ZERO

2 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 6.)


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true -> if gq (nat1) (len (repr (target (idlist1) (idlist1)))) then plus (nat1) (spec (repr (target (idlist1) (idlist1)))) else spec (repr (target (idlist1) (idlist1))) = match (targetNew (idlist1)) with
| Tuple2 a _ -> a
idlist1 : idlist
Base1 : idlist1 = Inil
Cond1 : true = true
nat1 : nat
nat2 : nat
IH1 : if gq (nat2) (ZERO) then plus (nat2) (spec (repr (target (Inil) (Inil)))) else spec (repr (target (Inil) (Inil))) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
if gq (SUCC (nat2)) (ZERO) then plus (SUCC (nat2)) (spec (repr (target (Inil) (Inil)))) else spec (repr (target (Inil) (Inil))) = ZERO

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:6.)
=================================================
Progress: 160


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true -> if gq (nat1) (len (repr (target (idlist1) (idlist1)))) then plus (nat1) (spec (repr (target (idlist1) (idlist1)))) else spec (repr (target (idlist1) (idlist1))) = match (targetNew (idlist1)) with
| Tuple2 a _ -> a
idlist1 : idlist
Base1 : idlist1 = Inil
Cond1 : true = true
nat1 : nat
nat2 : nat
IH1 : if gq (nat2) (ZERO) then plus (nat2) (spec (repr (target (Inil) (Inil)))) else spec (repr (target (Inil) (Inil))) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
if gq (SUCC (nat2)) (ZERO) then plus (SUCC (nat2)) (spec (repr (target (Inil) (Inil)))) else spec (repr (target (Inil) (Inil))) = ZERO

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6.)


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true -> if gq (nat1) (len (repr (target (idlist1) (idlist1)))) then plus (nat1) (spec (repr (target (idlist1) (idlist1)))) else spec (repr (target (idlist1) (idlist1))) = match (targetNew (idlist1)) with
| Tuple2 a _ -> a
idlist1 : idlist
Base1 : idlist1 = Inil
Cond1 : true = true
nat1 : nat
nat2 : nat
IH1 : if gq (nat2) (ZERO) then plus (nat2) (spec (repr (target (Inil) (Inil)))) else spec (repr (target (Inil) (Inil))) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
SUCC (plus (nat2) (ZERO)) = ZERO

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: SUCC (plus (SUCC (ZERO)) (ZERO)) = ZERO
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
asdf
=================================================
Progress: 161


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
if gq (nat1) (len (repr (target (idlist2) (idlist2)))) then plus (nat1) (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) else spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 2(rank : 22.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
if gq (nat1) (len (repr (target (idlist2) (idlist2)))) then plus (nat1) (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) else spec (repr (target (idlist2) (idlist2))) = spec (repr (target (idlist2) (idlist2)))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
rewrite IH1 in goal at 1
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
rewrite <- IH1 in goal at 2
Prop: if gq (SUCC (ZERO)) (len (repr (target (Icons (SUCC (SUCC (ZERO))) (ZERO) (Inil)) (Icons (SUCC (SUCC (ZERO))) (ZERO) (Inil))))) then plus (SUCC (ZERO)) (match (targetNew (Icons (SUCC (SUCC (ZERO))) (ZERO) (Inil))) with
| Tuple2 a _ -> a) else ZERO = ZERO
Prop: if gq (ZERO) (len (repr (target (Inil) (Inil)))) then plus (ZERO) (match (targetNew (Inil)) with
| Tuple2 a _ -> a) else ZERO = ZERO
Prop: if gq (ZERO) (len (repr (target (Inil) (Inil)))) then plus (ZERO) (match (targetNew (Inil)) with
| Tuple2 a _ -> a) else ZERO = ZERO
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
rewrite IH1 in goal at 1
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
Prop: if gq (SUCC (ZERO)) (len (repr (target (Inil) (Inil)))) then plus (SUCC (ZERO)) (0) else spec (repr (target (Inil) (Inil))) = 0
Prop: if gq (SUCC (ZERO)) (len (repr (target (Inil) (Inil)))) then plus (SUCC (ZERO)) (0) else spec (repr (target (Inil) (Inil))) = 0
Prop: if gq (ZERO) (len (repr (target (Inil) (Inil)))) then plus (ZERO) (7) else spec (repr (target (Inil) (Inil))) = 7
validate generalize_common_subterm_goal
Prop: if gq (ZERO) (len (repr (target (Inil) (Inil)))) then plus (ZERO) (0) else spec (repr (target (Inil) (Inil))) = 0
Prop: if gq (SUCC (ZERO)) (len (repr (target (Icons (SUCC (SUCC (ZERO))) (ZERO) (Inil)) (Icons (SUCC (SUCC (ZERO))) (ZERO) (Inil))))) then plus (SUCC (ZERO)) (5) else spec (repr (target (Icons (SUCC (SUCC (ZERO))) (ZERO) (Inil)) (Icons (SUCC (SUCC (ZERO))) (ZERO) (Inil)))) = 5
Prop: if gq (SUCC (ZERO)) (len (repr (target (Icons (ZERO) (ZERO) (Inil)) (Icons (ZERO) (ZERO) (Inil))))) then plus (SUCC (ZERO)) (4) else spec (repr (target (Icons (ZERO) (ZERO) (Inil)) (Icons (ZERO) (ZERO) (Inil)))) = 4
Prop: if gq (ZERO) (len (repr (target (Icons (ZERO) (SUCC (ZERO)) (Inil)) (Icons (ZERO) (SUCC (ZERO)) (Inil))))) then plus (ZERO) (match (targetNew (Icons (ZERO) (SUCC (ZERO)) (Inil))) with
| Tuple2 a _ -> a) else spec (repr (target (Icons (ZERO) (SUCC (ZERO)) (Inil)) (Icons (ZERO) (SUCC (ZERO)) (Inil)))) = match (targetNew (Icons (ZERO) (SUCC (ZERO)) (Inil))) with
| Tuple2 a _ -> a
Prop: if gq (ZERO) (len (repr (target (Inil) (Inil)))) then plus (ZERO) (match (targetNew (Inil)) with
| Tuple2 a _ -> a) else spec (repr (target (Inil) (Inil))) = match (targetNew (Inil)) with
| Tuple2 a _ -> a
Prop: if gq (ZERO) (len (repr (target (Inil) (Inil)))) then plus (ZERO) (match (targetNew (Inil)) with
| Tuple2 a _ -> a) else spec (repr (target (Inil) (Inil))) = match (targetNew (Inil)) with
| Tuple2 a _ -> a
Lemma List
forall (nat1:nat) (idlist1:idlist) (nat2:nat), if gq (nat2) (len (repr (target (idlist1) (idlist1)))) then plus (nat2) (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) else nat1 = nat1
End of Lemma List


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
if gq (nat1) (len (repr (target (idlist2) (idlist2)))) then plus (nat1) (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) else spec (repr (target (idlist2) (idlist2))) = spec (repr (target (idlist2) (idlist2)))

3 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 162


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
if gq (nat1) (len (repr (target (idlist2) (idlist2)))) then plus (nat1) (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) else spec (repr (target (idlist2) (idlist2))) = spec (repr (target (idlist2) (idlist2)))

3 goal(s) more...

0 conjecture(s) more...
>>> assert forall (nat1:nat) (idlist1:idlist) (nat2:nat), if gq (nat2) (len (repr (target (idlist1) (idlist1)))) then plus (nat2) (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) else nat1 = nat1(rank : 0.)


1st goal of : forall (nat1:nat) (idlist1:idlist) (nat2:nat), if gq (nat2) (len (repr (target (idlist1) (idlist1)))) then plus (nat2) (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) else nat1 = nat1

---------------------------------------
forall (nat1:nat) (idlist1:idlist) (nat2:nat), if gq (nat2) (len (repr (target (idlist1) (idlist1)))) then plus (nat2) (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) else nat1 = nat1

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro nat1(rank:5.)
=================================================
Progress: 163


1st goal of : forall (nat1:nat) (idlist1:idlist) (nat2:nat), if gq (nat2) (len (repr (target (idlist1) (idlist1)))) then plus (nat2) (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) else nat1 = nat1

---------------------------------------
forall (nat1:nat) (idlist1:idlist) (nat2:nat), if gq (nat2) (len (repr (target (idlist1) (idlist1)))) then plus (nat2) (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) else nat1 = nat1

0 goal(s) more...

1 conjecture(s) more...
>>> intro nat1(rank : 5.)


1st goal of : forall (nat1:nat) (idlist1:idlist) (nat2:nat), if gq (nat2) (len (repr (target (idlist1) (idlist1)))) then plus (nat2) (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) else nat1 = nat1
nat1 : nat
---------------------------------------
forall (idlist1:idlist) (nat2:nat), if gq (nat2) (len (repr (target (idlist1) (idlist1)))) then plus (nat2) (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) else nat1 = nat1

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction nat2(rank:6.)
=================================================
Progress: 164


1st goal of : forall (nat1:nat) (idlist1:idlist) (nat2:nat), if gq (nat2) (len (repr (target (idlist1) (idlist1)))) then plus (nat2) (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) else nat1 = nat1
nat1 : nat
---------------------------------------
forall (idlist1:idlist) (nat2:nat), if gq (nat2) (len (repr (target (idlist1) (idlist1)))) then plus (nat2) (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) else nat1 = nat1

0 goal(s) more...

1 conjecture(s) more...
>>> induction nat2(rank : 6.)


1st goal of : forall (nat1:nat) (idlist1:idlist) (nat2:nat), if gq (nat2) (len (repr (target (idlist1) (idlist1)))) then plus (nat2) (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) else nat1 = nat1
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (idlist1:idlist), if gq (ZERO) (len (repr (target (idlist1) (idlist1)))) then plus (ZERO) (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) else nat1 = nat1

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:5.)
=================================================
Progress: 165


1st goal of : forall (nat1:nat) (idlist1:idlist) (nat2:nat), if gq (nat2) (len (repr (target (idlist1) (idlist1)))) then plus (nat2) (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) else nat1 = nat1
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (idlist1:idlist), if gq (ZERO) (len (repr (target (idlist1) (idlist1)))) then plus (ZERO) (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) else nat1 = nat1

1 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 5.)


1st goal of : forall (nat1:nat) (idlist1:idlist) (nat2:nat), if gq (nat2) (len (repr (target (idlist1) (idlist1)))) then plus (nat2) (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) else nat1 = nat1
nat1 : nat
nat2 : nat
nat3 : nat
IH1 : forall (idlist1:idlist), if gq (nat3) (len (repr (target (idlist1) (idlist1)))) then plus (nat3) (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) else nat1 = nat1
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
forall (idlist1:idlist), if gq (SUCC (nat3)) (len (repr (target (idlist1) (idlist1)))) then plus (SUCC (nat3)) (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) else nat1 = nat1

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
induction idlist1(rank:6.)
=================================================
Progress: 166


1st goal of : forall (nat1:nat) (idlist1:idlist) (nat2:nat), if gq (nat2) (len (repr (target (idlist1) (idlist1)))) then plus (nat2) (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) else nat1 = nat1
nat1 : nat
nat2 : nat
nat3 : nat
IH1 : forall (idlist1:idlist), if gq (nat3) (len (repr (target (idlist1) (idlist1)))) then plus (nat3) (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) else nat1 = nat1
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
forall (idlist1:idlist), if gq (SUCC (nat3)) (len (repr (target (idlist1) (idlist1)))) then plus (SUCC (nat3)) (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) else nat1 = nat1

0 goal(s) more...

1 conjecture(s) more...
>>> induction idlist1(rank : 6.)


1st goal of : forall (nat1:nat) (idlist1:idlist) (nat2:nat), if gq (nat2) (len (repr (target (idlist1) (idlist1)))) then plus (nat2) (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) else nat1 = nat1
nat1 : nat
nat2 : nat
nat3 : nat
IH1 : forall (idlist1:idlist), if gq (nat3) (len (repr (target (idlist1) (idlist1)))) then plus (nat3) (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) else nat1 = nat1
Inductive1 : nat2 = SUCC (nat3)
idlist1 : idlist
Base1 : idlist1 = Inil
---------------------------------------
if gq (SUCC (nat3)) (len (repr (target (Inil) (Inil)))) then plus (SUCC (nat3)) (match (targetNew (Inil)) with
| Tuple2 a _ -> a) else nat1 = nat1

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:6.)
=================================================
Progress: 167


1st goal of : forall (nat1:nat) (idlist1:idlist) (nat2:nat), if gq (nat2) (len (repr (target (idlist1) (idlist1)))) then plus (nat2) (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) else nat1 = nat1
nat1 : nat
nat2 : nat
nat3 : nat
IH1 : forall (idlist1:idlist), if gq (nat3) (len (repr (target (idlist1) (idlist1)))) then plus (nat3) (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) else nat1 = nat1
Inductive1 : nat2 = SUCC (nat3)
idlist1 : idlist
Base1 : idlist1 = Inil
---------------------------------------
if gq (SUCC (nat3)) (len (repr (target (Inil) (Inil)))) then plus (SUCC (nat3)) (match (targetNew (Inil)) with
| Tuple2 a _ -> a) else nat1 = nat1

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6.)


1st goal of : forall (nat1:nat) (idlist1:idlist) (nat2:nat), if gq (nat2) (len (repr (target (idlist1) (idlist1)))) then plus (nat2) (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) else nat1 = nat1
nat1 : nat
nat2 : nat
nat3 : nat
IH1 : forall (idlist1:idlist), if gq (nat3) (len (repr (target (idlist1) (idlist1)))) then plus (nat3) (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) else nat1 = nat1
Inductive1 : nat2 = SUCC (nat3)
idlist1 : idlist
Base1 : idlist1 = Inil
---------------------------------------
SUCC (plus (nat3) (ZERO)) = nat1

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: SUCC (plus (SUCC (SUCC (ZERO))) (ZERO)) = ZERO
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
Prop: SUCC (plus (SUCC (ZERO)) (ZERO)) = ZERO
asdf
=================================================
Progress: 168


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
if gq (nat1) (len (repr (target (idlist2) (idlist2)))) then plus (nat1) (spec (repr (target (idlist2) (idlist2)))) else match (targetNew (idlist2)) with
| Tuple2 a _ -> a = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 22.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
if gq (nat1) (len (repr (target (idlist2) (idlist2)))) then plus (nat1) (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) else match (targetNew (idlist2)) with
| Tuple2 a _ -> a = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
rewrite IH1 in goal at 2
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
rewrite IH1 in goal at 0
Prop: if gq (ZERO) (len (repr (target (Inil) (Inil)))) then plus (ZERO) (4) else 4 = 4
Prop: if gq (ZERO) (len (repr (target (Inil) (Inil)))) then plus (ZERO) (4) else 4 = 4
Prop: if gq (ZERO) (len (repr (target (Inil) (Inil)))) then plus (ZERO) (8) else 8 = 8
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
rewrite IH1 in goal at 2
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
Prop: if gq (ZERO) (len (repr (target (Inil) (Inil)))) then plus (ZERO) (spec (repr (target (Inil) (Inil)))) else 0 = 0
Prop: if gq (ZERO) (len (repr (target (Icons (ZERO) (ZERO) (Icons (ZERO) (ZERO) (Icons (ZERO) (ZERO) (Inil)))) (Icons (ZERO) (ZERO) (Icons (ZERO) (ZERO) (Icons (ZERO) (ZERO) (Inil))))))) then plus (ZERO) (spec (repr (target (Icons (ZERO) (ZERO) (Icons (ZERO) (ZERO) (Icons (ZERO) (ZERO) (Inil)))) (Icons (ZERO) (ZERO) (Icons (ZERO) (ZERO) (Icons (ZERO) (ZERO) (Inil))))))) else 3 = 3
Prop: if gq (ZERO) (len (repr (target (Icons (ZERO) (ZERO) (Inil)) (Icons (ZERO) (ZERO) (Inil))))) then plus (ZERO) (spec (repr (target (Icons (ZERO) (ZERO) (Inil)) (Icons (ZERO) (ZERO) (Inil))))) else 0 = 0
=================================================
Progress: 169


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
if gq (nat1) (len (repr (target (idlist2) (idlist2)))) then plus (nat1) (spec (repr (target (idlist2) (idlist2)))) else match (targetNew (idlist2)) with
| Tuple2 a _ -> a = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 22.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
if gq (nat1) (len (repr (target (idlist2) (idlist2)))) then plus (nat1) (spec (repr (target (idlist2) (idlist2)))) else spec (repr (target (idlist2) (idlist2))) = spec (repr (target (idlist2) (idlist2)))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case gq (nat1) (len (repr (target (idlist2) (idlist2))))(rank:7.)
=================================================
Progress: 170


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
if gq (nat1) (len (repr (target (idlist2) (idlist2)))) then plus (nat1) (spec (repr (target (idlist2) (idlist2)))) else spec (repr (target (idlist2) (idlist2))) = spec (repr (target (idlist2) (idlist2)))

3 goal(s) more...

0 conjecture(s) more...
>>> case gq (nat1) (len (repr (target (idlist2) (idlist2))))(rank : 7.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (spec (repr (target (idlist2) (idlist2)))) = spec (repr (target (idlist2) (idlist2)))

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:23.)
rewrite IH1 in goal at 1(rank:23.)
rewrite IH1 in goal at 2(rank:23.)
=================================================
Progress: 171


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
if gq (nat1) (len (repr (target (idlist2) (idlist2)))) then plus (nat1) (spec (repr (target (idlist2) (idlist2)))) else match (targetNew (idlist2)) with
| Tuple2 a _ -> a = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 1(rank : 22.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
if gq (nat1) (len (repr (target (idlist2) (idlist2)))) then plus (nat1) (spec (repr (target (idlist2) (idlist2)))) else spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case gq (nat1) (len (repr (target (idlist2) (idlist2))))(rank:7.)
=================================================
Progress: 172


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
if gq (nat1) (len (repr (target (idlist2) (idlist2)))) then plus (nat1) (spec (repr (target (idlist2) (idlist2)))) else spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

3 goal(s) more...

0 conjecture(s) more...
>>> case gq (nat1) (len (repr (target (idlist2) (idlist2))))(rank : 7.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (spec (repr (target (idlist2) (idlist2)))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:15.)
rewrite <- IH1 in goal at 0(rank:15.)
=================================================
Progress: 173


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (spec (repr (target (idlist2) (idlist2)))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 15.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
rewrite IH1 in goal at 2
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
rewrite <- IH1 in goal at 1
case gq (nat1) (len (repr (target (idlist2) (idlist2))))
rewrite IH1 in goal at 0
Prop: plus (ZERO) (0) = 0
Prop: plus (ZERO) (3) = 3
Prop: plus (ZERO) (5) = 5
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
rewrite IH1 in goal at 2
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
rewrite <- IH1 in goal at 1
case gq (nat1) (len (repr (target (idlist2) (idlist2))))
validate generalize_common_subterm_goal
Prop: plus (ZERO) (spec (repr (target (Inil) (Inil)))) = match (targetNew (Inil)) with
| Tuple2 a _ -> a
Prop: plus (SUCC (ZERO)) (spec (repr (target (Inil) (Inil)))) = match (targetNew (Inil)) with
| Tuple2 a _ -> a
Prop: plus (ZERO) (spec (repr (target (Icons (ZERO) (ZERO) (Inil)) (Icons (ZERO) (ZERO) (Inil))))) = match (targetNew (Icons (ZERO) (ZERO) (Inil))) with
| Tuple2 a _ -> a
asdf
=================================================
Progress: 174


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (spec (repr (target (idlist2) (idlist2)))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 15.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (spec (repr (target (idlist2) (idlist2)))) = spec (repr (target (idlist2) (idlist2)))

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
rewrite IH1 in goal at 2
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
rewrite <- IH1 in goal at 1
case gq (nat1) (len (repr (target (idlist2) (idlist2))))
rewrite <- IH1 in goal at 0
Prop: plus (ZERO) (SUCC (ZERO)) = SUCC (ZERO)
Prop: plus (ZERO) (SUCC (ZERO)) = SUCC (ZERO)
Prop: plus (ZERO) (SUCC (ZERO)) = SUCC (ZERO)
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
rewrite IH1 in goal at 2
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
rewrite <- IH1 in goal at 1
case gq (nat1) (len (repr (target (idlist2) (idlist2))))
validate generalize_common_subterm_goal
Prop: plus (ZERO) (spec (repr (target (Inil) (Inil)))) = match (targetNew (Inil)) with
| Tuple2 a _ -> a
Prop: plus (SUCC (SUCC (ZERO))) (spec (repr (target (Inil) (Inil)))) = match (targetNew (Inil)) with
| Tuple2 a _ -> a
Prop: plus (ZERO) (spec (repr (target (Icons (ZERO) (ZERO) (Inil)) (Icons (ZERO) (ZERO) (Inil))))) = match (targetNew (Icons (ZERO) (ZERO) (Inil))) with
| Tuple2 a _ -> a
asdf
=================================================
Progress: 175


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
if gq (nat1) (len (repr (target (idlist2) (idlist2)))) then plus (nat1) (spec (repr (target (idlist2) (idlist2)))) else match (targetNew (idlist2)) with
| Tuple2 a _ -> a = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

3 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 2(rank : 22.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
if gq (nat1) (len (repr (target (idlist2) (idlist2)))) then plus (nat1) (spec (repr (target (idlist2) (idlist2)))) else match (targetNew (idlist2)) with
| Tuple2 a _ -> a = spec (repr (target (idlist2) (idlist2)))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case gq (nat1) (len (repr (target (idlist2) (idlist2))))(rank:7.)
=================================================
Progress: 176


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
if gq (nat1) (len (repr (target (idlist2) (idlist2)))) then plus (nat1) (spec (repr (target (idlist2) (idlist2)))) else match (targetNew (idlist2)) with
| Tuple2 a _ -> a = spec (repr (target (idlist2) (idlist2)))

3 goal(s) more...

0 conjecture(s) more...
>>> case gq (nat1) (len (repr (target (idlist2) (idlist2))))(rank : 7.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (spec (repr (target (idlist2) (idlist2)))) = spec (repr (target (idlist2) (idlist2)))

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:23.)
rewrite IH1 in goal at 1(rank:23.)
rewrite IH1 in goal at 2(rank:23.)
=================================================
Progress: 177


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (spec (repr (target (idlist2) (idlist2)))) = spec (repr (target (idlist2) (idlist2)))

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 23.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
rewrite <- IH1 in goal at 0
case gq (nat1) (len (repr (target (idlist2) (idlist2))))
rewrite IH1 in goal at 0
Prop: plus (ZERO) (3) = 3
Prop: plus (ZERO) (1) = 1
Prop: plus (ZERO) (4) = 4
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
rewrite <- IH1 in goal at 0
case gq (nat1) (len (repr (target (idlist2) (idlist2))))
Prop: plus (ZERO) (ZERO) = ZERO
Prop: plus (ZERO) (ZERO) = ZERO
Prop: plus (SUCC (ZERO)) (ZERO) = ZERO
validate generalize_common_subterm_goal
Prop: plus (ZERO) (ZERO) = ZERO
Prop: plus (ZERO) (SUCC (SUCC (ZERO))) = SUCC (SUCC (ZERO))
Prop: plus (SUCC (ZERO)) (ZERO) = ZERO
Prop: plus (ZERO) (spec (repr (target (Inil) (Inil)))) = spec (repr (target (Inil) (Inil)))
Prop: plus (ZERO) (spec (repr (target (Inil) (Inil)))) = spec (repr (target (Inil) (Inil)))
Prop: plus (ZERO) (spec (repr (target (Inil) (Inil)))) = spec (repr (target (Inil) (Inil)))
=================================================
Progress: 178


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (spec (repr (target (idlist2) (idlist2)))) = spec (repr (target (idlist2) (idlist2)))

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 1(rank : 23.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) = spec (repr (target (idlist2) (idlist2)))

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
rewrite <- IH1 in goal at 0
case gq (nat1) (len (repr (target (idlist2) (idlist2))))
rewrite IH1 in goal at 1
validate generalize_common_subterm_goal
Prop: plus (ZERO) (match (targetNew (Inil)) with
| Tuple2 a _ -> a) = spec (repr (target (Inil) (Inil)))
Prop: plus (SUCC (ZERO)) (match (targetNew (Icons (ZERO) (ZERO) (Inil))) with
| Tuple2 a _ -> a) = spec (repr (target (Icons (ZERO) (ZERO) (Inil)) (Icons (ZERO) (ZERO) (Inil))))
Prop: plus (ZERO) (match (targetNew (Inil)) with
| Tuple2 a _ -> a) = spec (repr (target (Inil) (Inil)))
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
rewrite <- IH1 in goal at 0
case gq (nat1) (len (repr (target (idlist2) (idlist2))))
Prop: plus (ZERO) (ZERO) = ZERO
Prop: plus (ZERO) (ZERO) = ZERO
Prop: plus (ZERO) (ZERO) = ZERO
=================================================
Progress: 179


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (spec (repr (target (idlist2) (idlist2)))) = spec (repr (target (idlist2) (idlist2)))

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 2(rank : 23.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (spec (repr (target (idlist2) (idlist2)))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
rewrite <- IH1 in goal at 0
case gq (nat1) (len (repr (target (idlist2) (idlist2))))
rewrite IH1 in goal at 2
validate generalize_common_subterm_goal
Prop: plus (ZERO) (spec (repr (target (Icons (ZERO) (ZERO) (Icons (SUCC (ZERO)) (ZERO) (Icons (ZERO) (ZERO) (Inil)))) (Icons (ZERO) (ZERO) (Icons (SUCC (ZERO)) (ZERO) (Icons (ZERO) (ZERO) (Inil))))))) = match (targetNew (Icons (ZERO) (ZERO) (Icons (SUCC (ZERO)) (ZERO) (Icons (ZERO) (ZERO) (Inil))))) with
| Tuple2 a _ -> a
Prop: plus (ZERO) (spec (repr (target (Icons (SUCC (ZERO)) (ZERO) (Icons (ZERO) (ZERO) (Inil))) (Icons (SUCC (ZERO)) (ZERO) (Icons (ZERO) (ZERO) (Inil)))))) = match (targetNew (Icons (SUCC (ZERO)) (ZERO) (Icons (ZERO) (ZERO) (Inil)))) with
| Tuple2 a _ -> a
Prop: plus (SUCC (ZERO)) (spec (repr (target (Inil) (Inil)))) = match (targetNew (Inil)) with
| Tuple2 a _ -> a
asdf
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
rewrite <- IH1 in goal at 0
case gq (nat1) (len (repr (target (idlist2) (idlist2))))
Prop: plus (ZERO) (ZERO) = ZERO
Prop: plus (SUCC (ZERO)) (SUCC (SUCC (ZERO))) = SUCC (SUCC (ZERO))
Prop: plus (SUCC (ZERO)) (ZERO) = ZERO
validate generalize_common_subterm_goal
Prop: plus (SUCC (SUCC (ZERO))) (ZERO) = ZERO
Prop: plus (SUCC (ZERO)) (ZERO) = ZERO
Prop: plus (SUCC (SUCC (ZERO))) (SUCC (ZERO)) = SUCC (ZERO)
Prop: plus (ZERO) (spec (repr (target (Inil) (Inil)))) = spec (repr (target (Inil) (Inil)))
Prop: plus (ZERO) (spec (repr (target (Inil) (Inil)))) = spec (repr (target (Inil) (Inil)))
Prop: plus (SUCC (ZERO)) (spec (repr (target (Icons (ZERO) (ZERO) (Inil)) (Icons (ZERO) (ZERO) (Inil))))) = spec (repr (target (Icons (ZERO) (ZERO) (Inil)) (Icons (ZERO) (ZERO) (Inil))))
=================================================
Progress: 180


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
Case4 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
plus (nat1) (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 23.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
Case4 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
plus (nat1) (spec (repr (target (idlist2) (idlist2)))) = spec (repr (target (idlist2) (idlist2)))

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
case gq (nat1) (len (repr (target (idlist2) (idlist2))))
rewrite IH1 in goal at 0
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
rewrite <- IH1 in goal at 0
Prop: plus (ZERO) (ZERO) = ZERO
Prop: plus (SUCC (ZERO)) (ZERO) = ZERO
Prop: plus (ZERO) (ZERO) = ZERO
validate generalize_common_subterm_goal
Prop: plus (ZERO) (ZERO) = ZERO
Prop: plus (ZERO) (ZERO) = ZERO
Prop: plus (SUCC (ZERO)) (ZERO) = ZERO
Prop: plus (ZERO) (spec (repr (target (Icons (SUCC (ZERO)) (ZERO) (Icons (ZERO) (SUCC (ZERO)) (Icons (SUCC (ZERO)) (ZERO) (Inil)))) (Icons (SUCC (ZERO)) (ZERO) (Icons (ZERO) (SUCC (ZERO)) (Icons (SUCC (ZERO)) (ZERO) (Inil))))))) = spec (repr (target (Icons (SUCC (ZERO)) (ZERO) (Icons (ZERO) (SUCC (ZERO)) (Icons (SUCC (ZERO)) (ZERO) (Inil)))) (Icons (SUCC (ZERO)) (ZERO) (Icons (ZERO) (SUCC (ZERO)) (Icons (SUCC (ZERO)) (ZERO) (Inil))))))
Prop: plus (ZERO) (spec (repr (target (Inil) (Inil)))) = spec (repr (target (Inil) (Inil)))
Prop: plus (ZERO) (spec (repr (target (Inil) (Inil)))) = spec (repr (target (Inil) (Inil)))
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
case gq (nat1) (len (repr (target (idlist2) (idlist2))))
rewrite IH1 in goal at 0
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
Prop: plus (ZERO) (4) = 4
Prop: plus (ZERO) (1) = 1
Prop: plus (SUCC (ZERO)) (4) = 4
validate generalize_common_subterm_goal
Prop: plus (ZERO) (0) = 0
Prop: plus (ZERO) (5) = 5
Prop: plus (ZERO) (2) = 2
=================================================
Progress: 181


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
Case4 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
plus (nat1) (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 1(rank : 23.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
Case4 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
plus (nat1) (spec (repr (target (idlist2) (idlist2)))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
case gq (nat1) (len (repr (target (idlist2) (idlist2))))
rewrite IH1 in goal at 0
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
rewrite <- IH1 in goal at 1
validate generalize_common_subterm_goal
Prop: plus (SUCC (ZERO)) (spec (repr (target (Inil) (Inil)))) = match (targetNew (Inil)) with
| Tuple2 a _ -> a
Prop: plus (ZERO) (spec (repr (target (Icons (ZERO) (SUCC (ZERO)) (Inil)) (Icons (ZERO) (SUCC (ZERO)) (Inil))))) = match (targetNew (Icons (ZERO) (SUCC (ZERO)) (Inil))) with
| Tuple2 a _ -> a
Prop: plus (ZERO) (spec (repr (target (Inil) (Inil)))) = match (targetNew (Inil)) with
| Tuple2 a _ -> a
asdf
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
case gq (nat1) (len (repr (target (idlist2) (idlist2))))
rewrite IH1 in goal at 0
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
Prop: plus (ZERO) (0) = 0
Prop: plus (SUCC (SUCC (ZERO))) (8) = 8
Prop: plus (ZERO) (6) = 6
validate generalize_common_subterm_goal
Prop: plus (ZERO) (3) = 3
Prop: plus (ZERO) (3) = 3
Prop: plus (ZERO) (5) = 5
=================================================
Progress: 182


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
Case4 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
plus (nat1) (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 2(rank : 23.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
Case4 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
plus (nat1) (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) = spec (repr (target (idlist2) (idlist2)))

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
case gq (nat1) (len (repr (target (idlist2) (idlist2))))
rewrite IH1 in goal at 0
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
rewrite <- IH1 in goal at 2
validate generalize_common_subterm_goal
Prop: plus (SUCC (ZERO)) (match (targetNew (Inil)) with
| Tuple2 a _ -> a) = spec (repr (target (Inil) (Inil)))
Prop: plus (SUCC (SUCC (ZERO))) (match (targetNew (Inil)) with
| Tuple2 a _ -> a) = spec (repr (target (Inil) (Inil)))
Prop: plus (SUCC (ZERO)) (match (targetNew (Inil)) with
| Tuple2 a _ -> a) = spec (repr (target (Inil) (Inil)))
asdf
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
case gq (nat1) (len (repr (target (idlist2) (idlist2))))
rewrite IH1 in goal at 0
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
Prop: plus (ZERO) (1) = 1
Prop: plus (ZERO) (8) = 8
Prop: plus (SUCC (SUCC (ZERO))) (5) = 5
validate generalize_common_subterm_goal
Prop: plus (ZERO) (6) = 6
Prop: plus (ZERO) (4) = 4
Prop: plus (ZERO) (0) = 0
=================================================
Progress: 183


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 23.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (spec (repr (target (idlist2) (idlist2)))) = spec (repr (target (idlist2) (idlist2)))

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
rewrite IH1 in goal at 0
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
case gq (nat1) (len (repr (target (idlist2) (idlist2))))
rewrite <- IH1 in goal at 0
Prop: plus (SUCC (SUCC (ZERO))) (ZERO) = ZERO
Prop: plus (ZERO) (ZERO) = ZERO
Prop: plus (ZERO) (ZERO) = ZERO
validate generalize_common_subterm_goal
Prop: plus (SUCC (ZERO)) (ZERO) = ZERO
Prop: plus (SUCC (ZERO)) (ZERO) = ZERO
Prop: plus (SUCC (ZERO)) (SUCC (ZERO)) = SUCC (ZERO)
Prop: plus (ZERO) (spec (repr (target (Icons (SUCC (ZERO)) (ZERO) (Inil)) (Icons (SUCC (ZERO)) (ZERO) (Inil))))) = spec (repr (target (Icons (SUCC (ZERO)) (ZERO) (Inil)) (Icons (SUCC (ZERO)) (ZERO) (Inil))))
Prop: plus (ZERO) (spec (repr (target (Inil) (Inil)))) = spec (repr (target (Inil) (Inil)))
Prop: plus (ZERO) (spec (repr (target (Icons (SUCC (ZERO)) (SUCC (ZERO)) (Icons (ZERO) (ZERO) (Icons (ZERO) (SUCC (ZERO)) (Icons (ZERO) (SUCC (ZERO)) (Inil))))) (Icons (SUCC (ZERO)) (SUCC (ZERO)) (Icons (ZERO) (ZERO) (Icons (ZERO) (SUCC (ZERO)) (Icons (ZERO) (SUCC (ZERO)) (Inil)))))))) = spec (repr (target (Icons (SUCC (ZERO)) (SUCC (ZERO)) (Icons (ZERO) (ZERO) (Icons (ZERO) (SUCC (ZERO)) (Icons (ZERO) (SUCC (ZERO)) (Inil))))) (Icons (SUCC (ZERO)) (SUCC (ZERO)) (Icons (ZERO) (ZERO) (Icons (ZERO) (SUCC (ZERO)) (Icons (ZERO) (SUCC (ZERO)) (Inil)))))))
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
rewrite IH1 in goal at 0
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
case gq (nat1) (len (repr (target (idlist2) (idlist2))))
Prop: plus (ZERO) (0) = 0
Prop: plus (SUCC (ZERO)) (5) = 5
Prop: plus (ZERO) (0) = 0
validate generalize_common_subterm_goal
Prop: plus (ZERO) (0) = 0
Prop: plus (SUCC (ZERO)) (2) = 2
Prop: plus (SUCC (ZERO)) (6) = 6
Prop: plus (ZERO) (match (targetNew (Inil)) with
| Tuple2 a _ -> a) = match (targetNew (Inil)) with
| Tuple2 a _ -> a
Prop: plus (ZERO) (match (targetNew (Inil)) with
| Tuple2 a _ -> a) = match (targetNew (Inil)) with
| Tuple2 a _ -> a
Prop: plus (ZERO) (match (targetNew (Inil)) with
| Tuple2 a _ -> a) = match (targetNew (Inil)) with
| Tuple2 a _ -> a
=================================================
Progress: 184


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 1(rank : 23.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (spec (repr (target (idlist2) (idlist2)))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
rewrite IH1 in goal at 0
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
case gq (nat1) (len (repr (target (idlist2) (idlist2))))
rewrite <- IH1 in goal at 1
validate generalize_common_subterm_goal
Prop: plus (ZERO) (spec (repr (target (Icons (ZERO) (SUCC (ZERO)) (Inil)) (Icons (ZERO) (SUCC (ZERO)) (Inil))))) = match (targetNew (Icons (ZERO) (SUCC (ZERO)) (Inil))) with
| Tuple2 a _ -> a
Prop: plus (ZERO) (spec (repr (target (Inil) (Inil)))) = match (targetNew (Inil)) with
| Tuple2 a _ -> a
Prop: plus (ZERO) (spec (repr (target (Icons (SUCC (SUCC (ZERO))) (ZERO) (Inil)) (Icons (SUCC (SUCC (ZERO))) (ZERO) (Inil))))) = match (targetNew (Icons (SUCC (SUCC (ZERO))) (ZERO) (Inil))) with
| Tuple2 a _ -> a
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
rewrite IH1 in goal at 0
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
case gq (nat1) (len (repr (target (idlist2) (idlist2))))
Prop: plus (ZERO) (7) = 7
Prop: plus (ZERO) (1) = 1
Prop: plus (ZERO) (7) = 7
=================================================
Progress: 185


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 2(rank : 23.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) = spec (repr (target (idlist2) (idlist2)))

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
rewrite IH1 in goal at 0
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
case gq (nat1) (len (repr (target (idlist2) (idlist2))))
rewrite <- IH1 in goal at 2
validate generalize_common_subterm_goal
Prop: plus (ZERO) (match (targetNew (Inil)) with
| Tuple2 a _ -> a) = spec (repr (target (Inil) (Inil)))
Prop: plus (SUCC (ZERO)) (match (targetNew (Icons (ZERO) (ZERO) (Icons (ZERO) (ZERO) (Inil)))) with
| Tuple2 a _ -> a) = spec (repr (target (Icons (ZERO) (ZERO) (Icons (ZERO) (ZERO) (Inil))) (Icons (ZERO) (ZERO) (Icons (ZERO) (ZERO) (Inil)))))
Prop: plus (SUCC (SUCC (SUCC (ZERO)))) (match (targetNew (Inil)) with
| Tuple2 a _ -> a) = spec (repr (target (Inil) (Inil)))
asdf
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
rewrite IH1 in goal at 0
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
case gq (nat1) (len (repr (target (idlist2) (idlist2))))
Prop: plus (ZERO) (5) = 5
Prop: plus (ZERO) (0) = 0
Prop: plus (SUCC (ZERO)) (4) = 4
validate generalize_common_subterm_goal
Prop: plus (SUCC (SUCC (SUCC (SUCC (SUCC (SUCC (ZERO))))))) (6) = 6
Prop: plus (SUCC (ZERO)) (5) = 5
Prop: plus (SUCC (ZERO)) (8) = 8
=================================================
Progress: 186


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
Case4 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
plus (nat1) (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 23.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
Case4 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
plus (nat1) (spec (repr (target (idlist2) (idlist2)))) = spec (repr (target (idlist2) (idlist2)))

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
rewrite IH1 in goal at 0
case gq (nat1) (len (repr (target (idlist2) (idlist2))))
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
rewrite <- IH1 in goal at 0
Prop: plus (ZERO) (ZERO) = ZERO
Prop: plus (ZERO) (ZERO) = ZERO
Prop: plus (SUCC (ZERO)) (ZERO) = ZERO
validate generalize_common_subterm_goal
Prop: plus (ZERO) (ZERO) = ZERO
Prop: plus (ZERO) (SUCC (SUCC (ZERO))) = SUCC (SUCC (ZERO))
Prop: plus (SUCC (SUCC (ZERO))) (SUCC (SUCC (ZERO))) = SUCC (SUCC (ZERO))
Prop: plus (ZERO) (spec (repr (target (Inil) (Inil)))) = spec (repr (target (Inil) (Inil)))
Prop: plus (ZERO) (spec (repr (target (Inil) (Inil)))) = spec (repr (target (Inil) (Inil)))
Prop: plus (ZERO) (spec (repr (target (Inil) (Inil)))) = spec (repr (target (Inil) (Inil)))
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
rewrite IH1 in goal at 0
case gq (nat1) (len (repr (target (idlist2) (idlist2))))
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
Prop: plus (SUCC (ZERO)) (6) = 6
Prop: plus (ZERO) (1) = 1
Prop: plus (SUCC (ZERO)) (1) = 1
validate generalize_common_subterm_goal
Prop: plus (SUCC (SUCC (SUCC (ZERO)))) (7) = 7
Prop: plus (SUCC (SUCC (ZERO))) (4) = 4
Prop: plus (SUCC (SUCC (SUCC (SUCC (ZERO))))) (7) = 7
Prop: plus (ZERO) (match (targetNew (Inil)) with
| Tuple2 a _ -> a) = match (targetNew (Inil)) with
| Tuple2 a _ -> a
Prop: plus (ZERO) (match (targetNew (Icons (ZERO) (ZERO) (Inil))) with
| Tuple2 a _ -> a) = match (targetNew (Icons (ZERO) (ZERO) (Inil))) with
| Tuple2 a _ -> a
Prop: plus (SUCC (ZERO)) (match (targetNew (Icons (SUCC (SUCC (ZERO))) (SUCC (SUCC (SUCC (ZERO)))) (Inil))) with
| Tuple2 a _ -> a) = match (targetNew (Icons (SUCC (SUCC (ZERO))) (SUCC (SUCC (SUCC (ZERO)))) (Inil))) with
| Tuple2 a _ -> a
=================================================
Progress: 187


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
Case4 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
plus (nat1) (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 1(rank : 23.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
Case4 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
plus (nat1) (spec (repr (target (idlist2) (idlist2)))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
rewrite IH1 in goal at 0
case gq (nat1) (len (repr (target (idlist2) (idlist2))))
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
rewrite <- IH1 in goal at 1
validate generalize_common_subterm_goal
Prop: plus (ZERO) (spec (repr (target (Inil) (Inil)))) = match (targetNew (Inil)) with
| Tuple2 a _ -> a
Prop: plus (ZERO) (spec (repr (target (Inil) (Inil)))) = match (targetNew (Inil)) with
| Tuple2 a _ -> a
Prop: plus (SUCC (SUCC (ZERO))) (spec (repr (target (Inil) (Inil)))) = match (targetNew (Inil)) with
| Tuple2 a _ -> a
asdf
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
rewrite IH1 in goal at 0
case gq (nat1) (len (repr (target (idlist2) (idlist2))))
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
Prop: plus (ZERO) (4) = 4
Prop: plus (SUCC (SUCC (SUCC (ZERO)))) (1) = 1
Prop: plus (ZERO) (4) = 4
validate generalize_common_subterm_goal
Prop: plus (ZERO) (1) = 1
Prop: plus (SUCC (SUCC (ZERO))) (0) = 0
Prop: plus (ZERO) (2) = 2
Prop: plus (ZERO) (match (targetNew (Inil)) with
| Tuple2 a _ -> a) = match (targetNew (Inil)) with
| Tuple2 a _ -> a
Prop: plus (ZERO) (match (targetNew (Inil)) with
| Tuple2 a _ -> a) = match (targetNew (Inil)) with
| Tuple2 a _ -> a
Prop: plus (ZERO) (match (targetNew (Icons (ZERO) (ZERO) (Inil))) with
| Tuple2 a _ -> a) = match (targetNew (Icons (ZERO) (ZERO) (Inil))) with
| Tuple2 a _ -> a
=================================================
Progress: 188


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
Case4 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
plus (nat1) (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 2(rank : 23.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
Case4 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
plus (nat1) (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) = spec (repr (target (idlist2) (idlist2)))

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
rewrite IH1 in goal at 0
case gq (nat1) (len (repr (target (idlist2) (idlist2))))
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
rewrite <- IH1 in goal at 2
validate generalize_common_subterm_goal
Prop: plus (ZERO) (match (targetNew (Inil)) with
| Tuple2 a _ -> a) = spec (repr (target (Inil) (Inil)))
Prop: plus (ZERO) (match (targetNew (Inil)) with
| Tuple2 a _ -> a) = spec (repr (target (Inil) (Inil)))
Prop: plus (ZERO) (match (targetNew (Inil)) with
| Tuple2 a _ -> a) = spec (repr (target (Inil) (Inil)))
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
rewrite IH1 in goal at 0
case gq (nat1) (len (repr (target (idlist2) (idlist2))))
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
Prop: plus (ZERO) (4) = 4
Prop: plus (ZERO) (7) = 7
Prop: plus (SUCC (ZERO)) (0) = 0
validate generalize_common_subterm_goal
Prop: plus (SUCC (ZERO)) (6) = 6
Prop: plus (ZERO) (3) = 3
Prop: plus (ZERO) (2) = 2
Prop: plus (SUCC (ZERO)) (match (targetNew (Inil)) with
| Tuple2 a _ -> a) = match (targetNew (Inil)) with
| Tuple2 a _ -> a
Prop: plus (ZERO) (match (targetNew (Inil)) with
| Tuple2 a _ -> a) = match (targetNew (Inil)) with
| Tuple2 a _ -> a
Prop: plus (ZERO) (match (targetNew (Icons (ZERO) (SUCC (ZERO)) (Inil))) with
| Tuple2 a _ -> a) = match (targetNew (Icons (ZERO) (SUCC (ZERO)) (Inil))) with
| Tuple2 a _ -> a
asdf
=================================================
Progress: 189


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (spec (repr (target (idlist2) (idlist2)))) = spec (repr (target (idlist2) (idlist2)))

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 23.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
rewrite IH1 in goal at 0
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
rewrite <- IH1 in goal at 0
case gq (nat1) (len (repr (target (idlist2) (idlist2))))
rewrite IH1 in goal at 0
Prop: plus (ZERO) (0) = 0
Prop: plus (SUCC (SUCC (SUCC (SUCC (ZERO))))) (5) = 5
Prop: plus (SUCC (SUCC (ZERO))) (4) = 4
validate generalize_common_subterm_goal
Prop: plus (SUCC (SUCC (ZERO))) (4) = 4
Prop: plus (ZERO) (4) = 4
Prop: plus (ZERO) (8) = 8
Prop: plus (SUCC (ZERO)) (match (targetNew (Inil)) with
| Tuple2 a _ -> a) = match (targetNew (Inil)) with
| Tuple2 a _ -> a
Prop: plus (ZERO) (match (targetNew (Inil)) with
| Tuple2 a _ -> a) = match (targetNew (Inil)) with
| Tuple2 a _ -> a
Prop: plus (SUCC (SUCC (SUCC (SUCC (ZERO))))) (match (targetNew (Inil)) with
| Tuple2 a _ -> a) = match (targetNew (Inil)) with
| Tuple2 a _ -> a
asdf
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
rewrite IH1 in goal at 0
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
rewrite <- IH1 in goal at 0
case gq (nat1) (len (repr (target (idlist2) (idlist2))))
Prop: plus (ZERO) (SUCC (ZERO)) = SUCC (ZERO)
Prop: plus (ZERO) (ZERO) = ZERO
Prop: plus (SUCC (ZERO)) (ZERO) = ZERO
validate generalize_common_subterm_goal
Prop: plus (SUCC (ZERO)) (SUCC (ZERO)) = SUCC (ZERO)
Prop: plus (ZERO) (ZERO) = ZERO
Prop: plus (ZERO) (ZERO) = ZERO
Prop: plus (ZERO) (spec (repr (target (Inil) (Inil)))) = spec (repr (target (Inil) (Inil)))
Prop: plus (ZERO) (spec (repr (target (Inil) (Inil)))) = spec (repr (target (Inil) (Inil)))
Prop: plus (ZERO) (spec (repr (target (Icons (SUCC (ZERO)) (ZERO) (Inil)) (Icons (SUCC (ZERO)) (ZERO) (Inil))))) = spec (repr (target (Icons (SUCC (ZERO)) (ZERO) (Inil)) (Icons (SUCC (ZERO)) (ZERO) (Inil))))
=================================================
Progress: 190


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (spec (repr (target (idlist2) (idlist2)))) = spec (repr (target (idlist2) (idlist2)))

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 1(rank : 23.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) = spec (repr (target (idlist2) (idlist2)))

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
rewrite IH1 in goal at 0
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
rewrite <- IH1 in goal at 0
case gq (nat1) (len (repr (target (idlist2) (idlist2))))
rewrite IH1 in goal at 1
validate generalize_common_subterm_goal
Prop: plus (ZERO) (match (targetNew (Icons (ZERO) (ZERO) (Inil))) with
| Tuple2 a _ -> a) = spec (repr (target (Icons (ZERO) (ZERO) (Inil)) (Icons (ZERO) (ZERO) (Inil))))
Prop: plus (SUCC (ZERO)) (match (targetNew (Inil)) with
| Tuple2 a _ -> a) = spec (repr (target (Inil) (Inil)))
Prop: plus (ZERO) (match (targetNew (Inil)) with
| Tuple2 a _ -> a) = spec (repr (target (Inil) (Inil)))
asdf
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
rewrite IH1 in goal at 0
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
rewrite <- IH1 in goal at 0
case gq (nat1) (len (repr (target (idlist2) (idlist2))))
Prop: plus (ZERO) (ZERO) = ZERO
Prop: plus (ZERO) (SUCC (ZERO)) = SUCC (ZERO)
Prop: plus (SUCC (ZERO)) (ZERO) = ZERO
validate generalize_common_subterm_goal
Prop: plus (ZERO) (ZERO) = ZERO
Prop: plus (SUCC (ZERO)) (ZERO) = ZERO
Prop: plus (SUCC (ZERO)) (SUCC (ZERO)) = SUCC (ZERO)
Prop: plus (ZERO) (spec (repr (target (Inil) (Inil)))) = spec (repr (target (Inil) (Inil)))
Prop: plus (SUCC (SUCC (ZERO))) (spec (repr (target (Icons (SUCC (SUCC (ZERO))) (SUCC (ZERO)) (Inil)) (Icons (SUCC (SUCC (ZERO))) (SUCC (ZERO)) (Inil))))) = spec (repr (target (Icons (SUCC (SUCC (ZERO))) (SUCC (ZERO)) (Inil)) (Icons (SUCC (SUCC (ZERO))) (SUCC (ZERO)) (Inil))))
Prop: plus (ZERO) (spec (repr (target (Inil) (Inil)))) = spec (repr (target (Inil) (Inil)))
=================================================
Progress: 191


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (spec (repr (target (idlist2) (idlist2)))) = spec (repr (target (idlist2) (idlist2)))

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 2(rank : 23.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (spec (repr (target (idlist2) (idlist2)))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
rewrite IH1 in goal at 0
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
rewrite <- IH1 in goal at 0
case gq (nat1) (len (repr (target (idlist2) (idlist2))))
rewrite IH1 in goal at 2
validate generalize_common_subterm_goal
Prop: plus (ZERO) (spec (repr (target (Inil) (Inil)))) = match (targetNew (Inil)) with
| Tuple2 a _ -> a
Prop: plus (ZERO) (spec (repr (target (Inil) (Inil)))) = match (targetNew (Inil)) with
| Tuple2 a _ -> a
Prop: plus (ZERO) (spec (repr (target (Inil) (Inil)))) = match (targetNew (Inil)) with
| Tuple2 a _ -> a
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
rewrite IH1 in goal at 0
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
rewrite <- IH1 in goal at 0
case gq (nat1) (len (repr (target (idlist2) (idlist2))))
Prop: plus (ZERO) (ZERO) = ZERO
Prop: plus (ZERO) (SUCC (SUCC (ZERO))) = SUCC (SUCC (ZERO))
Prop: plus (ZERO) (ZERO) = ZERO
=================================================
Progress: 192


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 23.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (spec (repr (target (idlist2) (idlist2)))) = spec (repr (target (idlist2) (idlist2)))

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
rewrite IH1 in goal at 0
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
rewrite <- IH1 in goal at 2
case gq (nat1) (len (repr (target (idlist2) (idlist2))))
rewrite <- IH1 in goal at 0
Prop: plus (ZERO) (ZERO) = ZERO
Prop: plus (SUCC (SUCC (ZERO))) (SUCC (SUCC (ZERO))) = SUCC (SUCC (ZERO))
Prop: plus (SUCC (ZERO)) (ZERO) = ZERO
validate generalize_common_subterm_goal
Prop: plus (SUCC (ZERO)) (SUCC (SUCC (ZERO))) = SUCC (SUCC (ZERO))
Prop: plus (ZERO) (SUCC (SUCC (ZERO))) = SUCC (SUCC (ZERO))
Prop: plus (ZERO) (ZERO) = ZERO
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
rewrite IH1 in goal at 0
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
rewrite <- IH1 in goal at 2
case gq (nat1) (len (repr (target (idlist2) (idlist2))))
Prop: plus (ZERO) (0) = 0
Prop: plus (ZERO) (4) = 4
Prop: plus (ZERO) (1) = 1
=================================================
Progress: 193


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 1(rank : 23.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (spec (repr (target (idlist2) (idlist2)))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
rewrite IH1 in goal at 0
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
rewrite <- IH1 in goal at 2
case gq (nat1) (len (repr (target (idlist2) (idlist2))))
rewrite <- IH1 in goal at 1
validate generalize_common_subterm_goal
Prop: plus (ZERO) (spec (repr (target (Inil) (Inil)))) = match (targetNew (Inil)) with
| Tuple2 a _ -> a
Prop: plus (ZERO) (spec (repr (target (Icons (SUCC (ZERO)) (SUCC (ZERO)) (Inil)) (Icons (SUCC (ZERO)) (SUCC (ZERO)) (Inil))))) = match (targetNew (Icons (SUCC (ZERO)) (SUCC (ZERO)) (Inil))) with
| Tuple2 a _ -> a
Prop: plus (SUCC (ZERO)) (spec (repr (target (Inil) (Inil)))) = match (targetNew (Inil)) with
| Tuple2 a _ -> a
asdf
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
rewrite IH1 in goal at 0
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
rewrite <- IH1 in goal at 2
case gq (nat1) (len (repr (target (idlist2) (idlist2))))
Prop: plus (ZERO) (0) = 0
Prop: plus (ZERO) (5) = 5
Prop: plus (ZERO) (0) = 0
=================================================
Progress: 194


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 2(rank : 23.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) = spec (repr (target (idlist2) (idlist2)))

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
rewrite IH1 in goal at 0
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
rewrite <- IH1 in goal at 2
case gq (nat1) (len (repr (target (idlist2) (idlist2))))
rewrite <- IH1 in goal at 2
validate generalize_common_subterm_goal
Prop: plus (ZERO) (match (targetNew (Inil)) with
| Tuple2 a _ -> a) = spec (repr (target (Inil) (Inil)))
Prop: plus (ZERO) (match (targetNew (Inil)) with
| Tuple2 a _ -> a) = spec (repr (target (Inil) (Inil)))
Prop: plus (ZERO) (match (targetNew (Inil)) with
| Tuple2 a _ -> a) = spec (repr (target (Inil) (Inil)))
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
rewrite IH1 in goal at 0
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
rewrite <- IH1 in goal at 2
case gq (nat1) (len (repr (target (idlist2) (idlist2))))
Prop: plus (ZERO) (7) = 7
Prop: plus (ZERO) (5) = 5
Prop: plus (ZERO) (8) = 8
=================================================
Progress: 195


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 23.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (spec (repr (target (idlist2) (idlist2)))) = spec (repr (target (idlist2) (idlist2)))

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
rewrite IH1 in goal at 1
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
case gq (nat1) (len (repr (target (idlist2) (idlist2))))
rewrite <- IH1 in goal at 0
Prop: plus (ZERO) (ZERO) = ZERO
Prop: plus (ZERO) (ZERO) = ZERO
Prop: plus (ZERO) (ZERO) = ZERO
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
rewrite IH1 in goal at 1
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
case gq (nat1) (len (repr (target (idlist2) (idlist2))))
Prop: plus (ZERO) (0) = 0
Prop: plus (ZERO) (0) = 0
Prop: plus (ZERO) (1) = 1
=================================================
Progress: 196


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 1(rank : 23.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (spec (repr (target (idlist2) (idlist2)))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
rewrite IH1 in goal at 1
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
case gq (nat1) (len (repr (target (idlist2) (idlist2))))
rewrite <- IH1 in goal at 1
validate generalize_common_subterm_goal
Prop: plus (ZERO) (spec (repr (target (Icons (ZERO) (ZERO) (Inil)) (Icons (ZERO) (ZERO) (Inil))))) = match (targetNew (Icons (ZERO) (ZERO) (Inil))) with
| Tuple2 a _ -> a
Prop: plus (ZERO) (spec (repr (target (Inil) (Inil)))) = match (targetNew (Inil)) with
| Tuple2 a _ -> a
Prop: plus (ZERO) (spec (repr (target (Icons (ZERO) (SUCC (ZERO)) (Icons (ZERO) (ZERO) (Icons (ZERO) (ZERO) (Inil)))) (Icons (ZERO) (SUCC (ZERO)) (Icons (ZERO) (ZERO) (Icons (ZERO) (ZERO) (Inil))))))) = match (targetNew (Icons (ZERO) (SUCC (ZERO)) (Icons (ZERO) (ZERO) (Icons (ZERO) (ZERO) (Inil))))) with
| Tuple2 a _ -> a
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
rewrite IH1 in goal at 1
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
case gq (nat1) (len (repr (target (idlist2) (idlist2))))
Prop: plus (ZERO) (8) = 8
Prop: plus (SUCC (ZERO)) (4) = 4
Prop: plus (SUCC (ZERO)) (0) = 0
validate generalize_common_subterm_goal
Prop: plus (SUCC (ZERO)) (3) = 3
Prop: plus (ZERO) (4) = 4
Prop: plus (ZERO) (7) = 7
=================================================
Progress: 197


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 2(rank : 23.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) = spec (repr (target (idlist2) (idlist2)))

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
rewrite IH1 in goal at 1
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
case gq (nat1) (len (repr (target (idlist2) (idlist2))))
rewrite <- IH1 in goal at 2
validate generalize_common_subterm_goal
Prop: plus (SUCC (ZERO)) (match (targetNew (Inil)) with
| Tuple2 a _ -> a) = spec (repr (target (Inil) (Inil)))
Prop: plus (ZERO) (match (targetNew (Icons (ZERO) (SUCC (SUCC (SUCC (ZERO)))) (Inil))) with
| Tuple2 a _ -> a) = spec (repr (target (Icons (ZERO) (SUCC (SUCC (SUCC (ZERO)))) (Inil)) (Icons (ZERO) (SUCC (SUCC (SUCC (ZERO)))) (Inil))))
Prop: plus (SUCC (ZERO)) (match (targetNew (Inil)) with
| Tuple2 a _ -> a) = spec (repr (target (Inil) (Inil)))
asdf
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
rewrite IH1 in goal at 1
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
case gq (nat1) (len (repr (target (idlist2) (idlist2))))
Prop: plus (SUCC (ZERO)) (8) = 8
Prop: plus (ZERO) (3) = 3
Prop: plus (ZERO) (0) = 0
validate generalize_common_subterm_goal
Prop: plus (ZERO) (7) = 7
Prop: plus (SUCC (ZERO)) (4) = 4
Prop: plus (ZERO) (5) = 5
=================================================
Progress: 198


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 23.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (spec (repr (target (idlist2) (idlist2)))) = spec (repr (target (idlist2) (idlist2)))

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
rewrite IH1 in goal at 1
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
rewrite IH1 in goal at 0
case gq (nat1) (len (repr (target (idlist2) (idlist2))))
rewrite <- IH1 in goal at 0
Prop: plus (SUCC (SUCC (ZERO))) (SUCC (SUCC (SUCC (ZERO)))) = SUCC (SUCC (SUCC (ZERO)))
Prop: plus (SUCC (ZERO)) (ZERO) = ZERO
Prop: plus (ZERO) (SUCC (ZERO)) = SUCC (ZERO)
validate generalize_common_subterm_goal
Prop: plus (SUCC (SUCC (SUCC (SUCC (SUCC (SUCC (ZERO))))))) (ZERO) = ZERO
Prop: plus (SUCC (ZERO)) (ZERO) = ZERO
Prop: plus (SUCC (ZERO)) (SUCC (ZERO)) = SUCC (ZERO)
Prop: plus (ZERO) (spec (repr (target (Inil) (Inil)))) = spec (repr (target (Inil) (Inil)))
Prop: plus (ZERO) (spec (repr (target (Icons (ZERO) (ZERO) (Inil)) (Icons (ZERO) (ZERO) (Inil))))) = spec (repr (target (Icons (ZERO) (ZERO) (Inil)) (Icons (ZERO) (ZERO) (Inil))))
Prop: plus (ZERO) (spec (repr (target (Inil) (Inil)))) = spec (repr (target (Inil) (Inil)))
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
rewrite IH1 in goal at 1
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
rewrite IH1 in goal at 0
case gq (nat1) (len (repr (target (idlist2) (idlist2))))
Prop: plus (ZERO) (0) = 0
Prop: plus (ZERO) (6) = 6
Prop: plus (ZERO) (7) = 7
=================================================
Progress: 199


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 1(rank : 23.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (spec (repr (target (idlist2) (idlist2)))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
rewrite IH1 in goal at 1
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
rewrite IH1 in goal at 0
case gq (nat1) (len (repr (target (idlist2) (idlist2))))
rewrite <- IH1 in goal at 1
validate generalize_common_subterm_goal
Prop: plus (ZERO) (spec (repr (target (Icons (ZERO) (ZERO) (Inil)) (Icons (ZERO) (ZERO) (Inil))))) = match (targetNew (Icons (ZERO) (ZERO) (Inil))) with
| Tuple2 a _ -> a
Prop: plus (SUCC (ZERO)) (spec (repr (target (Inil) (Inil)))) = match (targetNew (Inil)) with
| Tuple2 a _ -> a
Prop: plus (SUCC (ZERO)) (spec (repr (target (Inil) (Inil)))) = match (targetNew (Inil)) with
| Tuple2 a _ -> a
asdf
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
rewrite IH1 in goal at 1
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
rewrite IH1 in goal at 0
case gq (nat1) (len (repr (target (idlist2) (idlist2))))
Prop: plus (ZERO) (0) = 0
Prop: plus (SUCC (ZERO)) (1) = 1
Prop: plus (ZERO) (2) = 2
validate generalize_common_subterm_goal
Prop: plus (ZERO) (8) = 8
Prop: plus (ZERO) (8) = 8
Prop: plus (ZERO) (6) = 6
=================================================
Progress: 200


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 2(rank : 23.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) = spec (repr (target (idlist2) (idlist2)))

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
rewrite IH1 in goal at 1
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
rewrite IH1 in goal at 0
case gq (nat1) (len (repr (target (idlist2) (idlist2))))
rewrite <- IH1 in goal at 2
validate generalize_common_subterm_goal
Prop: plus (SUCC (ZERO)) (match (targetNew (Inil)) with
| Tuple2 a _ -> a) = spec (repr (target (Inil) (Inil)))
Prop: plus (ZERO) (match (targetNew (Inil)) with
| Tuple2 a _ -> a) = spec (repr (target (Inil) (Inil)))
Prop: plus (ZERO) (match (targetNew (Icons (ZERO) (ZERO) (Inil))) with
| Tuple2 a _ -> a) = spec (repr (target (Icons (ZERO) (ZERO) (Inil)) (Icons (ZERO) (ZERO) (Inil))))
asdf
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
rewrite IH1 in goal at 1
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
rewrite IH1 in goal at 0
case gq (nat1) (len (repr (target (idlist2) (idlist2))))
Prop: plus (SUCC (ZERO)) (8) = 8
Prop: plus (ZERO) (3) = 3
Prop: plus (ZERO) (6) = 6
validate generalize_common_subterm_goal
Prop: plus (ZERO) (2) = 2
Prop: plus (ZERO) (8) = 8
Prop: plus (ZERO) (7) = 7
=================================================
Progress: 201


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (spec (repr (target (idlist2) (idlist2)))) = spec (repr (target (idlist2) (idlist2)))

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 23.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
rewrite IH1 in goal at 1
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
rewrite <- IH1 in goal at 0
case gq (nat1) (len (repr (target (idlist2) (idlist2))))
rewrite IH1 in goal at 0
Prop: plus (ZERO) (3) = 3
Prop: plus (ZERO) (0) = 0
Prop: plus (ZERO) (6) = 6
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
rewrite IH1 in goal at 1
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
rewrite <- IH1 in goal at 0
case gq (nat1) (len (repr (target (idlist2) (idlist2))))
Prop: plus (SUCC (SUCC (ZERO))) (SUCC (ZERO)) = SUCC (ZERO)
Prop: plus (ZERO) (ZERO) = ZERO
Prop: plus (ZERO) (SUCC (ZERO)) = SUCC (ZERO)
validate generalize_common_subterm_goal
Prop: plus (ZERO) (SUCC (ZERO)) = SUCC (ZERO)
Prop: plus (SUCC (ZERO)) (ZERO) = ZERO
Prop: plus (SUCC (SUCC (SUCC (ZERO)))) (SUCC (ZERO)) = SUCC (ZERO)
Prop: plus (SUCC (SUCC (ZERO))) (spec (repr (target (Inil) (Inil)))) = spec (repr (target (Inil) (Inil)))
Prop: plus (ZERO) (spec (repr (target (Inil) (Inil)))) = spec (repr (target (Inil) (Inil)))
Prop: plus (ZERO) (spec (repr (target (Icons (SUCC (ZERO)) (SUCC (ZERO)) (Inil)) (Icons (SUCC (ZERO)) (SUCC (ZERO)) (Inil))))) = spec (repr (target (Icons (SUCC (ZERO)) (SUCC (ZERO)) (Inil)) (Icons (SUCC (ZERO)) (SUCC (ZERO)) (Inil))))
asdf
=================================================
Progress: 202


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (spec (repr (target (idlist2) (idlist2)))) = spec (repr (target (idlist2) (idlist2)))

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 1(rank : 23.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) = spec (repr (target (idlist2) (idlist2)))

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
rewrite IH1 in goal at 1
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
rewrite <- IH1 in goal at 0
case gq (nat1) (len (repr (target (idlist2) (idlist2))))
rewrite IH1 in goal at 1
validate generalize_common_subterm_goal
Prop: plus (SUCC (SUCC (ZERO))) (match (targetNew (Icons (ZERO) (SUCC (ZERO)) (Inil))) with
| Tuple2 a _ -> a) = spec (repr (target (Icons (ZERO) (SUCC (ZERO)) (Inil)) (Icons (ZERO) (SUCC (ZERO)) (Inil))))
Prop: plus (ZERO) (match (targetNew (Icons (ZERO) (ZERO) (Inil))) with
| Tuple2 a _ -> a) = spec (repr (target (Icons (ZERO) (ZERO) (Inil)) (Icons (ZERO) (ZERO) (Inil))))
Prop: plus (ZERO) (match (targetNew (Inil)) with
| Tuple2 a _ -> a) = spec (repr (target (Inil) (Inil)))
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
rewrite IH1 in goal at 1
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
rewrite <- IH1 in goal at 0
case gq (nat1) (len (repr (target (idlist2) (idlist2))))
Prop: plus (ZERO) (ZERO) = ZERO
Prop: plus (ZERO) (ZERO) = ZERO
Prop: plus (ZERO) (ZERO) = ZERO
=================================================
Progress: 203


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (spec (repr (target (idlist2) (idlist2)))) = spec (repr (target (idlist2) (idlist2)))

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 2(rank : 23.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (spec (repr (target (idlist2) (idlist2)))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
rewrite IH1 in goal at 1
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
rewrite <- IH1 in goal at 0
case gq (nat1) (len (repr (target (idlist2) (idlist2))))
rewrite IH1 in goal at 2
validate generalize_common_subterm_goal
Prop: plus (ZERO) (spec (repr (target (Inil) (Inil)))) = match (targetNew (Inil)) with
| Tuple2 a _ -> a
Prop: plus (ZERO) (spec (repr (target (Inil) (Inil)))) = match (targetNew (Inil)) with
| Tuple2 a _ -> a
Prop: plus (ZERO) (spec (repr (target (Icons (ZERO) (ZERO) (Inil)) (Icons (ZERO) (ZERO) (Inil))))) = match (targetNew (Icons (ZERO) (ZERO) (Inil))) with
| Tuple2 a _ -> a
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
rewrite IH1 in goal at 1
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
rewrite <- IH1 in goal at 0
case gq (nat1) (len (repr (target (idlist2) (idlist2))))
Prop: plus (ZERO) (ZERO) = ZERO
Prop: plus (SUCC (ZERO)) (ZERO) = ZERO
Prop: plus (ZERO) (ZERO) = ZERO
validate generalize_common_subterm_goal
Prop: plus (ZERO) (ZERO) = ZERO
Prop: plus (ZERO) (ZERO) = ZERO
Prop: plus (ZERO) (ZERO) = ZERO
=================================================
Progress: 204


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (spec (repr (target (idlist2) (idlist2)))) = spec (repr (target (idlist2) (idlist2)))

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 23.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
rewrite IH1 in goal at 2
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
rewrite <- IH1 in goal at 0
case gq (nat1) (len (repr (target (idlist2) (idlist2))))
rewrite IH1 in goal at 0
Prop: plus (ZERO) (1) = 1
Prop: plus (ZERO) (2) = 2
Prop: plus (ZERO) (8) = 8
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
rewrite IH1 in goal at 2
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
rewrite <- IH1 in goal at 0
case gq (nat1) (len (repr (target (idlist2) (idlist2))))
Prop: plus (SUCC (ZERO)) (ZERO) = ZERO
Prop: plus (ZERO) (ZERO) = ZERO
Prop: plus (ZERO) (ZERO) = ZERO
validate generalize_common_subterm_goal
Prop: plus (SUCC (ZERO)) (ZERO) = ZERO
Prop: plus (ZERO) (ZERO) = ZERO
Prop: plus (ZERO) (ZERO) = ZERO
Prop: plus (ZERO) (spec (repr (target (Inil) (Inil)))) = spec (repr (target (Inil) (Inil)))
Prop: plus (ZERO) (spec (repr (target (Inil) (Inil)))) = spec (repr (target (Inil) (Inil)))
Prop: plus (SUCC (SUCC (SUCC (ZERO)))) (spec (repr (target (Inil) (Inil)))) = spec (repr (target (Inil) (Inil)))
asdf
=================================================
Progress: 205


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (spec (repr (target (idlist2) (idlist2)))) = spec (repr (target (idlist2) (idlist2)))

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 1(rank : 23.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) = spec (repr (target (idlist2) (idlist2)))

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
rewrite IH1 in goal at 2
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
rewrite <- IH1 in goal at 0
case gq (nat1) (len (repr (target (idlist2) (idlist2))))
rewrite IH1 in goal at 1
validate generalize_common_subterm_goal
Prop: plus (ZERO) (match (targetNew (Inil)) with
| Tuple2 a _ -> a) = spec (repr (target (Inil) (Inil)))
Prop: plus (ZERO) (match (targetNew (Inil)) with
| Tuple2 a _ -> a) = spec (repr (target (Inil) (Inil)))
Prop: plus (ZERO) (match (targetNew (Inil)) with
| Tuple2 a _ -> a) = spec (repr (target (Inil) (Inil)))
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
rewrite IH1 in goal at 2
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
rewrite <- IH1 in goal at 0
case gq (nat1) (len (repr (target (idlist2) (idlist2))))
Prop: plus (ZERO) (ZERO) = ZERO
Prop: plus (SUCC (SUCC (ZERO))) (SUCC (ZERO)) = SUCC (ZERO)
Prop: plus (ZERO) (ZERO) = ZERO
validate generalize_common_subterm_goal
Prop: plus (ZERO) (ZERO) = ZERO
Prop: plus (ZERO) (SUCC (ZERO)) = SUCC (ZERO)
Prop: plus (ZERO) (ZERO) = ZERO
=================================================
Progress: 206


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (spec (repr (target (idlist2) (idlist2)))) = spec (repr (target (idlist2) (idlist2)))

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 2(rank : 23.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (spec (repr (target (idlist2) (idlist2)))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
rewrite IH1 in goal at 2
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
rewrite <- IH1 in goal at 0
case gq (nat1) (len (repr (target (idlist2) (idlist2))))
rewrite IH1 in goal at 2
validate generalize_common_subterm_goal
Prop: plus (ZERO) (spec (repr (target (Icons (SUCC (SUCC (ZERO))) (SUCC (ZERO)) (Icons (ZERO) (ZERO) (Inil))) (Icons (SUCC (SUCC (ZERO))) (SUCC (ZERO)) (Icons (ZERO) (ZERO) (Inil)))))) = match (targetNew (Icons (SUCC (SUCC (ZERO))) (SUCC (ZERO)) (Icons (ZERO) (ZERO) (Inil)))) with
| Tuple2 a _ -> a
Prop: plus (ZERO) (spec (repr (target (Inil) (Inil)))) = match (targetNew (Inil)) with
| Tuple2 a _ -> a
Prop: plus (ZERO) (spec (repr (target (Inil) (Inil)))) = match (targetNew (Inil)) with
| Tuple2 a _ -> a
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
rewrite IH1 in goal at 2
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
rewrite <- IH1 in goal at 0
case gq (nat1) (len (repr (target (idlist2) (idlist2))))
Prop: plus (SUCC (SUCC (ZERO))) (ZERO) = ZERO
Prop: plus (SUCC (ZERO)) (SUCC (ZERO)) = SUCC (ZERO)
Prop: plus (ZERO) (SUCC (ZERO)) = SUCC (ZERO)
validate generalize_common_subterm_goal
Prop: plus (SUCC (SUCC (ZERO))) (ZERO) = ZERO
Prop: plus (ZERO) (ZERO) = ZERO
Prop: plus (ZERO) (ZERO) = ZERO
Prop: plus (ZERO) (spec (repr (target (Inil) (Inil)))) = spec (repr (target (Inil) (Inil)))
Prop: plus (ZERO) (spec (repr (target (Inil) (Inil)))) = spec (repr (target (Inil) (Inil)))
Prop: plus (ZERO) (spec (repr (target (Inil) (Inil)))) = spec (repr (target (Inil) (Inil)))
Lemma List
forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (spec (repr (target (idlist1) (idlist1)))) = match (targetNew (idlist1)) with
| Tuple2 a _ -> a
End of Lemma List


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (spec (repr (target (idlist2) (idlist2)))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

4 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 207


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (spec (repr (target (idlist2) (idlist2)))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

4 goal(s) more...

0 conjecture(s) more...
>>> assert forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (spec (repr (target (idlist1) (idlist1)))) = match (targetNew (idlist1)) with
| Tuple2 a _ -> a(rank : 0.)


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (spec (repr (target (idlist1) (idlist1)))) = match (targetNew (idlist1)) with
| Tuple2 a _ -> a

---------------------------------------
forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (spec (repr (target (idlist1) (idlist1)))) = match (targetNew (idlist1)) with
| Tuple2 a _ -> a

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction idlist1(rank:10.)
=================================================
Progress: 208


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (spec (repr (target (idlist1) (idlist1)))) = match (targetNew (idlist1)) with
| Tuple2 a _ -> a

---------------------------------------
forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (spec (repr (target (idlist1) (idlist1)))) = match (targetNew (idlist1)) with
| Tuple2 a _ -> a

0 goal(s) more...

1 conjecture(s) more...
>>> induction idlist1(rank : 10.)


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (spec (repr (target (idlist1) (idlist1)))) = match (targetNew (idlist1)) with
| Tuple2 a _ -> a
idlist1 : idlist
Base1 : idlist1 = Inil
---------------------------------------
forall (nat1:nat), isindexed (Inil) = true->gq (nat1) (len (repr (target (Inil) (Inil)))) = true -> plus (nat1) (spec (repr (target (Inil) (Inil)))) = match (targetNew (Inil)) with
| Tuple2 a _ -> a

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 209


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (spec (repr (target (idlist1) (idlist1)))) = match (targetNew (idlist1)) with
| Tuple2 a _ -> a
idlist1 : idlist
Base1 : idlist1 = Inil
---------------------------------------
forall (nat1:nat), isindexed (Inil) = true->gq (nat1) (len (repr (target (Inil) (Inil)))) = true -> plus (nat1) (spec (repr (target (Inil) (Inil)))) = match (targetNew (Inil)) with
| Tuple2 a _ -> a

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (spec (repr (target (idlist1) (idlist1)))) = match (targetNew (idlist1)) with
| Tuple2 a _ -> a
idlist1 : idlist
Base1 : idlist1 = Inil
---------------------------------------
forall (nat1:nat), true = true->gq (nat1) (ZERO) = true -> plus (nat1) (ZERO) = ZERO

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction nat1(rank:11.)
=================================================
Progress: 210


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (spec (repr (target (idlist1) (idlist1)))) = match (targetNew (idlist1)) with
| Tuple2 a _ -> a
idlist1 : idlist
Base1 : idlist1 = Inil
---------------------------------------
forall (nat1:nat), true = true->gq (nat1) (ZERO) = true -> plus (nat1) (ZERO) = ZERO

1 goal(s) more...

1 conjecture(s) more...
>>> induction nat1(rank : 11.)


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (spec (repr (target (idlist1) (idlist1)))) = match (targetNew (idlist1)) with
| Tuple2 a _ -> a
idlist1 : idlist
Base1 : idlist1 = Inil
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
true = true->gq (ZERO) (ZERO) = true -> plus (ZERO) (ZERO) = ZERO

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 211


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (spec (repr (target (idlist1) (idlist1)))) = match (targetNew (idlist1)) with
| Tuple2 a _ -> a
idlist1 : idlist
Base1 : idlist1 = Inil
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
true = true->gq (ZERO) (ZERO) = true -> plus (ZERO) (ZERO) = ZERO

2 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (spec (repr (target (idlist1) (idlist1)))) = match (targetNew (idlist1)) with
| Tuple2 a _ -> a
idlist1 : idlist
Base1 : idlist1 = Inil
nat1 : nat
nat2 : nat
IH1 : true = true->gq (nat2) (ZERO) = true -> plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
true = true->gq (SUCC (nat2)) (ZERO) = true -> plus (SUCC (nat2)) (ZERO) = ZERO

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 212


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (spec (repr (target (idlist1) (idlist1)))) = match (targetNew (idlist1)) with
| Tuple2 a _ -> a
idlist1 : idlist
Base1 : idlist1 = Inil
nat1 : nat
nat2 : nat
IH1 : true = true->gq (nat2) (ZERO) = true -> plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
true = true->gq (SUCC (nat2)) (ZERO) = true -> plus (SUCC (nat2)) (ZERO) = ZERO

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (spec (repr (target (idlist1) (idlist1)))) = match (targetNew (idlist1)) with
| Tuple2 a _ -> a
idlist1 : idlist
Base1 : idlist1 = Inil
nat1 : nat
nat2 : nat
IH1 : true = true->gq (nat2) (ZERO) = true -> plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
true = true->true = true -> SUCC (plus (nat2) (ZERO)) = ZERO

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:10.)
=================================================
Progress: 213


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (spec (repr (target (idlist1) (idlist1)))) = match (targetNew (idlist1)) with
| Tuple2 a _ -> a
idlist1 : idlist
Base1 : idlist1 = Inil
nat1 : nat
nat2 : nat
IH1 : true = true->gq (nat2) (ZERO) = true -> plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
true = true->true = true -> SUCC (plus (nat2) (ZERO)) = ZERO

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 10.)


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (spec (repr (target (idlist1) (idlist1)))) = match (targetNew (idlist1)) with
| Tuple2 a _ -> a
idlist1 : idlist
Base1 : idlist1 = Inil
nat1 : nat
nat2 : nat
IH1 : true = true->gq (nat2) (ZERO) = true -> plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
Cond1 : true = true
---------------------------------------
true = true -> SUCC (plus (nat2) (ZERO)) = ZERO

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:10.)
=================================================
Progress: 214


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (spec (repr (target (idlist1) (idlist1)))) = match (targetNew (idlist1)) with
| Tuple2 a _ -> a
idlist1 : idlist
Base1 : idlist1 = Inil
nat1 : nat
nat2 : nat
IH1 : true = true->gq (nat2) (ZERO) = true -> plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
Cond1 : true = true
---------------------------------------
true = true -> SUCC (plus (nat2) (ZERO)) = ZERO

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 10.)


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (spec (repr (target (idlist1) (idlist1)))) = match (targetNew (idlist1)) with
| Tuple2 a _ -> a
idlist1 : idlist
Base1 : idlist1 = Inil
nat1 : nat
nat2 : nat
IH1 : true = true->gq (nat2) (ZERO) = true -> plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
Cond1 : true = true
Cond2 : true = true
---------------------------------------
SUCC (plus (nat2) (ZERO)) = ZERO

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:12.)
=================================================
Progress: 215


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (spec (repr (target (idlist1) (idlist1)))) = match (targetNew (idlist1)) with
| Tuple2 a _ -> a
idlist1 : idlist
Base1 : idlist1 = Inil
nat1 : nat
nat2 : nat
IH1 : true = true->gq (nat2) (ZERO) = true -> plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
Cond1 : true = true
Cond2 : true = true
---------------------------------------
SUCC (plus (nat2) (ZERO)) = ZERO

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 12.)


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true->gq (nat1) (len (repr (target (idlist1) (idlist1)))) = true -> plus (nat1) (spec (repr (target (idlist1) (idlist1)))) = match (targetNew (idlist1)) with
| Tuple2 a _ -> a
idlist1 : idlist
Base1 : idlist1 = Inil
nat1 : nat
nat2 : nat
IH1 : true = true->gq (nat2) (ZERO) = true -> plus (nat2) (ZERO) = ZERO
Inductive1 : nat1 = SUCC (nat2)
Cond1 : true = true
Cond2 : true = true
---------------------------------------
SUCC (ZERO) = ZERO

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
rewrite IH1 in goal at 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
validate generalize_common_subterm_goal
Prop: SUCC (plus (SUCC (ZERO)) (ZERO)) = ZERO
Prop: SUCC (plus (SUCC (SUCC (ZERO))) (ZERO)) = ZERO
Prop: SUCC (plus (ZERO) (ZERO)) = ZERO
asdf
=================================================
Progress: 216


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (spec (repr (target (idlist2) (idlist2)))) = spec (repr (target (idlist2) (idlist2)))

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 23.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
rewrite IH1 in goal at 2
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
rewrite <- IH1 in goal at 2
case gq (nat1) (len (repr (target (idlist2) (idlist2))))
rewrite IH1 in goal at 0
Prop: plus (ZERO) (7) = 7
Prop: plus (ZERO) (2) = 2
Prop: plus (ZERO) (5) = 5
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
rewrite IH1 in goal at 2
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
rewrite <- IH1 in goal at 2
case gq (nat1) (len (repr (target (idlist2) (idlist2))))
Prop: plus (ZERO) (ZERO) = ZERO
Prop: plus (ZERO) (ZERO) = ZERO
Prop: plus (SUCC (ZERO)) (ZERO) = ZERO
validate generalize_common_subterm_goal
Prop: plus (ZERO) (ZERO) = ZERO
Prop: plus (ZERO) (ZERO) = ZERO
Prop: plus (ZERO) (ZERO) = ZERO
=================================================
Progress: 217


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (spec (repr (target (idlist2) (idlist2)))) = spec (repr (target (idlist2) (idlist2)))

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 1(rank : 23.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) = spec (repr (target (idlist2) (idlist2)))

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
rewrite IH1 in goal at 2
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
rewrite <- IH1 in goal at 2
case gq (nat1) (len (repr (target (idlist2) (idlist2))))
rewrite IH1 in goal at 1
validate generalize_common_subterm_goal
Prop: plus (ZERO) (match (targetNew (Icons (ZERO) (SUCC (ZERO)) (Icons (SUCC (ZERO)) (ZERO) (Inil)))) with
| Tuple2 a _ -> a) = spec (repr (target (Icons (ZERO) (SUCC (ZERO)) (Icons (SUCC (ZERO)) (ZERO) (Inil))) (Icons (ZERO) (SUCC (ZERO)) (Icons (SUCC (ZERO)) (ZERO) (Inil)))))
Prop: plus (ZERO) (match (targetNew (Icons (ZERO) (SUCC (ZERO)) (Icons (ZERO) (ZERO) (Inil)))) with
| Tuple2 a _ -> a) = spec (repr (target (Icons (ZERO) (SUCC (ZERO)) (Icons (ZERO) (ZERO) (Inil))) (Icons (ZERO) (SUCC (ZERO)) (Icons (ZERO) (ZERO) (Inil)))))
Prop: plus (ZERO) (match (targetNew (Icons (ZERO) (ZERO) (Icons (ZERO) (ZERO) (Icons (ZERO) (ZERO) (Inil))))) with
| Tuple2 a _ -> a) = spec (repr (target (Icons (ZERO) (ZERO) (Icons (ZERO) (ZERO) (Icons (ZERO) (ZERO) (Inil)))) (Icons (ZERO) (ZERO) (Icons (ZERO) (ZERO) (Icons (ZERO) (ZERO) (Inil))))))
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
rewrite IH1 in goal at 2
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
rewrite <- IH1 in goal at 2
case gq (nat1) (len (repr (target (idlist2) (idlist2))))
Prop: plus (SUCC (ZERO)) (ZERO) = ZERO
Prop: plus (ZERO) (ZERO) = ZERO
Prop: plus (ZERO) (SUCC (ZERO)) = SUCC (ZERO)
validate generalize_common_subterm_goal
Prop: plus (SUCC (ZERO)) (ZERO) = ZERO
Prop: plus (SUCC (ZERO)) (SUCC (ZERO)) = SUCC (ZERO)
Prop: plus (SUCC (SUCC (SUCC (ZERO)))) (ZERO) = ZERO
Prop: plus (SUCC (ZERO)) (spec (repr (target (Icons (ZERO) (SUCC (ZERO)) (Inil)) (Icons (ZERO) (SUCC (ZERO)) (Inil))))) = spec (repr (target (Icons (ZERO) (SUCC (ZERO)) (Inil)) (Icons (ZERO) (SUCC (ZERO)) (Inil))))
Prop: plus (ZERO) (spec (repr (target (Inil) (Inil)))) = spec (repr (target (Inil) (Inil)))
Prop: plus (SUCC (ZERO)) (spec (repr (target (Icons (ZERO) (ZERO) (Inil)) (Icons (ZERO) (ZERO) (Inil))))) = spec (repr (target (Icons (ZERO) (ZERO) (Inil)) (Icons (ZERO) (ZERO) (Inil))))
=================================================
Progress: 218


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (spec (repr (target (idlist2) (idlist2)))) = spec (repr (target (idlist2) (idlist2)))

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 2(rank : 23.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (len (repr (target (idlist2) (idlist2)))) = true
---------------------------------------
plus (nat1) (spec (repr (target (idlist2) (idlist2)))) = match (targetNew (idlist2)) with
| Tuple2 a _ -> a

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
rewrite IH1 in goal at 2
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
rewrite <- IH1 in goal at 2
case gq (nat1) (len (repr (target (idlist2) (idlist2))))
rewrite IH1 in goal at 2
validate generalize_common_subterm_goal
Prop: plus (SUCC (ZERO)) (spec (repr (target (Icons (SUCC (SUCC (SUCC (SUCC (ZERO))))) (ZERO) (Icons (ZERO) (SUCC (ZERO)) (Icons (ZERO) (SUCC (SUCC (ZERO))) (Inil)))) (Icons (SUCC (SUCC (SUCC (SUCC (ZERO))))) (ZERO) (Icons (ZERO) (SUCC (ZERO)) (Icons (ZERO) (SUCC (SUCC (ZERO))) (Inil))))))) = match (targetNew (Icons (SUCC (SUCC (SUCC (SUCC (ZERO))))) (ZERO) (Icons (ZERO) (SUCC (ZERO)) (Icons (ZERO) (SUCC (SUCC (ZERO))) (Inil))))) with
| Tuple2 a _ -> a
Prop: plus (ZERO) (spec (repr (target (Inil) (Inil)))) = match (targetNew (Inil)) with
| Tuple2 a _ -> a
Prop: plus (ZERO) (spec (repr (target (Inil) (Inil)))) = match (targetNew (Inil)) with
| Tuple2 a _ -> a
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
rewrite IH1 in goal at 2
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
rewrite <- IH1 in goal at 2
case gq (nat1) (len (repr (target (idlist2) (idlist2))))
Prop: plus (ZERO) (ZERO) = ZERO
Prop: plus (SUCC (SUCC (ZERO))) (ZERO) = ZERO
Prop: plus (ZERO) (ZERO) = ZERO
validate generalize_common_subterm_goal
Prop: plus (ZERO) (ZERO) = ZERO
Prop: plus (SUCC (ZERO)) (ZERO) = ZERO
Prop: plus (ZERO) (ZERO) = ZERO
Fatal error: exception Failure("worklist is empty")
Raised at Stdlib.failwith in file "stdlib.ml", line 29, characters 17-33
Called from Dilemma__Engine.proof_auto in file "lib/engine.ml", line 283, characters 8-69
Called from Dune__exe__Main.main in file "bin/main.ml", line 24, characters 12-79
