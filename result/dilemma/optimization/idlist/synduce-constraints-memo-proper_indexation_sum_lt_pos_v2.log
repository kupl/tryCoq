Enter the definition file path (1/2) : 
> Enter the definition file path (2/2) : 
> Choose the proof type :
1) Interactive Mode 	 2) Auto Mode
Enter the goal : =================================================
Progress: 1


No conjecture
>>> assert forall (lst:idlist), main (lst) = mainNew (lst)(rank : 0.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)

---------------------------------------
forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:3.)
=================================================
Progress: 2


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)

---------------------------------------
forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 3.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)

---------------------------------------
forall (idlist1:idlist), if isindexed (idlist1) then spec (repr (target (idlist1) (idlist1))) else Tuple2 (ZERO) (ZERO) = if isindexed (idlist1) then Tuple2 (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
induction idlist1(rank:4.)
=================================================
Progress: 3


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)

---------------------------------------
forall (idlist1:idlist), if isindexed (idlist1) then spec (repr (target (idlist1) (idlist1))) else Tuple2 (ZERO) (ZERO) = if isindexed (idlist1) then Tuple2 (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)

0 goal(s) more...

0 conjecture(s) more...
>>> induction idlist1(rank : 4.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
Base1 : idlist1 = Inil
---------------------------------------
if isindexed (Inil) then spec (repr (target (Inil) (Inil))) else Tuple2 (ZERO) (ZERO) = if isindexed (Inil) then Tuple2 (match (targetNew (Inil)) with
| Tuple2 a _ -> a) (match (targetNew (Inil)) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:3.)
=================================================
Progress: 4


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
Base1 : idlist1 = Inil
---------------------------------------
if isindexed (Inil) then spec (repr (target (Inil) (Inil))) else Tuple2 (ZERO) (ZERO) = if isindexed (Inil) then Tuple2 (match (targetNew (Inil)) with
| Tuple2 a _ -> a) (match (targetNew (Inil)) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)

1 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 3.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : if isindexed (idlist2) then spec (repr (target (idlist2) (idlist2))) else Tuple2 (ZERO) (ZERO) = if isindexed (idlist2) then Tuple2 (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
---------------------------------------
if isindexed (Icons (nat1) (nat2) (idlist2)) then spec (repr (target (Icons (nat1) (nat2) (idlist2)) (Icons (nat1) (nat2) (idlist2)))) else Tuple2 (ZERO) (ZERO) = if isindexed (Icons (nat1) (nat2) (idlist2)) then Tuple2 (match (targetNew (Icons (nat1) (nat2) (idlist2))) with
| Tuple2 a _ -> a) (match (targetNew (Icons (nat1) (nat2) (idlist2))) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)

0 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:3.)
=================================================
Progress: 5


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : if isindexed (idlist2) then spec (repr (target (idlist2) (idlist2))) else Tuple2 (ZERO) (ZERO) = if isindexed (idlist2) then Tuple2 (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
---------------------------------------
if isindexed (Icons (nat1) (nat2) (idlist2)) then spec (repr (target (Icons (nat1) (nat2) (idlist2)) (Icons (nat1) (nat2) (idlist2)))) else Tuple2 (ZERO) (ZERO) = if isindexed (Icons (nat1) (nat2) (idlist2)) then Tuple2 (match (targetNew (Icons (nat1) (nat2) (idlist2))) with
| Tuple2 a _ -> a) (match (targetNew (Icons (nat1) (nat2) (idlist2))) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 3.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : if isindexed (idlist2) then spec (repr (target (idlist2) (idlist2))) else Tuple2 (ZERO) (ZERO) = if isindexed (idlist2) then Tuple2 (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
---------------------------------------
if if isindexed (idlist2) then nat_eq (nat2) (length (idlist2)) else false then spec (repr (target (Icons (nat1) (nat2) (idlist2)) (Icons (nat1) (nat2) (idlist2)))) else Tuple2 (ZERO) (ZERO) = if if isindexed (idlist2) then nat_eq (nat2) (length (idlist2)) else false then Tuple2 (match (targetNew (Icons (nat1) (nat2) (idlist2))) with
| Tuple2 a _ -> a) (match (targetNew (Icons (nat1) (nat2) (idlist2))) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case isindexed (idlist2)(rank:4.)
=================================================
Progress: 6


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : if isindexed (idlist2) then spec (repr (target (idlist2) (idlist2))) else Tuple2 (ZERO) (ZERO) = if isindexed (idlist2) then Tuple2 (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
---------------------------------------
if if isindexed (idlist2) then nat_eq (nat2) (length (idlist2)) else false then spec (repr (target (Icons (nat1) (nat2) (idlist2)) (Icons (nat1) (nat2) (idlist2)))) else Tuple2 (ZERO) (ZERO) = if if isindexed (idlist2) then nat_eq (nat2) (length (idlist2)) else false then Tuple2 (match (targetNew (Icons (nat1) (nat2) (idlist2))) with
| Tuple2 a _ -> a) (match (targetNew (Icons (nat1) (nat2) (idlist2))) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)

0 goal(s) more...

0 conjecture(s) more...
>>> case isindexed (idlist2)(rank : 4.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = Tuple2 (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
---------------------------------------
if nat_eq (nat2) (length (idlist2)) then spec (repr (target (Icons (nat1) (nat2) (idlist2)) (Icons (nat1) (nat2) (idlist2)))) else Tuple2 (ZERO) (ZERO) = if nat_eq (nat2) (length (idlist2)) then Tuple2 (match (targetNew (Icons (nat1) (nat2) (idlist2))) with
| Tuple2 a _ -> a) (match (targetNew (Icons (nat1) (nat2) (idlist2))) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case nat_eq (nat2) (length (idlist2))(rank:5.)
=================================================
Progress: 7


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = Tuple2 (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
---------------------------------------
if nat_eq (nat2) (length (idlist2)) then spec (repr (target (Icons (nat1) (nat2) (idlist2)) (Icons (nat1) (nat2) (idlist2)))) else Tuple2 (ZERO) (ZERO) = if nat_eq (nat2) (length (idlist2)) then Tuple2 (match (targetNew (Icons (nat1) (nat2) (idlist2))) with
| Tuple2 a _ -> a) (match (targetNew (Icons (nat1) (nat2) (idlist2))) with
| Tuple2 _ b -> b) else Tuple2 (ZERO) (ZERO)

1 goal(s) more...

0 conjecture(s) more...
>>> case nat_eq (nat2) (length (idlist2))(rank : 5.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = Tuple2 (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
---------------------------------------
Tuple2 (if gq (nat1) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) then max (plus (fst3 (spec (repr (target (idlist2) (idlist2))))) (nat1)) else fst3 (spec (repr (target (idlist2) (idlist2))))) (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (if leq (nat1) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (fst3 (targetNew (idlist2))) (nat1)) (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 6
case leq (nat1) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)(rank:6.)
rewrite IH1 in goal at 0(rank:21.)
rewrite IH1 in goal at 1(rank:21.)
rewrite IH1 in goal at 2(rank:21.)
rewrite IH1 in goal at 3(rank:21.)
case gq (nat1) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b)(rank:6.)
=================================================
Progress: 8


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = Tuple2 (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
---------------------------------------
Tuple2 (if gq (nat1) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) then max (plus (fst3 (spec (repr (target (idlist2) (idlist2))))) (nat1)) else fst3 (spec (repr (target (idlist2) (idlist2))))) (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (if leq (nat1) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (fst3 (targetNew (idlist2))) (nat1)) (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b))

2 goal(s) more...

0 conjecture(s) more...
>>> case leq (nat1) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)(rank : 6.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = Tuple2 (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat1) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if gq (nat1) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) then max (plus (fst3 (spec (repr (target (idlist2) (idlist2))))) (nat1)) else fst3 (spec (repr (target (idlist2) (idlist2))))) (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 5
case gq (nat1) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b)(rank:7.)
rewrite IH1 in goal at 0(rank:22.)
rewrite IH1 in goal at 1(rank:22.)
rewrite IH1 in goal at 2(rank:22.)
rewrite IH1 in goal at 3(rank:22.)
=================================================
Progress: 9


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = Tuple2 (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
---------------------------------------
Tuple2 (if gq (nat1) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) then max (plus (fst3 (spec (repr (target (idlist2) (idlist2))))) (nat1)) else fst3 (spec (repr (target (idlist2) (idlist2))))) (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (if leq (nat1) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (fst3 (targetNew (idlist2))) (nat1)) (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b))

2 goal(s) more...

0 conjecture(s) more...
>>> case gq (nat1) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b)(rank : 6.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = Tuple2 (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : gq (nat1) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if gq (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO) then plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 a _ -> a) (nat1) else ZERO) (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (if leq (nat1) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (fst3 (targetNew (idlist2))) (nat1)) (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 6
case leq (nat1) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)(rank:7.)
rewrite IH1 in goal at 0(rank:22.)
rewrite IH1 in goal at 1(rank:22.)
rewrite IH1 in goal at 2(rank:22.)
rewrite IH1 in goal at 3(rank:22.)
case gq (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO)(rank:7.)
=================================================
Progress: 10


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = Tuple2 (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat1) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if gq (nat1) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) then max (plus (fst3 (spec (repr (target (idlist2) (idlist2))))) (nat1)) else fst3 (spec (repr (target (idlist2) (idlist2))))) (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b))

3 goal(s) more...

0 conjecture(s) more...
>>> case gq (nat1) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b)(rank : 7.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = Tuple2 (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat1) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if gq (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO) then plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 a _ -> a) (nat1) else ZERO) (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b))

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 5
case gq (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO)(rank:8.)
rewrite IH1 in goal at 0(rank:23.)
rewrite IH1 in goal at 1(rank:23.)
rewrite IH1 in goal at 2(rank:23.)
rewrite IH1 in goal at 3(rank:23.)
=================================================
Progress: 11


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = Tuple2 (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : gq (nat1) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if gq (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO) then plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 a _ -> a) (nat1) else ZERO) (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (if leq (nat1) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (fst3 (targetNew (idlist2))) (nat1)) (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b))

3 goal(s) more...

0 conjecture(s) more...
>>> case leq (nat1) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)(rank : 7.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = Tuple2 (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : gq (nat1) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) = true
Case4 : leq (nat1) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if gq (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO) then plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 a _ -> a) (nat1) else ZERO) (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b))

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 5
case gq (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO)(rank:8.)
rewrite IH1 in goal at 0(rank:23.)
rewrite IH1 in goal at 1(rank:23.)
rewrite IH1 in goal at 2(rank:23.)
rewrite IH1 in goal at 3(rank:23.)
=================================================
Progress: 12


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = Tuple2 (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : gq (nat1) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if gq (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO) then plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 a _ -> a) (nat1) else ZERO) (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (if leq (nat1) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (fst3 (targetNew (idlist2))) (nat1)) (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b))

3 goal(s) more...

0 conjecture(s) more...
>>> case gq (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO)(rank : 7.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = Tuple2 (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : gq (nat1) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) = true
Case4 : gq (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO) = true
---------------------------------------
Tuple2 (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 a _ -> a) (nat1)) (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (if leq (nat1) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (fst3 (targetNew (idlist2))) (nat1)) (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b))

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
case leq (nat1) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)(rank:8.)
rewrite IH1 in goal at 2(rank:23.)
rewrite IH1 in goal at 1(rank:15.)
rewrite IH1 in goal at 0(rank:23.)
=================================================
Progress: 13


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = Tuple2 (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat1) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if gq (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO) then plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 a _ -> a) (nat1) else ZERO) (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b))

4 goal(s) more...

0 conjecture(s) more...
>>> case gq (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO)(rank : 8.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = Tuple2 (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : leq (nat1) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case4 : gq (nat1) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) = true
Case5 : gq (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO) = true
---------------------------------------
Tuple2 (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 a _ -> a) (nat1)) (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b))

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:24.)
rewrite IH1 in goal at 1(rank:24.)
rewrite IH1 in goal at 2(rank:24.)
=================================================
Progress: 14


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = Tuple2 (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : gq (nat1) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) = true
Case4 : leq (nat1) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (if gq (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO) then plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 a _ -> a) (nat1) else ZERO) (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b))

4 goal(s) more...

0 conjecture(s) more...
>>> case gq (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO)(rank : 8.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = Tuple2 (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : gq (nat1) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) = true
Case4 : leq (nat1) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case5 : gq (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO) = true
---------------------------------------
Tuple2 (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 a _ -> a) (nat1)) (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b))

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:24.)
rewrite IH1 in goal at 1(rank:24.)
rewrite IH1 in goal at 2(rank:24.)
=================================================
Progress: 15


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = Tuple2 (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : gq (nat1) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) = true
Case4 : gq (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO) = true
---------------------------------------
Tuple2 (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 a _ -> a) (nat1)) (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (if leq (nat1) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (fst3 (targetNew (idlist2))) (nat1)) (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b))

4 goal(s) more...

0 conjecture(s) more...
>>> case leq (nat1) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)(rank : 8.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = Tuple2 (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : gq (nat1) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) = true
Case4 : gq (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO) = true
Case5 : leq (nat1) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 a _ -> a) (nat1)) (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b))

5 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:24.)
rewrite IH1 in goal at 1(rank:24.)
rewrite IH1 in goal at 2(rank:24.)
=================================================
Progress: 16


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = Tuple2 (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : gq (nat1) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) = true
Case4 : gq (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO) = true
---------------------------------------
Tuple2 (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 a _ -> a) (nat1)) (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (if leq (nat1) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (fst3 (targetNew (idlist2))) (nat1)) (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b))

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 1(rank : 15.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = Tuple2 (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : gq (nat1) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) = true
Case4 : gq (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO) = true
---------------------------------------
Tuple2 (plus (match (Tuple2 (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)) with
| Tuple2 a _ -> a) (nat1)) (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (if leq (nat1) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (fst3 (targetNew (idlist2))) (nat1)) (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b))

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 17


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = Tuple2 (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : gq (nat1) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) = true
Case4 : gq (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO) = true
---------------------------------------
Tuple2 (plus (match (Tuple2 (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)) with
| Tuple2 a _ -> a) (nat1)) (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (if leq (nat1) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (fst3 (targetNew (idlist2))) (nat1)) (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b))

4 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = Tuple2 (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : gq (nat1) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) = true
Case4 : gq (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO) = true
---------------------------------------
Tuple2 (plus (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) (nat1)) (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (if leq (nat1) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (fst3 (targetNew (idlist2))) (nat1)) (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b))

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:7.)
=================================================
Progress: 18


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = Tuple2 (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : gq (nat1) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) = true
Case4 : gq (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO) = true
---------------------------------------
Tuple2 (plus (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) (nat1)) (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (if leq (nat1) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (fst3 (targetNew (idlist2))) (nat1)) (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b))

4 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 7.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = Tuple2 (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : gq (nat1) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) = true
Case4 : gq (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO) = true
---------------------------------------
Tuple2 (plus (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) (nat1)) (plus (match (Tuple2 (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (if leq (nat1) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (fst3 (targetNew (idlist2))) (nat1)) (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b))

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 19


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = Tuple2 (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : gq (nat1) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) = true
Case4 : gq (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO) = true
---------------------------------------
Tuple2 (plus (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) (nat1)) (plus (match (Tuple2 (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (if leq (nat1) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (fst3 (targetNew (idlist2))) (nat1)) (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b))

4 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = Tuple2 (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : gq (nat1) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) = true
Case4 : gq (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO) = true
---------------------------------------
Tuple2 (plus (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) (nat1)) (plus (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (if leq (nat1) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (fst3 (targetNew (idlist2))) (nat1)) (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b))

4 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case isindexed (idlist2)
case nat_eq (nat2) (length (idlist2))
case gq (nat1) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b)
case gq (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO)
rewrite IH1 in goal at 1
simpl in goal
rewrite IH1 in goal at 0
simpl in goal
Prop: Tuple2 (plus (match (Tuple2 (ZERO) (ZERO)) with
| Tuple2 a _ -> a) (ZERO)) (plus (6) (SUCC (ZERO))) = Tuple2 (if leq (ZERO) (6) then fst3 (Tuple2 (ZERO) (ZERO)) else plus (fst3 (Tuple2 (ZERO) (ZERO))) (ZERO)) (SUCC (6))
Prop: Tuple2 (plus (match (Tuple2 (ZERO) (SUCC (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (ZERO)) (plus (0) (SUCC (ZERO))) = Tuple2 (if leq (ZERO) (0) then fst3 (Tuple2 (ZERO) (SUCC (SUCC (ZERO)))) else plus (fst3 (Tuple2 (ZERO) (SUCC (SUCC (ZERO))))) (ZERO)) (SUCC (0))
Prop: Tuple2 (plus (match (Tuple2 (SUCC (ZERO)) (ZERO)) with
| Tuple2 a _ -> a) (ZERO)) (plus (5) (SUCC (ZERO))) = Tuple2 (if leq (ZERO) (5) then fst3 (Tuple2 (SUCC (ZERO)) (ZERO)) else plus (fst3 (Tuple2 (SUCC (ZERO)) (ZERO))) (ZERO)) (SUCC (5))
validate generalize_common_subterm_goal
Prop: Tuple2 (plus (match (Tuple2 (SUCC (ZERO)) (SUCC (SUCC (ZERO)))) with
| Tuple2 a _ -> a) (SUCC (SUCC (ZERO)))) (plus (0) (SUCC (ZERO))) = Tuple2 (if leq (SUCC (SUCC (ZERO))) (0) then fst3 (Tuple2 (SUCC (ZERO)) (SUCC (SUCC (ZERO)))) else plus (fst3 (Tuple2 (SUCC (ZERO)) (SUCC (SUCC (ZERO))))) (SUCC (SUCC (ZERO)))) (SUCC (0))
Prop: Tuple2 (plus (match (Tuple2 (ZERO) (SUCC (ZERO))) with
| Tuple2 a _ -> a) (ZERO)) (plus (8) (SUCC (ZERO))) = Tuple2 (if leq (ZERO) (8) then fst3 (Tuple2 (ZERO) (SUCC (ZERO))) else plus (fst3 (Tuple2 (ZERO) (SUCC (ZERO)))) (ZERO)) (SUCC (8))
Prop: Tuple2 (plus (match (Tuple2 (SUCC (ZERO)) (ZERO)) with
| Tuple2 a _ -> a) (ZERO)) (plus (0) (SUCC (ZERO))) = Tuple2 (if leq (ZERO) (0) then fst3 (Tuple2 (SUCC (ZERO)) (ZERO)) else plus (fst3 (Tuple2 (SUCC (ZERO)) (ZERO))) (ZERO)) (SUCC (0))
Prop: Tuple2 (plus (match (targetNew (Icons (SUCC (ZERO)) (ZERO) (Inil))) with
| Tuple2 a _ -> a) (ZERO)) (plus (match (targetNew (Icons (SUCC (ZERO)) (ZERO) (Inil))) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (if leq (ZERO) (match (targetNew (Icons (SUCC (ZERO)) (ZERO) (Inil))) with
| Tuple2 _ b -> b) then fst3 (targetNew (Icons (SUCC (ZERO)) (ZERO) (Inil))) else plus (fst3 (targetNew (Icons (SUCC (ZERO)) (ZERO) (Inil)))) (ZERO)) (SUCC (match (targetNew (Icons (SUCC (ZERO)) (ZERO) (Inil))) with
| Tuple2 _ b -> b))
Prop: Tuple2 (plus (match (targetNew (Icons (ZERO) (ZERO) (Inil))) with
| Tuple2 a _ -> a) (ZERO)) (plus (match (targetNew (Icons (ZERO) (ZERO) (Inil))) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (if leq (ZERO) (match (targetNew (Icons (ZERO) (ZERO) (Inil))) with
| Tuple2 _ b -> b) then fst3 (targetNew (Icons (ZERO) (ZERO) (Inil))) else plus (fst3 (targetNew (Icons (ZERO) (ZERO) (Inil)))) (ZERO)) (SUCC (match (targetNew (Icons (ZERO) (ZERO) (Inil))) with
| Tuple2 _ b -> b))
Prop: Tuple2 (plus (match (targetNew (Inil)) with
| Tuple2 a _ -> a) (ZERO)) (plus (match (targetNew (Inil)) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (if leq (ZERO) (match (targetNew (Inil)) with
| Tuple2 _ b -> b) then fst3 (targetNew (Inil)) else plus (fst3 (targetNew (Inil))) (ZERO)) (SUCC (match (targetNew (Inil)) with
| Tuple2 _ b -> b))
Lemma List
forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true -> gq (nat1) (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 _ b -> b) = true -> gq (plus (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO) = true -> Tuple2 (plus (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) (nat1)) (plus (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (if leq (nat1) (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist1)) else plus (fst3 (targetNew (idlist1))) (nat1)) (SUCC (match (targetNew (idlist1)) with
| Tuple2 _ b -> b))
End of Lemma List


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = Tuple2 (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : gq (nat1) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) = true
Case4 : gq (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO) = true
---------------------------------------
Tuple2 (plus (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) (nat1)) (plus (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (if leq (nat1) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (fst3 (targetNew (idlist2))) (nat1)) (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b))

4 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 20


1st goal of : forall (idlist1:idlist), main (idlist1) = mainNew (idlist1)
idlist1 : idlist
nat1 : nat
nat2 : nat
idlist2 : idlist
IH1 : spec (repr (target (idlist2) (idlist2))) = Tuple2 (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
Inductive1 : idlist1 = Icons (nat1) (nat2) (idlist2)
Case1 : isindexed (idlist2) = true
Case2 : nat_eq (nat2) (length (idlist2)) = true
Case3 : gq (nat1) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) = true
Case4 : gq (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO) = true
---------------------------------------
Tuple2 (plus (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) (nat1)) (plus (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (if leq (nat1) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (fst3 (targetNew (idlist2))) (nat1)) (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b))

4 goal(s) more...

0 conjecture(s) more...
>>> assert forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true -> gq (nat1) (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 _ b -> b) = true -> gq (plus (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO) = true -> Tuple2 (plus (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) (nat1)) (plus (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (if leq (nat1) (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist1)) else plus (fst3 (targetNew (idlist1))) (nat1)) (SUCC (match (targetNew (idlist1)) with
| Tuple2 _ b -> b))(rank : 0.)


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true -> gq (nat1) (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 _ b -> b) = true -> gq (plus (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO) = true -> Tuple2 (plus (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) (nat1)) (plus (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (if leq (nat1) (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist1)) else plus (fst3 (targetNew (idlist1))) (nat1)) (SUCC (match (targetNew (idlist1)) with
| Tuple2 _ b -> b))

---------------------------------------
forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true -> gq (nat1) (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 _ b -> b) = true -> gq (plus (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO) = true -> Tuple2 (plus (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) (nat1)) (plus (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (if leq (nat1) (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist1)) else plus (fst3 (targetNew (idlist1))) (nat1)) (SUCC (match (targetNew (idlist1)) with
| Tuple2 _ b -> b))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction idlist1(rank:14.)
=================================================
Progress: 21


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true -> gq (nat1) (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 _ b -> b) = true -> gq (plus (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO) = true -> Tuple2 (plus (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) (nat1)) (plus (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (if leq (nat1) (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist1)) else plus (fst3 (targetNew (idlist1))) (nat1)) (SUCC (match (targetNew (idlist1)) with
| Tuple2 _ b -> b))

---------------------------------------
forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true -> gq (nat1) (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 _ b -> b) = true -> gq (plus (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO) = true -> Tuple2 (plus (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) (nat1)) (plus (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (if leq (nat1) (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist1)) else plus (fst3 (targetNew (idlist1))) (nat1)) (SUCC (match (targetNew (idlist1)) with
| Tuple2 _ b -> b))

0 goal(s) more...

1 conjecture(s) more...
>>> induction idlist1(rank : 14.)


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true -> gq (nat1) (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 _ b -> b) = true -> gq (plus (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO) = true -> Tuple2 (plus (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) (nat1)) (plus (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (if leq (nat1) (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist1)) else plus (fst3 (targetNew (idlist1))) (nat1)) (SUCC (match (targetNew (idlist1)) with
| Tuple2 _ b -> b))
idlist1 : idlist
Base1 : idlist1 = Inil
---------------------------------------
forall (nat1:nat), isindexed (Inil) = true -> gq (nat1) (match (spec (repr (target (Inil) (Inil)))) with
| Tuple2 _ b -> b) = true -> gq (plus (match (spec (repr (target (Inil) (Inil)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO) = true -> Tuple2 (plus (match (targetNew (Inil)) with
| Tuple2 a _ -> a) (nat1)) (plus (match (targetNew (Inil)) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (if leq (nat1) (match (targetNew (Inil)) with
| Tuple2 _ b -> b) then fst3 (targetNew (Inil)) else plus (fst3 (targetNew (Inil))) (nat1)) (SUCC (match (targetNew (Inil)) with
| Tuple2 _ b -> b))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:14.)
=================================================
Progress: 22


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true -> gq (nat1) (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 _ b -> b) = true -> gq (plus (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO) = true -> Tuple2 (plus (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) (nat1)) (plus (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (if leq (nat1) (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist1)) else plus (fst3 (targetNew (idlist1))) (nat1)) (SUCC (match (targetNew (idlist1)) with
| Tuple2 _ b -> b))
idlist1 : idlist
Base1 : idlist1 = Inil
---------------------------------------
forall (nat1:nat), isindexed (Inil) = true -> gq (nat1) (match (spec (repr (target (Inil) (Inil)))) with
| Tuple2 _ b -> b) = true -> gq (plus (match (spec (repr (target (Inil) (Inil)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO) = true -> Tuple2 (plus (match (targetNew (Inil)) with
| Tuple2 a _ -> a) (nat1)) (plus (match (targetNew (Inil)) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (if leq (nat1) (match (targetNew (Inil)) with
| Tuple2 _ b -> b) then fst3 (targetNew (Inil)) else plus (fst3 (targetNew (Inil))) (nat1)) (SUCC (match (targetNew (Inil)) with
| Tuple2 _ b -> b))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 14.)


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true -> gq (nat1) (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 _ b -> b) = true -> gq (plus (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO) = true -> Tuple2 (plus (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) (nat1)) (plus (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (if leq (nat1) (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist1)) else plus (fst3 (targetNew (idlist1))) (nat1)) (SUCC (match (targetNew (idlist1)) with
| Tuple2 _ b -> b))
idlist1 : idlist
Base1 : idlist1 = Inil
---------------------------------------
forall (nat1:nat), true = true -> gq (nat1) (ZERO) = true -> gq (nat1) (ZERO) = true -> Tuple2 (nat1) (SUCC (ZERO)) = Tuple2 (if leq (nat1) (ZERO) then fst3 (targetNew (Inil)) else plus (fst3 (targetNew (Inil))) (nat1)) (SUCC (ZERO))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction nat1(rank:15.)
=================================================
Progress: 23


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true -> gq (nat1) (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 _ b -> b) = true -> gq (plus (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO) = true -> Tuple2 (plus (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) (nat1)) (plus (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (if leq (nat1) (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist1)) else plus (fst3 (targetNew (idlist1))) (nat1)) (SUCC (match (targetNew (idlist1)) with
| Tuple2 _ b -> b))
idlist1 : idlist
Base1 : idlist1 = Inil
---------------------------------------
forall (nat1:nat), true = true -> gq (nat1) (ZERO) = true -> gq (nat1) (ZERO) = true -> Tuple2 (nat1) (SUCC (ZERO)) = Tuple2 (if leq (nat1) (ZERO) then fst3 (targetNew (Inil)) else plus (fst3 (targetNew (Inil))) (nat1)) (SUCC (ZERO))

1 goal(s) more...

1 conjecture(s) more...
>>> induction nat1(rank : 15.)


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true -> gq (nat1) (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 _ b -> b) = true -> gq (plus (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO) = true -> Tuple2 (plus (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) (nat1)) (plus (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (if leq (nat1) (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist1)) else plus (fst3 (targetNew (idlist1))) (nat1)) (SUCC (match (targetNew (idlist1)) with
| Tuple2 _ b -> b))
idlist1 : idlist
Base1 : idlist1 = Inil
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
true = true -> gq (ZERO) (ZERO) = true -> gq (ZERO) (ZERO) = true -> Tuple2 (ZERO) (SUCC (ZERO)) = Tuple2 (if leq (ZERO) (ZERO) then fst3 (targetNew (Inil)) else plus (fst3 (targetNew (Inil))) (ZERO)) (SUCC (ZERO))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:14.)
=================================================
Progress: 24


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true -> gq (nat1) (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 _ b -> b) = true -> gq (plus (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO) = true -> Tuple2 (plus (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) (nat1)) (plus (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (if leq (nat1) (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist1)) else plus (fst3 (targetNew (idlist1))) (nat1)) (SUCC (match (targetNew (idlist1)) with
| Tuple2 _ b -> b))
idlist1 : idlist
Base1 : idlist1 = Inil
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
true = true -> gq (ZERO) (ZERO) = true -> gq (ZERO) (ZERO) = true -> Tuple2 (ZERO) (SUCC (ZERO)) = Tuple2 (if leq (ZERO) (ZERO) then fst3 (targetNew (Inil)) else plus (fst3 (targetNew (Inil))) (ZERO)) (SUCC (ZERO))

2 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 14.)


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true -> gq (nat1) (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 _ b -> b) = true -> gq (plus (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO) = true -> Tuple2 (plus (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) (nat1)) (plus (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (if leq (nat1) (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist1)) else plus (fst3 (targetNew (idlist1))) (nat1)) (SUCC (match (targetNew (idlist1)) with
| Tuple2 _ b -> b))
idlist1 : idlist
Base1 : idlist1 = Inil
nat1 : nat
nat2 : nat
IH1 : true = true -> gq (nat2) (ZERO) = true -> gq (nat2) (ZERO) = true -> Tuple2 (nat2) (SUCC (ZERO)) = Tuple2 (if leq (nat2) (ZERO) then fst3 (targetNew (Inil)) else plus (fst3 (targetNew (Inil))) (nat2)) (SUCC (ZERO))
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
true = true -> gq (SUCC (nat2)) (ZERO) = true -> gq (SUCC (nat2)) (ZERO) = true -> Tuple2 (SUCC (nat2)) (SUCC (ZERO)) = Tuple2 (if leq (SUCC (nat2)) (ZERO) then fst3 (targetNew (Inil)) else plus (fst3 (targetNew (Inil))) (SUCC (nat2))) (SUCC (ZERO))

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
reflexivity(rank:13.)
=================================================
Progress: 25


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true -> gq (nat1) (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 _ b -> b) = true -> gq (plus (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO) = true -> Tuple2 (plus (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) (nat1)) (plus (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (if leq (nat1) (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist1)) else plus (fst3 (targetNew (idlist1))) (nat1)) (SUCC (match (targetNew (idlist1)) with
| Tuple2 _ b -> b))
idlist1 : idlist
Base1 : idlist1 = Inil
nat1 : nat
nat2 : nat
IH1 : true = true -> gq (nat2) (ZERO) = true -> gq (nat2) (ZERO) = true -> Tuple2 (nat2) (SUCC (ZERO)) = Tuple2 (if leq (nat2) (ZERO) then fst3 (targetNew (Inil)) else plus (fst3 (targetNew (Inil))) (nat2)) (SUCC (ZERO))
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
true = true -> gq (SUCC (nat2)) (ZERO) = true -> gq (SUCC (nat2)) (ZERO) = true -> Tuple2 (SUCC (nat2)) (SUCC (ZERO)) = Tuple2 (if leq (SUCC (nat2)) (ZERO) then fst3 (targetNew (Inil)) else plus (fst3 (targetNew (Inil))) (SUCC (nat2))) (SUCC (ZERO))

1 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 13.)


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true -> gq (nat1) (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 _ b -> b) = true -> gq (plus (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO) = true -> Tuple2 (plus (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) (nat1)) (plus (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (if leq (nat1) (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist1)) else plus (fst3 (targetNew (idlist1))) (nat1)) (SUCC (match (targetNew (idlist1)) with
| Tuple2 _ b -> b))
idlist1 : idlist
nat2 : nat
nat3 : nat
idlist2 : idlist
IH1 : forall (nat1:nat), isindexed (idlist2) = true -> gq (nat1) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) = true -> gq (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO) = true -> Tuple2 (plus (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) (nat1)) (plus (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (if leq (nat1) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (fst3 (targetNew (idlist2))) (nat1)) (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b))
Inductive1 : idlist1 = Icons (nat2) (nat3) (idlist2)
---------------------------------------
forall (nat1:nat), isindexed (Icons (nat2) (nat3) (idlist2)) = true -> gq (nat1) (match (spec (repr (target (Icons (nat2) (nat3) (idlist2)) (Icons (nat2) (nat3) (idlist2))))) with
| Tuple2 _ b -> b) = true -> gq (plus (match (spec (repr (target (Icons (nat2) (nat3) (idlist2)) (Icons (nat2) (nat3) (idlist2))))) with
| Tuple2 a _ -> a) (nat1)) (ZERO) = true -> Tuple2 (plus (match (targetNew (Icons (nat2) (nat3) (idlist2))) with
| Tuple2 a _ -> a) (nat1)) (plus (match (targetNew (Icons (nat2) (nat3) (idlist2))) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (if leq (nat1) (match (targetNew (Icons (nat2) (nat3) (idlist2))) with
| Tuple2 _ b -> b) then fst3 (targetNew (Icons (nat2) (nat3) (idlist2))) else plus (fst3 (targetNew (Icons (nat2) (nat3) (idlist2)))) (nat1)) (SUCC (match (targetNew (Icons (nat2) (nat3) (idlist2))) with
| Tuple2 _ b -> b))

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 26


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true -> gq (nat1) (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 _ b -> b) = true -> gq (plus (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO) = true -> Tuple2 (plus (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) (nat1)) (plus (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (if leq (nat1) (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist1)) else plus (fst3 (targetNew (idlist1))) (nat1)) (SUCC (match (targetNew (idlist1)) with
| Tuple2 _ b -> b))
idlist1 : idlist
nat2 : nat
nat3 : nat
idlist2 : idlist
IH1 : forall (nat1:nat), isindexed (idlist2) = true -> gq (nat1) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) = true -> gq (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO) = true -> Tuple2 (plus (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) (nat1)) (plus (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (if leq (nat1) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (fst3 (targetNew (idlist2))) (nat1)) (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b))
Inductive1 : idlist1 = Icons (nat2) (nat3) (idlist2)
---------------------------------------
forall (nat1:nat), isindexed (Icons (nat2) (nat3) (idlist2)) = true -> gq (nat1) (match (spec (repr (target (Icons (nat2) (nat3) (idlist2)) (Icons (nat2) (nat3) (idlist2))))) with
| Tuple2 _ b -> b) = true -> gq (plus (match (spec (repr (target (Icons (nat2) (nat3) (idlist2)) (Icons (nat2) (nat3) (idlist2))))) with
| Tuple2 a _ -> a) (nat1)) (ZERO) = true -> Tuple2 (plus (match (targetNew (Icons (nat2) (nat3) (idlist2))) with
| Tuple2 a _ -> a) (nat1)) (plus (match (targetNew (Icons (nat2) (nat3) (idlist2))) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (if leq (nat1) (match (targetNew (Icons (nat2) (nat3) (idlist2))) with
| Tuple2 _ b -> b) then fst3 (targetNew (Icons (nat2) (nat3) (idlist2))) else plus (fst3 (targetNew (Icons (nat2) (nat3) (idlist2)))) (nat1)) (SUCC (match (targetNew (Icons (nat2) (nat3) (idlist2))) with
| Tuple2 _ b -> b))

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true -> gq (nat1) (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 _ b -> b) = true -> gq (plus (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO) = true -> Tuple2 (plus (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) (nat1)) (plus (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (if leq (nat1) (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist1)) else plus (fst3 (targetNew (idlist1))) (nat1)) (SUCC (match (targetNew (idlist1)) with
| Tuple2 _ b -> b))
idlist1 : idlist
nat2 : nat
nat3 : nat
idlist2 : idlist
IH1 : forall (nat1:nat), isindexed (idlist2) = true -> gq (nat1) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) = true -> gq (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO) = true -> Tuple2 (plus (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) (nat1)) (plus (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (if leq (nat1) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (fst3 (targetNew (idlist2))) (nat1)) (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b))
Inductive1 : idlist1 = Icons (nat2) (nat3) (idlist2)
---------------------------------------
forall (nat1:nat), if isindexed (idlist2) then nat_eq (nat3) (length (idlist2)) else false = true -> gq (nat1) (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = true -> gq (plus (if gq (nat2) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) then max (plus (fst3 (spec (repr (target (idlist2) (idlist2))))) (nat2)) else fst3 (spec (repr (target (idlist2) (idlist2))))) (nat1)) (ZERO) = true -> Tuple2 (plus (if leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (fst3 (targetNew (idlist2))) (nat2)) (nat1)) (SUCC (plus (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) (SUCC (ZERO)))) = Tuple2 (if leq (nat1) (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)) then fst3 (targetNew (Icons (nat2) (nat3) (idlist2))) else plus (fst3 (targetNew (Icons (nat2) (nat3) (idlist2)))) (nat1)) (SUCC (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction nat1(rank:14.)
=================================================
Progress: 27


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true -> gq (nat1) (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 _ b -> b) = true -> gq (plus (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO) = true -> Tuple2 (plus (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) (nat1)) (plus (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (if leq (nat1) (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist1)) else plus (fst3 (targetNew (idlist1))) (nat1)) (SUCC (match (targetNew (idlist1)) with
| Tuple2 _ b -> b))
idlist1 : idlist
nat2 : nat
nat3 : nat
idlist2 : idlist
IH1 : forall (nat1:nat), isindexed (idlist2) = true -> gq (nat1) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) = true -> gq (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO) = true -> Tuple2 (plus (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) (nat1)) (plus (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (if leq (nat1) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (fst3 (targetNew (idlist2))) (nat1)) (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b))
Inductive1 : idlist1 = Icons (nat2) (nat3) (idlist2)
---------------------------------------
forall (nat1:nat), if isindexed (idlist2) then nat_eq (nat3) (length (idlist2)) else false = true -> gq (nat1) (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = true -> gq (plus (if gq (nat2) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) then max (plus (fst3 (spec (repr (target (idlist2) (idlist2))))) (nat2)) else fst3 (spec (repr (target (idlist2) (idlist2))))) (nat1)) (ZERO) = true -> Tuple2 (plus (if leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (fst3 (targetNew (idlist2))) (nat2)) (nat1)) (SUCC (plus (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) (SUCC (ZERO)))) = Tuple2 (if leq (nat1) (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)) then fst3 (targetNew (Icons (nat2) (nat3) (idlist2))) else plus (fst3 (targetNew (Icons (nat2) (nat3) (idlist2)))) (nat1)) (SUCC (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)))

0 goal(s) more...

1 conjecture(s) more...
>>> induction nat1(rank : 14.)


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true -> gq (nat1) (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 _ b -> b) = true -> gq (plus (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO) = true -> Tuple2 (plus (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) (nat1)) (plus (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (if leq (nat1) (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist1)) else plus (fst3 (targetNew (idlist1))) (nat1)) (SUCC (match (targetNew (idlist1)) with
| Tuple2 _ b -> b))
idlist1 : idlist
nat2 : nat
nat3 : nat
idlist2 : idlist
IH1 : forall (nat1:nat), isindexed (idlist2) = true -> gq (nat1) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) = true -> gq (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO) = true -> Tuple2 (plus (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) (nat1)) (plus (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (if leq (nat1) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (fst3 (targetNew (idlist2))) (nat1)) (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b))
Inductive1 : idlist1 = Icons (nat2) (nat3) (idlist2)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
if isindexed (idlist2) then nat_eq (nat3) (length (idlist2)) else false = true -> gq (ZERO) (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = true -> gq (plus (if gq (nat2) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) then max (plus (fst3 (spec (repr (target (idlist2) (idlist2))))) (nat2)) else fst3 (spec (repr (target (idlist2) (idlist2))))) (ZERO)) (ZERO) = true -> Tuple2 (plus (if leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (fst3 (targetNew (idlist2))) (nat2)) (ZERO)) (SUCC (plus (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) (SUCC (ZERO)))) = Tuple2 (if leq (ZERO) (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)) then fst3 (targetNew (Icons (nat2) (nat3) (idlist2))) else plus (fst3 (targetNew (Icons (nat2) (nat3) (idlist2)))) (ZERO)) (SUCC (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:14.)
=================================================
Progress: 28


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true -> gq (nat1) (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 _ b -> b) = true -> gq (plus (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO) = true -> Tuple2 (plus (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) (nat1)) (plus (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (if leq (nat1) (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist1)) else plus (fst3 (targetNew (idlist1))) (nat1)) (SUCC (match (targetNew (idlist1)) with
| Tuple2 _ b -> b))
idlist1 : idlist
nat2 : nat
nat3 : nat
idlist2 : idlist
IH1 : forall (nat1:nat), isindexed (idlist2) = true -> gq (nat1) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) = true -> gq (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO) = true -> Tuple2 (plus (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) (nat1)) (plus (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (if leq (nat1) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (fst3 (targetNew (idlist2))) (nat1)) (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b))
Inductive1 : idlist1 = Icons (nat2) (nat3) (idlist2)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
if isindexed (idlist2) then nat_eq (nat3) (length (idlist2)) else false = true -> gq (ZERO) (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = true -> gq (plus (if gq (nat2) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) then max (plus (fst3 (spec (repr (target (idlist2) (idlist2))))) (nat2)) else fst3 (spec (repr (target (idlist2) (idlist2))))) (ZERO)) (ZERO) = true -> Tuple2 (plus (if leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (fst3 (targetNew (idlist2))) (nat2)) (ZERO)) (SUCC (plus (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) (SUCC (ZERO)))) = Tuple2 (if leq (ZERO) (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)) then fst3 (targetNew (Icons (nat2) (nat3) (idlist2))) else plus (fst3 (targetNew (Icons (nat2) (nat3) (idlist2)))) (ZERO)) (SUCC (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 14.)


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true -> gq (nat1) (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 _ b -> b) = true -> gq (plus (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO) = true -> Tuple2 (plus (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) (nat1)) (plus (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (if leq (nat1) (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist1)) else plus (fst3 (targetNew (idlist1))) (nat1)) (SUCC (match (targetNew (idlist1)) with
| Tuple2 _ b -> b))
idlist1 : idlist
nat2 : nat
nat3 : nat
idlist2 : idlist
IH1 : forall (nat1:nat), isindexed (idlist2) = true -> gq (nat1) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) = true -> gq (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO) = true -> Tuple2 (plus (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) (nat1)) (plus (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (if leq (nat1) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (fst3 (targetNew (idlist2))) (nat1)) (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b))
Inductive1 : idlist1 = Icons (nat2) (nat3) (idlist2)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
if isindexed (idlist2) then nat_eq (nat3) (length (idlist2)) else false = true -> false = true -> gq (plus (if gq (nat2) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) then max (plus (fst3 (spec (repr (target (idlist2) (idlist2))))) (nat2)) else fst3 (spec (repr (target (idlist2) (idlist2))))) (ZERO)) (ZERO) = true -> Tuple2 (plus (if leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (fst3 (targetNew (idlist2))) (nat2)) (ZERO)) (SUCC (plus (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) (SUCC (ZERO)))) = Tuple2 (if leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (fst3 (targetNew (idlist2))) (nat2)) (SUCC (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:14.)
=================================================
Progress: 29


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true -> gq (nat1) (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 _ b -> b) = true -> gq (plus (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO) = true -> Tuple2 (plus (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) (nat1)) (plus (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (if leq (nat1) (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist1)) else plus (fst3 (targetNew (idlist1))) (nat1)) (SUCC (match (targetNew (idlist1)) with
| Tuple2 _ b -> b))
idlist1 : idlist
nat2 : nat
nat3 : nat
idlist2 : idlist
IH1 : forall (nat1:nat), isindexed (idlist2) = true -> gq (nat1) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) = true -> gq (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO) = true -> Tuple2 (plus (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) (nat1)) (plus (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (if leq (nat1) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (fst3 (targetNew (idlist2))) (nat1)) (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b))
Inductive1 : idlist1 = Icons (nat2) (nat3) (idlist2)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
if isindexed (idlist2) then nat_eq (nat3) (length (idlist2)) else false = true -> false = true -> gq (plus (if gq (nat2) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) then max (plus (fst3 (spec (repr (target (idlist2) (idlist2))))) (nat2)) else fst3 (spec (repr (target (idlist2) (idlist2))))) (ZERO)) (ZERO) = true -> Tuple2 (plus (if leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (fst3 (targetNew (idlist2))) (nat2)) (ZERO)) (SUCC (plus (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) (SUCC (ZERO)))) = Tuple2 (if leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (fst3 (targetNew (idlist2))) (nat2)) (SUCC (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)))

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 14.)


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true -> gq (nat1) (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 _ b -> b) = true -> gq (plus (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO) = true -> Tuple2 (plus (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) (nat1)) (plus (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (if leq (nat1) (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist1)) else plus (fst3 (targetNew (idlist1))) (nat1)) (SUCC (match (targetNew (idlist1)) with
| Tuple2 _ b -> b))
idlist1 : idlist
nat2 : nat
nat3 : nat
idlist2 : idlist
IH1 : forall (nat1:nat), isindexed (idlist2) = true -> gq (nat1) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) = true -> gq (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO) = true -> Tuple2 (plus (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) (nat1)) (plus (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (if leq (nat1) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (fst3 (targetNew (idlist2))) (nat1)) (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b))
Inductive1 : idlist1 = Icons (nat2) (nat3) (idlist2)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : if isindexed (idlist2) then nat_eq (nat3) (length (idlist2)) else false = true
---------------------------------------
false = true -> gq (plus (if gq (nat2) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) then max (plus (fst3 (spec (repr (target (idlist2) (idlist2))))) (nat2)) else fst3 (spec (repr (target (idlist2) (idlist2))))) (ZERO)) (ZERO) = true -> Tuple2 (plus (if leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (fst3 (targetNew (idlist2))) (nat2)) (ZERO)) (SUCC (plus (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) (SUCC (ZERO)))) = Tuple2 (if leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (fst3 (targetNew (idlist2))) (nat2)) (SUCC (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:13.)
=================================================
Progress: 30


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true -> gq (nat1) (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 _ b -> b) = true -> gq (plus (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO) = true -> Tuple2 (plus (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) (nat1)) (plus (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (if leq (nat1) (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist1)) else plus (fst3 (targetNew (idlist1))) (nat1)) (SUCC (match (targetNew (idlist1)) with
| Tuple2 _ b -> b))
idlist1 : idlist
nat2 : nat
nat3 : nat
idlist2 : idlist
IH1 : forall (nat1:nat), isindexed (idlist2) = true -> gq (nat1) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) = true -> gq (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO) = true -> Tuple2 (plus (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) (nat1)) (plus (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (if leq (nat1) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (fst3 (targetNew (idlist2))) (nat1)) (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b))
Inductive1 : idlist1 = Icons (nat2) (nat3) (idlist2)
nat1 : nat
Base1 : nat1 = ZERO
Cond1 : if isindexed (idlist2) then nat_eq (nat3) (length (idlist2)) else false = true
---------------------------------------
false = true -> gq (plus (if gq (nat2) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) then max (plus (fst3 (spec (repr (target (idlist2) (idlist2))))) (nat2)) else fst3 (spec (repr (target (idlist2) (idlist2))))) (ZERO)) (ZERO) = true -> Tuple2 (plus (if leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (fst3 (targetNew (idlist2))) (nat2)) (ZERO)) (SUCC (plus (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) (SUCC (ZERO)))) = Tuple2 (if leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (fst3 (targetNew (idlist2))) (nat2)) (SUCC (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)))

1 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 13.)


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true -> gq (nat1) (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 _ b -> b) = true -> gq (plus (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO) = true -> Tuple2 (plus (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) (nat1)) (plus (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (if leq (nat1) (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist1)) else plus (fst3 (targetNew (idlist1))) (nat1)) (SUCC (match (targetNew (idlist1)) with
| Tuple2 _ b -> b))
idlist1 : idlist
nat2 : nat
nat3 : nat
idlist2 : idlist
IH1 : forall (nat1:nat), isindexed (idlist2) = true -> gq (nat1) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) = true -> gq (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO) = true -> Tuple2 (plus (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) (nat1)) (plus (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (if leq (nat1) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (fst3 (targetNew (idlist2))) (nat1)) (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b))
Inductive1 : idlist1 = Icons (nat2) (nat3) (idlist2)
nat1 : nat
nat4 : nat
IH2 : if isindexed (idlist2) then nat_eq (nat3) (length (idlist2)) else false = true -> gq (nat4) (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = true -> gq (plus (if gq (nat2) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) then max (plus (fst3 (spec (repr (target (idlist2) (idlist2))))) (nat2)) else fst3 (spec (repr (target (idlist2) (idlist2))))) (nat4)) (ZERO) = true -> Tuple2 (plus (if leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (fst3 (targetNew (idlist2))) (nat2)) (nat4)) (SUCC (plus (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) (SUCC (ZERO)))) = Tuple2 (if leq (nat4) (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)) then fst3 (targetNew (Icons (nat2) (nat3) (idlist2))) else plus (fst3 (targetNew (Icons (nat2) (nat3) (idlist2)))) (nat4)) (SUCC (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)))
Inductive2 : nat1 = SUCC (nat4)
---------------------------------------
if isindexed (idlist2) then nat_eq (nat3) (length (idlist2)) else false = true -> gq (SUCC (nat4)) (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = true -> gq (plus (if gq (nat2) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) then max (plus (fst3 (spec (repr (target (idlist2) (idlist2))))) (nat2)) else fst3 (spec (repr (target (idlist2) (idlist2))))) (SUCC (nat4))) (ZERO) = true -> Tuple2 (plus (if leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (fst3 (targetNew (idlist2))) (nat2)) (SUCC (nat4))) (SUCC (plus (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) (SUCC (ZERO)))) = Tuple2 (if leq (SUCC (nat4)) (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)) then fst3 (targetNew (Icons (nat2) (nat3) (idlist2))) else plus (fst3 (targetNew (Icons (nat2) (nat3) (idlist2)))) (SUCC (nat4))) (SUCC (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)))

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 31


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true -> gq (nat1) (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 _ b -> b) = true -> gq (plus (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO) = true -> Tuple2 (plus (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) (nat1)) (plus (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (if leq (nat1) (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist1)) else plus (fst3 (targetNew (idlist1))) (nat1)) (SUCC (match (targetNew (idlist1)) with
| Tuple2 _ b -> b))
idlist1 : idlist
nat2 : nat
nat3 : nat
idlist2 : idlist
IH1 : forall (nat1:nat), isindexed (idlist2) = true -> gq (nat1) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) = true -> gq (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO) = true -> Tuple2 (plus (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) (nat1)) (plus (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (if leq (nat1) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (fst3 (targetNew (idlist2))) (nat1)) (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b))
Inductive1 : idlist1 = Icons (nat2) (nat3) (idlist2)
nat1 : nat
nat4 : nat
IH2 : if isindexed (idlist2) then nat_eq (nat3) (length (idlist2)) else false = true -> gq (nat4) (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = true -> gq (plus (if gq (nat2) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) then max (plus (fst3 (spec (repr (target (idlist2) (idlist2))))) (nat2)) else fst3 (spec (repr (target (idlist2) (idlist2))))) (nat4)) (ZERO) = true -> Tuple2 (plus (if leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (fst3 (targetNew (idlist2))) (nat2)) (nat4)) (SUCC (plus (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) (SUCC (ZERO)))) = Tuple2 (if leq (nat4) (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)) then fst3 (targetNew (Icons (nat2) (nat3) (idlist2))) else plus (fst3 (targetNew (Icons (nat2) (nat3) (idlist2)))) (nat4)) (SUCC (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)))
Inductive2 : nat1 = SUCC (nat4)
---------------------------------------
if isindexed (idlist2) then nat_eq (nat3) (length (idlist2)) else false = true -> gq (SUCC (nat4)) (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = true -> gq (plus (if gq (nat2) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) then max (plus (fst3 (spec (repr (target (idlist2) (idlist2))))) (nat2)) else fst3 (spec (repr (target (idlist2) (idlist2))))) (SUCC (nat4))) (ZERO) = true -> Tuple2 (plus (if leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (fst3 (targetNew (idlist2))) (nat2)) (SUCC (nat4))) (SUCC (plus (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) (SUCC (ZERO)))) = Tuple2 (if leq (SUCC (nat4)) (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)) then fst3 (targetNew (Icons (nat2) (nat3) (idlist2))) else plus (fst3 (targetNew (Icons (nat2) (nat3) (idlist2)))) (SUCC (nat4))) (SUCC (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)))

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true -> gq (nat1) (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 _ b -> b) = true -> gq (plus (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO) = true -> Tuple2 (plus (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) (nat1)) (plus (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (if leq (nat1) (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist1)) else plus (fst3 (targetNew (idlist1))) (nat1)) (SUCC (match (targetNew (idlist1)) with
| Tuple2 _ b -> b))
idlist1 : idlist
nat2 : nat
nat3 : nat
idlist2 : idlist
IH1 : forall (nat1:nat), isindexed (idlist2) = true -> gq (nat1) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) = true -> gq (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO) = true -> Tuple2 (plus (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) (nat1)) (plus (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (if leq (nat1) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (fst3 (targetNew (idlist2))) (nat1)) (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b))
Inductive1 : idlist1 = Icons (nat2) (nat3) (idlist2)
nat1 : nat
nat4 : nat
IH2 : if isindexed (idlist2) then nat_eq (nat3) (length (idlist2)) else false = true -> gq (nat4) (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = true -> gq (plus (if gq (nat2) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) then max (plus (fst3 (spec (repr (target (idlist2) (idlist2))))) (nat2)) else fst3 (spec (repr (target (idlist2) (idlist2))))) (nat4)) (ZERO) = true -> Tuple2 (plus (if leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (fst3 (targetNew (idlist2))) (nat2)) (nat4)) (SUCC (plus (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) (SUCC (ZERO)))) = Tuple2 (if leq (nat4) (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)) then fst3 (targetNew (Icons (nat2) (nat3) (idlist2))) else plus (fst3 (targetNew (Icons (nat2) (nat3) (idlist2)))) (nat4)) (SUCC (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)))
Inductive2 : nat1 = SUCC (nat4)
---------------------------------------
if isindexed (idlist2) then nat_eq (nat3) (length (idlist2)) else false = true -> gq (SUCC (nat4)) (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = true -> gq (plus (if gq (nat2) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) then max (plus (fst3 (spec (repr (target (idlist2) (idlist2))))) (nat2)) else fst3 (spec (repr (target (idlist2) (idlist2))))) (SUCC (nat4))) (ZERO) = true -> Tuple2 (plus (if leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (fst3 (targetNew (idlist2))) (nat2)) (SUCC (nat4))) (SUCC (plus (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) (SUCC (ZERO)))) = Tuple2 (if leq (nat4) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (Icons (nat2) (nat3) (idlist2))) else plus (fst3 (targetNew (Icons (nat2) (nat3) (idlist2)))) (SUCC (nat4))) (SUCC (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:13.)
=================================================
Progress: 32


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true -> gq (nat1) (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 _ b -> b) = true -> gq (plus (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO) = true -> Tuple2 (plus (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) (nat1)) (plus (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (if leq (nat1) (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist1)) else plus (fst3 (targetNew (idlist1))) (nat1)) (SUCC (match (targetNew (idlist1)) with
| Tuple2 _ b -> b))
idlist1 : idlist
nat2 : nat
nat3 : nat
idlist2 : idlist
IH1 : forall (nat1:nat), isindexed (idlist2) = true -> gq (nat1) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) = true -> gq (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO) = true -> Tuple2 (plus (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) (nat1)) (plus (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (if leq (nat1) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (fst3 (targetNew (idlist2))) (nat1)) (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b))
Inductive1 : idlist1 = Icons (nat2) (nat3) (idlist2)
nat1 : nat
nat4 : nat
IH2 : if isindexed (idlist2) then nat_eq (nat3) (length (idlist2)) else false = true -> gq (nat4) (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = true -> gq (plus (if gq (nat2) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) then max (plus (fst3 (spec (repr (target (idlist2) (idlist2))))) (nat2)) else fst3 (spec (repr (target (idlist2) (idlist2))))) (nat4)) (ZERO) = true -> Tuple2 (plus (if leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (fst3 (targetNew (idlist2))) (nat2)) (nat4)) (SUCC (plus (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) (SUCC (ZERO)))) = Tuple2 (if leq (nat4) (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)) then fst3 (targetNew (Icons (nat2) (nat3) (idlist2))) else plus (fst3 (targetNew (Icons (nat2) (nat3) (idlist2)))) (nat4)) (SUCC (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)))
Inductive2 : nat1 = SUCC (nat4)
---------------------------------------
if isindexed (idlist2) then nat_eq (nat3) (length (idlist2)) else false = true -> gq (SUCC (nat4)) (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = true -> gq (plus (if gq (nat2) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) then max (plus (fst3 (spec (repr (target (idlist2) (idlist2))))) (nat2)) else fst3 (spec (repr (target (idlist2) (idlist2))))) (SUCC (nat4))) (ZERO) = true -> Tuple2 (plus (if leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (fst3 (targetNew (idlist2))) (nat2)) (SUCC (nat4))) (SUCC (plus (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) (SUCC (ZERO)))) = Tuple2 (if leq (nat4) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (Icons (nat2) (nat3) (idlist2))) else plus (fst3 (targetNew (Icons (nat2) (nat3) (idlist2)))) (SUCC (nat4))) (SUCC (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)))

0 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 13.)


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true -> gq (nat1) (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 _ b -> b) = true -> gq (plus (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO) = true -> Tuple2 (plus (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) (nat1)) (plus (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (if leq (nat1) (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist1)) else plus (fst3 (targetNew (idlist1))) (nat1)) (SUCC (match (targetNew (idlist1)) with
| Tuple2 _ b -> b))
idlist1 : idlist
nat2 : nat
nat3 : nat
idlist2 : idlist
IH1 : forall (nat1:nat), isindexed (idlist2) = true -> gq (nat1) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) = true -> gq (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO) = true -> Tuple2 (plus (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) (nat1)) (plus (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (if leq (nat1) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (fst3 (targetNew (idlist2))) (nat1)) (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b))
Inductive1 : idlist1 = Icons (nat2) (nat3) (idlist2)
nat1 : nat
nat4 : nat
IH2 : if isindexed (idlist2) then nat_eq (nat3) (length (idlist2)) else false = true -> gq (nat4) (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = true -> gq (plus (if gq (nat2) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) then max (plus (fst3 (spec (repr (target (idlist2) (idlist2))))) (nat2)) else fst3 (spec (repr (target (idlist2) (idlist2))))) (nat4)) (ZERO) = true -> Tuple2 (plus (if leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (fst3 (targetNew (idlist2))) (nat2)) (nat4)) (SUCC (plus (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) (SUCC (ZERO)))) = Tuple2 (if leq (nat4) (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)) then fst3 (targetNew (Icons (nat2) (nat3) (idlist2))) else plus (fst3 (targetNew (Icons (nat2) (nat3) (idlist2)))) (nat4)) (SUCC (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)))
Inductive2 : nat1 = SUCC (nat4)
Cond1 : if isindexed (idlist2) then nat_eq (nat3) (length (idlist2)) else false = true
---------------------------------------
gq (SUCC (nat4)) (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = true -> gq (plus (if gq (nat2) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) then max (plus (fst3 (spec (repr (target (idlist2) (idlist2))))) (nat2)) else fst3 (spec (repr (target (idlist2) (idlist2))))) (SUCC (nat4))) (ZERO) = true -> Tuple2 (plus (if leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (fst3 (targetNew (idlist2))) (nat2)) (SUCC (nat4))) (SUCC (plus (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) (SUCC (ZERO)))) = Tuple2 (if leq (nat4) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (Icons (nat2) (nat3) (idlist2))) else plus (fst3 (targetNew (Icons (nat2) (nat3) (idlist2)))) (SUCC (nat4))) (SUCC (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:13.)
=================================================
Progress: 33


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true -> gq (nat1) (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 _ b -> b) = true -> gq (plus (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO) = true -> Tuple2 (plus (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) (nat1)) (plus (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (if leq (nat1) (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist1)) else plus (fst3 (targetNew (idlist1))) (nat1)) (SUCC (match (targetNew (idlist1)) with
| Tuple2 _ b -> b))
idlist1 : idlist
nat2 : nat
nat3 : nat
idlist2 : idlist
IH1 : forall (nat1:nat), isindexed (idlist2) = true -> gq (nat1) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) = true -> gq (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO) = true -> Tuple2 (plus (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) (nat1)) (plus (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (if leq (nat1) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (fst3 (targetNew (idlist2))) (nat1)) (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b))
Inductive1 : idlist1 = Icons (nat2) (nat3) (idlist2)
nat1 : nat
nat4 : nat
IH2 : if isindexed (idlist2) then nat_eq (nat3) (length (idlist2)) else false = true -> gq (nat4) (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = true -> gq (plus (if gq (nat2) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) then max (plus (fst3 (spec (repr (target (idlist2) (idlist2))))) (nat2)) else fst3 (spec (repr (target (idlist2) (idlist2))))) (nat4)) (ZERO) = true -> Tuple2 (plus (if leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (fst3 (targetNew (idlist2))) (nat2)) (nat4)) (SUCC (plus (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) (SUCC (ZERO)))) = Tuple2 (if leq (nat4) (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)) then fst3 (targetNew (Icons (nat2) (nat3) (idlist2))) else plus (fst3 (targetNew (Icons (nat2) (nat3) (idlist2)))) (nat4)) (SUCC (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)))
Inductive2 : nat1 = SUCC (nat4)
Cond1 : if isindexed (idlist2) then nat_eq (nat3) (length (idlist2)) else false = true
---------------------------------------
gq (SUCC (nat4)) (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = true -> gq (plus (if gq (nat2) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) then max (plus (fst3 (spec (repr (target (idlist2) (idlist2))))) (nat2)) else fst3 (spec (repr (target (idlist2) (idlist2))))) (SUCC (nat4))) (ZERO) = true -> Tuple2 (plus (if leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (fst3 (targetNew (idlist2))) (nat2)) (SUCC (nat4))) (SUCC (plus (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) (SUCC (ZERO)))) = Tuple2 (if leq (nat4) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (Icons (nat2) (nat3) (idlist2))) else plus (fst3 (targetNew (Icons (nat2) (nat3) (idlist2)))) (SUCC (nat4))) (SUCC (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)))

0 goal(s) more...

1 conjecture(s) more...
>>> intro Cond2(rank : 13.)


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true -> gq (nat1) (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 _ b -> b) = true -> gq (plus (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO) = true -> Tuple2 (plus (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) (nat1)) (plus (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (if leq (nat1) (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist1)) else plus (fst3 (targetNew (idlist1))) (nat1)) (SUCC (match (targetNew (idlist1)) with
| Tuple2 _ b -> b))
idlist1 : idlist
nat2 : nat
nat3 : nat
idlist2 : idlist
IH1 : forall (nat1:nat), isindexed (idlist2) = true -> gq (nat1) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) = true -> gq (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO) = true -> Tuple2 (plus (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) (nat1)) (plus (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (if leq (nat1) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (fst3 (targetNew (idlist2))) (nat1)) (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b))
Inductive1 : idlist1 = Icons (nat2) (nat3) (idlist2)
nat1 : nat
nat4 : nat
IH2 : if isindexed (idlist2) then nat_eq (nat3) (length (idlist2)) else false = true -> gq (nat4) (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = true -> gq (plus (if gq (nat2) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) then max (plus (fst3 (spec (repr (target (idlist2) (idlist2))))) (nat2)) else fst3 (spec (repr (target (idlist2) (idlist2))))) (nat4)) (ZERO) = true -> Tuple2 (plus (if leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (fst3 (targetNew (idlist2))) (nat2)) (nat4)) (SUCC (plus (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) (SUCC (ZERO)))) = Tuple2 (if leq (nat4) (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)) then fst3 (targetNew (Icons (nat2) (nat3) (idlist2))) else plus (fst3 (targetNew (Icons (nat2) (nat3) (idlist2)))) (nat4)) (SUCC (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)))
Inductive2 : nat1 = SUCC (nat4)
Cond1 : if isindexed (idlist2) then nat_eq (nat3) (length (idlist2)) else false = true
Cond2 : gq (SUCC (nat4)) (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = true
---------------------------------------
gq (plus (if gq (nat2) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) then max (plus (fst3 (spec (repr (target (idlist2) (idlist2))))) (nat2)) else fst3 (spec (repr (target (idlist2) (idlist2))))) (SUCC (nat4))) (ZERO) = true -> Tuple2 (plus (if leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (fst3 (targetNew (idlist2))) (nat2)) (SUCC (nat4))) (SUCC (plus (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) (SUCC (ZERO)))) = Tuple2 (if leq (nat4) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (Icons (nat2) (nat3) (idlist2))) else plus (fst3 (targetNew (Icons (nat2) (nat3) (idlist2)))) (SUCC (nat4))) (SUCC (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond3(rank:13.)
=================================================
Progress: 34


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true -> gq (nat1) (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 _ b -> b) = true -> gq (plus (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO) = true -> Tuple2 (plus (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) (nat1)) (plus (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (if leq (nat1) (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist1)) else plus (fst3 (targetNew (idlist1))) (nat1)) (SUCC (match (targetNew (idlist1)) with
| Tuple2 _ b -> b))
idlist1 : idlist
nat2 : nat
nat3 : nat
idlist2 : idlist
IH1 : forall (nat1:nat), isindexed (idlist2) = true -> gq (nat1) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) = true -> gq (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO) = true -> Tuple2 (plus (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) (nat1)) (plus (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (if leq (nat1) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (fst3 (targetNew (idlist2))) (nat1)) (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b))
Inductive1 : idlist1 = Icons (nat2) (nat3) (idlist2)
nat1 : nat
nat4 : nat
IH2 : if isindexed (idlist2) then nat_eq (nat3) (length (idlist2)) else false = true -> gq (nat4) (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = true -> gq (plus (if gq (nat2) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) then max (plus (fst3 (spec (repr (target (idlist2) (idlist2))))) (nat2)) else fst3 (spec (repr (target (idlist2) (idlist2))))) (nat4)) (ZERO) = true -> Tuple2 (plus (if leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (fst3 (targetNew (idlist2))) (nat2)) (nat4)) (SUCC (plus (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) (SUCC (ZERO)))) = Tuple2 (if leq (nat4) (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)) then fst3 (targetNew (Icons (nat2) (nat3) (idlist2))) else plus (fst3 (targetNew (Icons (nat2) (nat3) (idlist2)))) (nat4)) (SUCC (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)))
Inductive2 : nat1 = SUCC (nat4)
Cond1 : if isindexed (idlist2) then nat_eq (nat3) (length (idlist2)) else false = true
Cond2 : gq (SUCC (nat4)) (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = true
---------------------------------------
gq (plus (if gq (nat2) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) then max (plus (fst3 (spec (repr (target (idlist2) (idlist2))))) (nat2)) else fst3 (spec (repr (target (idlist2) (idlist2))))) (SUCC (nat4))) (ZERO) = true -> Tuple2 (plus (if leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (fst3 (targetNew (idlist2))) (nat2)) (SUCC (nat4))) (SUCC (plus (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) (SUCC (ZERO)))) = Tuple2 (if leq (nat4) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (Icons (nat2) (nat3) (idlist2))) else plus (fst3 (targetNew (Icons (nat2) (nat3) (idlist2)))) (SUCC (nat4))) (SUCC (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)))

0 goal(s) more...

1 conjecture(s) more...
>>> intro Cond3(rank : 13.)


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true -> gq (nat1) (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 _ b -> b) = true -> gq (plus (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO) = true -> Tuple2 (plus (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) (nat1)) (plus (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (if leq (nat1) (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist1)) else plus (fst3 (targetNew (idlist1))) (nat1)) (SUCC (match (targetNew (idlist1)) with
| Tuple2 _ b -> b))
idlist1 : idlist
nat2 : nat
nat3 : nat
idlist2 : idlist
IH1 : forall (nat1:nat), isindexed (idlist2) = true -> gq (nat1) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) = true -> gq (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO) = true -> Tuple2 (plus (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) (nat1)) (plus (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (if leq (nat1) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (fst3 (targetNew (idlist2))) (nat1)) (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b))
Inductive1 : idlist1 = Icons (nat2) (nat3) (idlist2)
nat1 : nat
nat4 : nat
IH2 : if isindexed (idlist2) then nat_eq (nat3) (length (idlist2)) else false = true -> gq (nat4) (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = true -> gq (plus (if gq (nat2) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) then max (plus (fst3 (spec (repr (target (idlist2) (idlist2))))) (nat2)) else fst3 (spec (repr (target (idlist2) (idlist2))))) (nat4)) (ZERO) = true -> Tuple2 (plus (if leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (fst3 (targetNew (idlist2))) (nat2)) (nat4)) (SUCC (plus (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) (SUCC (ZERO)))) = Tuple2 (if leq (nat4) (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)) then fst3 (targetNew (Icons (nat2) (nat3) (idlist2))) else plus (fst3 (targetNew (Icons (nat2) (nat3) (idlist2)))) (nat4)) (SUCC (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)))
Inductive2 : nat1 = SUCC (nat4)
Cond1 : if isindexed (idlist2) then nat_eq (nat3) (length (idlist2)) else false = true
Cond2 : gq (SUCC (nat4)) (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = true
Cond3 : gq (plus (if gq (nat2) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) then max (plus (fst3 (spec (repr (target (idlist2) (idlist2))))) (nat2)) else fst3 (spec (repr (target (idlist2) (idlist2))))) (SUCC (nat4))) (ZERO) = true
---------------------------------------
Tuple2 (plus (if leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (fst3 (targetNew (idlist2))) (nat2)) (SUCC (nat4))) (SUCC (plus (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) (SUCC (ZERO)))) = Tuple2 (if leq (nat4) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (Icons (nat2) (nat3) (idlist2))) else plus (fst3 (targetNew (Icons (nat2) (nat3) (idlist2)))) (SUCC (nat4))) (SUCC (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case leq (nat4) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)(rank:14.)
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)(rank:14.)
=================================================
Progress: 35


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true -> gq (nat1) (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 _ b -> b) = true -> gq (plus (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO) = true -> Tuple2 (plus (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) (nat1)) (plus (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (if leq (nat1) (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist1)) else plus (fst3 (targetNew (idlist1))) (nat1)) (SUCC (match (targetNew (idlist1)) with
| Tuple2 _ b -> b))
idlist1 : idlist
nat2 : nat
nat3 : nat
idlist2 : idlist
IH1 : forall (nat1:nat), isindexed (idlist2) = true -> gq (nat1) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) = true -> gq (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO) = true -> Tuple2 (plus (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) (nat1)) (plus (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (if leq (nat1) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (fst3 (targetNew (idlist2))) (nat1)) (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b))
Inductive1 : idlist1 = Icons (nat2) (nat3) (idlist2)
nat1 : nat
nat4 : nat
IH2 : if isindexed (idlist2) then nat_eq (nat3) (length (idlist2)) else false = true -> gq (nat4) (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = true -> gq (plus (if gq (nat2) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) then max (plus (fst3 (spec (repr (target (idlist2) (idlist2))))) (nat2)) else fst3 (spec (repr (target (idlist2) (idlist2))))) (nat4)) (ZERO) = true -> Tuple2 (plus (if leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (fst3 (targetNew (idlist2))) (nat2)) (nat4)) (SUCC (plus (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) (SUCC (ZERO)))) = Tuple2 (if leq (nat4) (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)) then fst3 (targetNew (Icons (nat2) (nat3) (idlist2))) else plus (fst3 (targetNew (Icons (nat2) (nat3) (idlist2)))) (nat4)) (SUCC (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)))
Inductive2 : nat1 = SUCC (nat4)
Cond1 : if isindexed (idlist2) then nat_eq (nat3) (length (idlist2)) else false = true
Cond2 : gq (SUCC (nat4)) (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = true
Cond3 : gq (plus (if gq (nat2) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) then max (plus (fst3 (spec (repr (target (idlist2) (idlist2))))) (nat2)) else fst3 (spec (repr (target (idlist2) (idlist2))))) (SUCC (nat4))) (ZERO) = true
---------------------------------------
Tuple2 (plus (if leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (fst3 (targetNew (idlist2))) (nat2)) (SUCC (nat4))) (SUCC (plus (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) (SUCC (ZERO)))) = Tuple2 (if leq (nat4) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (Icons (nat2) (nat3) (idlist2))) else plus (fst3 (targetNew (Icons (nat2) (nat3) (idlist2)))) (SUCC (nat4))) (SUCC (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)))

0 goal(s) more...

1 conjecture(s) more...
>>> case leq (nat4) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)(rank : 14.)


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true -> gq (nat1) (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 _ b -> b) = true -> gq (plus (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO) = true -> Tuple2 (plus (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) (nat1)) (plus (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (if leq (nat1) (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist1)) else plus (fst3 (targetNew (idlist1))) (nat1)) (SUCC (match (targetNew (idlist1)) with
| Tuple2 _ b -> b))
idlist1 : idlist
nat2 : nat
nat3 : nat
idlist2 : idlist
IH1 : forall (nat1:nat), isindexed (idlist2) = true -> gq (nat1) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) = true -> gq (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO) = true -> Tuple2 (plus (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) (nat1)) (plus (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (if leq (nat1) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (fst3 (targetNew (idlist2))) (nat1)) (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b))
Inductive1 : idlist1 = Icons (nat2) (nat3) (idlist2)
nat1 : nat
nat4 : nat
IH2 : if isindexed (idlist2) then nat_eq (nat3) (length (idlist2)) else false = true -> gq (nat4) (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = true -> gq (plus (if gq (nat2) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) then max (plus (fst3 (spec (repr (target (idlist2) (idlist2))))) (nat2)) else fst3 (spec (repr (target (idlist2) (idlist2))))) (nat4)) (ZERO) = true -> Tuple2 (plus (if leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (fst3 (targetNew (idlist2))) (nat2)) (nat4)) (SUCC (plus (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) (SUCC (ZERO)))) = Tuple2 (if leq (nat4) (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)) then fst3 (targetNew (Icons (nat2) (nat3) (idlist2))) else plus (fst3 (targetNew (Icons (nat2) (nat3) (idlist2)))) (nat4)) (SUCC (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)))
Inductive2 : nat1 = SUCC (nat4)
Cond1 : if isindexed (idlist2) then nat_eq (nat3) (length (idlist2)) else false = true
Cond2 : gq (SUCC (nat4)) (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = true
Cond3 : gq (plus (if gq (nat2) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) then max (plus (fst3 (spec (repr (target (idlist2) (idlist2))))) (nat2)) else fst3 (spec (repr (target (idlist2) (idlist2))))) (SUCC (nat4))) (ZERO) = true
Case1 : leq (nat4) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (plus (if leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (fst3 (targetNew (idlist2))) (nat2)) (SUCC (nat4))) (SUCC (plus (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) (SUCC (ZERO)))) = Tuple2 (if leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (fst3 (targetNew (idlist2))) (nat2)) (SUCC (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)(rank:15.)
=================================================
Progress: 36


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true -> gq (nat1) (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 _ b -> b) = true -> gq (plus (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO) = true -> Tuple2 (plus (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) (nat1)) (plus (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (if leq (nat1) (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist1)) else plus (fst3 (targetNew (idlist1))) (nat1)) (SUCC (match (targetNew (idlist1)) with
| Tuple2 _ b -> b))
idlist1 : idlist
nat2 : nat
nat3 : nat
idlist2 : idlist
IH1 : forall (nat1:nat), isindexed (idlist2) = true -> gq (nat1) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) = true -> gq (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO) = true -> Tuple2 (plus (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) (nat1)) (plus (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (if leq (nat1) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (fst3 (targetNew (idlist2))) (nat1)) (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b))
Inductive1 : idlist1 = Icons (nat2) (nat3) (idlist2)
nat1 : nat
nat4 : nat
IH2 : if isindexed (idlist2) then nat_eq (nat3) (length (idlist2)) else false = true -> gq (nat4) (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = true -> gq (plus (if gq (nat2) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) then max (plus (fst3 (spec (repr (target (idlist2) (idlist2))))) (nat2)) else fst3 (spec (repr (target (idlist2) (idlist2))))) (nat4)) (ZERO) = true -> Tuple2 (plus (if leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (fst3 (targetNew (idlist2))) (nat2)) (nat4)) (SUCC (plus (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) (SUCC (ZERO)))) = Tuple2 (if leq (nat4) (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)) then fst3 (targetNew (Icons (nat2) (nat3) (idlist2))) else plus (fst3 (targetNew (Icons (nat2) (nat3) (idlist2)))) (nat4)) (SUCC (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)))
Inductive2 : nat1 = SUCC (nat4)
Cond1 : if isindexed (idlist2) then nat_eq (nat3) (length (idlist2)) else false = true
Cond2 : gq (SUCC (nat4)) (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = true
Cond3 : gq (plus (if gq (nat2) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) then max (plus (fst3 (spec (repr (target (idlist2) (idlist2))))) (nat2)) else fst3 (spec (repr (target (idlist2) (idlist2))))) (SUCC (nat4))) (ZERO) = true
---------------------------------------
Tuple2 (plus (if leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (fst3 (targetNew (idlist2))) (nat2)) (SUCC (nat4))) (SUCC (plus (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) (SUCC (ZERO)))) = Tuple2 (if leq (nat4) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (Icons (nat2) (nat3) (idlist2))) else plus (fst3 (targetNew (Icons (nat2) (nat3) (idlist2)))) (SUCC (nat4))) (SUCC (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)))

0 goal(s) more...

1 conjecture(s) more...
>>> case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)(rank : 14.)


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true -> gq (nat1) (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 _ b -> b) = true -> gq (plus (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO) = true -> Tuple2 (plus (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) (nat1)) (plus (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (if leq (nat1) (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist1)) else plus (fst3 (targetNew (idlist1))) (nat1)) (SUCC (match (targetNew (idlist1)) with
| Tuple2 _ b -> b))
idlist1 : idlist
nat2 : nat
nat3 : nat
idlist2 : idlist
IH1 : forall (nat1:nat), isindexed (idlist2) = true -> gq (nat1) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) = true -> gq (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO) = true -> Tuple2 (plus (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) (nat1)) (plus (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (if leq (nat1) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (fst3 (targetNew (idlist2))) (nat1)) (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b))
Inductive1 : idlist1 = Icons (nat2) (nat3) (idlist2)
nat1 : nat
nat4 : nat
IH2 : if isindexed (idlist2) then nat_eq (nat3) (length (idlist2)) else false = true -> gq (nat4) (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = true -> gq (plus (if gq (nat2) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) then max (plus (fst3 (spec (repr (target (idlist2) (idlist2))))) (nat2)) else fst3 (spec (repr (target (idlist2) (idlist2))))) (nat4)) (ZERO) = true -> Tuple2 (plus (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) (nat4)) (SUCC (plus (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) (SUCC (ZERO)))) = Tuple2 (if leq (nat4) (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)) then fst3 (targetNew (Icons (nat2) (nat3) (idlist2))) else plus (fst3 (targetNew (Icons (nat2) (nat3) (idlist2)))) (nat4)) (SUCC (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)))
Inductive2 : nat1 = SUCC (nat4)
Cond1 : if isindexed (idlist2) then nat_eq (nat3) (length (idlist2)) else false = true
Cond2 : gq (SUCC (nat4)) (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = true
Cond3 : gq (plus (if gq (nat2) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) then max (plus (fst3 (spec (repr (target (idlist2) (idlist2))))) (nat2)) else fst3 (spec (repr (target (idlist2) (idlist2))))) (SUCC (nat4))) (ZERO) = true
Case1 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (plus (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) (SUCC (nat4))) (SUCC (plus (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) (SUCC (ZERO)))) = Tuple2 (if leq (nat4) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (Icons (nat2) (nat3) (idlist2))) else plus (fst3 (targetNew (Icons (nat2) (nat3) (idlist2)))) (SUCC (nat4))) (SUCC (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case leq (nat4) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)(rank:15.)
=================================================
Progress: 37


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true -> gq (nat1) (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 _ b -> b) = true -> gq (plus (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO) = true -> Tuple2 (plus (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) (nat1)) (plus (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (if leq (nat1) (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist1)) else plus (fst3 (targetNew (idlist1))) (nat1)) (SUCC (match (targetNew (idlist1)) with
| Tuple2 _ b -> b))
idlist1 : idlist
nat2 : nat
nat3 : nat
idlist2 : idlist
IH1 : forall (nat1:nat), isindexed (idlist2) = true -> gq (nat1) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) = true -> gq (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO) = true -> Tuple2 (plus (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) (nat1)) (plus (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (if leq (nat1) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (fst3 (targetNew (idlist2))) (nat1)) (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b))
Inductive1 : idlist1 = Icons (nat2) (nat3) (idlist2)
nat1 : nat
nat4 : nat
IH2 : if isindexed (idlist2) then nat_eq (nat3) (length (idlist2)) else false = true -> gq (nat4) (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = true -> gq (plus (if gq (nat2) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) then max (plus (fst3 (spec (repr (target (idlist2) (idlist2))))) (nat2)) else fst3 (spec (repr (target (idlist2) (idlist2))))) (nat4)) (ZERO) = true -> Tuple2 (plus (if leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (fst3 (targetNew (idlist2))) (nat2)) (nat4)) (SUCC (plus (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) (SUCC (ZERO)))) = Tuple2 (if leq (nat4) (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)) then fst3 (targetNew (Icons (nat2) (nat3) (idlist2))) else plus (fst3 (targetNew (Icons (nat2) (nat3) (idlist2)))) (nat4)) (SUCC (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)))
Inductive2 : nat1 = SUCC (nat4)
Cond1 : if isindexed (idlist2) then nat_eq (nat3) (length (idlist2)) else false = true
Cond2 : gq (SUCC (nat4)) (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = true
Cond3 : gq (plus (if gq (nat2) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) then max (plus (fst3 (spec (repr (target (idlist2) (idlist2))))) (nat2)) else fst3 (spec (repr (target (idlist2) (idlist2))))) (SUCC (nat4))) (ZERO) = true
Case1 : leq (nat4) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (plus (if leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (fst3 (targetNew (idlist2))) (nat2)) (SUCC (nat4))) (SUCC (plus (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) (SUCC (ZERO)))) = Tuple2 (if leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (fst3 (targetNew (idlist2))) (nat2)) (SUCC (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)))

1 goal(s) more...

1 conjecture(s) more...
>>> case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)(rank : 15.)


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true -> gq (nat1) (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 _ b -> b) = true -> gq (plus (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO) = true -> Tuple2 (plus (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) (nat1)) (plus (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (if leq (nat1) (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist1)) else plus (fst3 (targetNew (idlist1))) (nat1)) (SUCC (match (targetNew (idlist1)) with
| Tuple2 _ b -> b))
idlist1 : idlist
nat2 : nat
nat3 : nat
idlist2 : idlist
IH1 : forall (nat1:nat), isindexed (idlist2) = true -> gq (nat1) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) = true -> gq (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO) = true -> Tuple2 (plus (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) (nat1)) (plus (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (if leq (nat1) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (fst3 (targetNew (idlist2))) (nat1)) (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b))
Inductive1 : idlist1 = Icons (nat2) (nat3) (idlist2)
nat1 : nat
nat4 : nat
IH2 : if isindexed (idlist2) then nat_eq (nat3) (length (idlist2)) else false = true -> gq (nat4) (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = true -> gq (plus (if gq (nat2) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) then max (plus (fst3 (spec (repr (target (idlist2) (idlist2))))) (nat2)) else fst3 (spec (repr (target (idlist2) (idlist2))))) (nat4)) (ZERO) = true -> Tuple2 (plus (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) (nat4)) (SUCC (plus (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) (SUCC (ZERO)))) = Tuple2 (if leq (nat4) (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)) then fst3 (targetNew (Icons (nat2) (nat3) (idlist2))) else plus (fst3 (targetNew (Icons (nat2) (nat3) (idlist2)))) (nat4)) (SUCC (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)))
Inductive2 : nat1 = SUCC (nat4)
Cond1 : if isindexed (idlist2) then nat_eq (nat3) (length (idlist2)) else false = true
Cond2 : gq (SUCC (nat4)) (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = true
Cond3 : gq (plus (if gq (nat2) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) then max (plus (fst3 (spec (repr (target (idlist2) (idlist2))))) (nat2)) else fst3 (spec (repr (target (idlist2) (idlist2))))) (SUCC (nat4))) (ZERO) = true
Case1 : leq (nat4) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case2 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (plus (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) (SUCC (nat4))) (SUCC (plus (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) (SUCC (ZERO)))) = Tuple2 (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) (SUCC (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
intro Cond2
intro Cond3
case leq (nat4) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
case leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)
Prop: Tuple2 (plus (0) (SUCC (SUCC (ZERO)))) (SUCC (plus (1) (SUCC (ZERO)))) = Tuple2 (0) (SUCC (SUCC (1)))
Prop: Tuple2 (plus (0) (SUCC (ZERO))) (SUCC (plus (4) (SUCC (ZERO)))) = Tuple2 (0) (SUCC (SUCC (4)))
Prop: Tuple2 (plus (5) (SUCC (SUCC (ZERO)))) (SUCC (plus (5) (SUCC (ZERO)))) = Tuple2 (5) (SUCC (SUCC (5)))
validate generalize_common_subterm_goal
Prop: Tuple2 (plus (8) (SUCC (ZERO))) (SUCC (plus (1) (SUCC (ZERO)))) = Tuple2 (8) (SUCC (SUCC (1)))
Prop: Tuple2 (plus (1) (SUCC (ZERO))) (SUCC (plus (4) (SUCC (ZERO)))) = Tuple2 (1) (SUCC (SUCC (4)))
Prop: Tuple2 (plus (1) (SUCC (ZERO))) (SUCC (plus (3) (SUCC (ZERO)))) = Tuple2 (1) (SUCC (SUCC (3)))
Lemma List
forall (any1:any) (any2:any) (idlist1:idlist) (nat1:nat), gq (SUCC (nat1)) (plus (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = true -> leq (nat1) (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) = true -> Tuple2 (plus (any1) (SUCC (nat1))) (SUCC (plus (any2) (SUCC (ZERO)))) = Tuple2 (any1) (SUCC (SUCC (any2)))
End of Lemma List


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true -> gq (nat1) (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 _ b -> b) = true -> gq (plus (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO) = true -> Tuple2 (plus (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) (nat1)) (plus (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (if leq (nat1) (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist1)) else plus (fst3 (targetNew (idlist1))) (nat1)) (SUCC (match (targetNew (idlist1)) with
| Tuple2 _ b -> b))
idlist1 : idlist
nat2 : nat
nat3 : nat
idlist2 : idlist
IH1 : forall (nat1:nat), isindexed (idlist2) = true -> gq (nat1) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) = true -> gq (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO) = true -> Tuple2 (plus (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) (nat1)) (plus (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (if leq (nat1) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (fst3 (targetNew (idlist2))) (nat1)) (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b))
Inductive1 : idlist1 = Icons (nat2) (nat3) (idlist2)
nat1 : nat
nat4 : nat
IH2 : if isindexed (idlist2) then nat_eq (nat3) (length (idlist2)) else false = true -> gq (nat4) (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = true -> gq (plus (if gq (nat2) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) then max (plus (fst3 (spec (repr (target (idlist2) (idlist2))))) (nat2)) else fst3 (spec (repr (target (idlist2) (idlist2))))) (nat4)) (ZERO) = true -> Tuple2 (plus (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) (nat4)) (SUCC (plus (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) (SUCC (ZERO)))) = Tuple2 (if leq (nat4) (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)) then fst3 (targetNew (Icons (nat2) (nat3) (idlist2))) else plus (fst3 (targetNew (Icons (nat2) (nat3) (idlist2)))) (nat4)) (SUCC (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)))
Inductive2 : nat1 = SUCC (nat4)
Cond1 : if isindexed (idlist2) then nat_eq (nat3) (length (idlist2)) else false = true
Cond2 : gq (SUCC (nat4)) (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = true
Cond3 : gq (plus (if gq (nat2) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) then max (plus (fst3 (spec (repr (target (idlist2) (idlist2))))) (nat2)) else fst3 (spec (repr (target (idlist2) (idlist2))))) (SUCC (nat4))) (ZERO) = true
Case1 : leq (nat4) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case2 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (plus (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) (SUCC (nat4))) (SUCC (plus (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) (SUCC (ZERO)))) = Tuple2 (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) (SUCC (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)))

2 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 38


1st goal of : forall (idlist1:idlist) (nat1:nat), isindexed (idlist1) = true -> gq (nat1) (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 _ b -> b) = true -> gq (plus (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO) = true -> Tuple2 (plus (match (targetNew (idlist1)) with
| Tuple2 a _ -> a) (nat1)) (plus (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (if leq (nat1) (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist1)) else plus (fst3 (targetNew (idlist1))) (nat1)) (SUCC (match (targetNew (idlist1)) with
| Tuple2 _ b -> b))
idlist1 : idlist
nat2 : nat
nat3 : nat
idlist2 : idlist
IH1 : forall (nat1:nat), isindexed (idlist2) = true -> gq (nat1) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) = true -> gq (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 a _ -> a) (nat1)) (ZERO) = true -> Tuple2 (plus (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) (nat1)) (plus (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = Tuple2 (if leq (nat1) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) then fst3 (targetNew (idlist2)) else plus (fst3 (targetNew (idlist2))) (nat1)) (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b))
Inductive1 : idlist1 = Icons (nat2) (nat3) (idlist2)
nat1 : nat
nat4 : nat
IH2 : if isindexed (idlist2) then nat_eq (nat3) (length (idlist2)) else false = true -> gq (nat4) (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = true -> gq (plus (if gq (nat2) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) then max (plus (fst3 (spec (repr (target (idlist2) (idlist2))))) (nat2)) else fst3 (spec (repr (target (idlist2) (idlist2))))) (nat4)) (ZERO) = true -> Tuple2 (plus (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) (nat4)) (SUCC (plus (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) (SUCC (ZERO)))) = Tuple2 (if leq (nat4) (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)) then fst3 (targetNew (Icons (nat2) (nat3) (idlist2))) else plus (fst3 (targetNew (Icons (nat2) (nat3) (idlist2)))) (nat4)) (SUCC (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)))
Inductive2 : nat1 = SUCC (nat4)
Cond1 : if isindexed (idlist2) then nat_eq (nat3) (length (idlist2)) else false = true
Cond2 : gq (SUCC (nat4)) (plus (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = true
Cond3 : gq (plus (if gq (nat2) (match (spec (repr (target (idlist2) (idlist2)))) with
| Tuple2 _ b -> b) then max (plus (fst3 (spec (repr (target (idlist2) (idlist2))))) (nat2)) else fst3 (spec (repr (target (idlist2) (idlist2))))) (SUCC (nat4))) (ZERO) = true
Case1 : leq (nat4) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
Case2 : leq (nat2) (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) = true
---------------------------------------
Tuple2 (plus (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) (SUCC (nat4))) (SUCC (plus (match (targetNew (idlist2)) with
| Tuple2 _ b -> b) (SUCC (ZERO)))) = Tuple2 (match (targetNew (idlist2)) with
| Tuple2 a _ -> a) (SUCC (SUCC (match (targetNew (idlist2)) with
| Tuple2 _ b -> b)))

2 goal(s) more...

1 conjecture(s) more...
>>> assert forall (any1:any) (any2:any) (idlist1:idlist) (nat1:nat), gq (SUCC (nat1)) (plus (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = true -> leq (nat1) (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) = true -> Tuple2 (plus (any1) (SUCC (nat1))) (SUCC (plus (any2) (SUCC (ZERO)))) = Tuple2 (any1) (SUCC (SUCC (any2)))(rank : 0.)


1st goal of : forall (any1:any) (any2:any) (idlist1:idlist) (nat1:nat), gq (SUCC (nat1)) (plus (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = true -> leq (nat1) (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) = true -> Tuple2 (plus (any1) (SUCC (nat1))) (SUCC (plus (any2) (SUCC (ZERO)))) = Tuple2 (any1) (SUCC (SUCC (any2)))

---------------------------------------
forall (any1:any) (any2:any) (idlist1:idlist) (nat1:nat), gq (SUCC (nat1)) (plus (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = true -> leq (nat1) (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) = true -> Tuple2 (plus (any1) (SUCC (nat1))) (SUCC (plus (any2) (SUCC (ZERO)))) = Tuple2 (any1) (SUCC (SUCC (any2)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro idlist1(rank:11.)
=================================================
Progress: 39


1st goal of : forall (any1:any) (any2:any) (idlist1:idlist) (nat1:nat), gq (SUCC (nat1)) (plus (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = true -> leq (nat1) (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) = true -> Tuple2 (plus (any1) (SUCC (nat1))) (SUCC (plus (any2) (SUCC (ZERO)))) = Tuple2 (any1) (SUCC (SUCC (any2)))

---------------------------------------
forall (any1:any) (any2:any) (idlist1:idlist) (nat1:nat), gq (SUCC (nat1)) (plus (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = true -> leq (nat1) (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) = true -> Tuple2 (plus (any1) (SUCC (nat1))) (SUCC (plus (any2) (SUCC (ZERO)))) = Tuple2 (any1) (SUCC (SUCC (any2)))

0 goal(s) more...

2 conjecture(s) more...
>>> intro idlist1(rank : 11.)


1st goal of : forall (any1:any) (any2:any) (idlist1:idlist) (nat1:nat), gq (SUCC (nat1)) (plus (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = true -> leq (nat1) (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) = true -> Tuple2 (plus (any1) (SUCC (nat1))) (SUCC (plus (any2) (SUCC (ZERO)))) = Tuple2 (any1) (SUCC (SUCC (any2)))
idlist1 : idlist
---------------------------------------
forall (any1:any) (any2:any) (nat1:nat), gq (SUCC (nat1)) (plus (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = true -> leq (nat1) (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) = true -> Tuple2 (plus (any1) (SUCC (nat1))) (SUCC (plus (any2) (SUCC (ZERO)))) = Tuple2 (any1) (SUCC (SUCC (any2)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat1(rank:11.)
=================================================
Progress: 40


1st goal of : forall (any1:any) (any2:any) (idlist1:idlist) (nat1:nat), gq (SUCC (nat1)) (plus (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = true -> leq (nat1) (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) = true -> Tuple2 (plus (any1) (SUCC (nat1))) (SUCC (plus (any2) (SUCC (ZERO)))) = Tuple2 (any1) (SUCC (SUCC (any2)))
idlist1 : idlist
---------------------------------------
forall (any1:any) (any2:any) (nat1:nat), gq (SUCC (nat1)) (plus (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = true -> leq (nat1) (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) = true -> Tuple2 (plus (any1) (SUCC (nat1))) (SUCC (plus (any2) (SUCC (ZERO)))) = Tuple2 (any1) (SUCC (SUCC (any2)))

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat1(rank : 11.)


1st goal of : forall (any1:any) (any2:any) (idlist1:idlist) (nat1:nat), gq (SUCC (nat1)) (plus (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = true -> leq (nat1) (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) = true -> Tuple2 (plus (any1) (SUCC (nat1))) (SUCC (plus (any2) (SUCC (ZERO)))) = Tuple2 (any1) (SUCC (SUCC (any2)))
idlist1 : idlist
nat1 : nat
---------------------------------------
forall (any1:any) (any2:any), gq (SUCC (nat1)) (plus (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = true -> leq (nat1) (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) = true -> Tuple2 (plus (any1) (SUCC (nat1))) (SUCC (plus (any2) (SUCC (ZERO)))) = Tuple2 (any1) (SUCC (SUCC (any2)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11.)
=================================================
Progress: 41


1st goal of : forall (any1:any) (any2:any) (idlist1:idlist) (nat1:nat), gq (SUCC (nat1)) (plus (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = true -> leq (nat1) (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) = true -> Tuple2 (plus (any1) (SUCC (nat1))) (SUCC (plus (any2) (SUCC (ZERO)))) = Tuple2 (any1) (SUCC (SUCC (any2)))
idlist1 : idlist
nat1 : nat
---------------------------------------
forall (any1:any) (any2:any), gq (SUCC (nat1)) (plus (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = true -> leq (nat1) (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) = true -> Tuple2 (plus (any1) (SUCC (nat1))) (SUCC (plus (any2) (SUCC (ZERO)))) = Tuple2 (any1) (SUCC (SUCC (any2)))

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 11.)


1st goal of : forall (any1:any) (any2:any) (idlist1:idlist) (nat1:nat), gq (SUCC (nat1)) (plus (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = true -> leq (nat1) (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) = true -> Tuple2 (plus (any1) (SUCC (nat1))) (SUCC (plus (any2) (SUCC (ZERO)))) = Tuple2 (any1) (SUCC (SUCC (any2)))
idlist1 : idlist
nat1 : nat
Cond1 : gq (SUCC (nat1)) (plus (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = true
---------------------------------------
forall (any1:any) (any2:any), leq (nat1) (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) = true -> Tuple2 (plus (any1) (SUCC (nat1))) (SUCC (plus (any2) (SUCC (ZERO)))) = Tuple2 (any1) (SUCC (SUCC (any2)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:11.)
=================================================
Progress: 42


1st goal of : forall (any1:any) (any2:any) (idlist1:idlist) (nat1:nat), gq (SUCC (nat1)) (plus (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = true -> leq (nat1) (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) = true -> Tuple2 (plus (any1) (SUCC (nat1))) (SUCC (plus (any2) (SUCC (ZERO)))) = Tuple2 (any1) (SUCC (SUCC (any2)))
idlist1 : idlist
nat1 : nat
Cond1 : gq (SUCC (nat1)) (plus (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = true
---------------------------------------
forall (any1:any) (any2:any), leq (nat1) (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) = true -> Tuple2 (plus (any1) (SUCC (nat1))) (SUCC (plus (any2) (SUCC (ZERO)))) = Tuple2 (any1) (SUCC (SUCC (any2)))

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 11.)


1st goal of : forall (any1:any) (any2:any) (idlist1:idlist) (nat1:nat), gq (SUCC (nat1)) (plus (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = true -> leq (nat1) (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) = true -> Tuple2 (plus (any1) (SUCC (nat1))) (SUCC (plus (any2) (SUCC (ZERO)))) = Tuple2 (any1) (SUCC (SUCC (any2)))
idlist1 : idlist
nat1 : nat
Cond1 : gq (SUCC (nat1)) (plus (match (spec (repr (target (idlist1) (idlist1)))) with
| Tuple2 _ b -> b) (SUCC (ZERO))) = true
Cond2 : leq (nat1) (match (targetNew (idlist1)) with
| Tuple2 _ b -> b) = true
---------------------------------------
forall (any1:any) (any2:any), Tuple2 (plus (any1) (SUCC (nat1))) (SUCC (plus (any2) (SUCC (ZERO)))) = Tuple2 (any1) (SUCC (SUCC (any2)))

0 goal(s) more...

2 conjecture(s) more...
Fatal error: exception Invalid_argument("option is None")
Raised at Stdlib.invalid_arg in file "stdlib.ml", line 30, characters 20-45
Called from Stdlib__Option.get in file "option.ml" (inlined), line 21, characters 41-69
Called from Dilemma__Prover.rank_tactics in file "lib/prover.ml", line 1427, characters 35-70
Called from Dilemma__Prover.prune_rank_worklist_update_state_list in file "lib/prover.ml", line 1523, characters 4-65
Called from Dilemma__Engine.progress in file "lib/engine.ml", lines 198-202, characters 9-20
Called from Dilemma__Engine.proof_auto in file "lib/engine.ml", line 283, characters 8-69
Called from Dune__exe__Main.main in file "bin/main.ml", line 24, characters 12-79
