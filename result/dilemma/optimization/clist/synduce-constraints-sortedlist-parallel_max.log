Enter the definition file path (1/2) : 
> Enter the definition file path (2/2) : 
> Choose the proof type :
1) Interactive Mode 	 2) Auto Mode
Enter the goal : =================================================
Progress: 1


No conjecture
>>> assert forall (lst:clist), main (lst) = mainNew (lst)(rank : 0.)


1st goal of : forall (clist1:clist), main (clist1) = mainNew (clist1)

---------------------------------------
forall (clist1:clist), main (clist1) = mainNew (clist1)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:3.)
=================================================
Progress: 2


1st goal of : forall (clist1:clist), main (clist1) = mainNew (clist1)

---------------------------------------
forall (clist1:clist), main (clist1) = mainNew (clist1)

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 3.)


1st goal of : forall (clist1:clist), main (clist1) = mainNew (clist1)

---------------------------------------
forall (clist1:clist), if ispart (clist1) then spec (repr (target (clist1))) else ZERO = if ispart (clist1) then targetNew (clist1) else ZERO

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
induction clist1(rank:4.)
=================================================
Progress: 3


1st goal of : forall (clist1:clist), main (clist1) = mainNew (clist1)

---------------------------------------
forall (clist1:clist), if ispart (clist1) then spec (repr (target (clist1))) else ZERO = if ispart (clist1) then targetNew (clist1) else ZERO

0 goal(s) more...

0 conjecture(s) more...
>>> induction clist1(rank : 4.)


1st goal of : forall (clist1:clist), main (clist1) = mainNew (clist1)
clist1 : clist
nat1 : nat
Base1 : clist1 = Single (nat1)
---------------------------------------
if ispart (Single (nat1)) then spec (repr (target (Single (nat1)))) else ZERO = if ispart (Single (nat1)) then targetNew (Single (nat1)) else ZERO

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:3.)
=================================================
Progress: 4


1st goal of : forall (clist1:clist), main (clist1) = mainNew (clist1)
clist1 : clist
nat1 : nat
Base1 : clist1 = Single (nat1)
---------------------------------------
if ispart (Single (nat1)) then spec (repr (target (Single (nat1)))) else ZERO = if ispart (Single (nat1)) then targetNew (Single (nat1)) else ZERO

1 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 3.)


1st goal of : forall (clist1:clist), main (clist1) = mainNew (clist1)
clist1 : clist
clist2 : clist
clist3 : clist
IH1 : if ispart (clist2) then spec (repr (target (clist2))) else ZERO = if ispart (clist2) then targetNew (clist2) else ZERO
IH2 : if ispart (clist3) then spec (repr (target (clist3))) else ZERO = if ispart (clist3) then targetNew (clist3) else ZERO
Inductive1 : clist1 = Concats (clist2) (clist3)
---------------------------------------
if ispart (Concats (clist2) (clist3)) then spec (repr (target (Concats (clist2) (clist3)))) else ZERO = if ispart (Concats (clist2) (clist3)) then targetNew (Concats (clist2) (clist3)) else ZERO

0 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:3.)
=================================================
Progress: 5


1st goal of : forall (clist1:clist), main (clist1) = mainNew (clist1)
clist1 : clist
clist2 : clist
clist3 : clist
IH1 : if ispart (clist2) then spec (repr (target (clist2))) else ZERO = if ispart (clist2) then targetNew (clist2) else ZERO
IH2 : if ispart (clist3) then spec (repr (target (clist3))) else ZERO = if ispart (clist3) then targetNew (clist3) else ZERO
Inductive1 : clist1 = Concats (clist2) (clist3)
---------------------------------------
if ispart (Concats (clist2) (clist3)) then spec (repr (target (Concats (clist2) (clist3)))) else ZERO = if ispart (Concats (clist2) (clist3)) then targetNew (Concats (clist2) (clist3)) else ZERO

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 3.)


1st goal of : forall (clist1:clist), main (clist1) = mainNew (clist1)
clist1 : clist
clist2 : clist
clist3 : clist
IH1 : if ispart (clist2) then spec (repr (target (clist2))) else ZERO = if ispart (clist2) then targetNew (clist2) else ZERO
IH2 : if ispart (clist3) then spec (repr (target (clist3))) else ZERO = if ispart (clist3) then targetNew (clist3) else ZERO
Inductive1 : clist1 = Concats (clist2) (clist3)
---------------------------------------
if if lq (lmax (clist2)) (lmin (clist3)) then if ispart (clist2) then ispart (clist3) else false else false then spec (repr (target (Concats (clist2) (clist3)))) else ZERO = if if lq (lmax (clist2)) (lmin (clist3)) then if ispart (clist2) then ispart (clist3) else false else false then targetNew (Concats (clist2) (clist3)) else ZERO

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case if lq (lmax (clist2)) (lmin (clist3)) then if ispart (clist2) then ispart (clist3) else false else false(rank:4.)
=================================================
Progress: 6


1st goal of : forall (clist1:clist), main (clist1) = mainNew (clist1)
clist1 : clist
clist2 : clist
clist3 : clist
IH1 : if ispart (clist2) then spec (repr (target (clist2))) else ZERO = if ispart (clist2) then targetNew (clist2) else ZERO
IH2 : if ispart (clist3) then spec (repr (target (clist3))) else ZERO = if ispart (clist3) then targetNew (clist3) else ZERO
Inductive1 : clist1 = Concats (clist2) (clist3)
---------------------------------------
if if lq (lmax (clist2)) (lmin (clist3)) then if ispart (clist2) then ispart (clist3) else false else false then spec (repr (target (Concats (clist2) (clist3)))) else ZERO = if if lq (lmax (clist2)) (lmin (clist3)) then if ispart (clist2) then ispart (clist3) else false else false then targetNew (Concats (clist2) (clist3)) else ZERO

0 goal(s) more...

0 conjecture(s) more...
>>> case if lq (lmax (clist2)) (lmin (clist3)) then if ispart (clist2) then ispart (clist3) else false else false(rank : 4.)


1st goal of : forall (clist1:clist), main (clist1) = mainNew (clist1)
clist1 : clist
clist2 : clist
clist3 : clist
IH1 : if ispart (clist2) then spec (repr (target (clist2))) else ZERO = if ispart (clist2) then targetNew (clist2) else ZERO
IH2 : if ispart (clist3) then spec (repr (target (clist3))) else ZERO = if ispart (clist3) then targetNew (clist3) else ZERO
Inductive1 : clist1 = Concats (clist2) (clist3)
Case1 : if lq (lmax (clist2)) (lmin (clist3)) then if ispart (clist2) then ispart (clist3) else false else false = true
---------------------------------------
spec (tf1 (repr (tf13 (clist3) (clist3))) (repr (clist2))) = targetNew (clist3)

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case if lq (lmax (clist2)) (lmin (clist3)) then if ispart (clist2) then ispart (clist3) else false else false
parent
repr (clist2)
lower
repr(_)
upper
spec(tf1(repr(tf13(clist3, clist3)), _))
remove upper
repr(clist2)
remove lower
repr(_)
remove upper
tf1(repr(clist5), repr(clist4))
remove lower
tf1(repr(clist5), repr(_))
remove upper
tf1(repr(clist5), tf1(repr(clist7), repr(clist6)))
remove lower
tf1(repr(clist5), tf1(repr(clist7), repr(_)))
validate generalize_common_subterm_goal
Prop: spec (tf1 (repr (tf13 (Concats (Single (SUCC (ZERO))) (Concats (Single (ZERO)) (Concats (Single (SUCC (ZERO))) (Single (ZERO))))) (Concats (Single (SUCC (ZERO))) (Concats (Single (ZERO)) (Concats (Single (SUCC (ZERO))) (Single (ZERO))))))) (repr (Single (ZERO)))) = targetNew (Concats (Single (SUCC (ZERO))) (Concats (Single (ZERO)) (Concats (Single (SUCC (ZERO))) (Single (ZERO)))))
Prop: spec (tf1 (repr (tf13 (Concats (Concats (Single (ZERO)) (Single (ZERO))) (Single (SUCC (ZERO)))) (Concats (Concats (Single (ZERO)) (Single (ZERO))) (Single (SUCC (ZERO)))))) (repr (Single (ZERO)))) = targetNew (Concats (Concats (Single (ZERO)) (Single (ZERO))) (Single (SUCC (ZERO))))
Prop: spec (tf1 (repr (tf13 (Single (SUCC (SUCC (ZERO)))) (Single (SUCC (SUCC (ZERO)))))) (repr (Single (SUCC (SUCC (ZERO)))))) = targetNew (Single (SUCC (SUCC (ZERO))))
Lemma List
forall (clist1:clist) (clist2:clist), if lq (lmax (clist1)) (lmin (clist2)) then if ispart (clist1) then ispart (clist2) else false else false = true -> spec (tf1 (repr (tf13 (clist2) (clist2))) (repr (clist1))) = targetNew (clist2)
End of Lemma List


1st goal of : forall (clist1:clist), main (clist1) = mainNew (clist1)
clist1 : clist
clist2 : clist
clist3 : clist
IH1 : if ispart (clist2) then spec (repr (target (clist2))) else ZERO = if ispart (clist2) then targetNew (clist2) else ZERO
IH2 : if ispart (clist3) then spec (repr (target (clist3))) else ZERO = if ispart (clist3) then targetNew (clist3) else ZERO
Inductive1 : clist1 = Concats (clist2) (clist3)
Case1 : if lq (lmax (clist2)) (lmin (clist3)) then if ispart (clist2) then ispart (clist3) else false else false = true
---------------------------------------
spec (tf1 (repr (tf13 (clist3) (clist3))) (repr (clist2))) = targetNew (clist3)

1 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 7


1st goal of : forall (clist1:clist), main (clist1) = mainNew (clist1)
clist1 : clist
clist2 : clist
clist3 : clist
IH1 : if ispart (clist2) then spec (repr (target (clist2))) else ZERO = if ispart (clist2) then targetNew (clist2) else ZERO
IH2 : if ispart (clist3) then spec (repr (target (clist3))) else ZERO = if ispart (clist3) then targetNew (clist3) else ZERO
Inductive1 : clist1 = Concats (clist2) (clist3)
Case1 : if lq (lmax (clist2)) (lmin (clist3)) then if ispart (clist2) then ispart (clist3) else false else false = true
---------------------------------------
spec (tf1 (repr (tf13 (clist3) (clist3))) (repr (clist2))) = targetNew (clist3)

1 goal(s) more...

0 conjecture(s) more...
>>> assert forall (clist1:clist) (clist2:clist), if lq (lmax (clist1)) (lmin (clist2)) then if ispart (clist1) then ispart (clist2) else false else false = true -> spec (tf1 (repr (tf13 (clist2) (clist2))) (repr (clist1))) = targetNew (clist2)(rank : 0.)


1st goal of : forall (clist1:clist) (clist2:clist), if lq (lmax (clist1)) (lmin (clist2)) then if ispart (clist1) then ispart (clist2) else false else false = true -> spec (tf1 (repr (tf13 (clist2) (clist2))) (repr (clist1))) = targetNew (clist2)

---------------------------------------
forall (clist1:clist) (clist2:clist), if lq (lmax (clist1)) (lmin (clist2)) then if ispart (clist1) then ispart (clist2) else false else false = true -> spec (tf1 (repr (tf13 (clist2) (clist2))) (repr (clist1))) = targetNew (clist2)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction clist1(rank:6.)
=================================================
Progress: 8


1st goal of : forall (clist1:clist) (clist2:clist), if lq (lmax (clist1)) (lmin (clist2)) then if ispart (clist1) then ispart (clist2) else false else false = true -> spec (tf1 (repr (tf13 (clist2) (clist2))) (repr (clist1))) = targetNew (clist2)

---------------------------------------
forall (clist1:clist) (clist2:clist), if lq (lmax (clist1)) (lmin (clist2)) then if ispart (clist1) then ispart (clist2) else false else false = true -> spec (tf1 (repr (tf13 (clist2) (clist2))) (repr (clist1))) = targetNew (clist2)

0 goal(s) more...

1 conjecture(s) more...
>>> induction clist1(rank : 6.)


1st goal of : forall (clist1:clist) (clist2:clist), if lq (lmax (clist1)) (lmin (clist2)) then if ispart (clist1) then ispart (clist2) else false else false = true -> spec (tf1 (repr (tf13 (clist2) (clist2))) (repr (clist1))) = targetNew (clist2)
clist1 : clist
nat1 : nat
Base1 : clist1 = Single (nat1)
---------------------------------------
forall (clist2:clist), if lq (lmax (Single (nat1))) (lmin (clist2)) then if ispart (Single (nat1)) then ispart (clist2) else false else false = true -> spec (tf1 (repr (tf13 (clist2) (clist2))) (repr (Single (nat1)))) = targetNew (clist2)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:6.)
=================================================
Progress: 9


1st goal of : forall (clist1:clist) (clist2:clist), if lq (lmax (clist1)) (lmin (clist2)) then if ispart (clist1) then ispart (clist2) else false else false = true -> spec (tf1 (repr (tf13 (clist2) (clist2))) (repr (clist1))) = targetNew (clist2)
clist1 : clist
nat1 : nat
Base1 : clist1 = Single (nat1)
---------------------------------------
forall (clist2:clist), if lq (lmax (Single (nat1))) (lmin (clist2)) then if ispart (Single (nat1)) then ispart (clist2) else false else false = true -> spec (tf1 (repr (tf13 (clist2) (clist2))) (repr (Single (nat1)))) = targetNew (clist2)

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6.)


1st goal of : forall (clist1:clist) (clist2:clist), if lq (lmax (clist1)) (lmin (clist2)) then if ispart (clist1) then ispart (clist2) else false else false = true -> spec (tf1 (repr (tf13 (clist2) (clist2))) (repr (clist1))) = targetNew (clist2)
clist1 : clist
nat1 : nat
Base1 : clist1 = Single (nat1)
---------------------------------------
forall (clist2:clist), if lq (nat1) (lmin (clist2)) then if ispart (Single (nat1)) then ispart (clist2) else false else false = true -> max (nat1) (spec (repr (tf13 (clist2) (clist2)))) = targetNew (clist2)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction clist2(rank:7.)
=================================================
Progress: 10


1st goal of : forall (clist1:clist) (clist2:clist), if lq (lmax (clist1)) (lmin (clist2)) then if ispart (clist1) then ispart (clist2) else false else false = true -> spec (tf1 (repr (tf13 (clist2) (clist2))) (repr (clist1))) = targetNew (clist2)
clist1 : clist
nat1 : nat
Base1 : clist1 = Single (nat1)
---------------------------------------
forall (clist2:clist), if lq (nat1) (lmin (clist2)) then if ispart (Single (nat1)) then ispart (clist2) else false else false = true -> max (nat1) (spec (repr (tf13 (clist2) (clist2)))) = targetNew (clist2)

1 goal(s) more...

1 conjecture(s) more...
>>> induction clist2(rank : 7.)


1st goal of : forall (clist1:clist) (clist2:clist), if lq (lmax (clist1)) (lmin (clist2)) then if ispart (clist1) then ispart (clist2) else false else false = true -> spec (tf1 (repr (tf13 (clist2) (clist2))) (repr (clist1))) = targetNew (clist2)
clist1 : clist
nat1 : nat
Base1 : clist1 = Single (nat1)
clist2 : clist
nat2 : nat
Base2 : clist2 = Single (nat2)
---------------------------------------
if lq (nat1) (lmin (Single (nat2))) then if ispart (Single (nat1)) then ispart (Single (nat2)) else false else false = true -> max (nat1) (spec (repr (tf13 (Single (nat2)) (Single (nat2))))) = targetNew (Single (nat2))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 11


1st goal of : forall (clist1:clist) (clist2:clist), if lq (lmax (clist1)) (lmin (clist2)) then if ispart (clist1) then ispart (clist2) else false else false = true -> spec (tf1 (repr (tf13 (clist2) (clist2))) (repr (clist1))) = targetNew (clist2)
clist1 : clist
nat1 : nat
Base1 : clist1 = Single (nat1)
clist2 : clist
nat2 : nat
Base2 : clist2 = Single (nat2)
---------------------------------------
if lq (nat1) (lmin (Single (nat2))) then if ispart (Single (nat1)) then ispart (Single (nat2)) else false else false = true -> max (nat1) (spec (repr (tf13 (Single (nat2)) (Single (nat2))))) = targetNew (Single (nat2))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (clist1:clist) (clist2:clist), if lq (lmax (clist1)) (lmin (clist2)) then if ispart (clist1) then ispart (clist2) else false else false = true -> spec (tf1 (repr (tf13 (clist2) (clist2))) (repr (clist1))) = targetNew (clist2)
clist1 : clist
nat1 : nat
Base1 : clist1 = Single (nat1)
clist2 : clist
nat2 : nat
Base2 : clist2 = Single (nat2)
---------------------------------------
if lq (nat1) (nat2) then if ispart (Single (nat1)) then ispart (Single (nat2)) else false else false = true -> max (nat1) (nat2) = nat2

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7.)
=================================================
Progress: 12


1st goal of : forall (clist1:clist) (clist2:clist), if lq (lmax (clist1)) (lmin (clist2)) then if ispart (clist1) then ispart (clist2) else false else false = true -> spec (tf1 (repr (tf13 (clist2) (clist2))) (repr (clist1))) = targetNew (clist2)
clist1 : clist
nat1 : nat
Base1 : clist1 = Single (nat1)
clist2 : clist
nat2 : nat
Base2 : clist2 = Single (nat2)
---------------------------------------
if lq (nat1) (nat2) then if ispart (Single (nat1)) then ispart (Single (nat2)) else false else false = true -> max (nat1) (nat2) = nat2

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 7.)


1st goal of : forall (clist1:clist) (clist2:clist), if lq (lmax (clist1)) (lmin (clist2)) then if ispart (clist1) then ispart (clist2) else false else false = true -> spec (tf1 (repr (tf13 (clist2) (clist2))) (repr (clist1))) = targetNew (clist2)
clist1 : clist
nat1 : nat
Base1 : clist1 = Single (nat1)
clist2 : clist
nat2 : nat
Base2 : clist2 = Single (nat2)
Cond1 : if lq (nat1) (nat2) then if ispart (Single (nat1)) then ispart (Single (nat2)) else false else false = true
---------------------------------------
max (nat1) (nat2) = nat2

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
validate generalize_common_subterm_goal
Prop: max (ZERO) (ZERO) = ZERO
Prop: max (ZERO) (ZERO) = ZERO
Prop: max (ZERO) (ZERO) = ZERO
Lemma List
forall (nat1:nat) (nat2:nat), if lq (nat1) (nat2) then if ispart (Single (nat1)) then ispart (Single (nat2)) else false else false = true -> max (nat1) (nat2) = nat2
End of Lemma List


1st goal of : forall (clist1:clist) (clist2:clist), if lq (lmax (clist1)) (lmin (clist2)) then if ispart (clist1) then ispart (clist2) else false else false = true -> spec (tf1 (repr (tf13 (clist2) (clist2))) (repr (clist1))) = targetNew (clist2)
clist1 : clist
nat1 : nat
Base1 : clist1 = Single (nat1)
clist2 : clist
nat2 : nat
Base2 : clist2 = Single (nat2)
Cond1 : if lq (nat1) (nat2) then if ispart (Single (nat1)) then ispart (Single (nat2)) else false else false = true
---------------------------------------
max (nat1) (nat2) = nat2

2 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 13


1st goal of : forall (clist1:clist) (clist2:clist), if lq (lmax (clist1)) (lmin (clist2)) then if ispart (clist1) then ispart (clist2) else false else false = true -> spec (tf1 (repr (tf13 (clist2) (clist2))) (repr (clist1))) = targetNew (clist2)
clist1 : clist
nat1 : nat
Base1 : clist1 = Single (nat1)
clist2 : clist
nat2 : nat
Base2 : clist2 = Single (nat2)
Cond1 : if lq (nat1) (nat2) then if ispart (Single (nat1)) then ispart (Single (nat2)) else false else false = true
---------------------------------------
max (nat1) (nat2) = nat2

2 goal(s) more...

1 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat), if lq (nat1) (nat2) then if ispart (Single (nat1)) then ispart (Single (nat2)) else false else false = true -> max (nat1) (nat2) = nat2(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat), if lq (nat1) (nat2) then if ispart (Single (nat1)) then ispart (Single (nat2)) else false else false = true -> max (nat1) (nat2) = nat2

---------------------------------------
forall (nat1:nat) (nat2:nat), if lq (nat1) (nat2) then if ispart (Single (nat1)) then ispart (Single (nat2)) else false else false = true -> max (nat1) (nat2) = nat2

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat1(rank:7.)
=================================================
Progress: 14


1st goal of : forall (nat1:nat) (nat2:nat), if lq (nat1) (nat2) then if ispart (Single (nat1)) then ispart (Single (nat2)) else false else false = true -> max (nat1) (nat2) = nat2

---------------------------------------
forall (nat1:nat) (nat2:nat), if lq (nat1) (nat2) then if ispart (Single (nat1)) then ispart (Single (nat2)) else false else false = true -> max (nat1) (nat2) = nat2

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat1(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat), if lq (nat1) (nat2) then if ispart (Single (nat1)) then ispart (Single (nat2)) else false else false = true -> max (nat1) (nat2) = nat2
nat1 : nat
---------------------------------------
forall (nat2:nat), if lq (nat1) (nat2) then if ispart (Single (nat1)) then ispart (Single (nat2)) else false else false = true -> max (nat1) (nat2) = nat2

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat2(rank:7.)
=================================================
Progress: 15


1st goal of : forall (nat1:nat) (nat2:nat), if lq (nat1) (nat2) then if ispart (Single (nat1)) then ispart (Single (nat2)) else false else false = true -> max (nat1) (nat2) = nat2
nat1 : nat
---------------------------------------
forall (nat2:nat), if lq (nat1) (nat2) then if ispart (Single (nat1)) then ispart (Single (nat2)) else false else false = true -> max (nat1) (nat2) = nat2

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat2(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat), if lq (nat1) (nat2) then if ispart (Single (nat1)) then ispart (Single (nat2)) else false else false = true -> max (nat1) (nat2) = nat2
nat1 : nat
nat2 : nat
---------------------------------------
if lq (nat1) (nat2) then if ispart (Single (nat1)) then ispart (Single (nat2)) else false else false = true -> max (nat1) (nat2) = nat2

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7.)
=================================================
Progress: 16


1st goal of : forall (nat1:nat) (nat2:nat), if lq (nat1) (nat2) then if ispart (Single (nat1)) then ispart (Single (nat2)) else false else false = true -> max (nat1) (nat2) = nat2
nat1 : nat
nat2 : nat
---------------------------------------
if lq (nat1) (nat2) then if ispart (Single (nat1)) then ispart (Single (nat2)) else false else false = true -> max (nat1) (nat2) = nat2

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat), if lq (nat1) (nat2) then if ispart (Single (nat1)) then ispart (Single (nat2)) else false else false = true -> max (nat1) (nat2) = nat2
nat1 : nat
nat2 : nat
Cond1 : if lq (nat1) (nat2) then if ispart (Single (nat1)) then ispart (Single (nat2)) else false else false = true
---------------------------------------
max (nat1) (nat2) = nat2

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: max (ZERO) (SUCC (ZERO)) = SUCC (ZERO)
Prop: max (ZERO) (ZERO) = ZERO
Prop: max (ZERO) (SUCC (SUCC (SUCC (ZERO)))) = SUCC (SUCC (SUCC (ZERO)))
asdf
Fatal error: exception Failure("worklist is empty")
Raised at Stdlib.failwith in file "stdlib.ml", line 29, characters 17-33
Called from Dilemma__Engine.proof_auto in file "lib/engine.ml", line 284, characters 8-69
Called from Dune__exe__Main.main in file "bin/main.ml", line 24, characters 12-79
