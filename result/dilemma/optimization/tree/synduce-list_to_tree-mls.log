Enter the definition file path (1/2) : 
> Enter the definition file path (2/2) : 
> Choose the proof type :
1) Interactive Mode 	 2) Auto Mode
Enter the goal : =================================================
Progress: 1


No conjecture
>>> assert forall (tr:tree), main (tr) = mainNew (tr)(rank : 0.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)

---------------------------------------
forall (tree1:tree), main (tree1) = mainNew (tree1)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:3.)
=================================================
Progress: 2


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)

---------------------------------------
forall (tree1:tree), main (tree1) = mainNew (tree1)

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 3.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)

---------------------------------------
forall (tree1:tree), spec (repr (target (tree1))) = Tuple2 (match (targetNew (tree1)) with
| Tuple2 a _ -> a) (match (targetNew (tree1)) with
| Tuple2 _ b -> b)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
induction tree1(rank:4.)
=================================================
Progress: 3


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)

---------------------------------------
forall (tree1:tree), spec (repr (target (tree1))) = Tuple2 (match (targetNew (tree1)) with
| Tuple2 a _ -> a) (match (targetNew (tree1)) with
| Tuple2 _ b -> b)

0 goal(s) more...

0 conjecture(s) more...
>>> induction tree1(rank : 4.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
Base1 : tree1 = Empty
---------------------------------------
spec (repr (target (Empty))) = Tuple2 (match (targetNew (Empty)) with
| Tuple2 a _ -> a) (match (targetNew (Empty)) with
| Tuple2 _ b -> b)

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:3.)
=================================================
Progress: 4


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
Base1 : tree1 = Empty
---------------------------------------
spec (repr (target (Empty))) = Tuple2 (match (targetNew (Empty)) with
| Tuple2 a _ -> a) (match (targetNew (Empty)) with
| Tuple2 _ b -> b)

1 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 3.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (repr (target (tree2))) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (repr (target (tree3))) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
---------------------------------------
spec (repr (target (Node (nat1) (tree2) (tree3)))) = Tuple2 (match (targetNew (Node (nat1) (tree2) (tree3))) with
| Tuple2 a _ -> a) (match (targetNew (Node (nat1) (tree2) (tree3))) with
| Tuple2 _ b -> b)

0 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:3.)
=================================================
Progress: 5


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (repr (target (tree2))) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (repr (target (tree3))) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
---------------------------------------
spec (repr (target (Node (nat1) (tree2) (tree3)))) = Tuple2 (match (targetNew (Node (nat1) (tree2) (tree3))) with
| Tuple2 a _ -> a) (match (targetNew (Node (nat1) (tree2) (tree3))) with
| Tuple2 _ b -> b)

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 3.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (repr (target (tree2))) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (repr (target (tree3))) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
---------------------------------------
Tuple2 (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) (if lq (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 _ b -> b) (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) then plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a) else match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 _ b -> b) = Tuple2 (plus (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (nat1)) (if lq (if lq (plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (match (targetNew (tree2)) with
| Tuple2 _ b -> b) then match (targetNew (tree2)) with
| Tuple2 _ b -> b else plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (if lq (plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1)) (match (targetNew (tree2)) with
| Tuple2 a _ -> a) then match (targetNew (tree2)) with
| Tuple2 a _ -> a else plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1))) then plus (fst3 (targetNew (tree3))) (max (plus (fst3 (targetNew (tree2))) (nat1)) (fst3 (targetNew (tree2)))) else max (plus (snd3 (targetNew (tree3))) (fst3 (targetNew (tree2)))) (snd3 (targetNew (tree2))))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (if lq (plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (match (targetNew (tree2)) with
| Tuple2 _ b -> b) then match (targetNew (tree2)) with
| Tuple2 _ b -> b else plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (if lq (plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1)) (match (targetNew (tree2)) with
| Tuple2 a _ -> a) then match (targetNew (tree2)) with
| Tuple2 a _ -> a else plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1)))(rank:4.)
case lq (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 _ b -> b) (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a))(rank:4.)
=================================================
Progress: 6


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (repr (target (tree2))) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (repr (target (tree3))) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
---------------------------------------
Tuple2 (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) (if lq (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 _ b -> b) (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) then plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a) else match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 _ b -> b) = Tuple2 (plus (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (nat1)) (if lq (if lq (plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (match (targetNew (tree2)) with
| Tuple2 _ b -> b) then match (targetNew (tree2)) with
| Tuple2 _ b -> b else plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (if lq (plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1)) (match (targetNew (tree2)) with
| Tuple2 a _ -> a) then match (targetNew (tree2)) with
| Tuple2 a _ -> a else plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1))) then plus (fst3 (targetNew (tree3))) (max (plus (fst3 (targetNew (tree2))) (nat1)) (fst3 (targetNew (tree2)))) else max (plus (snd3 (targetNew (tree3))) (fst3 (targetNew (tree2)))) (snd3 (targetNew (tree2))))

0 goal(s) more...

0 conjecture(s) more...
>>> case lq (if lq (plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (match (targetNew (tree2)) with
| Tuple2 _ b -> b) then match (targetNew (tree2)) with
| Tuple2 _ b -> b else plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (if lq (plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1)) (match (targetNew (tree2)) with
| Tuple2 a _ -> a) then match (targetNew (tree2)) with
| Tuple2 a _ -> a else plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1)))(rank : 4.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (repr (target (tree2))) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (repr (target (tree3))) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (if lq (plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (match (targetNew (tree2)) with
| Tuple2 _ b -> b) then match (targetNew (tree2)) with
| Tuple2 _ b -> b else plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (if lq (plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1)) (match (targetNew (tree2)) with
| Tuple2 a _ -> a) then match (targetNew (tree2)) with
| Tuple2 a _ -> a else plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1))) = true
---------------------------------------
Tuple2 (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) (if lq (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 _ b -> b) (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) then plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a) else match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 _ b -> b) = Tuple2 (plus (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (nat1)) (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (if lq (plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1)) (match (targetNew (tree2)) with
| Tuple2 a _ -> a) then match (targetNew (tree2)) with
| Tuple2 a _ -> a else plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1)))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 _ b -> b) (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a))(rank:5.)
case lq (plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1)) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)(rank:5.)
=================================================
Progress: 7


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (repr (target (tree2))) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (repr (target (tree3))) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
---------------------------------------
Tuple2 (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) (if lq (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 _ b -> b) (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) then plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a) else match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 _ b -> b) = Tuple2 (plus (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (nat1)) (if lq (if lq (plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (match (targetNew (tree2)) with
| Tuple2 _ b -> b) then match (targetNew (tree2)) with
| Tuple2 _ b -> b else plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (if lq (plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1)) (match (targetNew (tree2)) with
| Tuple2 a _ -> a) then match (targetNew (tree2)) with
| Tuple2 a _ -> a else plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1))) then plus (fst3 (targetNew (tree3))) (max (plus (fst3 (targetNew (tree2))) (nat1)) (fst3 (targetNew (tree2)))) else max (plus (snd3 (targetNew (tree3))) (fst3 (targetNew (tree2)))) (snd3 (targetNew (tree2))))

0 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 _ b -> b) (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a))(rank : 4.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (repr (target (tree2))) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (repr (target (tree3))) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 _ b -> b) (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) = true
---------------------------------------
Tuple2 (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) = Tuple2 (plus (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (nat1)) (if lq (if lq (plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (match (targetNew (tree2)) with
| Tuple2 _ b -> b) then match (targetNew (tree2)) with
| Tuple2 _ b -> b else plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (if lq (plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1)) (match (targetNew (tree2)) with
| Tuple2 a _ -> a) then match (targetNew (tree2)) with
| Tuple2 a _ -> a else plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1))) then plus (fst3 (targetNew (tree3))) (max (plus (fst3 (targetNew (tree2))) (nat1)) (fst3 (targetNew (tree2)))) else max (plus (snd3 (targetNew (tree3))) (fst3 (targetNew (tree2)))) (snd3 (targetNew (tree2))))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case lq (if lq (plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (match (targetNew (tree2)) with
| Tuple2 _ b -> b) then match (targetNew (tree2)) with
| Tuple2 _ b -> b else plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (if lq (plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1)) (match (targetNew (tree2)) with
| Tuple2 a _ -> a) then match (targetNew (tree2)) with
| Tuple2 a _ -> a else plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1)))(rank:5.)
=================================================
Progress: 8


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (repr (target (tree2))) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (repr (target (tree3))) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (if lq (plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (match (targetNew (tree2)) with
| Tuple2 _ b -> b) then match (targetNew (tree2)) with
| Tuple2 _ b -> b else plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (if lq (plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1)) (match (targetNew (tree2)) with
| Tuple2 a _ -> a) then match (targetNew (tree2)) with
| Tuple2 a _ -> a else plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1))) = true
---------------------------------------
Tuple2 (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) (if lq (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 _ b -> b) (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) then plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a) else match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 _ b -> b) = Tuple2 (plus (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (nat1)) (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (if lq (plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1)) (match (targetNew (tree2)) with
| Tuple2 a _ -> a) then match (targetNew (tree2)) with
| Tuple2 a _ -> a else plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1)))

1 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 _ b -> b) (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a))(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (repr (target (tree2))) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (repr (target (tree3))) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (if lq (plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (match (targetNew (tree2)) with
| Tuple2 _ b -> b) then match (targetNew (tree2)) with
| Tuple2 _ b -> b else plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (if lq (plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1)) (match (targetNew (tree2)) with
| Tuple2 a _ -> a) then match (targetNew (tree2)) with
| Tuple2 a _ -> a else plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1))) = true
Case2 : lq (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 _ b -> b) (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) = true
---------------------------------------
Tuple2 (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) = Tuple2 (plus (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (nat1)) (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (if lq (plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1)) (match (targetNew (tree2)) with
| Tuple2 a _ -> a) then match (targetNew (tree2)) with
| Tuple2 a _ -> a else plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1)))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case lq (plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1)) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)(rank:6.)
=================================================
Progress: 9


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (repr (target (tree2))) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (repr (target (tree3))) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (if lq (plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (match (targetNew (tree2)) with
| Tuple2 _ b -> b) then match (targetNew (tree2)) with
| Tuple2 _ b -> b else plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (if lq (plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1)) (match (targetNew (tree2)) with
| Tuple2 a _ -> a) then match (targetNew (tree2)) with
| Tuple2 a _ -> a else plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1))) = true
---------------------------------------
Tuple2 (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) (if lq (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 _ b -> b) (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) then plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a) else match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 _ b -> b) = Tuple2 (plus (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (nat1)) (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (if lq (plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1)) (match (targetNew (tree2)) with
| Tuple2 a _ -> a) then match (targetNew (tree2)) with
| Tuple2 a _ -> a else plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1)))

1 goal(s) more...

0 conjecture(s) more...
>>> case lq (plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1)) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (repr (target (tree2))) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (repr (target (tree3))) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (if lq (plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (match (targetNew (tree2)) with
| Tuple2 _ b -> b) then match (targetNew (tree2)) with
| Tuple2 _ b -> b else plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) = true
Case2 : lq (plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1)) (match (targetNew (tree2)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) (if lq (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 _ b -> b) (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) then plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a) else match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 _ b -> b) = Tuple2 (plus (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (nat1)) (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 a _ -> a))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case lq (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 _ b -> b) (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a))(rank:6.)
=================================================
Progress: 10


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (repr (target (tree2))) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (repr (target (tree3))) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 _ b -> b) (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) = true
---------------------------------------
Tuple2 (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) = Tuple2 (plus (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (nat1)) (if lq (if lq (plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (match (targetNew (tree2)) with
| Tuple2 _ b -> b) then match (targetNew (tree2)) with
| Tuple2 _ b -> b else plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (if lq (plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1)) (match (targetNew (tree2)) with
| Tuple2 a _ -> a) then match (targetNew (tree2)) with
| Tuple2 a _ -> a else plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1))) then plus (fst3 (targetNew (tree3))) (max (plus (fst3 (targetNew (tree2))) (nat1)) (fst3 (targetNew (tree2)))) else max (plus (snd3 (targetNew (tree3))) (fst3 (targetNew (tree2)))) (snd3 (targetNew (tree2))))

1 goal(s) more...

0 conjecture(s) more...
>>> case lq (if lq (plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (match (targetNew (tree2)) with
| Tuple2 _ b -> b) then match (targetNew (tree2)) with
| Tuple2 _ b -> b else plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (if lq (plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1)) (match (targetNew (tree2)) with
| Tuple2 a _ -> a) then match (targetNew (tree2)) with
| Tuple2 a _ -> a else plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1)))(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (repr (target (tree2))) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (repr (target (tree3))) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 _ b -> b) (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) = true
Case2 : lq (if lq (plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (match (targetNew (tree2)) with
| Tuple2 _ b -> b) then match (targetNew (tree2)) with
| Tuple2 _ b -> b else plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (if lq (plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1)) (match (targetNew (tree2)) with
| Tuple2 a _ -> a) then match (targetNew (tree2)) with
| Tuple2 a _ -> a else plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1))) = true
---------------------------------------
Tuple2 (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) = Tuple2 (plus (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (nat1)) (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (if lq (plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1)) (match (targetNew (tree2)) with
| Tuple2 a _ -> a) then match (targetNew (tree2)) with
| Tuple2 a _ -> a else plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1)))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case lq (plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1)) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)(rank:6.)
=================================================
Progress: 11


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (repr (target (tree2))) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (repr (target (tree3))) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (if lq (plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (match (targetNew (tree2)) with
| Tuple2 _ b -> b) then match (targetNew (tree2)) with
| Tuple2 _ b -> b else plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (if lq (plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1)) (match (targetNew (tree2)) with
| Tuple2 a _ -> a) then match (targetNew (tree2)) with
| Tuple2 a _ -> a else plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1))) = true
Case2 : lq (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 _ b -> b) (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) = true
---------------------------------------
Tuple2 (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) = Tuple2 (plus (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (nat1)) (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (if lq (plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1)) (match (targetNew (tree2)) with
| Tuple2 a _ -> a) then match (targetNew (tree2)) with
| Tuple2 a _ -> a else plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1)))

2 goal(s) more...

0 conjecture(s) more...
>>> case lq (plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1)) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (repr (target (tree2))) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (repr (target (tree3))) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (if lq (plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (match (targetNew (tree2)) with
| Tuple2 _ b -> b) then match (targetNew (tree2)) with
| Tuple2 _ b -> b else plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) = true
Case2 : lq (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 _ b -> b) (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) = true
Case3 : lq (plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1)) (match (targetNew (tree2)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) = Tuple2 (plus (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (nat1)) (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 a _ -> a))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
case spec (tf1 (repr (target (tree2))) (target (tree3)))(rank:6.)
case targetNew (tree2)(rank:6.)
case targetNew (tree3)(rank:6.)
=================================================
Progress: 12


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (repr (target (tree2))) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (repr (target (tree3))) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (if lq (plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (match (targetNew (tree2)) with
| Tuple2 _ b -> b) then match (targetNew (tree2)) with
| Tuple2 _ b -> b else plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) = true
Case2 : lq (plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1)) (match (targetNew (tree2)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) (if lq (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 _ b -> b) (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) then plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a) else match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 _ b -> b) = Tuple2 (plus (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (nat1)) (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 a _ -> a))

2 goal(s) more...

0 conjecture(s) more...
>>> case lq (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 _ b -> b) (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a))(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (repr (target (tree2))) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (repr (target (tree3))) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (if lq (plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (match (targetNew (tree2)) with
| Tuple2 _ b -> b) then match (targetNew (tree2)) with
| Tuple2 _ b -> b else plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) = true
Case2 : lq (plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1)) (match (targetNew (tree2)) with
| Tuple2 a _ -> a) = true
Case3 : lq (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 _ b -> b) (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) = true
---------------------------------------
Tuple2 (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) = Tuple2 (plus (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (nat1)) (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 a _ -> a))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
case spec (tf1 (repr (target (tree2))) (target (tree3)))(rank:6.)
case targetNew (tree2)(rank:6.)
case targetNew (tree3)(rank:6.)
=================================================
Progress: 13


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (repr (target (tree2))) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (repr (target (tree3))) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 _ b -> b) (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) = true
Case2 : lq (if lq (plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (match (targetNew (tree2)) with
| Tuple2 _ b -> b) then match (targetNew (tree2)) with
| Tuple2 _ b -> b else plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (if lq (plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1)) (match (targetNew (tree2)) with
| Tuple2 a _ -> a) then match (targetNew (tree2)) with
| Tuple2 a _ -> a else plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1))) = true
---------------------------------------
Tuple2 (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) = Tuple2 (plus (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (nat1)) (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (if lq (plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1)) (match (targetNew (tree2)) with
| Tuple2 a _ -> a) then match (targetNew (tree2)) with
| Tuple2 a _ -> a else plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1)))

2 goal(s) more...

0 conjecture(s) more...
>>> case lq (plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1)) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (repr (target (tree2))) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (repr (target (tree3))) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 _ b -> b) (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) = true
Case2 : lq (if lq (plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (match (targetNew (tree2)) with
| Tuple2 _ b -> b) then match (targetNew (tree2)) with
| Tuple2 _ b -> b else plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) = true
Case3 : lq (plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1)) (match (targetNew (tree2)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) = Tuple2 (plus (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (nat1)) (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 a _ -> a))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
case spec (tf1 (repr (target (tree2))) (target (tree3)))(rank:6.)
case targetNew (tree2)(rank:6.)
case targetNew (tree3)(rank:6.)
=================================================
Progress: 14


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (repr (target (tree2))) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (repr (target (tree3))) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (if lq (plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (match (targetNew (tree2)) with
| Tuple2 _ b -> b) then match (targetNew (tree2)) with
| Tuple2 _ b -> b else plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) = true
Case2 : lq (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 _ b -> b) (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) = true
Case3 : lq (plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1)) (match (targetNew (tree2)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) = Tuple2 (plus (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (nat1)) (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 a _ -> a))

3 goal(s) more...

0 conjecture(s) more...
>>> case spec (tf1 (repr (target (tree2))) (target (tree3)))(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (repr (target (tree2))) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (repr (target (tree3))) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (if lq (plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (match (targetNew (tree2)) with
| Tuple2 _ b -> b) then match (targetNew (tree2)) with
| Tuple2 _ b -> b else plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) = true
Case2 : lq (nat3) (plus (nat1) (nat2)) = true
Case3 : lq (plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1)) (match (targetNew (tree2)) with
| Tuple2 a _ -> a) = true
Case4 : spec (tf1 (repr (target (tree2))) (target (tree3))) = Tuple2 (nat2) (nat3)
---------------------------------------
Tuple2 (plus (nat1) (nat2)) (plus (nat1) (nat2)) = Tuple2 (plus (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (nat1)) (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 a _ -> a))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case targetNew (tree2)(rank:6.)
case targetNew (tree3)(rank:6.)
=================================================
Progress: 15


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (repr (target (tree2))) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (repr (target (tree3))) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (if lq (plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (match (targetNew (tree2)) with
| Tuple2 _ b -> b) then match (targetNew (tree2)) with
| Tuple2 _ b -> b else plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) = true
Case2 : lq (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 _ b -> b) (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) = true
Case3 : lq (plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1)) (match (targetNew (tree2)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) = Tuple2 (plus (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (nat1)) (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 a _ -> a))

3 goal(s) more...

0 conjecture(s) more...
>>> case targetNew (tree2)(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (repr (target (tree2))) = Tuple2 (nat2) (nat3)
IH2 : spec (repr (target (tree3))) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (if lq (plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (nat2)) (nat3) then match (Tuple2 (nat2) (nat3)) with
| Tuple2 _ b -> b else plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (match (Tuple2 (nat2) (nat3)) with
| Tuple2 a _ -> a)) (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (nat2)) = true
Case2 : lq (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 _ b -> b) (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) = true
Case3 : lq (plus (nat2) (nat1)) (nat2) = true
Case4 : targetNew (tree2) = Tuple2 (nat2) (nat3)
---------------------------------------
Tuple2 (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) = Tuple2 (plus (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (nat2)) (nat1)) (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (nat2))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case spec (tf1 (repr (target (tree2))) (target (tree3)))(rank:6.)
case targetNew (tree3)(rank:6.)
=================================================
Progress: 16


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (repr (target (tree2))) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (repr (target (tree3))) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (if lq (plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (match (targetNew (tree2)) with
| Tuple2 _ b -> b) then match (targetNew (tree2)) with
| Tuple2 _ b -> b else plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) = true
Case2 : lq (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 _ b -> b) (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) = true
Case3 : lq (plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1)) (match (targetNew (tree2)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) = Tuple2 (plus (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (nat1)) (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 a _ -> a))

3 goal(s) more...

0 conjecture(s) more...
>>> case targetNew (tree3)(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (repr (target (tree2))) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (repr (target (tree3))) = Tuple2 (nat2) (nat3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (if lq (plus (nat3) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (match (targetNew (tree2)) with
| Tuple2 _ b -> b) then match (targetNew (tree2)) with
| Tuple2 _ b -> b else plus (match (Tuple2 (nat2) (nat3)) with
| Tuple2 _ b -> b) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (plus (nat2) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) = true
Case2 : lq (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 _ b -> b) (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) = true
Case3 : lq (plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1)) (match (targetNew (tree2)) with
| Tuple2 a _ -> a) = true
Case4 : targetNew (tree3) = Tuple2 (nat2) (nat3)
---------------------------------------
Tuple2 (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) = Tuple2 (plus (plus (nat2) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (nat1)) (plus (nat2) (match (targetNew (tree2)) with
| Tuple2 a _ -> a))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case spec (tf1 (repr (target (tree2))) (target (tree3)))(rank:6.)
case targetNew (tree2)(rank:6.)
=================================================
Progress: 17


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (repr (target (tree2))) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (repr (target (tree3))) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (if lq (plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (match (targetNew (tree2)) with
| Tuple2 _ b -> b) then match (targetNew (tree2)) with
| Tuple2 _ b -> b else plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) = true
Case2 : lq (plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1)) (match (targetNew (tree2)) with
| Tuple2 a _ -> a) = true
Case3 : lq (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 _ b -> b) (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) = true
---------------------------------------
Tuple2 (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) = Tuple2 (plus (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (nat1)) (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 a _ -> a))

3 goal(s) more...

0 conjecture(s) more...
>>> case spec (tf1 (repr (target (tree2))) (target (tree3)))(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (repr (target (tree2))) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (repr (target (tree3))) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (if lq (plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (match (targetNew (tree2)) with
| Tuple2 _ b -> b) then match (targetNew (tree2)) with
| Tuple2 _ b -> b else plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) = true
Case2 : lq (plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1)) (match (targetNew (tree2)) with
| Tuple2 a _ -> a) = true
Case3 : lq (nat3) (plus (nat1) (nat2)) = true
Case4 : spec (tf1 (repr (target (tree2))) (target (tree3))) = Tuple2 (nat2) (nat3)
---------------------------------------
Tuple2 (plus (nat1) (nat2)) (plus (nat1) (nat2)) = Tuple2 (plus (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (nat1)) (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 a _ -> a))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case targetNew (tree2)(rank:6.)
case targetNew (tree3)(rank:6.)
=================================================
Progress: 18


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (repr (target (tree2))) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (repr (target (tree3))) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (if lq (plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (match (targetNew (tree2)) with
| Tuple2 _ b -> b) then match (targetNew (tree2)) with
| Tuple2 _ b -> b else plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) = true
Case2 : lq (plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1)) (match (targetNew (tree2)) with
| Tuple2 a _ -> a) = true
Case3 : lq (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 _ b -> b) (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) = true
---------------------------------------
Tuple2 (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) = Tuple2 (plus (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (nat1)) (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 a _ -> a))

3 goal(s) more...

0 conjecture(s) more...
>>> case targetNew (tree2)(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (repr (target (tree2))) = Tuple2 (nat2) (nat3)
IH2 : spec (repr (target (tree3))) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (if lq (plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (nat2)) (nat3) then match (Tuple2 (nat2) (nat3)) with
| Tuple2 _ b -> b else plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (match (Tuple2 (nat2) (nat3)) with
| Tuple2 a _ -> a)) (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (nat2)) = true
Case2 : lq (plus (nat2) (nat1)) (nat2) = true
Case3 : lq (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 _ b -> b) (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) = true
Case4 : targetNew (tree2) = Tuple2 (nat2) (nat3)
---------------------------------------
Tuple2 (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) = Tuple2 (plus (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (nat2)) (nat1)) (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (nat2))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case spec (tf1 (repr (target (tree2))) (target (tree3)))(rank:6.)
case targetNew (tree3)(rank:6.)
=================================================
Progress: 19


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (repr (target (tree2))) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (repr (target (tree3))) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (if lq (plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (match (targetNew (tree2)) with
| Tuple2 _ b -> b) then match (targetNew (tree2)) with
| Tuple2 _ b -> b else plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) = true
Case2 : lq (plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1)) (match (targetNew (tree2)) with
| Tuple2 a _ -> a) = true
Case3 : lq (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 _ b -> b) (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) = true
---------------------------------------
Tuple2 (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) = Tuple2 (plus (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (nat1)) (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 a _ -> a))

3 goal(s) more...

0 conjecture(s) more...
>>> case targetNew (tree3)(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (repr (target (tree2))) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (repr (target (tree3))) = Tuple2 (nat2) (nat3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (if lq (plus (nat3) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (match (targetNew (tree2)) with
| Tuple2 _ b -> b) then match (targetNew (tree2)) with
| Tuple2 _ b -> b else plus (match (Tuple2 (nat2) (nat3)) with
| Tuple2 _ b -> b) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (plus (nat2) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) = true
Case2 : lq (plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1)) (match (targetNew (tree2)) with
| Tuple2 a _ -> a) = true
Case3 : lq (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 _ b -> b) (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) = true
Case4 : targetNew (tree3) = Tuple2 (nat2) (nat3)
---------------------------------------
Tuple2 (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) = Tuple2 (plus (plus (nat2) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (nat1)) (plus (nat2) (match (targetNew (tree2)) with
| Tuple2 a _ -> a))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case spec (tf1 (repr (target (tree2))) (target (tree3)))(rank:6.)
case targetNew (tree2)(rank:6.)
=================================================
Progress: 20


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (repr (target (tree2))) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (repr (target (tree3))) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 _ b -> b) (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) = true
Case2 : lq (if lq (plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (match (targetNew (tree2)) with
| Tuple2 _ b -> b) then match (targetNew (tree2)) with
| Tuple2 _ b -> b else plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) = true
Case3 : lq (plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1)) (match (targetNew (tree2)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) = Tuple2 (plus (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (nat1)) (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 a _ -> a))

3 goal(s) more...

0 conjecture(s) more...
>>> case spec (tf1 (repr (target (tree2))) (target (tree3)))(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (repr (target (tree2))) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (repr (target (tree3))) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (nat3) (plus (nat1) (nat2)) = true
Case2 : lq (if lq (plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (match (targetNew (tree2)) with
| Tuple2 _ b -> b) then match (targetNew (tree2)) with
| Tuple2 _ b -> b else plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) = true
Case3 : lq (plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1)) (match (targetNew (tree2)) with
| Tuple2 a _ -> a) = true
Case4 : spec (tf1 (repr (target (tree2))) (target (tree3))) = Tuple2 (nat2) (nat3)
---------------------------------------
Tuple2 (plus (nat1) (nat2)) (plus (nat1) (nat2)) = Tuple2 (plus (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (nat1)) (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 a _ -> a))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case targetNew (tree2)(rank:6.)
case targetNew (tree3)(rank:6.)
=================================================
Progress: 21


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (repr (target (tree2))) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (repr (target (tree3))) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 _ b -> b) (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) = true
Case2 : lq (if lq (plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (match (targetNew (tree2)) with
| Tuple2 _ b -> b) then match (targetNew (tree2)) with
| Tuple2 _ b -> b else plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) = true
Case3 : lq (plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1)) (match (targetNew (tree2)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) = Tuple2 (plus (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (nat1)) (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 a _ -> a))

3 goal(s) more...

0 conjecture(s) more...
>>> case targetNew (tree2)(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (repr (target (tree2))) = Tuple2 (nat2) (nat3)
IH2 : spec (repr (target (tree3))) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 _ b -> b) (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) = true
Case2 : lq (if lq (plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (nat2)) (nat3) then match (Tuple2 (nat2) (nat3)) with
| Tuple2 _ b -> b else plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (match (Tuple2 (nat2) (nat3)) with
| Tuple2 a _ -> a)) (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (nat2)) = true
Case3 : lq (plus (nat2) (nat1)) (nat2) = true
Case4 : targetNew (tree2) = Tuple2 (nat2) (nat3)
---------------------------------------
Tuple2 (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) = Tuple2 (plus (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (nat2)) (nat1)) (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (nat2))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case spec (tf1 (repr (target (tree2))) (target (tree3)))(rank:6.)
case targetNew (tree3)(rank:6.)
=================================================
Progress: 22


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (repr (target (tree2))) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (repr (target (tree3))) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 _ b -> b) (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) = true
Case2 : lq (if lq (plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (match (targetNew (tree2)) with
| Tuple2 _ b -> b) then match (targetNew (tree2)) with
| Tuple2 _ b -> b else plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) = true
Case3 : lq (plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1)) (match (targetNew (tree2)) with
| Tuple2 a _ -> a) = true
---------------------------------------
Tuple2 (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) = Tuple2 (plus (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (nat1)) (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 a _ -> a))

3 goal(s) more...

0 conjecture(s) more...
>>> case targetNew (tree3)(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (repr (target (tree2))) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (repr (target (tree3))) = Tuple2 (nat2) (nat3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 _ b -> b) (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) = true
Case2 : lq (if lq (plus (nat3) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (match (targetNew (tree2)) with
| Tuple2 _ b -> b) then match (targetNew (tree2)) with
| Tuple2 _ b -> b else plus (match (Tuple2 (nat2) (nat3)) with
| Tuple2 _ b -> b) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (plus (nat2) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) = true
Case3 : lq (plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1)) (match (targetNew (tree2)) with
| Tuple2 a _ -> a) = true
Case4 : targetNew (tree3) = Tuple2 (nat2) (nat3)
---------------------------------------
Tuple2 (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) = Tuple2 (plus (plus (nat2) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (nat1)) (plus (nat2) (match (targetNew (tree2)) with
| Tuple2 a _ -> a))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case spec (tf1 (repr (target (tree2))) (target (tree3)))(rank:6.)
case targetNew (tree2)(rank:6.)
=================================================
Progress: 23


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (repr (target (tree2))) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (repr (target (tree3))) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (if lq (plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (match (targetNew (tree2)) with
| Tuple2 _ b -> b) then match (targetNew (tree2)) with
| Tuple2 _ b -> b else plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) = true
Case2 : lq (nat3) (plus (nat1) (nat2)) = true
Case3 : lq (plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1)) (match (targetNew (tree2)) with
| Tuple2 a _ -> a) = true
Case4 : spec (tf1 (repr (target (tree2))) (target (tree3))) = Tuple2 (nat2) (nat3)
---------------------------------------
Tuple2 (plus (nat1) (nat2)) (plus (nat1) (nat2)) = Tuple2 (plus (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (nat1)) (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 a _ -> a))

3 goal(s) more...

0 conjecture(s) more...
>>> case targetNew (tree2)(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (repr (target (tree2))) = Tuple2 (nat2) (nat3)
IH2 : spec (repr (target (tree3))) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (if lq (plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (nat2)) (nat3) then match (Tuple2 (nat2) (nat3)) with
| Tuple2 _ b -> b else plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (match (Tuple2 (nat2) (nat3)) with
| Tuple2 a _ -> a)) (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (nat2)) = true
Case2 : lq (nat3) (plus (nat1) (nat2)) = true
Case3 : lq (plus (nat2) (nat1)) (nat2) = true
Case4 : spec (tf1 (repr (target (tree2))) (target (tree3))) = Tuple2 (nat2) (nat3)
Case5 : targetNew (tree2) = Tuple2 (nat2) (nat3)
---------------------------------------
Tuple2 (plus (nat1) (nat2)) (plus (nat1) (nat2)) = Tuple2 (plus (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (nat2)) (nat1)) (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (nat2))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (if lq (plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (match (targetNew (tree2)) with
| Tuple2 _ b -> b) then match (targetNew (tree2)) with
| Tuple2 _ b -> b else plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (if lq (plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1)) (match (targetNew (tree2)) with
| Tuple2 a _ -> a) then match (targetNew (tree2)) with
| Tuple2 a _ -> a else plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1)))
case lq (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 _ b -> b) (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a))
case lq (plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1)) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)
case spec (tf1 (repr (target (tree2))) (target (tree3)))
case targetNew (tree2)
parent
plus (nat1) (nat2)
lower
plus(_, nat2)
upper
Tuple2(_, _)
remove upper
plus(nat1, nat2)
remove lower
plus(nat1, nat2)
remove upper
plus(nat1, nat2)
remove lower
plus(nat1, nat2)
remove upper
plus(nat1, nat2)
remove lower
plus(nat1, nat2)
parent
plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (nat2)
lower
plus(_, _)
upper
Tuple2(plus(plus(_, nat2), nat1), _)
remove upper
plus(_, nat2)
validate generalize_common_subterm_goal
Prop: Tuple2 (plus (SUCC (ZERO)) (ZERO)) (plus (SUCC (ZERO)) (ZERO)) = Tuple2 (plus (plus (match (targetNew (Empty)) with
| Tuple2 a _ -> a) (ZERO)) (SUCC (ZERO))) (plus (match (targetNew (Empty)) with
| Tuple2 a _ -> a) (ZERO))
Prop: Tuple2 (plus (SUCC (SUCC (ZERO))) (ZERO)) (plus (SUCC (SUCC (ZERO))) (ZERO)) = Tuple2 (plus (plus (match (targetNew (Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)) (Empty))) with
| Tuple2 a _ -> a) (ZERO)) (SUCC (SUCC (ZERO)))) (plus (match (targetNew (Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)) (Empty))) with
| Tuple2 a _ -> a) (ZERO))
Prop: Tuple2 (plus (SUCC (ZERO)) (SUCC (SUCC (SUCC (ZERO))))) (plus (SUCC (ZERO)) (SUCC (SUCC (SUCC (ZERO))))) = Tuple2 (plus (plus (match (targetNew (Empty)) with
| Tuple2 a _ -> a) (SUCC (SUCC (SUCC (ZERO))))) (SUCC (ZERO))) (plus (match (targetNew (Empty)) with
| Tuple2 a _ -> a) (SUCC (SUCC (SUCC (ZERO)))))
Lemma List
forall (nat1:nat) (nat2:nat) (tree1:tree), lq (plus (nat2) (nat1)) (nat2) = true -> Tuple2 (plus (nat1) (nat2)) (plus (nat1) (nat2)) = Tuple2 (plus (plus (match (targetNew (tree1)) with
| Tuple2 a _ -> a) (nat2)) (nat1)) (plus (match (targetNew (tree1)) with
| Tuple2 a _ -> a) (nat2))
End of Lemma List


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (repr (target (tree2))) = Tuple2 (nat2) (nat3)
IH2 : spec (repr (target (tree3))) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (if lq (plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (nat2)) (nat3) then match (Tuple2 (nat2) (nat3)) with
| Tuple2 _ b -> b else plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (match (Tuple2 (nat2) (nat3)) with
| Tuple2 a _ -> a)) (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (nat2)) = true
Case2 : lq (nat3) (plus (nat1) (nat2)) = true
Case3 : lq (plus (nat2) (nat1)) (nat2) = true
Case4 : spec (tf1 (repr (target (tree2))) (target (tree3))) = Tuple2 (nat2) (nat3)
Case5 : targetNew (tree2) = Tuple2 (nat2) (nat3)
---------------------------------------
Tuple2 (plus (nat1) (nat2)) (plus (nat1) (nat2)) = Tuple2 (plus (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (nat2)) (nat1)) (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (nat2))

3 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 24


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (repr (target (tree2))) = Tuple2 (nat2) (nat3)
IH2 : spec (repr (target (tree3))) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (if lq (plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (nat2)) (nat3) then match (Tuple2 (nat2) (nat3)) with
| Tuple2 _ b -> b else plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (match (Tuple2 (nat2) (nat3)) with
| Tuple2 a _ -> a)) (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (nat2)) = true
Case2 : lq (nat3) (plus (nat1) (nat2)) = true
Case3 : lq (plus (nat2) (nat1)) (nat2) = true
Case4 : spec (tf1 (repr (target (tree2))) (target (tree3))) = Tuple2 (nat2) (nat3)
Case5 : targetNew (tree2) = Tuple2 (nat2) (nat3)
---------------------------------------
Tuple2 (plus (nat1) (nat2)) (plus (nat1) (nat2)) = Tuple2 (plus (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (nat2)) (nat1)) (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (nat2))

3 goal(s) more...

0 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (tree1:tree), lq (plus (nat2) (nat1)) (nat2) = true -> Tuple2 (plus (nat1) (nat2)) (plus (nat1) (nat2)) = Tuple2 (plus (plus (match (targetNew (tree1)) with
| Tuple2 a _ -> a) (nat2)) (nat1)) (plus (match (targetNew (tree1)) with
| Tuple2 a _ -> a) (nat2))(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree), lq (plus (nat2) (nat1)) (nat2) = true -> Tuple2 (plus (nat1) (nat2)) (plus (nat1) (nat2)) = Tuple2 (plus (plus (match (targetNew (tree1)) with
| Tuple2 a _ -> a) (nat2)) (nat1)) (plus (match (targetNew (tree1)) with
| Tuple2 a _ -> a) (nat2))

---------------------------------------
forall (nat1:nat) (nat2:nat) (tree1:tree), lq (plus (nat2) (nat1)) (nat2) = true -> Tuple2 (plus (nat1) (nat2)) (plus (nat1) (nat2)) = Tuple2 (plus (plus (match (targetNew (tree1)) with
| Tuple2 a _ -> a) (nat2)) (nat1)) (plus (match (targetNew (tree1)) with
| Tuple2 a _ -> a) (nat2))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
intro nat1(rank:5.)
intro nat2(rank:5.)
induction nat1(rank:14.)
induction tree1(rank:14.)
=================================================
Progress: 25


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree), lq (plus (nat2) (nat1)) (nat2) = true -> Tuple2 (plus (nat1) (nat2)) (plus (nat1) (nat2)) = Tuple2 (plus (plus (match (targetNew (tree1)) with
| Tuple2 a _ -> a) (nat2)) (nat1)) (plus (match (targetNew (tree1)) with
| Tuple2 a _ -> a) (nat2))

---------------------------------------
forall (nat1:nat) (nat2:nat) (tree1:tree), lq (plus (nat2) (nat1)) (nat2) = true -> Tuple2 (plus (nat1) (nat2)) (plus (nat1) (nat2)) = Tuple2 (plus (plus (match (targetNew (tree1)) with
| Tuple2 a _ -> a) (nat2)) (nat1)) (plus (match (targetNew (tree1)) with
| Tuple2 a _ -> a) (nat2))

0 goal(s) more...

1 conjecture(s) more...
>>> intro nat1(rank : 5.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree), lq (plus (nat2) (nat1)) (nat2) = true -> Tuple2 (plus (nat1) (nat2)) (plus (nat1) (nat2)) = Tuple2 (plus (plus (match (targetNew (tree1)) with
| Tuple2 a _ -> a) (nat2)) (nat1)) (plus (match (targetNew (tree1)) with
| Tuple2 a _ -> a) (nat2))
nat1 : nat
---------------------------------------
forall (nat2:nat) (tree1:tree), lq (plus (nat2) (nat1)) (nat2) = true -> Tuple2 (plus (nat1) (nat2)) (plus (nat1) (nat2)) = Tuple2 (plus (plus (match (targetNew (tree1)) with
| Tuple2 a _ -> a) (nat2)) (nat1)) (plus (match (targetNew (tree1)) with
| Tuple2 a _ -> a) (nat2))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro nat2(rank:5.)
=================================================
Progress: 26


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree), lq (plus (nat2) (nat1)) (nat2) = true -> Tuple2 (plus (nat1) (nat2)) (plus (nat1) (nat2)) = Tuple2 (plus (plus (match (targetNew (tree1)) with
| Tuple2 a _ -> a) (nat2)) (nat1)) (plus (match (targetNew (tree1)) with
| Tuple2 a _ -> a) (nat2))

---------------------------------------
forall (nat1:nat) (nat2:nat) (tree1:tree), lq (plus (nat2) (nat1)) (nat2) = true -> Tuple2 (plus (nat1) (nat2)) (plus (nat1) (nat2)) = Tuple2 (plus (plus (match (targetNew (tree1)) with
| Tuple2 a _ -> a) (nat2)) (nat1)) (plus (match (targetNew (tree1)) with
| Tuple2 a _ -> a) (nat2))

0 goal(s) more...

1 conjecture(s) more...
>>> intro nat2(rank : 5.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree), lq (plus (nat2) (nat1)) (nat2) = true -> Tuple2 (plus (nat1) (nat2)) (plus (nat1) (nat2)) = Tuple2 (plus (plus (match (targetNew (tree1)) with
| Tuple2 a _ -> a) (nat2)) (nat1)) (plus (match (targetNew (tree1)) with
| Tuple2 a _ -> a) (nat2))
nat2 : nat
---------------------------------------
forall (nat1:nat) (tree1:tree), lq (plus (nat2) (nat1)) (nat2) = true -> Tuple2 (plus (nat1) (nat2)) (plus (nat1) (nat2)) = Tuple2 (plus (plus (match (targetNew (tree1)) with
| Tuple2 a _ -> a) (nat2)) (nat1)) (plus (match (targetNew (tree1)) with
| Tuple2 a _ -> a) (nat2))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction nat1(rank:6.)
=================================================
Progress: 27


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree), lq (plus (nat2) (nat1)) (nat2) = true -> Tuple2 (plus (nat1) (nat2)) (plus (nat1) (nat2)) = Tuple2 (plus (plus (match (targetNew (tree1)) with
| Tuple2 a _ -> a) (nat2)) (nat1)) (plus (match (targetNew (tree1)) with
| Tuple2 a _ -> a) (nat2))
nat1 : nat
---------------------------------------
forall (nat2:nat) (tree1:tree), lq (plus (nat2) (nat1)) (nat2) = true -> Tuple2 (plus (nat1) (nat2)) (plus (nat1) (nat2)) = Tuple2 (plus (plus (match (targetNew (tree1)) with
| Tuple2 a _ -> a) (nat2)) (nat1)) (plus (match (targetNew (tree1)) with
| Tuple2 a _ -> a) (nat2))

0 goal(s) more...

1 conjecture(s) more...
>>> intro nat2(rank : 5.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree), lq (plus (nat2) (nat1)) (nat2) = true -> Tuple2 (plus (nat1) (nat2)) (plus (nat1) (nat2)) = Tuple2 (plus (plus (match (targetNew (tree1)) with
| Tuple2 a _ -> a) (nat2)) (nat1)) (plus (match (targetNew (tree1)) with
| Tuple2 a _ -> a) (nat2))
nat1 : nat
nat2 : nat
---------------------------------------
forall (tree1:tree), lq (plus (nat2) (nat1)) (nat2) = true -> Tuple2 (plus (nat1) (nat2)) (plus (nat1) (nat2)) = Tuple2 (plus (plus (match (targetNew (tree1)) with
| Tuple2 a _ -> a) (nat2)) (nat1)) (plus (match (targetNew (tree1)) with
| Tuple2 a _ -> a) (nat2))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:5.)
=================================================
Progress: 28


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree), lq (plus (nat2) (nat1)) (nat2) = true -> Tuple2 (plus (nat1) (nat2)) (plus (nat1) (nat2)) = Tuple2 (plus (plus (match (targetNew (tree1)) with
| Tuple2 a _ -> a) (nat2)) (nat1)) (plus (match (targetNew (tree1)) with
| Tuple2 a _ -> a) (nat2))
nat1 : nat
nat2 : nat
---------------------------------------
forall (tree1:tree), lq (plus (nat2) (nat1)) (nat2) = true -> Tuple2 (plus (nat1) (nat2)) (plus (nat1) (nat2)) = Tuple2 (plus (plus (match (targetNew (tree1)) with
| Tuple2 a _ -> a) (nat2)) (nat1)) (plus (match (targetNew (tree1)) with
| Tuple2 a _ -> a) (nat2))

0 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 5.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree), lq (plus (nat2) (nat1)) (nat2) = true -> Tuple2 (plus (nat1) (nat2)) (plus (nat1) (nat2)) = Tuple2 (plus (plus (match (targetNew (tree1)) with
| Tuple2 a _ -> a) (nat2)) (nat1)) (plus (match (targetNew (tree1)) with
| Tuple2 a _ -> a) (nat2))
nat1 : nat
nat2 : nat
Cond1 : lq (plus (nat2) (nat1)) (nat2) = true
---------------------------------------
forall (tree1:tree), Tuple2 (plus (nat1) (nat2)) (plus (nat1) (nat2)) = Tuple2 (plus (plus (match (targetNew (tree1)) with
| Tuple2 a _ -> a) (nat2)) (nat1)) (plus (match (targetNew (tree1)) with
| Tuple2 a _ -> a) (nat2))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree1(rank:6.)
=================================================
Progress: 29


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (repr (target (tree2))) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (repr (target (tree3))) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (if lq (plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (match (targetNew (tree2)) with
| Tuple2 _ b -> b) then match (targetNew (tree2)) with
| Tuple2 _ b -> b else plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) = true
Case2 : lq (nat3) (plus (nat1) (nat2)) = true
Case3 : lq (plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1)) (match (targetNew (tree2)) with
| Tuple2 a _ -> a) = true
Case4 : spec (tf1 (repr (target (tree2))) (target (tree3))) = Tuple2 (nat2) (nat3)
---------------------------------------
Tuple2 (plus (nat1) (nat2)) (plus (nat1) (nat2)) = Tuple2 (plus (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (nat1)) (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 a _ -> a))

3 goal(s) more...

0 conjecture(s) more...
>>> case targetNew (tree3)(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (repr (target (tree2))) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (repr (target (tree3))) = Tuple2 (nat2) (nat3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (if lq (plus (nat3) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (match (targetNew (tree2)) with
| Tuple2 _ b -> b) then match (targetNew (tree2)) with
| Tuple2 _ b -> b else plus (match (Tuple2 (nat2) (nat3)) with
| Tuple2 _ b -> b) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (plus (nat2) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) = true
Case2 : lq (nat3) (plus (nat1) (nat2)) = true
Case3 : lq (plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1)) (match (targetNew (tree2)) with
| Tuple2 a _ -> a) = true
Case4 : spec (tf1 (repr (target (tree2))) (target (tree3))) = Tuple2 (nat2) (nat3)
Case5 : targetNew (tree3) = Tuple2 (nat2) (nat3)
---------------------------------------
Tuple2 (plus (nat1) (nat2)) (plus (nat1) (nat2)) = Tuple2 (plus (plus (nat2) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (nat1)) (plus (nat2) (match (targetNew (tree2)) with
| Tuple2 a _ -> a))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (if lq (plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (match (targetNew (tree2)) with
| Tuple2 _ b -> b) then match (targetNew (tree2)) with
| Tuple2 _ b -> b else plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (if lq (plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1)) (match (targetNew (tree2)) with
| Tuple2 a _ -> a) then match (targetNew (tree2)) with
| Tuple2 a _ -> a else plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1)))
case lq (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 _ b -> b) (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a))
case lq (plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1)) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)
case spec (tf1 (repr (target (tree2))) (target (tree3)))
case targetNew (tree3)
parent
plus (nat1) (nat2)
lower
plus(_, nat2)
upper
Tuple2(_, _)
remove upper
plus(nat1, nat2)
remove lower
plus(nat1, nat2)
remove upper
plus(nat1, nat2)
remove lower
plus(nat1, nat2)
remove upper
plus(nat1, nat2)
remove lower
plus(nat1, nat2)
validate generalize_common_subterm_goal
Prop: Tuple2 (plus (SUCC (SUCC (ZERO))) (ZERO)) (plus (SUCC (SUCC (ZERO))) (ZERO)) = Tuple2 (plus (plus (ZERO) (match (targetNew (Empty)) with
| Tuple2 a _ -> a)) (SUCC (SUCC (ZERO)))) (plus (ZERO) (match (targetNew (Empty)) with
| Tuple2 a _ -> a))
Prop: Tuple2 (plus (ZERO) (ZERO)) (plus (ZERO) (ZERO)) = Tuple2 (plus (plus (ZERO) (match (targetNew (Node (ZERO) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Empty) (Empty))))) with
| Tuple2 a _ -> a)) (ZERO)) (plus (ZERO) (match (targetNew (Node (ZERO) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Empty) (Empty))))) with
| Tuple2 a _ -> a))
Prop: Tuple2 (plus (ZERO) (ZERO)) (plus (ZERO) (ZERO)) = Tuple2 (plus (plus (ZERO) (match (targetNew (Empty)) with
| Tuple2 a _ -> a)) (ZERO)) (plus (ZERO) (match (targetNew (Empty)) with
| Tuple2 a _ -> a))
Lemma List
forall (nat1:nat) (nat2:nat) (tree1:tree), lq (plus (match (targetNew (tree1)) with
| Tuple2 a _ -> a) (nat1)) (match (targetNew (tree1)) with
| Tuple2 a _ -> a) = true -> Tuple2 (plus (nat1) (nat2)) (plus (nat1) (nat2)) = Tuple2 (plus (plus (nat2) (match (targetNew (tree1)) with
| Tuple2 a _ -> a)) (nat1)) (plus (nat2) (match (targetNew (tree1)) with
| Tuple2 a _ -> a))
End of Lemma List


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (repr (target (tree2))) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (repr (target (tree3))) = Tuple2 (nat2) (nat3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (if lq (plus (nat3) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (match (targetNew (tree2)) with
| Tuple2 _ b -> b) then match (targetNew (tree2)) with
| Tuple2 _ b -> b else plus (match (Tuple2 (nat2) (nat3)) with
| Tuple2 _ b -> b) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (plus (nat2) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) = true
Case2 : lq (nat3) (plus (nat1) (nat2)) = true
Case3 : lq (plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1)) (match (targetNew (tree2)) with
| Tuple2 a _ -> a) = true
Case4 : spec (tf1 (repr (target (tree2))) (target (tree3))) = Tuple2 (nat2) (nat3)
Case5 : targetNew (tree3) = Tuple2 (nat2) (nat3)
---------------------------------------
Tuple2 (plus (nat1) (nat2)) (plus (nat1) (nat2)) = Tuple2 (plus (plus (nat2) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (nat1)) (plus (nat2) (match (targetNew (tree2)) with
| Tuple2 a _ -> a))

3 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 30


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (repr (target (tree2))) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (repr (target (tree3))) = Tuple2 (nat2) (nat3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (if lq (plus (nat3) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (match (targetNew (tree2)) with
| Tuple2 _ b -> b) then match (targetNew (tree2)) with
| Tuple2 _ b -> b else plus (match (Tuple2 (nat2) (nat3)) with
| Tuple2 _ b -> b) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (plus (nat2) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) = true
Case2 : lq (nat3) (plus (nat1) (nat2)) = true
Case3 : lq (plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1)) (match (targetNew (tree2)) with
| Tuple2 a _ -> a) = true
Case4 : spec (tf1 (repr (target (tree2))) (target (tree3))) = Tuple2 (nat2) (nat3)
Case5 : targetNew (tree3) = Tuple2 (nat2) (nat3)
---------------------------------------
Tuple2 (plus (nat1) (nat2)) (plus (nat1) (nat2)) = Tuple2 (plus (plus (nat2) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (nat1)) (plus (nat2) (match (targetNew (tree2)) with
| Tuple2 a _ -> a))

3 goal(s) more...

0 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (tree1:tree), lq (plus (match (targetNew (tree1)) with
| Tuple2 a _ -> a) (nat1)) (match (targetNew (tree1)) with
| Tuple2 a _ -> a) = true -> Tuple2 (plus (nat1) (nat2)) (plus (nat1) (nat2)) = Tuple2 (plus (plus (nat2) (match (targetNew (tree1)) with
| Tuple2 a _ -> a)) (nat1)) (plus (nat2) (match (targetNew (tree1)) with
| Tuple2 a _ -> a))(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree), lq (plus (match (targetNew (tree1)) with
| Tuple2 a _ -> a) (nat1)) (match (targetNew (tree1)) with
| Tuple2 a _ -> a) = true -> Tuple2 (plus (nat1) (nat2)) (plus (nat1) (nat2)) = Tuple2 (plus (plus (nat2) (match (targetNew (tree1)) with
| Tuple2 a _ -> a)) (nat1)) (plus (nat2) (match (targetNew (tree1)) with
| Tuple2 a _ -> a))

---------------------------------------
forall (nat1:nat) (nat2:nat) (tree1:tree), lq (plus (match (targetNew (tree1)) with
| Tuple2 a _ -> a) (nat1)) (match (targetNew (tree1)) with
| Tuple2 a _ -> a) = true -> Tuple2 (plus (nat1) (nat2)) (plus (nat1) (nat2)) = Tuple2 (plus (plus (nat2) (match (targetNew (tree1)) with
| Tuple2 a _ -> a)) (nat1)) (plus (nat2) (match (targetNew (tree1)) with
| Tuple2 a _ -> a))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction nat1(rank:6.)
=================================================
Progress: 31


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (repr (target (tree2))) = Tuple2 (nat2) (nat3)
IH2 : spec (repr (target (tree3))) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (if lq (plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (nat2)) (nat3) then match (Tuple2 (nat2) (nat3)) with
| Tuple2 _ b -> b else plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (match (Tuple2 (nat2) (nat3)) with
| Tuple2 a _ -> a)) (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (nat2)) = true
Case2 : lq (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 _ b -> b) (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) = true
Case3 : lq (plus (nat2) (nat1)) (nat2) = true
Case4 : targetNew (tree2) = Tuple2 (nat2) (nat3)
---------------------------------------
Tuple2 (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) = Tuple2 (plus (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (nat2)) (nat1)) (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (nat2))

3 goal(s) more...

0 conjecture(s) more...
>>> case spec (tf1 (repr (target (tree2))) (target (tree3)))(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (repr (target (tree2))) = Tuple2 (nat2) (nat3)
IH2 : spec (repr (target (tree3))) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (if lq (plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (nat2)) (nat3) then match (Tuple2 (nat2) (nat3)) with
| Tuple2 _ b -> b else plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (match (Tuple2 (nat2) (nat3)) with
| Tuple2 a _ -> a)) (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (nat2)) = true
Case2 : lq (nat3) (plus (nat1) (nat2)) = true
Case3 : lq (plus (nat2) (nat1)) (nat2) = true
Case4 : targetNew (tree2) = Tuple2 (nat2) (nat3)
Case5 : spec (tf1 (repr (target (tree2))) (target (tree3))) = Tuple2 (nat2) (nat3)
---------------------------------------
Tuple2 (plus (nat1) (nat2)) (plus (nat1) (nat2)) = Tuple2 (plus (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (nat2)) (nat1)) (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (nat2))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (if lq (plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (match (targetNew (tree2)) with
| Tuple2 _ b -> b) then match (targetNew (tree2)) with
| Tuple2 _ b -> b else plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (if lq (plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1)) (match (targetNew (tree2)) with
| Tuple2 a _ -> a) then match (targetNew (tree2)) with
| Tuple2 a _ -> a else plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1)))
case lq (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 _ b -> b) (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a))
case lq (plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1)) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)
case targetNew (tree2)
case spec (tf1 (repr (target (tree2))) (target (tree3)))
parent
plus (nat1) (nat2)
lower
plus(_, nat2)
upper
Tuple2(_, _)
remove upper
plus(nat1, nat2)
remove lower
plus(nat1, nat2)
remove upper
plus(nat1, nat2)
remove lower
plus(nat1, nat2)
remove upper
plus(nat1, nat2)
remove lower
plus(nat1, nat2)
parent
plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (nat2)
lower
plus(_, _)
upper
Tuple2(plus(plus(_, nat2), nat1), _)
remove upper
plus(_, nat2)
validate generalize_common_subterm_goal
Prop: Tuple2 (plus (ZERO) (SUCC (ZERO))) (plus (ZERO) (SUCC (ZERO))) = Tuple2 (plus (plus (match (targetNew (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Empty))) with
| Tuple2 a _ -> a) (SUCC (ZERO))) (ZERO)) (plus (match (targetNew (Node (SUCC (ZERO)) (Node (ZERO) (Empty) (Empty)) (Empty))) with
| Tuple2 a _ -> a) (SUCC (ZERO)))
Prop: Tuple2 (plus (ZERO) (SUCC (ZERO))) (plus (ZERO) (SUCC (ZERO))) = Tuple2 (plus (plus (match (targetNew (Empty)) with
| Tuple2 a _ -> a) (SUCC (ZERO))) (ZERO)) (plus (match (targetNew (Empty)) with
| Tuple2 a _ -> a) (SUCC (ZERO)))
Prop: Tuple2 (plus (ZERO) (SUCC (ZERO))) (plus (ZERO) (SUCC (ZERO))) = Tuple2 (plus (plus (match (targetNew (Empty)) with
| Tuple2 a _ -> a) (SUCC (ZERO))) (ZERO)) (plus (match (targetNew (Empty)) with
| Tuple2 a _ -> a) (SUCC (ZERO)))
=================================================
Progress: 32


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (repr (target (tree2))) = Tuple2 (nat2) (nat3)
IH2 : spec (repr (target (tree3))) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (if lq (plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (nat2)) (nat3) then match (Tuple2 (nat2) (nat3)) with
| Tuple2 _ b -> b else plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (match (Tuple2 (nat2) (nat3)) with
| Tuple2 a _ -> a)) (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (nat2)) = true
Case2 : lq (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 _ b -> b) (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) = true
Case3 : lq (plus (nat2) (nat1)) (nat2) = true
Case4 : targetNew (tree2) = Tuple2 (nat2) (nat3)
---------------------------------------
Tuple2 (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) = Tuple2 (plus (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (nat2)) (nat1)) (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (nat2))

3 goal(s) more...

0 conjecture(s) more...
>>> case targetNew (tree3)(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (repr (target (tree2))) = Tuple2 (nat2) (nat3)
IH2 : spec (repr (target (tree3))) = Tuple2 (nat2) (nat3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (if lq (plus (nat3) (nat2)) (nat3) then match (Tuple2 (nat2) (nat3)) with
| Tuple2 _ b -> b else plus (match (Tuple2 (nat2) (nat3)) with
| Tuple2 _ b -> b) (match (Tuple2 (nat2) (nat3)) with
| Tuple2 a _ -> a)) (plus (nat2) (nat2)) = true
Case2 : lq (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 _ b -> b) (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) = true
Case3 : lq (plus (nat2) (nat1)) (nat2) = true
Case4 : targetNew (tree2) = Tuple2 (nat2) (nat3)
Case5 : targetNew (tree3) = Tuple2 (nat2) (nat3)
---------------------------------------
Tuple2 (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) = Tuple2 (plus (plus (nat2) (nat2)) (nat1)) (plus (nat2) (nat2))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (if lq (plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (match (targetNew (tree2)) with
| Tuple2 _ b -> b) then match (targetNew (tree2)) with
| Tuple2 _ b -> b else plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (if lq (plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1)) (match (targetNew (tree2)) with
| Tuple2 a _ -> a) then match (targetNew (tree2)) with
| Tuple2 a _ -> a else plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1)))
case lq (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 _ b -> b) (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a))
case lq (plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1)) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)
case targetNew (tree2)
case targetNew (tree3)
parent
plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)
lower
plus(_, _)
upper
Tuple2(_, _)
remove upper
plus(nat1, _)
parent
plus (plus (nat2) (nat2)) (nat1)
lower
plus(plus(nat2, nat2), _)
upper
Tuple2(_, plus(nat2, nat2))
remove upper
nat2
remove lower
nat2
remove upper
plus(plus(nat2, nat2), nat1)
remove lower
plus(plus(nat2, nat2), nat1)
remove upper
plus(plus(nat2, nat2), nat1)
remove lower
plus(plus(nat2, nat2), nat1)
remove upper
plus(plus(nat2, nat2), nat1)
remove lower
plus(plus(nat2, nat2), nat1)
validate generalize_common_subterm_goal
Prop: Tuple2 (plus (ZERO) (match (spec (tf1 (repr (target (Empty))) (target (Empty)))) with
| Tuple2 a _ -> a)) (plus (ZERO) (match (spec (tf1 (repr (target (Empty))) (target (Empty)))) with
| Tuple2 a _ -> a)) = Tuple2 (plus (plus (ZERO) (ZERO)) (ZERO)) (plus (ZERO) (ZERO))
Prop: Tuple2 (plus (ZERO) (match (spec (tf1 (repr (target (Empty))) (target (Empty)))) with
| Tuple2 a _ -> a)) (plus (ZERO) (match (spec (tf1 (repr (target (Empty))) (target (Empty)))) with
| Tuple2 a _ -> a)) = Tuple2 (plus (plus (ZERO) (ZERO)) (ZERO)) (plus (ZERO) (ZERO))
Prop: Tuple2 (plus (SUCC (ZERO)) (match (spec (tf1 (repr (target (Empty))) (target (Empty)))) with
| Tuple2 a _ -> a)) (plus (SUCC (ZERO)) (match (spec (tf1 (repr (target (Empty))) (target (Empty)))) with
| Tuple2 a _ -> a)) = Tuple2 (plus (plus (ZERO) (ZERO)) (SUCC (ZERO))) (plus (ZERO) (ZERO))
Lemma List
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (match (spec (tf1 (repr (target (tree1))) (target (tree2)))) with
| Tuple2 _ b -> b) (plus (nat1) (match (spec (tf1 (repr (target (tree1))) (target (tree2)))) with
| Tuple2 a _ -> a)) = true->lq (plus (nat2) (nat1)) (nat2) = true -> Tuple2 (plus (nat1) (match (spec (tf1 (repr (target (tree1))) (target (tree2)))) with
| Tuple2 a _ -> a)) (plus (nat1) (match (spec (tf1 (repr (target (tree1))) (target (tree2)))) with
| Tuple2 a _ -> a)) = Tuple2 (plus (plus (nat2) (nat2)) (nat1)) (plus (nat2) (nat2))
End of Lemma List


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (repr (target (tree2))) = Tuple2 (nat2) (nat3)
IH2 : spec (repr (target (tree3))) = Tuple2 (nat2) (nat3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (if lq (plus (nat3) (nat2)) (nat3) then match (Tuple2 (nat2) (nat3)) with
| Tuple2 _ b -> b else plus (match (Tuple2 (nat2) (nat3)) with
| Tuple2 _ b -> b) (match (Tuple2 (nat2) (nat3)) with
| Tuple2 a _ -> a)) (plus (nat2) (nat2)) = true
Case2 : lq (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 _ b -> b) (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) = true
Case3 : lq (plus (nat2) (nat1)) (nat2) = true
Case4 : targetNew (tree2) = Tuple2 (nat2) (nat3)
Case5 : targetNew (tree3) = Tuple2 (nat2) (nat3)
---------------------------------------
Tuple2 (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) = Tuple2 (plus (plus (nat2) (nat2)) (nat1)) (plus (nat2) (nat2))

3 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 33


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (repr (target (tree2))) = Tuple2 (nat2) (nat3)
IH2 : spec (repr (target (tree3))) = Tuple2 (nat2) (nat3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (if lq (plus (nat3) (nat2)) (nat3) then match (Tuple2 (nat2) (nat3)) with
| Tuple2 _ b -> b else plus (match (Tuple2 (nat2) (nat3)) with
| Tuple2 _ b -> b) (match (Tuple2 (nat2) (nat3)) with
| Tuple2 a _ -> a)) (plus (nat2) (nat2)) = true
Case2 : lq (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 _ b -> b) (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) = true
Case3 : lq (plus (nat2) (nat1)) (nat2) = true
Case4 : targetNew (tree2) = Tuple2 (nat2) (nat3)
Case5 : targetNew (tree3) = Tuple2 (nat2) (nat3)
---------------------------------------
Tuple2 (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) = Tuple2 (plus (plus (nat2) (nat2)) (nat1)) (plus (nat2) (nat2))

3 goal(s) more...

0 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (match (spec (tf1 (repr (target (tree1))) (target (tree2)))) with
| Tuple2 _ b -> b) (plus (nat1) (match (spec (tf1 (repr (target (tree1))) (target (tree2)))) with
| Tuple2 a _ -> a)) = true->lq (plus (nat2) (nat1)) (nat2) = true -> Tuple2 (plus (nat1) (match (spec (tf1 (repr (target (tree1))) (target (tree2)))) with
| Tuple2 a _ -> a)) (plus (nat1) (match (spec (tf1 (repr (target (tree1))) (target (tree2)))) with
| Tuple2 a _ -> a)) = Tuple2 (plus (plus (nat2) (nat2)) (nat1)) (plus (nat2) (nat2))(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (match (spec (tf1 (repr (target (tree1))) (target (tree2)))) with
| Tuple2 _ b -> b) (plus (nat1) (match (spec (tf1 (repr (target (tree1))) (target (tree2)))) with
| Tuple2 a _ -> a)) = true->lq (plus (nat2) (nat1)) (nat2) = true -> Tuple2 (plus (nat1) (match (spec (tf1 (repr (target (tree1))) (target (tree2)))) with
| Tuple2 a _ -> a)) (plus (nat1) (match (spec (tf1 (repr (target (tree1))) (target (tree2)))) with
| Tuple2 a _ -> a)) = Tuple2 (plus (plus (nat2) (nat2)) (nat1)) (plus (nat2) (nat2))

---------------------------------------
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (match (spec (tf1 (repr (target (tree1))) (target (tree2)))) with
| Tuple2 _ b -> b) (plus (nat1) (match (spec (tf1 (repr (target (tree1))) (target (tree2)))) with
| Tuple2 a _ -> a)) = true->lq (plus (nat2) (nat1)) (nat2) = true -> Tuple2 (plus (nat1) (match (spec (tf1 (repr (target (tree1))) (target (tree2)))) with
| Tuple2 a _ -> a)) (plus (nat1) (match (spec (tf1 (repr (target (tree1))) (target (tree2)))) with
| Tuple2 a _ -> a)) = Tuple2 (plus (plus (nat2) (nat2)) (nat1)) (plus (nat2) (nat2))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction nat1(rank:6.)
=================================================
Progress: 34


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (repr (target (tree2))) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (repr (target (tree3))) = Tuple2 (nat2) (nat3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (if lq (plus (nat3) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (match (targetNew (tree2)) with
| Tuple2 _ b -> b) then match (targetNew (tree2)) with
| Tuple2 _ b -> b else plus (match (Tuple2 (nat2) (nat3)) with
| Tuple2 _ b -> b) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (plus (nat2) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) = true
Case2 : lq (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 _ b -> b) (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) = true
Case3 : lq (plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1)) (match (targetNew (tree2)) with
| Tuple2 a _ -> a) = true
Case4 : targetNew (tree3) = Tuple2 (nat2) (nat3)
---------------------------------------
Tuple2 (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) = Tuple2 (plus (plus (nat2) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (nat1)) (plus (nat2) (match (targetNew (tree2)) with
| Tuple2 a _ -> a))

3 goal(s) more...

0 conjecture(s) more...
>>> case spec (tf1 (repr (target (tree2))) (target (tree3)))(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (repr (target (tree2))) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (repr (target (tree3))) = Tuple2 (nat2) (nat3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (if lq (plus (nat3) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (match (targetNew (tree2)) with
| Tuple2 _ b -> b) then match (targetNew (tree2)) with
| Tuple2 _ b -> b else plus (match (Tuple2 (nat2) (nat3)) with
| Tuple2 _ b -> b) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (plus (nat2) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) = true
Case2 : lq (nat3) (plus (nat1) (nat2)) = true
Case3 : lq (plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1)) (match (targetNew (tree2)) with
| Tuple2 a _ -> a) = true
Case4 : targetNew (tree3) = Tuple2 (nat2) (nat3)
Case5 : spec (tf1 (repr (target (tree2))) (target (tree3))) = Tuple2 (nat2) (nat3)
---------------------------------------
Tuple2 (plus (nat1) (nat2)) (plus (nat1) (nat2)) = Tuple2 (plus (plus (nat2) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (nat1)) (plus (nat2) (match (targetNew (tree2)) with
| Tuple2 a _ -> a))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (if lq (plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (match (targetNew (tree2)) with
| Tuple2 _ b -> b) then match (targetNew (tree2)) with
| Tuple2 _ b -> b else plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (if lq (plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1)) (match (targetNew (tree2)) with
| Tuple2 a _ -> a) then match (targetNew (tree2)) with
| Tuple2 a _ -> a else plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1)))
case lq (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 _ b -> b) (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a))
case lq (plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1)) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)
case targetNew (tree3)
case spec (tf1 (repr (target (tree2))) (target (tree3)))
parent
plus (nat1) (nat2)
lower
plus(_, nat2)
upper
Tuple2(_, _)
remove upper
plus(nat1, nat2)
remove lower
plus(nat1, nat2)
remove upper
plus(nat1, nat2)
remove lower
plus(nat1, nat2)
remove upper
plus(nat1, nat2)
remove lower
plus(nat1, nat2)
validate generalize_common_subterm_goal
Prop: Tuple2 (plus (ZERO) (ZERO)) (plus (ZERO) (ZERO)) = Tuple2 (plus (plus (ZERO) (match (targetNew (Empty)) with
| Tuple2 a _ -> a)) (ZERO)) (plus (ZERO) (match (targetNew (Empty)) with
| Tuple2 a _ -> a))
Prop: Tuple2 (plus (SUCC (ZERO)) (ZERO)) (plus (SUCC (ZERO)) (ZERO)) = Tuple2 (plus (plus (ZERO) (match (targetNew (Empty)) with
| Tuple2 a _ -> a)) (SUCC (ZERO))) (plus (ZERO) (match (targetNew (Empty)) with
| Tuple2 a _ -> a))
Prop: Tuple2 (plus (ZERO) (SUCC (ZERO))) (plus (ZERO) (SUCC (ZERO))) = Tuple2 (plus (plus (SUCC (ZERO)) (match (targetNew (Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Empty)))))) (Empty))) with
| Tuple2 a _ -> a)) (ZERO)) (plus (SUCC (ZERO)) (match (targetNew (Node (ZERO) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Node (ZERO) (Empty) (Node (ZERO) (Empty) (Node (SUCC (ZERO)) (Empty) (Node (ZERO) (Empty) (Empty)))))) (Empty))) with
| Tuple2 a _ -> a))
=================================================
Progress: 35


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (repr (target (tree2))) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (repr (target (tree3))) = Tuple2 (nat2) (nat3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (if lq (plus (nat3) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (match (targetNew (tree2)) with
| Tuple2 _ b -> b) then match (targetNew (tree2)) with
| Tuple2 _ b -> b else plus (match (Tuple2 (nat2) (nat3)) with
| Tuple2 _ b -> b) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (plus (nat2) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) = true
Case2 : lq (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 _ b -> b) (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) = true
Case3 : lq (plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1)) (match (targetNew (tree2)) with
| Tuple2 a _ -> a) = true
Case4 : targetNew (tree3) = Tuple2 (nat2) (nat3)
---------------------------------------
Tuple2 (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) = Tuple2 (plus (plus (nat2) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (nat1)) (plus (nat2) (match (targetNew (tree2)) with
| Tuple2 a _ -> a))

3 goal(s) more...

0 conjecture(s) more...
>>> case targetNew (tree2)(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (repr (target (tree2))) = Tuple2 (nat2) (nat3)
IH2 : spec (repr (target (tree3))) = Tuple2 (nat2) (nat3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (if lq (plus (nat3) (nat2)) (nat3) then match (Tuple2 (nat2) (nat3)) with
| Tuple2 _ b -> b else plus (match (Tuple2 (nat2) (nat3)) with
| Tuple2 _ b -> b) (match (Tuple2 (nat2) (nat3)) with
| Tuple2 a _ -> a)) (plus (nat2) (nat2)) = true
Case2 : lq (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 _ b -> b) (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) = true
Case3 : lq (plus (nat2) (nat1)) (nat2) = true
Case4 : targetNew (tree3) = Tuple2 (nat2) (nat3)
Case5 : targetNew (tree2) = Tuple2 (nat2) (nat3)
---------------------------------------
Tuple2 (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)) = Tuple2 (plus (plus (nat2) (nat2)) (nat1)) (plus (nat2) (nat2))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (if lq (plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (match (targetNew (tree2)) with
| Tuple2 _ b -> b) then match (targetNew (tree2)) with
| Tuple2 _ b -> b else plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (if lq (plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1)) (match (targetNew (tree2)) with
| Tuple2 a _ -> a) then match (targetNew (tree2)) with
| Tuple2 a _ -> a else plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1)))
case lq (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 _ b -> b) (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a))
case lq (plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1)) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)
case targetNew (tree3)
case targetNew (tree2)
parent
plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a)
lower
plus(_, _)
upper
Tuple2(_, _)
remove upper
plus(nat1, _)
parent
plus (plus (nat2) (nat2)) (nat1)
lower
plus(plus(nat2, nat2), _)
upper
Tuple2(_, plus(nat2, nat2))
remove upper
nat2
remove lower
nat2
remove upper
plus(plus(nat2, nat2), nat1)
remove lower
plus(plus(nat2, nat2), nat1)
remove upper
plus(plus(nat2, nat2), nat1)
remove lower
plus(plus(nat2, nat2), nat1)
remove upper
plus(plus(nat2, nat2), nat1)
remove lower
plus(plus(nat2, nat2), nat1)
validate generalize_common_subterm_goal
Prop: Tuple2 (plus (ZERO) (match (spec (tf1 (repr (target (Empty))) (target (Empty)))) with
| Tuple2 a _ -> a)) (plus (ZERO) (match (spec (tf1 (repr (target (Empty))) (target (Empty)))) with
| Tuple2 a _ -> a)) = Tuple2 (plus (plus (ZERO) (ZERO)) (ZERO)) (plus (ZERO) (ZERO))
Prop: Tuple2 (plus (ZERO) (match (spec (tf1 (repr (target (Empty))) (target (Node (ZERO) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)))))) with
| Tuple2 a _ -> a)) (plus (ZERO) (match (spec (tf1 (repr (target (Empty))) (target (Node (ZERO) (Empty) (Node (ZERO) (Node (ZERO) (Empty) (Empty)) (Empty)))))) with
| Tuple2 a _ -> a)) = Tuple2 (plus (plus (SUCC (ZERO)) (SUCC (ZERO))) (ZERO)) (plus (SUCC (ZERO)) (SUCC (ZERO)))
Prop: Tuple2 (plus (SUCC (ZERO)) (match (spec (tf1 (repr (target (Empty))) (target (Node (SUCC (SUCC (SUCC (SUCC (ZERO))))) (Empty) (Empty))))) with
| Tuple2 a _ -> a)) (plus (SUCC (ZERO)) (match (spec (tf1 (repr (target (Empty))) (target (Node (SUCC (SUCC (SUCC (SUCC (ZERO))))) (Empty) (Empty))))) with
| Tuple2 a _ -> a)) = Tuple2 (plus (plus (ZERO) (ZERO)) (SUCC (ZERO))) (plus (ZERO) (ZERO))
=================================================
Progress: 36


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (repr (target (tree2))) = Tuple2 (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 _ b -> b)
IH2 : spec (repr (target (tree3))) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (if lq (plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (match (targetNew (tree2)) with
| Tuple2 _ b -> b) then match (targetNew (tree2)) with
| Tuple2 _ b -> b else plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) = true
Case2 : lq (plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1)) (match (targetNew (tree2)) with
| Tuple2 a _ -> a) = true
Case3 : lq (nat3) (plus (nat1) (nat2)) = true
Case4 : spec (tf1 (repr (target (tree2))) (target (tree3))) = Tuple2 (nat2) (nat3)
---------------------------------------
Tuple2 (plus (nat1) (nat2)) (plus (nat1) (nat2)) = Tuple2 (plus (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (nat1)) (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree2)) with
| Tuple2 a _ -> a))

3 goal(s) more...

0 conjecture(s) more...
>>> case targetNew (tree2)(rank : 6.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : spec (repr (target (tree2))) = Tuple2 (nat2) (nat3)
IH2 : spec (repr (target (tree3))) = Tuple2 (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (match (targetNew (tree3)) with
| Tuple2 _ b -> b)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (if lq (plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (nat2)) (nat3) then match (Tuple2 (nat2) (nat3)) with
| Tuple2 _ b -> b else plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (match (Tuple2 (nat2) (nat3)) with
| Tuple2 a _ -> a)) (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (nat2)) = true
Case2 : lq (plus (nat2) (nat1)) (nat2) = true
Case3 : lq (nat3) (plus (nat1) (nat2)) = true
Case4 : spec (tf1 (repr (target (tree2))) (target (tree3))) = Tuple2 (nat2) (nat3)
Case5 : targetNew (tree2) = Tuple2 (nat2) (nat3)
---------------------------------------
Tuple2 (plus (nat1) (nat2)) (plus (nat1) (nat2)) = Tuple2 (plus (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (nat2)) (nat1)) (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (nat2))

3 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (if lq (plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (match (targetNew (tree2)) with
| Tuple2 _ b -> b) then match (targetNew (tree2)) with
| Tuple2 _ b -> b else plus (match (targetNew (tree3)) with
| Tuple2 _ b -> b) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)) (plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (if lq (plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1)) (match (targetNew (tree2)) with
| Tuple2 a _ -> a) then match (targetNew (tree2)) with
| Tuple2 a _ -> a else plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1)))
case lq (plus (match (targetNew (tree2)) with
| Tuple2 a _ -> a) (nat1)) (match (targetNew (tree2)) with
| Tuple2 a _ -> a)
case lq (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 _ b -> b) (plus (nat1) (match (spec (tf1 (repr (target (tree2))) (target (tree3)))) with
| Tuple2 a _ -> a))
case spec (tf1 (repr (target (tree2))) (target (tree3)))
case targetNew (tree2)
parent
plus (nat1) (nat2)
lower
plus(_, nat2)
upper
Tuple2(_, _)
remove upper
plus(nat1, nat2)
remove lower
plus(nat1, nat2)
remove upper
plus(nat1, nat2)
remove lower
plus(nat1, nat2)
remove upper
plus(nat1, nat2)
remove lower
plus(nat1, nat2)
parent
plus (match (targetNew (tree3)) with
| Tuple2 a _ -> a) (nat2)
lower
plus(_, _)
upper
Tuple2(plus(plus(_, nat2), nat1), _)
remove upper
plus(_, nat2)
validate generalize_common_subterm_goal
