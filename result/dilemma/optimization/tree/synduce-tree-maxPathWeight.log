Enter the definition file path (1/2) : 
> Enter the definition file path (2/2) : 
> Choose the proof type :
1) Interactive Mode 	 2) Auto Mode
Enter the goal : =================================================
Progress: 1


No conjecture
>>> assert forall (tr:tree), main (tr) = mainNew (tr)(rank : 0.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)

---------------------------------------
forall (tree1:tree), main (tree1) = mainNew (tree1)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:3.)
=================================================
Progress: 2


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)

---------------------------------------
forall (tree1:tree), main (tree1) = mainNew (tree1)

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 3.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)

---------------------------------------
forall (tree1:tree), tf1 (ZERO) (repr (tree1)) = reprNew (tree1)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
induction tree1(rank:4.)
=================================================
Progress: 3


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)

---------------------------------------
forall (tree1:tree), tf1 (ZERO) (repr (tree1)) = reprNew (tree1)

0 goal(s) more...

0 conjecture(s) more...
>>> induction tree1(rank : 4.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
Base1 : tree1 = Tnil
---------------------------------------
tf1 (ZERO) (repr (Tnil)) = reprNew (Tnil)

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:3.)
=================================================
Progress: 4


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
Base1 : tree1 = Tnil
---------------------------------------
tf1 (ZERO) (repr (Tnil)) = reprNew (Tnil)

1 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 3.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
---------------------------------------
tf1 (ZERO) (repr (Node (nat1) (tree2) (tree3))) = reprNew (Node (nat1) (tree2) (tree3))

0 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:3.)
=================================================
Progress: 5


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
---------------------------------------
tf1 (ZERO) (repr (Node (nat1) (tree2) (tree3))) = reprNew (Node (nat1) (tree2) (tree3))

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 3.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
---------------------------------------
if lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) then tf1 (nat1) (repr (tree3)) else tf1 (nat1) (repr (tree2)) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then reprNew (tree3) else reprNew (tree2))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 8
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))(rank:4.)
rewrite <- IH1 in goal at 0(rank:11.)
rewrite <- IH1 in goal at 2(rank:11.)
rewrite <- IH2 in goal at 0(rank:11.)
rewrite <- IH2 in goal at 1(rank:11.)
rewrite <- IH2 in goal at 2(rank:11.)
rewrite <- IH1 in goal at 1(rank:19.)
case lq (reprNew (tree2)) (reprNew (tree3))(rank:4.)
=================================================
Progress: 6


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
---------------------------------------
if lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) then tf1 (nat1) (repr (tree3)) else tf1 (nat1) (repr (tree2)) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then reprNew (tree3) else reprNew (tree2))

0 goal(s) more...

0 conjecture(s) more...
>>> case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))(rank : 4.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then reprNew (tree3) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 7
case lq (reprNew (tree2)) (reprNew (tree3))(rank:5.)
rewrite <- IH1 in goal at 0(rank:20.)
rewrite <- IH1 in goal at 1(rank:20.)
rewrite <- IH1 in goal at 2(rank:20.)
rewrite <- IH2 in goal at 0(rank:20.)
rewrite <- IH2 in goal at 1(rank:20.)
rewrite <- IH2 in goal at 2(rank:20.)
=================================================
Progress: 7


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
---------------------------------------
if lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) then tf1 (nat1) (repr (tree3)) else tf1 (nat1) (repr (tree2)) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then reprNew (tree3) else reprNew (tree2))

0 goal(s) more...

0 conjecture(s) more...
>>> case lq (reprNew (tree2)) (reprNew (tree3))(rank : 4.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (reprNew (tree2)) (reprNew (tree3)) = true
---------------------------------------
if lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) then tf1 (nat1) (repr (tree3)) else tf1 (nat1) (repr (tree2)) = plus (nat1) (reprNew (tree3))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))(rank:5.)
rewrite <- IH2 in goal at 0(rank:12.)
=================================================
Progress: 8


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then reprNew (tree3) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
>>> case lq (reprNew (tree2)) (reprNew (tree3))(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- IH2 in goal at 0(rank:5.)
=================================================
Progress: 9


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (reprNew (tree2)) (reprNew (tree3)) = true
---------------------------------------
if lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) then tf1 (nat1) (repr (tree3)) else tf1 (nat1) (repr (tree2)) = plus (nat1) (reprNew (tree3))

1 goal(s) more...

0 conjecture(s) more...
>>> case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (reprNew (tree2)) (reprNew (tree3)) = true
Case2 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- IH2 in goal at 0(rank:5.)
=================================================
Progress: 10


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
case lq (reprNew (tree2)) (reprNew (tree3))
rewrite <- IH2 in goal at 0
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (tf1 (ZERO) (Tnil))
Prop: tf1 (SUCC (ZERO)) (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Tnil) (Tnil)) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Node (SUCC (ZERO)) (Tnil) (Tnil))))) (Tnil)) = plus (SUCC (ZERO)) (tf1 (ZERO) (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Tnil) (Tnil)) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Node (SUCC (ZERO)) (Tnil) (Tnil))))) (Tnil)))
Prop: tf1 (SUCC (ZERO)) (Tnil) = plus (SUCC (ZERO)) (tf1 (ZERO) (Tnil))
previous tactics
simpl in goal
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
case lq (reprNew (tree2)) (reprNew (tree3))
parent
tf1 (nat1) (repr (tree3))
lower
tf1(_, repr(tree3))
upper
_
remove upper
tf1(ZERO(), repr(tree3))
remove lower
tf1(ZERO(), repr(tree3))
remove upper
tf1(nat1, repr(tree3))
remove lower
tf1(nat1, repr(tree3))
remove upper
tf1(nat1, repr(tree3))
remove lower
tf1(nat1, repr(tree3))
remove upper
tf1(nat1, repr(tree3))
remove lower
tf1(nat1, repr(tree3))
parent
plus (nat1) (reprNew (tree3))
lower
plus(_, reprNew(tree3))
upper
_
remove upper
reprNew(tree3)
remove lower
reprNew(tree3)
remove upper
plus(nat1, reprNew(tree3))
remove lower
plus(nat1, reprNew(tree3))
remove upper
plus(nat1, reprNew(tree3))
remove lower
plus(nat1, reprNew(tree3))
remove upper
plus(nat1, reprNew(tree3))
remove lower
plus(nat1, reprNew(tree3))
validate generalize_common_subterm_goal
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (reprNew (Tnil))
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (reprNew (Tnil))
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (reprNew (Tnil))
Lemma List
forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
End of Lemma List


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

2 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 11


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

2 goal(s) more...

0 conjecture(s) more...
>>> assert forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))(rank : 0.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))

---------------------------------------
forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
induction nat1(rank:14.)
induction tree1(rank:14.)
=================================================
Progress: 12


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (reprNew (tree2)) (reprNew (tree3)) = true
Case2 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (reprNew (tree2)) (reprNew (tree3)) = true
Case2 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (reprNew (tree2)) (reprNew (tree3))
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite <- IH2 in goal at 0
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (tf1 (ZERO) (Tnil))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (tf1 (ZERO) (Tnil))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (tf1 (ZERO) (Tnil))
previous tactics
simpl in goal
case lq (reprNew (tree2)) (reprNew (tree3))
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
parent
tf1 (nat1) (repr (tree3))
lower
tf1(_, repr(tree3))
upper
_
remove upper
tf1(ZERO(), repr(tree3))
remove lower
tf1(ZERO(), repr(tree3))
remove upper
tf1(nat1, repr(tree3))
remove lower
tf1(nat1, repr(tree3))
remove upper
tf1(nat1, repr(tree3))
remove lower
tf1(nat1, repr(tree3))
remove upper
tf1(nat1, repr(tree3))
remove lower
tf1(nat1, repr(tree3))
parent
plus (nat1) (reprNew (tree3))
lower
plus(_, reprNew(tree3))
upper
_
remove upper
reprNew(tree3)
remove lower
reprNew(tree3)
remove upper
plus(nat1, reprNew(tree3))
remove lower
plus(nat1, reprNew(tree3))
remove upper
plus(nat1, reprNew(tree3))
remove lower
plus(nat1, reprNew(tree3))
remove upper
plus(nat1, reprNew(tree3))
remove lower
plus(nat1, reprNew(tree3))
validate generalize_common_subterm_goal
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (reprNew (Tnil))
Prop: tf1 (SUCC (ZERO)) (repr (Tnil)) = plus (SUCC (ZERO)) (reprNew (Tnil))
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (reprNew (Tnil))
=================================================
Progress: 13


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
---------------------------------------
if lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) then tf1 (nat1) (repr (tree3)) else tf1 (nat1) (repr (tree2)) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then reprNew (tree3) else reprNew (tree2))

0 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
---------------------------------------
if lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) then tf1 (nat1) (repr (tree3)) else tf1 (nat1) (repr (tree2)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 5
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))(rank:4.)
rewrite <- IH2 in goal at 2(rank:11.)
case lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3))(rank:4.)
rewrite <- IH2 in goal at 0(rank:11.)
rewrite <- IH2 in goal at 1(rank:11.)
=================================================
Progress: 14


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
---------------------------------------
if lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) then tf1 (nat1) (repr (tree3)) else tf1 (nat1) (repr (tree2)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))

0 goal(s) more...

0 conjecture(s) more...
>>> case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))(rank : 4.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 7
case lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3))(rank:5.)
rewrite IH1 in goal at 0(rank:12.)
rewrite IH1 in goal at 1(rank:12.)
rewrite IH1 in goal at 2(rank:12.)
rewrite <- IH2 in goal at 0(rank:20.)
rewrite <- IH2 in goal at 1(rank:20.)
rewrite <- IH2 in goal at 2(rank:20.)
=================================================
Progress: 15


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
---------------------------------------
if lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) then tf1 (nat1) (repr (tree3)) else tf1 (nat1) (repr (tree2)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))

0 goal(s) more...

0 conjecture(s) more...
>>> case lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3))(rank : 4.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) = true
---------------------------------------
if lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) then tf1 (nat1) (repr (tree3)) else tf1 (nat1) (repr (tree2)) = plus (nat1) (reprNew (tree3))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))(rank:5.)
rewrite <- IH2 in goal at 0(rank:12.)
=================================================
Progress: 16


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
>>> case lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3))(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- IH2 in goal at 0(rank:5.)
=================================================
Progress: 17


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) = true
---------------------------------------
if lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) then tf1 (nat1) (repr (tree3)) else tf1 (nat1) (repr (tree2)) = plus (nat1) (reprNew (tree3))

1 goal(s) more...

0 conjecture(s) more...
>>> case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) = true
Case2 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- IH2 in goal at 0(rank:5.)
=================================================
Progress: 18


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
case lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3))
rewrite <- IH2 in goal at 0
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (tf1 (ZERO) (Tnil))
Prop: tf1 (SUCC (ZERO)) (Tnil) = plus (SUCC (ZERO)) (tf1 (ZERO) (Tnil))
Prop: tf1 (SUCC (SUCC (ZERO))) (Node (ZERO) (Node (SUCC (ZERO)) (Tnil) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Tnil)))) (Tnil)) = plus (SUCC (SUCC (ZERO))) (tf1 (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Tnil) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Tnil)))) (Tnil)))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
case lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3))
validate generalize_common_subterm_goal
Prop: tf1 (SUCC (ZERO)) (repr (Tnil)) = plus (SUCC (ZERO)) (reprNew (Tnil))
Prop: tf1 (SUCC (ZERO)) (repr (Tnil)) = plus (SUCC (ZERO)) (reprNew (Tnil))
Prop: tf1 (SUCC (ZERO)) (repr (Tnil)) = plus (SUCC (ZERO)) (reprNew (Tnil))
=================================================
Progress: 19


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) = true
Case2 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) = true
Case2 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3))
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite <- IH2 in goal at 0
Prop: tf1 (SUCC (ZERO)) (Tnil) = plus (SUCC (ZERO)) (tf1 (ZERO) (Tnil))
Prop: tf1 (ZERO) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil)) = plus (ZERO) (tf1 (ZERO) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil)))
Prop: tf1 (SUCC (ZERO)) (Tnil) = plus (SUCC (ZERO)) (tf1 (ZERO) (Tnil))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3))
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
validate generalize_common_subterm_goal
Prop: tf1 (ZERO) (repr (Node (ZERO) (Tnil) (Tnil))) = plus (ZERO) (reprNew (Node (ZERO) (Tnil) (Tnil)))
Prop: tf1 (ZERO) (repr (Node (SUCC (ZERO)) (Tnil) (Tnil))) = plus (ZERO) (reprNew (Node (SUCC (ZERO)) (Tnil) (Tnil)))
Prop: tf1 (SUCC (SUCC (SUCC (ZERO)))) (repr (Tnil)) = plus (SUCC (SUCC (SUCC (ZERO)))) (reprNew (Tnil))
=================================================
Progress: 20


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
---------------------------------------
if lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) then tf1 (nat1) (repr (tree3)) else tf1 (nat1) (repr (tree2)) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then reprNew (tree3) else reprNew (tree2))

0 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 2(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
---------------------------------------
if lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) then tf1 (nat1) (repr (tree3)) else tf1 (nat1) (repr (tree2)) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 5
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))(rank:4.)
rewrite <- IH2 in goal at 2(rank:11.)
case lq (reprNew (tree2)) (reprNew (tree3))(rank:4.)
rewrite <- IH2 in goal at 0(rank:11.)
rewrite <- IH2 in goal at 1(rank:11.)
=================================================
Progress: 21


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
---------------------------------------
if lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) then tf1 (nat1) (repr (tree3)) else tf1 (nat1) (repr (tree2)) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))

0 goal(s) more...

0 conjecture(s) more...
>>> case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))(rank : 4.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 6
case lq (reprNew (tree2)) (reprNew (tree3))(rank:5.)
rewrite IH1 in goal at 0(rank:12.)
rewrite <- IH1 in goal at 0(rank:20.)
rewrite <- IH2 in goal at 0(rank:20.)
rewrite <- IH2 in goal at 1(rank:20.)
rewrite <- IH2 in goal at 2(rank:20.)
=================================================
Progress: 22


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
---------------------------------------
if lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) then tf1 (nat1) (repr (tree3)) else tf1 (nat1) (repr (tree2)) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))

0 goal(s) more...

0 conjecture(s) more...
>>> case lq (reprNew (tree2)) (reprNew (tree3))(rank : 4.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (reprNew (tree2)) (reprNew (tree3)) = true
---------------------------------------
if lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) then tf1 (nat1) (repr (tree3)) else tf1 (nat1) (repr (tree2)) = plus (nat1) (reprNew (tree3))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))(rank:5.)
rewrite <- IH2 in goal at 0(rank:12.)
=================================================
Progress: 23


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
>>> case lq (reprNew (tree2)) (reprNew (tree3))(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- IH2 in goal at 0(rank:5.)
=================================================
Progress: 24


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (reprNew (tree2)) (reprNew (tree3)) = true
---------------------------------------
if lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) then tf1 (nat1) (repr (tree3)) else tf1 (nat1) (repr (tree2)) = plus (nat1) (reprNew (tree3))

1 goal(s) more...

0 conjecture(s) more...
>>> case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (reprNew (tree2)) (reprNew (tree3)) = true
Case2 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- IH2 in goal at 0(rank:5.)
=================================================
Progress: 25


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
case lq (reprNew (tree2)) (reprNew (tree3))
rewrite <- IH2 in goal at 0
Prop: tf1 (ZERO) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Tnil)))) = plus (ZERO) (tf1 (ZERO) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Tnil)))))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (tf1 (ZERO) (Tnil))
Prop: tf1 (SUCC (SUCC (SUCC (ZERO)))) (Tnil) = plus (SUCC (SUCC (SUCC (ZERO)))) (tf1 (ZERO) (Tnil))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
case lq (reprNew (tree2)) (reprNew (tree3))
validate generalize_common_subterm_goal
Prop: tf1 (SUCC (SUCC (ZERO))) (repr (Tnil)) = plus (SUCC (SUCC (ZERO))) (reprNew (Tnil))
Prop: tf1 (SUCC (ZERO)) (repr (Tnil)) = plus (SUCC (ZERO)) (reprNew (Tnil))
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (reprNew (Tnil))
=================================================
Progress: 26


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (reprNew (tree2)) (reprNew (tree3)) = true
Case2 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (reprNew (tree2)) (reprNew (tree3)) = true
Case2 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
case lq (reprNew (tree2)) (reprNew (tree3))
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite <- IH2 in goal at 0
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (tf1 (ZERO) (Tnil))
Prop: tf1 (SUCC (SUCC (ZERO))) (Tnil) = plus (SUCC (SUCC (ZERO))) (tf1 (ZERO) (Tnil))
Prop: tf1 (ZERO) (Node (SUCC (ZERO)) (Node (ZERO) (Tnil) (Tnil)) (Tnil)) = plus (ZERO) (tf1 (ZERO) (Node (SUCC (ZERO)) (Node (ZERO) (Tnil) (Tnil)) (Tnil)))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
case lq (reprNew (tree2)) (reprNew (tree3))
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
validate generalize_common_subterm_goal
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (reprNew (Tnil))
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (reprNew (Tnil))
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (reprNew (Tnil))
=================================================
Progress: 27


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
---------------------------------------
if lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) then tf1 (nat1) (repr (tree3)) else tf1 (nat1) (repr (tree2)) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then reprNew (tree3) else reprNew (tree2))

0 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
---------------------------------------
if lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) then tf1 (nat1) (repr (tree3)) else tf1 (nat1) (repr (tree2)) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) then tf1 (ZERO) (repr (tree3)) else reprNew (tree2))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))(rank:4.)
rewrite <- IH1 in goal at 1(rank:11.)
case lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3)))(rank:4.)
=================================================
Progress: 28


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
---------------------------------------
if lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) then tf1 (nat1) (repr (tree3)) else tf1 (nat1) (repr (tree2)) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) then tf1 (ZERO) (repr (tree3)) else reprNew (tree2))

0 goal(s) more...

0 conjecture(s) more...
>>> case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))(rank : 4.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) then tf1 (ZERO) (repr (tree3)) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 7
case lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3)))(rank:5.)
rewrite IH2 in goal at 0(rank:12.)
rewrite IH2 in goal at 1(rank:12.)
rewrite IH2 in goal at 2(rank:12.)
rewrite <- IH1 in goal at 0(rank:20.)
rewrite <- IH1 in goal at 1(rank:20.)
rewrite <- IH1 in goal at 2(rank:20.)
=================================================
Progress: 29


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
---------------------------------------
if lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) then tf1 (nat1) (repr (tree3)) else tf1 (nat1) (repr (tree2)) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) then tf1 (ZERO) (repr (tree3)) else reprNew (tree2))

0 goal(s) more...

0 conjecture(s) more...
>>> case lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3)))(rank : 4.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) = true
---------------------------------------
if lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) then tf1 (nat1) (repr (tree3)) else tf1 (nat1) (repr (tree2)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))(rank:5.)
rewrite IH2 in goal at 0(rank:20.)
=================================================
Progress: 30


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) then tf1 (ZERO) (repr (tree3)) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
>>> case lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3)))(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite IH2 in goal at 0(rank:5.)
=================================================
Progress: 31


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) = true
---------------------------------------
if lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) then tf1 (nat1) (repr (tree3)) else tf1 (nat1) (repr (tree2)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

1 goal(s) more...

0 conjecture(s) more...
>>> case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) = true
Case2 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite IH2 in goal at 0(rank:5.)
=================================================
Progress: 32


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH2 in goal at 0
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
case lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3)))
rewrite IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (reprNew (Tnil))
Prop: tf1 (SUCC (ZERO)) (repr (Node (ZERO) (Tnil) (Tnil))) = plus (SUCC (ZERO)) (reprNew (Node (ZERO) (Tnil) (Tnil)))
Prop: tf1 (SUCC (ZERO)) (repr (Tnil)) = plus (SUCC (ZERO)) (reprNew (Tnil))
previous tactics
simpl in goal
rewrite <- IH2 in goal at 0
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
case lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3)))
Prop: tf1 (SUCC (ZERO)) (Tnil) = plus (SUCC (ZERO)) (tf1 (ZERO) (Tnil))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (tf1 (ZERO) (Tnil))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (tf1 (ZERO) (Tnil))
=================================================
Progress: 33


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) = true
Case2 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) = true
Case2 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH2 in goal at 0
case lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3)))
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (reprNew (Tnil))
Prop: tf1 (SUCC (ZERO)) (repr (Tnil)) = plus (SUCC (ZERO)) (reprNew (Tnil))
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (reprNew (Tnil))
previous tactics
simpl in goal
rewrite <- IH2 in goal at 0
case lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3)))
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (tf1 (ZERO) (Tnil))
Prop: tf1 (SUCC (SUCC (ZERO))) (Tnil) = plus (SUCC (SUCC (ZERO))) (tf1 (ZERO) (Tnil))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (tf1 (ZERO) (Tnil))
=================================================
Progress: 34


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
---------------------------------------
if lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) then tf1 (nat1) (repr (tree3)) else tf1 (nat1) (repr (tree2)) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then reprNew (tree3) else reprNew (tree2))

0 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH2 in goal at 1(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
---------------------------------------
if lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) then tf1 (nat1) (repr (tree3)) else tf1 (nat1) (repr (tree2)) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) then reprNew (tree3) else reprNew (tree2))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))(rank:4.)
rewrite <- IH1 in goal at 1(rank:11.)
=================================================
Progress: 35


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
---------------------------------------
if lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) then tf1 (nat1) (repr (tree3)) else tf1 (nat1) (repr (tree2)) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) then reprNew (tree3) else reprNew (tree2))

0 goal(s) more...

0 conjecture(s) more...
>>> case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))(rank : 4.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) then reprNew (tree3) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 6
case lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3)))(rank:5.)
rewrite IH2 in goal at 0(rank:12.)
rewrite <- IH1 in goal at 0(rank:20.)
rewrite <- IH1 in goal at 1(rank:20.)
rewrite <- IH1 in goal at 2(rank:20.)
rewrite <- IH2 in goal at 0(rank:20.)
=================================================
Progress: 36


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) then reprNew (tree3) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
>>> case lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3)))(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- IH2 in goal at 0(rank:5.)
=================================================
Progress: 37


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH2 in goal at 1
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
case lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3)))
rewrite <- IH2 in goal at 0
Prop: tf1 (ZERO) (Node (SUCC (SUCC (ZERO))) (Tnil) (Tnil)) = plus (ZERO) (tf1 (ZERO) (Node (SUCC (SUCC (ZERO))) (Tnil) (Tnil)))
Prop: tf1 (SUCC (SUCC (SUCC (SUCC (ZERO))))) (Node (ZERO) (Node (SUCC (ZERO)) (Node (ZERO) (Tnil) (Node (ZERO) (Node (SUCC (ZERO)) (Tnil) (Tnil)) (Tnil))) (Tnil)) (Tnil)) = plus (SUCC (SUCC (SUCC (SUCC (ZERO))))) (tf1 (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Node (ZERO) (Tnil) (Node (ZERO) (Node (SUCC (ZERO)) (Tnil) (Tnil)) (Tnil))) (Tnil)) (Tnil)))
Prop: tf1 (SUCC (ZERO)) (Tnil) = plus (SUCC (ZERO)) (tf1 (ZERO) (Tnil))
previous tactics
simpl in goal
rewrite <- IH2 in goal at 1
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
case lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3)))
validate generalize_common_subterm_goal
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (reprNew (Tnil))
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (reprNew (Tnil))
Prop: tf1 (SUCC (ZERO)) (repr (Tnil)) = plus (SUCC (ZERO)) (reprNew (Tnil))
=================================================
Progress: 38


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
---------------------------------------
if lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) then tf1 (nat1) (repr (tree3)) else tf1 (nat1) (repr (tree2)) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then reprNew (tree3) else reprNew (tree2))

0 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH2 in goal at 2(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
---------------------------------------
if lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) then tf1 (nat1) (repr (tree3)) else tf1 (nat1) (repr (tree2)) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (repr (tree3)) else reprNew (tree2))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))(rank:4.)
rewrite <- IH1 in goal at 1(rank:19.)
=================================================
Progress: 39


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
---------------------------------------
if lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) then tf1 (nat1) (repr (tree3)) else tf1 (nat1) (repr (tree2)) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (repr (tree3)) else reprNew (tree2))

0 goal(s) more...

0 conjecture(s) more...
>>> case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))(rank : 4.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (repr (tree3)) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 6
case lq (reprNew (tree2)) (reprNew (tree3))(rank:5.)
rewrite IH2 in goal at 0(rank:12.)
rewrite <- IH1 in goal at 0(rank:20.)
rewrite <- IH1 in goal at 1(rank:20.)
rewrite <- IH1 in goal at 2(rank:20.)
rewrite <- IH2 in goal at 0(rank:20.)
=================================================
Progress: 40


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (repr (tree3)) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
>>> case lq (reprNew (tree2)) (reprNew (tree3))(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite IH2 in goal at 0(rank:5.)
=================================================
Progress: 41


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH2 in goal at 2
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
case lq (reprNew (tree2)) (reprNew (tree3))
rewrite IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (reprNew (Tnil))
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (reprNew (Tnil))
Prop: tf1 (SUCC (ZERO)) (repr (Tnil)) = plus (SUCC (ZERO)) (reprNew (Tnil))
previous tactics
simpl in goal
rewrite <- IH2 in goal at 2
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
case lq (reprNew (tree2)) (reprNew (tree3))
Prop: tf1 (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Tnil) (Tnil)) (Tnil)) = plus (ZERO) (tf1 (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Tnil) (Tnil)) (Tnil)))
Prop: tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil)) = plus (ZERO) (tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil)))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (tf1 (ZERO) (Tnil))
=================================================
Progress: 42


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
---------------------------------------
if lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) then tf1 (nat1) (repr (tree3)) else tf1 (nat1) (repr (tree2)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))

0 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
---------------------------------------
if lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) then tf1 (nat1) (repr (tree3)) else tf1 (nat1) (repr (tree2)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) then tf1 (ZERO) (repr (tree3)) else tf1 (ZERO) (repr (tree2)))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))(rank:4.)
case lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3)))(rank:4.)
=================================================
Progress: 43


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
---------------------------------------
if lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) then tf1 (nat1) (repr (tree3)) else tf1 (nat1) (repr (tree2)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) then tf1 (ZERO) (repr (tree3)) else tf1 (ZERO) (repr (tree2)))

0 goal(s) more...

0 conjecture(s) more...
>>> case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))(rank : 4.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) then tf1 (ZERO) (repr (tree3)) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 7
case lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3)))(rank:5.)
rewrite IH1 in goal at 0(rank:12.)
rewrite IH1 in goal at 1(rank:12.)
rewrite IH1 in goal at 2(rank:12.)
rewrite IH2 in goal at 0(rank:12.)
rewrite IH2 in goal at 1(rank:12.)
rewrite IH2 in goal at 2(rank:12.)
=================================================
Progress: 44


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
---------------------------------------
if lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) then tf1 (nat1) (repr (tree3)) else tf1 (nat1) (repr (tree2)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) then tf1 (ZERO) (repr (tree3)) else tf1 (ZERO) (repr (tree2)))

0 goal(s) more...

0 conjecture(s) more...
>>> case lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3)))(rank : 4.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) = true
---------------------------------------
if lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) then tf1 (nat1) (repr (tree3)) else tf1 (nat1) (repr (tree2)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))(rank:5.)
rewrite IH2 in goal at 0(rank:20.)
=================================================
Progress: 45


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) then tf1 (ZERO) (repr (tree3)) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
>>> case lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3)))(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite IH2 in goal at 0(rank:5.)
=================================================
Progress: 46


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) = true
---------------------------------------
if lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) then tf1 (nat1) (repr (tree3)) else tf1 (nat1) (repr (tree2)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

1 goal(s) more...

0 conjecture(s) more...
>>> case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) = true
Case2 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite IH2 in goal at 0(rank:5.)
=================================================
Progress: 47


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 0
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
case lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3)))
rewrite IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (reprNew (Tnil))
Prop: tf1 (SUCC (ZERO)) (repr (Tnil)) = plus (SUCC (ZERO)) (reprNew (Tnil))
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (reprNew (Tnil))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 0
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
case lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3)))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (tf1 (ZERO) (Tnil))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (tf1 (ZERO) (Tnil))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (tf1 (ZERO) (Tnil))
=================================================
Progress: 48


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) = true
Case2 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) = true
Case2 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 0
case lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3)))
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: tf1 (SUCC (ZERO)) (repr (Tnil)) = plus (SUCC (ZERO)) (reprNew (Tnil))
Prop: tf1 (SUCC (ZERO)) (repr (Node (ZERO) (Tnil) (Tnil))) = plus (SUCC (ZERO)) (reprNew (Node (ZERO) (Tnil) (Tnil)))
Prop: tf1 (ZERO) (repr (Node (SUCC (ZERO)) (Tnil) (Node (ZERO) (Tnil) (Node (SUCC (ZERO)) (Node (ZERO) (Tnil) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil))) (Tnil))))) = plus (ZERO) (reprNew (Node (SUCC (ZERO)) (Tnil) (Node (ZERO) (Tnil) (Node (SUCC (ZERO)) (Node (ZERO) (Tnil) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil))) (Tnil)))))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 0
case lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3)))
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
Prop: tf1 (ZERO) (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Tnil) (Tnil)) (Node (SUCC (ZERO)) (Tnil) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil)))) (Tnil)) = plus (ZERO) (tf1 (ZERO) (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Tnil) (Tnil)) (Node (SUCC (ZERO)) (Tnil) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil)))) (Tnil)))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (tf1 (ZERO) (Tnil))
Prop: tf1 (SUCC (ZERO)) (Tnil) = plus (SUCC (ZERO)) (tf1 (ZERO) (Tnil))
=================================================
Progress: 49


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
---------------------------------------
if lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) then tf1 (nat1) (repr (tree3)) else tf1 (nat1) (repr (tree2)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))

0 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH2 in goal at 1(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
---------------------------------------
if lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) then tf1 (nat1) (repr (tree3)) else tf1 (nat1) (repr (tree2)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))(rank:4.)
=================================================
Progress: 50


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
---------------------------------------
if lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) then tf1 (nat1) (repr (tree3)) else tf1 (nat1) (repr (tree2)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))

0 goal(s) more...

0 conjecture(s) more...
>>> case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))(rank : 4.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 6
case lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3)))(rank:5.)
rewrite IH1 in goal at 0(rank:12.)
rewrite IH1 in goal at 1(rank:12.)
rewrite IH1 in goal at 2(rank:12.)
rewrite IH2 in goal at 0(rank:12.)
rewrite <- IH2 in goal at 0(rank:20.)
=================================================
Progress: 51


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
>>> case lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3)))(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- IH2 in goal at 0(rank:5.)
=================================================
Progress: 52


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 1
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
case lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3)))
rewrite <- IH2 in goal at 0
Prop: tf1 (SUCC (ZERO)) (Tnil) = plus (SUCC (ZERO)) (tf1 (ZERO) (Tnil))
Prop: tf1 (SUCC (ZERO)) (Tnil) = plus (SUCC (ZERO)) (tf1 (ZERO) (Tnil))
Prop: tf1 (SUCC (ZERO)) (Node (ZERO) (Tnil) (Tnil)) = plus (SUCC (ZERO)) (tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil)))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 1
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
case lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3)))
validate generalize_common_subterm_goal
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (reprNew (Tnil))
Prop: tf1 (SUCC (SUCC (SUCC (SUCC (SUCC (ZERO)))))) (repr (Tnil)) = plus (SUCC (SUCC (SUCC (SUCC (SUCC (ZERO)))))) (reprNew (Tnil))
Prop: tf1 (ZERO) (repr (Node (ZERO) (Tnil) (Tnil))) = plus (ZERO) (reprNew (Node (ZERO) (Tnil) (Tnil)))
=================================================
Progress: 53


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
---------------------------------------
if lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) then tf1 (nat1) (repr (tree3)) else tf1 (nat1) (repr (tree2)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))

0 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH2 in goal at 2(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
---------------------------------------
if lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) then tf1 (nat1) (repr (tree3)) else tf1 (nat1) (repr (tree2)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (repr (tree3)) else tf1 (ZERO) (repr (tree2)))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))(rank:4.)
=================================================
Progress: 54


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
---------------------------------------
if lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) then tf1 (nat1) (repr (tree3)) else tf1 (nat1) (repr (tree2)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (repr (tree3)) else tf1 (ZERO) (repr (tree2)))

0 goal(s) more...

0 conjecture(s) more...
>>> case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))(rank : 4.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (repr (tree3)) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 6
case lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3))(rank:5.)
rewrite IH1 in goal at 0(rank:12.)
rewrite IH1 in goal at 1(rank:12.)
rewrite IH1 in goal at 2(rank:12.)
rewrite IH2 in goal at 0(rank:12.)
rewrite <- IH2 in goal at 0(rank:20.)
=================================================
Progress: 55


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (repr (tree3)) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
>>> case lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3))(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite IH2 in goal at 0(rank:5.)
=================================================
Progress: 56


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 2
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
case lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3))
rewrite IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: tf1 (ZERO) (repr (Node (ZERO) (Tnil) (Tnil))) = plus (ZERO) (reprNew (Node (ZERO) (Tnil) (Tnil)))
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (reprNew (Tnil))
Prop: tf1 (SUCC (ZERO)) (repr (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Tnil)))) = plus (SUCC (ZERO)) (reprNew (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Tnil))))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 2
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
case lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3))
Prop: tf1 (ZERO) (Node (SUCC (ZERO)) (Tnil) (Node (ZERO) (Tnil) (Tnil))) = plus (ZERO) (tf1 (ZERO) (Node (SUCC (ZERO)) (Tnil) (Node (ZERO) (Tnil) (Tnil))))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (tf1 (ZERO) (Tnil))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (tf1 (ZERO) (Tnil))
=================================================
Progress: 57


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
---------------------------------------
if lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) then tf1 (nat1) (repr (tree3)) else tf1 (nat1) (repr (tree2)) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))

0 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
---------------------------------------
if lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) then tf1 (nat1) (repr (tree3)) else tf1 (nat1) (repr (tree2)) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) then tf1 (ZERO) (repr (tree3)) else tf1 (ZERO) (repr (tree2)))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))(rank:4.)
case lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3)))(rank:4.)
=================================================
Progress: 58


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
---------------------------------------
if lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) then tf1 (nat1) (repr (tree3)) else tf1 (nat1) (repr (tree2)) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) then tf1 (ZERO) (repr (tree3)) else tf1 (ZERO) (repr (tree2)))

0 goal(s) more...

0 conjecture(s) more...
>>> case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))(rank : 4.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) then tf1 (ZERO) (repr (tree3)) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 6
case lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3)))(rank:5.)
rewrite IH1 in goal at 0(rank:12.)
rewrite IH2 in goal at 0(rank:12.)
rewrite IH2 in goal at 1(rank:12.)
rewrite IH2 in goal at 2(rank:12.)
rewrite <- IH1 in goal at 0(rank:20.)
=================================================
Progress: 59


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
---------------------------------------
if lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) then tf1 (nat1) (repr (tree3)) else tf1 (nat1) (repr (tree2)) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) then tf1 (ZERO) (repr (tree3)) else tf1 (ZERO) (repr (tree2)))

0 goal(s) more...

0 conjecture(s) more...
>>> case lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3)))(rank : 4.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) = true
---------------------------------------
if lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) then tf1 (nat1) (repr (tree3)) else tf1 (nat1) (repr (tree2)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))(rank:5.)
rewrite IH2 in goal at 0(rank:20.)
=================================================
Progress: 60


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) then tf1 (ZERO) (repr (tree3)) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
>>> case lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3)))(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite IH2 in goal at 0(rank:5.)
=================================================
Progress: 61


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) = true
---------------------------------------
if lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) then tf1 (nat1) (repr (tree3)) else tf1 (nat1) (repr (tree2)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

1 goal(s) more...

0 conjecture(s) more...
>>> case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) = true
Case2 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite IH2 in goal at 0(rank:5.)
=================================================
Progress: 62


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
rewrite <- IH2 in goal at 0
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
case lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3)))
rewrite IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: tf1 (SUCC (ZERO)) (repr (Tnil)) = plus (SUCC (ZERO)) (reprNew (Tnil))
Prop: tf1 (ZERO) (repr (Node (SUCC (ZERO)) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil)) (Tnil))) = plus (ZERO) (reprNew (Node (SUCC (ZERO)) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil)) (Tnil)))
Prop: tf1 (ZERO) (repr (Node (ZERO) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil)) (Tnil))) = plus (ZERO) (reprNew (Node (ZERO) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil)) (Tnil)))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
rewrite <- IH2 in goal at 0
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
case lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3)))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (tf1 (ZERO) (Tnil))
Prop: tf1 (ZERO) (Node (SUCC (ZERO)) (Tnil) (Tnil)) = plus (ZERO) (tf1 (ZERO) (Node (SUCC (ZERO)) (Tnil) (Tnil)))
Prop: tf1 (SUCC (ZERO)) (Tnil) = plus (SUCC (ZERO)) (tf1 (ZERO) (Tnil))
=================================================
Progress: 63


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) = true
Case2 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) = true
Case2 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
rewrite <- IH2 in goal at 0
case lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3)))
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (reprNew (Tnil))
Prop: tf1 (SUCC (SUCC (ZERO))) (repr (Tnil)) = plus (SUCC (SUCC (ZERO))) (reprNew (Tnil))
Prop: tf1 (SUCC (ZERO)) (repr (Tnil)) = plus (SUCC (ZERO)) (reprNew (Tnil))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
rewrite <- IH2 in goal at 0
case lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3)))
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (tf1 (ZERO) (Tnil))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (tf1 (ZERO) (Tnil))
Prop: tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil)) = plus (ZERO) (tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil)))
=================================================
Progress: 64


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
---------------------------------------
if lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) then tf1 (nat1) (repr (tree3)) else tf1 (nat1) (repr (tree2)) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))

0 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH2 in goal at 1(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
---------------------------------------
if lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) then tf1 (nat1) (repr (tree3)) else tf1 (nat1) (repr (tree2)) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))(rank:4.)
=================================================
Progress: 65


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
---------------------------------------
if lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) then tf1 (nat1) (repr (tree3)) else tf1 (nat1) (repr (tree2)) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))

0 goal(s) more...

0 conjecture(s) more...
>>> case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))(rank : 4.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 5
case lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3)))(rank:5.)
rewrite IH1 in goal at 0(rank:12.)
rewrite IH2 in goal at 0(rank:12.)
rewrite <- IH1 in goal at 0(rank:20.)
rewrite <- IH2 in goal at 0(rank:20.)
=================================================
Progress: 66


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
>>> case lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3)))(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- IH2 in goal at 0(rank:5.)
=================================================
Progress: 67


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
rewrite <- IH2 in goal at 1
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
case lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3)))
rewrite <- IH2 in goal at 0
Prop: tf1 (SUCC (ZERO)) (Tnil) = plus (SUCC (ZERO)) (tf1 (ZERO) (Tnil))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (tf1 (ZERO) (Tnil))
Prop: tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil)) = plus (ZERO) (tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil)))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
rewrite <- IH2 in goal at 1
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
case lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3)))
validate generalize_common_subterm_goal
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (reprNew (Tnil))
Prop: tf1 (SUCC (SUCC (ZERO))) (repr (Tnil)) = plus (SUCC (SUCC (ZERO))) (reprNew (Tnil))
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (reprNew (Tnil))
=================================================
Progress: 68


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
---------------------------------------
if lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) then tf1 (nat1) (repr (tree3)) else tf1 (nat1) (repr (tree2)) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))

0 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH2 in goal at 2(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
---------------------------------------
if lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) then tf1 (nat1) (repr (tree3)) else tf1 (nat1) (repr (tree2)) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (repr (tree3)) else tf1 (ZERO) (repr (tree2)))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))(rank:4.)
=================================================
Progress: 69


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
---------------------------------------
if lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) then tf1 (nat1) (repr (tree3)) else tf1 (nat1) (repr (tree2)) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (repr (tree3)) else tf1 (ZERO) (repr (tree2)))

0 goal(s) more...

0 conjecture(s) more...
>>> case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))(rank : 4.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (repr (tree3)) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 5
case lq (reprNew (tree2)) (reprNew (tree3))(rank:5.)
rewrite IH1 in goal at 0(rank:12.)
rewrite IH2 in goal at 0(rank:12.)
rewrite <- IH1 in goal at 0(rank:20.)
rewrite <- IH2 in goal at 0(rank:20.)
=================================================
Progress: 70


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (repr (tree3)) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
>>> case lq (reprNew (tree2)) (reprNew (tree3))(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite IH2 in goal at 0(rank:5.)
=================================================
Progress: 71


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
rewrite <- IH2 in goal at 2
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
case lq (reprNew (tree2)) (reprNew (tree3))
rewrite IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: tf1 (SUCC (ZERO)) (repr (Tnil)) = plus (SUCC (ZERO)) (reprNew (Tnil))
Prop: tf1 (SUCC (SUCC (ZERO))) (repr (Tnil)) = plus (SUCC (SUCC (ZERO))) (reprNew (Tnil))
Prop: tf1 (SUCC (SUCC (ZERO))) (repr (Tnil)) = plus (SUCC (SUCC (ZERO))) (reprNew (Tnil))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
rewrite <- IH2 in goal at 2
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
case lq (reprNew (tree2)) (reprNew (tree3))
Prop: tf1 (SUCC (ZERO)) (Tnil) = plus (SUCC (ZERO)) (tf1 (ZERO) (Tnil))
Prop: tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil)) = plus (ZERO) (tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil)))
Prop: tf1 (SUCC (SUCC (ZERO))) (Node (ZERO) (Tnil) (Tnil)) = plus (SUCC (SUCC (ZERO))) (tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil)))
=================================================
Progress: 72


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
---------------------------------------
if lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) then tf1 (nat1) (repr (tree3)) else tf1 (nat1) (repr (tree2)) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) then tf1 (ZERO) (repr (tree3)) else reprNew (tree2))

0 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 1(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
---------------------------------------
if lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) then tf1 (nat1) (repr (tree3)) else tf1 (nat1) (repr (tree2)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) then tf1 (ZERO) (repr (tree3)) else reprNew (tree2))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))(rank:4.)
case lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3)))(rank:4.)
=================================================
Progress: 73


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
---------------------------------------
if lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) then tf1 (nat1) (repr (tree3)) else tf1 (nat1) (repr (tree2)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) then tf1 (ZERO) (repr (tree3)) else reprNew (tree2))

0 goal(s) more...

0 conjecture(s) more...
>>> case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))(rank : 4.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) then tf1 (ZERO) (repr (tree3)) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 6
case lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3)))(rank:5.)
rewrite IH1 in goal at 0(rank:12.)
rewrite IH2 in goal at 0(rank:12.)
rewrite IH2 in goal at 1(rank:12.)
rewrite IH2 in goal at 2(rank:12.)
rewrite <- IH1 in goal at 0(rank:20.)
=================================================
Progress: 74


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
---------------------------------------
if lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) then tf1 (nat1) (repr (tree3)) else tf1 (nat1) (repr (tree2)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) then tf1 (ZERO) (repr (tree3)) else reprNew (tree2))

0 goal(s) more...

0 conjecture(s) more...
>>> case lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3)))(rank : 4.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) = true
---------------------------------------
if lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) then tf1 (nat1) (repr (tree3)) else tf1 (nat1) (repr (tree2)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))(rank:5.)
rewrite IH2 in goal at 0(rank:20.)
=================================================
Progress: 75


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) then tf1 (ZERO) (repr (tree3)) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
>>> case lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3)))(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite IH2 in goal at 0(rank:5.)
=================================================
Progress: 76


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) = true
---------------------------------------
if lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) then tf1 (nat1) (repr (tree3)) else tf1 (nat1) (repr (tree2)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

1 goal(s) more...

0 conjecture(s) more...
>>> case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) = true
Case2 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite IH2 in goal at 0(rank:5.)
=================================================
Progress: 77


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH2 in goal at 0
rewrite <- IH1 in goal at 1
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
case lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3)))
rewrite IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: tf1 (SUCC (SUCC (ZERO))) (repr (Tnil)) = plus (SUCC (SUCC (ZERO))) (reprNew (Tnil))
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (reprNew (Tnil))
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (reprNew (Tnil))
previous tactics
simpl in goal
rewrite <- IH2 in goal at 0
rewrite <- IH1 in goal at 1
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
case lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3)))
Prop: tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil)) = plus (ZERO) (tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil)))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (tf1 (ZERO) (Tnil))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (tf1 (ZERO) (Tnil))
=================================================
Progress: 78


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) = true
Case2 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) = true
Case2 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH2 in goal at 0
rewrite <- IH1 in goal at 1
case lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3)))
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (reprNew (Tnil))
Prop: tf1 (SUCC (ZERO)) (repr (Tnil)) = plus (SUCC (ZERO)) (reprNew (Tnil))
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (reprNew (Tnil))
previous tactics
simpl in goal
rewrite <- IH2 in goal at 0
rewrite <- IH1 in goal at 1
case lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3)))
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (tf1 (ZERO) (Tnil))
Prop: tf1 (ZERO) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Node (SUCC (ZERO)) (Tnil) (Tnil))))) = plus (ZERO) (tf1 (ZERO) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Node (SUCC (ZERO)) (Tnil) (Tnil))))))
Prop: tf1 (SUCC (ZERO)) (Tnil) = plus (SUCC (ZERO)) (tf1 (ZERO) (Tnil))
=================================================
Progress: 79


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
---------------------------------------
if lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) then tf1 (nat1) (repr (tree3)) else tf1 (nat1) (repr (tree2)) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) then reprNew (tree3) else reprNew (tree2))

0 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 1(rank : 11.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
---------------------------------------
if lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) then tf1 (nat1) (repr (tree3)) else tf1 (nat1) (repr (tree2)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) then reprNew (tree3) else reprNew (tree2))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))(rank:4.)
=================================================
Progress: 80


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
---------------------------------------
if lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) then tf1 (nat1) (repr (tree3)) else tf1 (nat1) (repr (tree2)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) then reprNew (tree3) else reprNew (tree2))

0 goal(s) more...

0 conjecture(s) more...
>>> case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))(rank : 4.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) then reprNew (tree3) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 5
case lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3)))(rank:5.)
rewrite IH1 in goal at 0(rank:12.)
rewrite IH2 in goal at 0(rank:12.)
rewrite <- IH1 in goal at 0(rank:20.)
rewrite <- IH2 in goal at 0(rank:20.)
=================================================
Progress: 81


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) then reprNew (tree3) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
>>> case lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3)))(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- IH2 in goal at 0(rank:5.)
=================================================
Progress: 82


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH2 in goal at 1
rewrite <- IH1 in goal at 1
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
case lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3)))
rewrite <- IH2 in goal at 0
Prop: tf1 (SUCC (ZERO)) (Node (SUCC (SUCC (ZERO))) (Tnil) (Tnil)) = plus (SUCC (ZERO)) (tf1 (ZERO) (Node (SUCC (SUCC (ZERO))) (Tnil) (Tnil)))
Prop: tf1 (ZERO) (Node (SUCC (SUCC (ZERO))) (Tnil) (Tnil)) = plus (ZERO) (tf1 (ZERO) (Node (SUCC (SUCC (ZERO))) (Tnil) (Tnil)))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (tf1 (ZERO) (Tnil))
previous tactics
simpl in goal
rewrite <- IH2 in goal at 1
rewrite <- IH1 in goal at 1
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
case lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3)))
validate generalize_common_subterm_goal
Prop: tf1 (SUCC (ZERO)) (repr (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Tnil) (Node (ZERO) (Tnil) (Tnil))) (Tnil))) = plus (SUCC (ZERO)) (reprNew (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Tnil) (Node (ZERO) (Tnil) (Tnil))) (Tnil)))
Prop: tf1 (SUCC (ZERO)) (repr (Tnil)) = plus (SUCC (ZERO)) (reprNew (Tnil))
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (reprNew (Tnil))
=================================================
Progress: 83


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (reprNew (tree2)) (reprNew (tree3)) = true
---------------------------------------
if lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) then tf1 (nat1) (repr (tree3)) else tf1 (nat1) (repr (tree2)) = plus (nat1) (reprNew (tree3))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 12.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (reprNew (tree2)) (reprNew (tree3)) = true
---------------------------------------
if lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) then tf1 (nat1) (repr (tree3)) else tf1 (nat1) (repr (tree2)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))(rank:5.)
=================================================
Progress: 84


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (reprNew (tree2)) (reprNew (tree3)) = true
---------------------------------------
if lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) then tf1 (nat1) (repr (tree3)) else tf1 (nat1) (repr (tree2)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

1 goal(s) more...

0 conjecture(s) more...
>>> case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (reprNew (tree2)) (reprNew (tree3)) = true
Case2 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite IH2 in goal at 0(rank:5.)
=================================================
Progress: 85


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (reprNew (tree2)) (reprNew (tree3)) = true
Case2 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (reprNew (tree2)) (reprNew (tree3)) = true
Case2 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (reprNew (tree2)) (reprNew (tree3))
rewrite <- IH2 in goal at 0
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (reprNew (Tnil))
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (reprNew (Tnil))
Prop: tf1 (SUCC (SUCC (SUCC (ZERO)))) (repr (Node (SUCC (SUCC (ZERO))) (Tnil) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil)) (Node (ZERO) (Tnil) (Tnil))) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Tnil))))))) = plus (SUCC (SUCC (SUCC (ZERO)))) (reprNew (Node (SUCC (SUCC (ZERO))) (Tnil) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil)) (Node (ZERO) (Tnil) (Tnil))) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Tnil)))))))
previous tactics
simpl in goal
case lq (reprNew (tree2)) (reprNew (tree3))
rewrite <- IH2 in goal at 0
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (tf1 (ZERO) (Tnil))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (tf1 (ZERO) (Tnil))
Prop: tf1 (ZERO) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Tnil)))) = plus (ZERO) (tf1 (ZERO) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Tnil)))))
=================================================
Progress: 86


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 12.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then reprNew (tree3) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
case lq (reprNew (tree2)) (reprNew (tree3))(rank:5.)
rewrite <- IH2 in goal at 2(rank:20.)
rewrite <- IH2 in goal at 0(rank:20.)
rewrite <- IH2 in goal at 1(rank:20.)
=================================================
Progress: 87


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then reprNew (tree3) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
>>> case lq (reprNew (tree2)) (reprNew (tree3))(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- IH2 in goal at 0(rank:5.)
=================================================
Progress: 88


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH1 in goal at 0
case lq (reprNew (tree2)) (reprNew (tree3))
rewrite <- IH2 in goal at 0
Prop: tf1 (SUCC (ZERO)) (Node (ZERO) (Tnil) (Tnil)) = plus (SUCC (ZERO)) (tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil)))
Prop: tf1 (SUCC (ZERO)) (Tnil) = plus (SUCC (ZERO)) (tf1 (ZERO) (Tnil))
Prop: tf1 (ZERO) (Node (ZERO) (Tnil) (Node (SUCC (SUCC (ZERO))) (Tnil) (Tnil))) = plus (ZERO) (tf1 (ZERO) (Node (ZERO) (Tnil) (Node (SUCC (SUCC (ZERO))) (Tnil) (Tnil))))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH1 in goal at 0
case lq (reprNew (tree2)) (reprNew (tree3))
validate generalize_common_subterm_goal
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (reprNew (Tnil))
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (reprNew (Tnil))
Prop: tf1 (ZERO) (repr (Node (SUCC (ZERO)) (Tnil) (Tnil))) = plus (ZERO) (reprNew (Node (SUCC (ZERO)) (Tnil) (Tnil)))
=================================================
Progress: 89


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 1(rank : 12.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
case lq (reprNew (tree2)) (reprNew (tree3))(rank:5.)
rewrite <- IH2 in goal at 2(rank:20.)
rewrite <- IH2 in goal at 0(rank:20.)
rewrite <- IH2 in goal at 1(rank:20.)
=================================================
Progress: 90


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
>>> case lq (reprNew (tree2)) (reprNew (tree3))(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- IH2 in goal at 0(rank:5.)
=================================================
Progress: 91


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH1 in goal at 1
case lq (reprNew (tree2)) (reprNew (tree3))
rewrite <- IH2 in goal at 0
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (tf1 (ZERO) (Tnil))
Prop: tf1 (ZERO) (Node (SUCC (ZERO)) (Tnil) (Node (SUCC (ZERO)) (Tnil) (Node (ZERO) (Tnil) (Tnil)))) = plus (ZERO) (tf1 (ZERO) (Node (SUCC (ZERO)) (Tnil) (Node (SUCC (ZERO)) (Tnil) (Node (ZERO) (Tnil) (Tnil)))))
Prop: tf1 (SUCC (SUCC (ZERO))) (Node (ZERO) (Tnil) (Tnil)) = plus (SUCC (SUCC (ZERO))) (tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil)))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH1 in goal at 1
case lq (reprNew (tree2)) (reprNew (tree3))
validate generalize_common_subterm_goal
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (reprNew (Tnil))
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (reprNew (Tnil))
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (reprNew (Tnil))
=================================================
Progress: 92


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 2(rank : 12.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then reprNew (tree3) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
case lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3))(rank:5.)
rewrite <- IH2 in goal at 2(rank:20.)
rewrite <- IH2 in goal at 0(rank:20.)
rewrite <- IH2 in goal at 1(rank:20.)
=================================================
Progress: 93


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then reprNew (tree3) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
>>> case lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3))(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- IH2 in goal at 0(rank:5.)
=================================================
Progress: 94


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH1 in goal at 2
case lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3))
rewrite <- IH2 in goal at 0
Prop: tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil)) = plus (ZERO) (tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil)))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (tf1 (ZERO) (Tnil))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (tf1 (ZERO) (Tnil))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH1 in goal at 2
case lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3))
validate generalize_common_subterm_goal
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (reprNew (Tnil))
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (reprNew (Tnil))
Prop: tf1 (SUCC (ZERO)) (repr (Tnil)) = plus (SUCC (ZERO)) (reprNew (Tnil))
=================================================
Progress: 95


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) = true
---------------------------------------
if lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) then tf1 (nat1) (repr (tree3)) else tf1 (nat1) (repr (tree2)) = plus (nat1) (reprNew (tree3))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 12.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) = true
---------------------------------------
if lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) then tf1 (nat1) (repr (tree3)) else tf1 (nat1) (repr (tree2)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))(rank:5.)
=================================================
Progress: 96


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) = true
---------------------------------------
if lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) then tf1 (nat1) (repr (tree3)) else tf1 (nat1) (repr (tree2)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

1 goal(s) more...

0 conjecture(s) more...
>>> case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) = true
Case2 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite IH2 in goal at 0(rank:5.)
=================================================
Progress: 97


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) = true
Case2 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) = true
Case2 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3))
rewrite <- IH2 in goal at 0
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: tf1 (ZERO) (repr (Node (ZERO) (Node (SUCC (SUCC (SUCC (ZERO)))) (Tnil) (Tnil)) (Tnil))) = plus (ZERO) (reprNew (Node (ZERO) (Node (SUCC (SUCC (SUCC (ZERO)))) (Tnil) (Tnil)) (Tnil)))
Prop: tf1 (SUCC (SUCC (ZERO))) (repr (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Tnil)))) = plus (SUCC (SUCC (ZERO))) (reprNew (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Tnil))))
Prop: tf1 (SUCC (ZERO)) (repr (Tnil)) = plus (SUCC (ZERO)) (reprNew (Tnil))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
case lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3))
rewrite <- IH2 in goal at 0
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (tf1 (ZERO) (Tnil))
Prop: tf1 (SUCC (ZERO)) (Tnil) = plus (SUCC (ZERO)) (tf1 (ZERO) (Tnil))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (tf1 (ZERO) (Tnil))
=================================================
Progress: 98


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 12.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then reprNew (tree3) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
case lq (reprNew (tree2)) (reprNew (tree3))(rank:5.)
rewrite <- IH2 in goal at 2(rank:20.)
rewrite <- IH2 in goal at 0(rank:20.)
rewrite <- IH2 in goal at 1(rank:20.)
=================================================
Progress: 99


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then reprNew (tree3) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
>>> case lq (reprNew (tree2)) (reprNew (tree3))(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- IH2 in goal at 0(rank:5.)
=================================================
Progress: 100


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH1 in goal at 0
case lq (reprNew (tree2)) (reprNew (tree3))
rewrite <- IH2 in goal at 0
Prop: tf1 (SUCC (ZERO)) (Tnil) = plus (SUCC (ZERO)) (tf1 (ZERO) (Tnil))
Prop: tf1 (SUCC (ZERO)) (Node (ZERO) (Tnil) (Tnil)) = plus (SUCC (ZERO)) (tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil)))
Prop: tf1 (SUCC (SUCC (ZERO))) (Tnil) = plus (SUCC (SUCC (ZERO))) (tf1 (ZERO) (Tnil))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH1 in goal at 0
case lq (reprNew (tree2)) (reprNew (tree3))
validate generalize_common_subterm_goal
Prop: tf1 (SUCC (ZERO)) (repr (Tnil)) = plus (SUCC (ZERO)) (reprNew (Tnil))
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (reprNew (Tnil))
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (reprNew (Tnil))
=================================================
Progress: 101


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (reprNew (tree2)) (reprNew (tree3)) = true
---------------------------------------
if lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) then tf1 (nat1) (repr (tree3)) else tf1 (nat1) (repr (tree2)) = plus (nat1) (reprNew (tree3))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 12.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (reprNew (tree2)) (reprNew (tree3)) = true
---------------------------------------
if lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) then tf1 (nat1) (repr (tree3)) else tf1 (nat1) (repr (tree2)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))(rank:5.)
=================================================
Progress: 102


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (reprNew (tree2)) (reprNew (tree3)) = true
---------------------------------------
if lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) then tf1 (nat1) (repr (tree3)) else tf1 (nat1) (repr (tree2)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

1 goal(s) more...

0 conjecture(s) more...
>>> case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (reprNew (tree2)) (reprNew (tree3)) = true
Case2 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite IH2 in goal at 0(rank:5.)
=================================================
Progress: 103


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (reprNew (tree2)) (reprNew (tree3)) = true
Case2 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (reprNew (tree2)) (reprNew (tree3)) = true
Case2 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
case lq (reprNew (tree2)) (reprNew (tree3))
rewrite <- IH2 in goal at 0
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (reprNew (Tnil))
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (reprNew (Tnil))
Prop: tf1 (SUCC (ZERO)) (repr (Tnil)) = plus (SUCC (ZERO)) (reprNew (Tnil))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
case lq (reprNew (tree2)) (reprNew (tree3))
rewrite <- IH2 in goal at 0
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (tf1 (ZERO) (Tnil))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (tf1 (ZERO) (Tnil))
Prop: tf1 (SUCC (SUCC (ZERO))) (Tnil) = plus (SUCC (SUCC (ZERO))) (tf1 (ZERO) (Tnil))
=================================================
Progress: 104


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) then tf1 (ZERO) (repr (tree3)) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 12.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then reprNew (tree3) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
case lq (reprNew (tree2)) (reprNew (tree3))(rank:5.)
rewrite <- IH1 in goal at 2(rank:20.)
rewrite <- IH1 in goal at 0(rank:20.)
rewrite <- IH1 in goal at 1(rank:20.)
=================================================
Progress: 105


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then reprNew (tree3) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
>>> case lq (reprNew (tree2)) (reprNew (tree3))(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- IH2 in goal at 0(rank:5.)
=================================================
Progress: 106


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH2 in goal at 0
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH2 in goal at 0
case lq (reprNew (tree2)) (reprNew (tree3))
rewrite <- IH2 in goal at 0
Prop: tf1 (SUCC (SUCC (SUCC (ZERO)))) (Tnil) = plus (SUCC (SUCC (SUCC (ZERO)))) (tf1 (ZERO) (Tnil))
Prop: tf1 (SUCC (SUCC (ZERO))) (Tnil) = plus (SUCC (SUCC (ZERO))) (tf1 (ZERO) (Tnil))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (tf1 (ZERO) (Tnil))
previous tactics
simpl in goal
rewrite <- IH2 in goal at 0
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH2 in goal at 0
case lq (reprNew (tree2)) (reprNew (tree3))
validate generalize_common_subterm_goal
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (reprNew (Tnil))
Prop: tf1 (SUCC (SUCC (ZERO))) (repr (Tnil)) = plus (SUCC (SUCC (ZERO))) (reprNew (Tnil))
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (reprNew (Tnil))
=================================================
Progress: 107


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) then tf1 (ZERO) (repr (tree3)) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH2 in goal at 1(rank : 12.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (repr (tree3)) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
rewrite <- IH1 in goal at 0(rank:20.)
rewrite <- IH1 in goal at 1(rank:20.)
rewrite <- IH1 in goal at 2(rank:20.)
=================================================
Progress: 108


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) then tf1 (ZERO) (repr (tree3)) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH2 in goal at 2(rank : 12.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) then reprNew (tree3) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
rewrite <- IH1 in goal at 0(rank:20.)
rewrite <- IH1 in goal at 1(rank:20.)
rewrite <- IH1 in goal at 2(rank:20.)
=================================================
Progress: 109


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) then reprNew (tree3) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 12.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then reprNew (tree3) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
case lq (reprNew (tree2)) (reprNew (tree3))(rank:5.)
rewrite <- IH1 in goal at 2(rank:20.)
rewrite <- IH1 in goal at 0(rank:20.)
rewrite <- IH1 in goal at 1(rank:20.)
=================================================
Progress: 110


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then reprNew (tree3) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
>>> case lq (reprNew (tree2)) (reprNew (tree3))(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- IH2 in goal at 0(rank:5.)
=================================================
Progress: 111


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH2 in goal at 1
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH2 in goal at 0
case lq (reprNew (tree2)) (reprNew (tree3))
rewrite <- IH2 in goal at 0
Prop: tf1 (ZERO) (Node (SUCC (ZERO)) (Tnil) (Tnil)) = plus (ZERO) (tf1 (ZERO) (Node (SUCC (ZERO)) (Tnil) (Tnil)))
Prop: tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil)) = plus (ZERO) (tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil)))
Prop: tf1 (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Tnil) (Tnil)) (Tnil)) = plus (ZERO) (tf1 (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Tnil) (Tnil)) (Tnil)))
previous tactics
simpl in goal
rewrite <- IH2 in goal at 1
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH2 in goal at 0
case lq (reprNew (tree2)) (reprNew (tree3))
validate generalize_common_subterm_goal
Prop: tf1 (SUCC (ZERO)) (repr (Tnil)) = plus (SUCC (ZERO)) (reprNew (Tnil))
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (reprNew (Tnil))
Prop: tf1 (SUCC (SUCC (ZERO))) (repr (Tnil)) = plus (SUCC (SUCC (ZERO))) (reprNew (Tnil))
=================================================
Progress: 112


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (repr (tree3)) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 12.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then reprNew (tree3) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
rewrite <- IH1 in goal at 0(rank:20.)
rewrite <- IH1 in goal at 1(rank:20.)
rewrite <- IH1 in goal at 2(rank:20.)
=================================================
Progress: 113


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) then tf1 (ZERO) (repr (tree3)) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 12.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) then tf1 (ZERO) (repr (tree3)) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
case lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3)))(rank:5.)
rewrite IH2 in goal at 2(rank:12.)
rewrite IH2 in goal at 0(rank:12.)
rewrite IH2 in goal at 1(rank:12.)
=================================================
Progress: 114


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) then tf1 (ZERO) (repr (tree3)) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
>>> case lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3)))(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite IH2 in goal at 0(rank:5.)
=================================================
Progress: 115


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 0
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH1 in goal at 0
case lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3)))
rewrite IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: tf1 (ZERO) (repr (Node (ZERO) (Node (SUCC (ZERO)) (Tnil) (Tnil)) (Tnil))) = plus (ZERO) (reprNew (Node (ZERO) (Node (SUCC (ZERO)) (Tnil) (Tnil)) (Tnil)))
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (reprNew (Tnil))
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (reprNew (Tnil))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 0
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH1 in goal at 0
case lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3)))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (tf1 (ZERO) (Tnil))
Prop: tf1 (SUCC (SUCC (SUCC (ZERO)))) (Tnil) = plus (SUCC (SUCC (SUCC (ZERO)))) (tf1 (ZERO) (Tnil))
Prop: tf1 (SUCC (ZERO)) (Node (ZERO) (Node (SUCC (ZERO)) (Tnil) (Tnil)) (Tnil)) = plus (SUCC (ZERO)) (tf1 (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Tnil) (Tnil)) (Tnil)))
=================================================
Progress: 116


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) then tf1 (ZERO) (repr (tree3)) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 1(rank : 12.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) then tf1 (ZERO) (repr (tree3)) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
case lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3)))(rank:5.)
rewrite IH2 in goal at 2(rank:12.)
rewrite IH2 in goal at 0(rank:12.)
rewrite IH2 in goal at 1(rank:12.)
=================================================
Progress: 117


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) then tf1 (ZERO) (repr (tree3)) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
>>> case lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3)))(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite IH2 in goal at 0(rank:5.)
=================================================
Progress: 118


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 0
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH1 in goal at 1
case lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3)))
rewrite IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: tf1 (ZERO) (repr (Node (SUCC (SUCC (ZERO))) (Tnil) (Tnil))) = plus (ZERO) (reprNew (Node (SUCC (SUCC (ZERO))) (Tnil) (Tnil)))
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (reprNew (Tnil))
Prop: tf1 (SUCC (ZERO)) (repr (Tnil)) = plus (SUCC (ZERO)) (reprNew (Tnil))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 0
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH1 in goal at 1
case lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3)))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (tf1 (ZERO) (Tnil))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (tf1 (ZERO) (Tnil))
Prop: tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil)) = plus (ZERO) (tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil)))
=================================================
Progress: 119


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) then tf1 (ZERO) (repr (tree3)) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 2(rank : 12.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) then tf1 (ZERO) (repr (tree3)) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
case lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3)))(rank:5.)
rewrite IH2 in goal at 2(rank:12.)
rewrite IH2 in goal at 0(rank:12.)
rewrite IH2 in goal at 1(rank:12.)
=================================================
Progress: 120


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) then tf1 (ZERO) (repr (tree3)) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
>>> case lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3)))(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite IH2 in goal at 0(rank:5.)
=================================================
Progress: 121


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 0
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH1 in goal at 2
case lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3)))
rewrite IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: tf1 (ZERO) (repr (Node (ZERO) (Tnil) (Node (SUCC (ZERO)) (Node (ZERO) (Tnil) (Tnil)) (Node (ZERO) (Tnil) (Tnil))))) = plus (ZERO) (reprNew (Node (ZERO) (Tnil) (Node (SUCC (ZERO)) (Node (ZERO) (Tnil) (Tnil)) (Node (ZERO) (Tnil) (Tnil)))))
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (reprNew (Tnil))
Prop: tf1 (ZERO) (repr (Node (ZERO) (Tnil) (Tnil))) = plus (ZERO) (reprNew (Node (ZERO) (Tnil) (Tnil)))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 0
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH1 in goal at 2
case lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3)))
Prop: tf1 (SUCC (SUCC (ZERO))) (Node (SUCC (SUCC (ZERO))) (Tnil) (Tnil)) = plus (SUCC (SUCC (ZERO))) (tf1 (ZERO) (Node (SUCC (SUCC (ZERO))) (Tnil) (Tnil)))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (tf1 (ZERO) (Tnil))
Prop: tf1 (SUCC (ZERO)) (Tnil) = plus (SUCC (ZERO)) (tf1 (ZERO) (Tnil))
=================================================
Progress: 122


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) then tf1 (ZERO) (repr (tree3)) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 12.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3))(rank:5.)
=================================================
Progress: 123


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
>>> case lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3))(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- IH2 in goal at 0(rank:5.)
=================================================
Progress: 124


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 0
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH2 in goal at 0
case lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3))
rewrite <- IH2 in goal at 0
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (tf1 (ZERO) (Tnil))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (tf1 (ZERO) (Tnil))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (tf1 (ZERO) (Tnil))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 0
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH2 in goal at 0
case lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3))
validate generalize_common_subterm_goal
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (reprNew (Tnil))
Prop: tf1 (ZERO) (repr (Node (SUCC (ZERO)) (Tnil) (Node (ZERO) (Tnil) (Tnil)))) = plus (ZERO) (reprNew (Node (SUCC (ZERO)) (Tnil) (Node (ZERO) (Tnil) (Tnil))))
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (reprNew (Tnil))
=================================================
Progress: 125


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) then tf1 (ZERO) (repr (tree3)) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH2 in goal at 1(rank : 12.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (repr (tree3)) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 0
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH2 in goal at 1
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (if lq (tf1 (ZERO) (repr (Node (SUCC (ZERO)) (Tnil) (Tnil)))) (reprNew (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (repr (Node (SUCC (ZERO)) (Tnil) (Tnil))))
Prop: tf1 (SUCC (ZERO)) (Tnil) = plus (SUCC (ZERO)) (if lq (tf1 (ZERO) (repr (Tnil))) (reprNew (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (repr (Tnil)))
Prop: tf1 (SUCC (ZERO)) (Node (SUCC (ZERO)) (Tnil) (Tnil)) = plus (SUCC (ZERO)) (if lq (tf1 (ZERO) (repr (Tnil))) (reprNew (Tnil)) then tf1 (ZERO) (Node (SUCC (ZERO)) (Tnil) (Tnil)) else tf1 (ZERO) (repr (Tnil)))
validate generalize_common_subterm_goal
Prop: tf1 (ZERO) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil)) = plus (ZERO) (if lq (tf1 (ZERO) (repr (Tnil))) (reprNew (Tnil)) then tf1 (ZERO) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil)) else tf1 (ZERO) (repr (Tnil)))
Prop: tf1 (SUCC (SUCC (ZERO))) (Tnil) = plus (SUCC (SUCC (ZERO))) (if lq (tf1 (ZERO) (repr (Node (ZERO) (Tnil) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil))))) (reprNew (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (repr (Node (ZERO) (Tnil) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil)))))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (if lq (tf1 (ZERO) (repr (Tnil))) (reprNew (Node (SUCC (ZERO)) (Tnil) (Tnil))) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (repr (Tnil)))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 0
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (if lq (tf1 (ZERO) (repr (Tnil))) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (repr (Tnil)))
Prop: tf1 (ZERO) (Node (ZERO) (Node (ZERO) (Tnil) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil))) (Tnil)) = plus (ZERO) (if lq (tf1 (ZERO) (repr (Tnil))) (tf1 (ZERO) (Node (ZERO) (Node (ZERO) (Tnil) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil))) (Tnil))) then tf1 (ZERO) (Node (ZERO) (Node (ZERO) (Tnil) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil))) (Tnil)) else tf1 (ZERO) (repr (Tnil)))
Prop: tf1 (SUCC (SUCC (ZERO))) (Node (ZERO) (Tnil) (Tnil)) = plus (SUCC (SUCC (ZERO))) (if lq (tf1 (ZERO) (repr (Tnil))) (tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil))) then tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil)) else tf1 (ZERO) (repr (Tnil)))
Lemma List
forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
End of Lemma List


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) then tf1 (ZERO) (repr (tree3)) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
Lemma List
forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
End of Lemma List


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (repr (tree3)) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 126


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) then tf1 (ZERO) (repr (tree3)) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
>>> assert forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))(rank : 0.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))

---------------------------------------
forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree2(rank:6.)
=================================================
Progress: 127


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (repr (tree3)) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
>>> assert forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))(rank : 0.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))

---------------------------------------
forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction nat1(rank:6.)
=================================================
Progress: 128


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))

---------------------------------------
forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))

0 goal(s) more...

1 conjecture(s) more...
>>> induction tree2(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
---------------------------------------
forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (Tnil))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (Tnil)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:6.)
=================================================
Progress: 129


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))

---------------------------------------
forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))

0 goal(s) more...

1 conjecture(s) more...
>>> induction nat1(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree) (tree3:tree), lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) = true -> tf1 (ZERO) (tree1) = plus (ZERO) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:6.)
=================================================
Progress: 130


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
---------------------------------------
forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (Tnil))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (Tnil)))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
---------------------------------------
forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (Tnil)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree1(rank:7.)
=================================================
Progress: 131


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree) (tree3:tree), lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) = true -> tf1 (ZERO) (tree1) = plus (ZERO) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree) (tree3:tree), lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) = true -> tf1 (ZERO) (tree1) = if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro tree3(rank:6.)
=================================================
Progress: 132


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree) (tree3:tree), lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) = true -> tf1 (ZERO) (tree1) = if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2))

1 goal(s) more...

1 conjecture(s) more...
>>> intro tree3(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
nat1 : nat
Base1 : nat1 = ZERO
tree3 : tree
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) = true -> tf1 (ZERO) (tree1) = if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree2(rank:7.)
=================================================
Progress: 133


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
---------------------------------------
forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (Tnil)))

1 goal(s) more...

1 conjecture(s) more...
>>> induction tree1(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (nat1:nat), tf1 (nat1) (Tnil) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (repr (Tnil)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 134


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
nat1 : nat
Base1 : nat1 = ZERO
tree3 : tree
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) = true -> tf1 (ZERO) (tree1) = if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2))

1 goal(s) more...

1 conjecture(s) more...
>>> induction tree2(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
nat1 : nat
Base1 : nat1 = ZERO
tree3 : tree
tree2 : tree
Base2 : tree2 = Tnil
---------------------------------------
forall (tree1:tree), lq (tf1 (ZERO) (repr (Tnil))) (tf1 (ZERO) (repr (tree3))) = true -> tf1 (ZERO) (tree1) = if lq (tf1 (ZERO) (repr (Tnil))) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (Tnil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 135


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (nat1:nat), tf1 (nat1) (Tnil) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (repr (Tnil)))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (nat1:nat), nat1 = plus (nat1) (ZERO)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction nat1(rank:8.)
=================================================
Progress: 136


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
nat1 : nat
Base1 : nat1 = ZERO
tree3 : tree
tree2 : tree
Base2 : tree2 = Tnil
---------------------------------------
forall (tree1:tree), lq (tf1 (ZERO) (repr (Tnil))) (tf1 (ZERO) (repr (tree3))) = true -> tf1 (ZERO) (tree1) = if lq (tf1 (ZERO) (repr (Tnil))) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (Tnil))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
nat1 : nat
Base1 : nat1 = ZERO
tree3 : tree
tree2 : tree
Base2 : tree2 = Tnil
---------------------------------------
forall (tree1:tree), lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (Tnil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7.)
=================================================
Progress: 137


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
nat1 : nat
Base1 : nat1 = ZERO
tree3 : tree
tree2 : tree
Base2 : tree2 = Tnil
---------------------------------------
forall (tree1:tree), lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (Tnil))

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
nat1 : nat
Base1 : nat1 = ZERO
tree3 : tree
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
---------------------------------------
forall (tree1:tree), tf1 (ZERO) (tree1) = if lq (ZERO) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (Tnil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case lq (ZERO) (reprNew (tree3))(rank:8.)
=================================================
Progress: 138


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (nat1:nat), nat1 = plus (nat1) (ZERO)

2 goal(s) more...

1 conjecture(s) more...
>>> induction nat1(rank : 8.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
nat1 : nat
Base3 : nat1 = ZERO
---------------------------------------
ZERO = plus (ZERO) (ZERO)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7.)
=================================================
Progress: 139


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
nat1 : nat
Base3 : nat1 = ZERO
---------------------------------------
ZERO = plus (ZERO) (ZERO)

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
nat1 : nat
nat2 : nat
IH1 : nat2 = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
SUCC (nat2) = plus (SUCC (nat2)) (ZERO)

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 140


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
nat1 : nat
nat2 : nat
IH1 : nat2 = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
SUCC (nat2) = plus (SUCC (nat2)) (ZERO)

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
nat1 : nat
nat2 : nat
IH1 : nat2 = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
SUCC (nat2) = SUCC (plus (nat2) (ZERO))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:7.)
=================================================
Progress: 141


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
nat1 : nat
nat2 : nat
IH1 : nat2 = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
SUCC (nat2) = SUCC (plus (nat2) (ZERO))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
nat1 : nat
nat2 : nat
IH1 : nat2 = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
SUCC (nat2) = SUCC (nat2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:6.)
=================================================
Progress: 142


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
nat1 : nat
nat2 : nat
IH1 : nat2 = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
SUCC (nat2) = SUCC (nat2)

2 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree3)) then tf1 (ZERO) (tree3) else tf1 (ZERO) (repr (Tnil)))
IH2 : forall (nat1:nat), tf1 (nat1) (tree4) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else tf1 (ZERO) (repr (Tnil)))
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
---------------------------------------
forall (nat1:nat), tf1 (nat1) (Node (nat2) (tree3) (tree4)) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (Node (nat2) (tree3) (tree4))) then tf1 (ZERO) (Node (nat2) (tree3) (tree4)) else tf1 (ZERO) (repr (Tnil)))

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:6.)
=================================================
Progress: 143


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree3)) then tf1 (ZERO) (tree3) else tf1 (ZERO) (repr (Tnil)))
IH2 : forall (nat1:nat), tf1 (nat1) (tree4) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else tf1 (ZERO) (repr (Tnil)))
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
---------------------------------------
forall (nat1:nat), tf1 (nat1) (Node (nat2) (tree3) (tree4)) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (Node (nat2) (tree3) (tree4))) then tf1 (ZERO) (Node (nat2) (tree3) (tree4)) else tf1 (ZERO) (repr (Tnil)))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree3)) then tf1 (ZERO) (tree3) else tf1 (ZERO) (repr (Tnil)))
IH2 : forall (nat1:nat), tf1 (nat1) (tree4) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else tf1 (ZERO) (repr (Tnil)))
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
---------------------------------------
forall (nat1:nat), if lq (tf1 (plus (nat1) (nat2)) (tree3)) (tf1 (plus (nat1) (nat2)) (tree4)) then tf1 (plus (nat1) (nat2)) (tree4) else tf1 (plus (nat1) (nat2)) (tree3) = plus (nat1) (if lq (ZERO) (if lq (tf1 (nat2) (tree3)) (tf1 (nat2) (tree4)) then tf1 (nat2) (tree4) else tf1 (nat2) (tree3)) then tf1 (ZERO) (Node (nat2) (tree3) (tree4)) else tf1 (ZERO) (repr (Tnil)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction nat1(rank:7.)
=================================================
Progress: 144


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree3)) then tf1 (ZERO) (tree3) else tf1 (ZERO) (repr (Tnil)))
IH2 : forall (nat1:nat), tf1 (nat1) (tree4) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else tf1 (ZERO) (repr (Tnil)))
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
---------------------------------------
forall (nat1:nat), if lq (tf1 (plus (nat1) (nat2)) (tree3)) (tf1 (plus (nat1) (nat2)) (tree4)) then tf1 (plus (nat1) (nat2)) (tree4) else tf1 (plus (nat1) (nat2)) (tree3) = plus (nat1) (if lq (ZERO) (if lq (tf1 (nat2) (tree3)) (tf1 (nat2) (tree4)) then tf1 (nat2) (tree4) else tf1 (nat2) (tree3)) then tf1 (ZERO) (Node (nat2) (tree3) (tree4)) else tf1 (ZERO) (repr (Tnil)))

1 goal(s) more...

1 conjecture(s) more...
>>> induction nat1(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree3)) then tf1 (ZERO) (tree3) else tf1 (ZERO) (repr (Tnil)))
IH2 : forall (nat1:nat), tf1 (nat1) (tree4) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else tf1 (ZERO) (repr (Tnil)))
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
if lq (tf1 (plus (ZERO) (nat2)) (tree3)) (tf1 (plus (ZERO) (nat2)) (tree4)) then tf1 (plus (ZERO) (nat2)) (tree4) else tf1 (plus (ZERO) (nat2)) (tree3) = plus (ZERO) (if lq (ZERO) (if lq (tf1 (nat2) (tree3)) (tf1 (nat2) (tree4)) then tf1 (nat2) (tree4) else tf1 (nat2) (tree3)) then tf1 (ZERO) (Node (nat2) (tree3) (tree4)) else tf1 (ZERO) (repr (Tnil)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 145


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree3)) then tf1 (ZERO) (tree3) else tf1 (ZERO) (repr (Tnil)))
IH2 : forall (nat1:nat), tf1 (nat1) (tree4) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else tf1 (ZERO) (repr (Tnil)))
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
if lq (tf1 (plus (ZERO) (nat2)) (tree3)) (tf1 (plus (ZERO) (nat2)) (tree4)) then tf1 (plus (ZERO) (nat2)) (tree4) else tf1 (plus (ZERO) (nat2)) (tree3) = plus (ZERO) (if lq (ZERO) (if lq (tf1 (nat2) (tree3)) (tf1 (nat2) (tree4)) then tf1 (nat2) (tree4) else tf1 (nat2) (tree3)) then tf1 (ZERO) (Node (nat2) (tree3) (tree4)) else tf1 (ZERO) (repr (Tnil)))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree3)) then tf1 (ZERO) (tree3) else tf1 (ZERO) (repr (Tnil)))
IH2 : forall (nat1:nat), tf1 (nat1) (tree4) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else tf1 (ZERO) (repr (Tnil)))
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
if lq (tf1 (nat2) (tree3)) (tf1 (nat2) (tree4)) then tf1 (plus (ZERO) (nat2)) (tree4) else tf1 (plus (ZERO) (nat2)) (tree3) = if lq (ZERO) (if lq (tf1 (nat2) (tree3)) (tf1 (nat2) (tree4)) then tf1 (nat2) (tree4) else tf1 (nat2) (tree3)) then tf1 (ZERO) (Node (nat2) (tree3) (tree4)) else tf1 (ZERO) (repr (Tnil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case lq (tf1 (nat2) (tree3)) (tf1 (nat2) (tree4))(rank:8.)
=================================================
Progress: 146


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
nat1 : nat
Base1 : nat1 = ZERO
tree3 : tree
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
---------------------------------------
forall (tree1:tree), tf1 (ZERO) (tree1) = if lq (ZERO) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (Tnil))

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (ZERO) (reprNew (tree3))(rank : 8.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
nat1 : nat
Base1 : nat1 = ZERO
tree3 : tree
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
Case1 : lq (ZERO) (reprNew (tree3)) = true
---------------------------------------
forall (tree1:tree), tf1 (ZERO) (tree1) = tf1 (ZERO) (tree1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7.)
=================================================
Progress: 147


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
nat1 : nat
Base1 : nat1 = ZERO
tree3 : tree
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
Case1 : lq (ZERO) (reprNew (tree3)) = true
---------------------------------------
forall (tree1:tree), tf1 (ZERO) (tree1) = tf1 (ZERO) (tree1)

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
nat1 : nat
Base1 : nat1 = ZERO
tree3 : tree
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
Case1 : lq (ZERO) (reprNew (tree3)) = false
---------------------------------------
forall (tree1:tree), tf1 (ZERO) (tree1) = ZERO

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
induction tree1(rank:8.)
=================================================
Progress: 148


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree3)) then tf1 (ZERO) (tree3) else tf1 (ZERO) (repr (Tnil)))
IH2 : forall (nat1:nat), tf1 (nat1) (tree4) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else tf1 (ZERO) (repr (Tnil)))
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
if lq (tf1 (nat2) (tree3)) (tf1 (nat2) (tree4)) then tf1 (plus (ZERO) (nat2)) (tree4) else tf1 (plus (ZERO) (nat2)) (tree3) = if lq (ZERO) (if lq (tf1 (nat2) (tree3)) (tf1 (nat2) (tree4)) then tf1 (nat2) (tree4) else tf1 (nat2) (tree3)) then tf1 (ZERO) (Node (nat2) (tree3) (tree4)) else tf1 (ZERO) (repr (Tnil))

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (tf1 (nat2) (tree3)) (tf1 (nat2) (tree4))(rank : 8.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree3)) then tf1 (ZERO) (tree3) else tf1 (ZERO) (repr (Tnil)))
IH2 : forall (nat1:nat), tf1 (nat1) (tree4) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else tf1 (ZERO) (repr (Tnil)))
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
nat1 : nat
Base2 : nat1 = ZERO
Case1 : lq (tf1 (nat2) (tree3)) (tf1 (nat2) (tree4)) = true
---------------------------------------
tf1 (nat2) (tree4) = if lq (ZERO) (tf1 (nat2) (tree4)) then tf1 (ZERO) (Node (nat2) (tree3) (tree4)) else tf1 (ZERO) (repr (Tnil))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
case lq (ZERO) (tf1 (nat2) (tree4))(rank:9.)
rewrite IH2 in goal at 2(rank:24.)
rewrite IH2 in goal at 1(rank:16.)
rewrite IH2 in goal at 0(rank:24.)
=================================================
Progress: 149


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
nat1 : nat
Base1 : nat1 = ZERO
tree3 : tree
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
Case1 : lq (ZERO) (reprNew (tree3)) = false
---------------------------------------
forall (tree1:tree), tf1 (ZERO) (tree1) = ZERO

2 goal(s) more...

1 conjecture(s) more...
>>> induction tree1(rank : 8.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
nat1 : nat
Base1 : nat1 = ZERO
tree3 : tree
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
Case1 : lq (ZERO) (reprNew (tree3)) = false
tree1 : tree
Base3 : tree1 = Tnil
---------------------------------------
tf1 (ZERO) (Tnil) = ZERO

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7.)
=================================================
Progress: 150


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
nat1 : nat
Base1 : nat1 = ZERO
tree3 : tree
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
Case1 : lq (ZERO) (reprNew (tree3)) = false
tree1 : tree
Base3 : tree1 = Tnil
---------------------------------------
tf1 (ZERO) (Tnil) = ZERO

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
nat1 : nat
Base1 : nat1 = ZERO
tree3 : tree
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
Case1 : lq (ZERO) (reprNew (tree3)) = false
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : tf1 (ZERO) (tree4) = ZERO
IH2 : tf1 (ZERO) (tree5) = ZERO
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
---------------------------------------
tf1 (ZERO) (Node (nat2) (tree4) (tree5)) = ZERO

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 151


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
nat1 : nat
Base1 : nat1 = ZERO
tree3 : tree
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
Case1 : lq (ZERO) (reprNew (tree3)) = false
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : tf1 (ZERO) (tree4) = ZERO
IH2 : tf1 (ZERO) (tree5) = ZERO
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
---------------------------------------
tf1 (ZERO) (Node (nat2) (tree4) (tree5)) = ZERO

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
nat1 : nat
Base1 : nat1 = ZERO
tree3 : tree
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
Case1 : lq (ZERO) (reprNew (tree3)) = false
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : tf1 (ZERO) (tree4) = ZERO
IH2 : tf1 (ZERO) (tree5) = ZERO
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
---------------------------------------
if lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) then tf1 (nat2) (tree5) else tf1 (nat2) (tree4) = ZERO

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5))(rank:8.)
=================================================
Progress: 152


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
nat1 : nat
Base1 : nat1 = ZERO
tree3 : tree
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
Case1 : lq (ZERO) (reprNew (tree3)) = false
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : tf1 (ZERO) (tree4) = ZERO
IH2 : tf1 (ZERO) (tree5) = ZERO
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
---------------------------------------
if lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) then tf1 (nat2) (tree5) else tf1 (nat2) (tree4) = ZERO

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5))(rank : 8.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
nat1 : nat
Base1 : nat1 = ZERO
tree3 : tree
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
Case1 : lq (ZERO) (reprNew (tree3)) = false
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : tf1 (ZERO) (tree4) = ZERO
IH2 : tf1 (ZERO) (tree5) = ZERO
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
Case2 : lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) = true
---------------------------------------
tf1 (nat2) (tree5) = ZERO

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5))
parent
tf1 (nat2) (tree5)
lower
tf1(_, tree5)
upper
_
remove upper
tf1(ZERO(), tree5)
remove lower
tf1(ZERO(), tree5)
remove upper
tf1(nat2, tree5)
remove lower
tf1(nat2, tree5)
remove upper
tf1(nat2, tree5)
remove lower
tf1(nat2, tree5)
remove upper
tf1(nat2, tree5)
remove lower
tf1(nat2, tree5)
validate generalize_common_subterm_goal
Prop: tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil)) = ZERO
Prop: tf1 (ZERO) (Tnil) = ZERO
Prop: tf1 (SUCC (ZERO)) (Tnil) = ZERO
asdf
=================================================
Progress: 153


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree3)) then tf1 (ZERO) (tree3) else tf1 (ZERO) (repr (Tnil)))
IH2 : forall (nat1:nat), tf1 (nat1) (tree4) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else tf1 (ZERO) (repr (Tnil)))
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
nat1 : nat
Base2 : nat1 = ZERO
Case1 : lq (tf1 (nat2) (tree3)) (tf1 (nat2) (tree4)) = true
---------------------------------------
tf1 (nat2) (tree4) = if lq (ZERO) (tf1 (nat2) (tree4)) then tf1 (ZERO) (Node (nat2) (tree3) (tree4)) else tf1 (ZERO) (repr (Tnil))

3 goal(s) more...

1 conjecture(s) more...
>>> case lq (ZERO) (tf1 (nat2) (tree4))(rank : 9.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree3)) then tf1 (ZERO) (tree3) else tf1 (ZERO) (repr (Tnil)))
IH2 : forall (nat1:nat), tf1 (nat1) (tree4) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else tf1 (ZERO) (repr (Tnil)))
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
nat1 : nat
Base2 : nat1 = ZERO
Case1 : lq (tf1 (nat2) (tree3)) (tf1 (nat2) (tree4)) = true
Case2 : lq (ZERO) (tf1 (nat2) (tree4)) = true
---------------------------------------
tf1 (nat2) (tree4) = if lq (tf1 (nat2) (tree3)) (tf1 (nat2) (tree4)) then tf1 (nat2) (tree4) else tf1 (nat2) (tree3)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 8
rewrite Case1 in goal at 0(rank:17.)
rewrite IH2 in goal at 1(rank:17.)
rewrite IH1 in goal at 1(rank:25.)
rewrite IH1 in goal at 2(rank:25.)
rewrite IH2 in goal at 2(rank:25.)
rewrite IH2 in goal at 3(rank:25.)
rewrite IH2 in goal at 0(rank:25.)
rewrite IH1 in goal at 0(rank:25.)
=================================================
Progress: 154


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) then tf1 (ZERO) (repr (tree3)) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH2 in goal at 2(rank : 12.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 0
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH2 in goal at 2
Prop: tf1 (ZERO) (Node (ZERO) (Tnil) (Node (SUCC (SUCC (SUCC (ZERO)))) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Node (SUCC (ZERO)) (Tnil) (Tnil))))) (Node (ZERO) (Tnil) (Tnil))) (Tnil)) (Node (ZERO) (Tnil) (Tnil)))) = plus (ZERO) (if lq (tf1 (ZERO) (repr (Tnil))) (tf1 (ZERO) (Node (ZERO) (Tnil) (Node (SUCC (SUCC (SUCC (ZERO)))) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Node (SUCC (ZERO)) (Tnil) (Tnil))))) (Node (ZERO) (Tnil) (Tnil))) (Tnil)) (Node (ZERO) (Tnil) (Tnil))))) then reprNew (Tnil) else tf1 (ZERO) (repr (Tnil)))
Prop: tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil)) = plus (ZERO) (if lq (tf1 (ZERO) (repr (Tnil))) (tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil))) then reprNew (Tnil) else tf1 (ZERO) (repr (Tnil)))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (if lq (tf1 (ZERO) (repr (Tnil))) (tf1 (ZERO) (Tnil)) then reprNew (Tnil) else tf1 (ZERO) (repr (Tnil)))
validate generalize_common_subterm_goal
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (if lq (tf1 (ZERO) (repr (Tnil))) (tf1 (ZERO) (Tnil)) then reprNew (Tnil) else tf1 (ZERO) (repr (Tnil)))
Prop: tf1 (SUCC (ZERO)) (Tnil) = plus (SUCC (ZERO)) (if lq (tf1 (ZERO) (repr (Tnil))) (tf1 (ZERO) (Tnil)) then reprNew (Tnil) else tf1 (ZERO) (repr (Tnil)))
Prop: tf1 (SUCC (ZERO)) (Tnil) = plus (SUCC (ZERO)) (if lq (tf1 (ZERO) (repr (Tnil))) (tf1 (ZERO) (Tnil)) then reprNew (Tnil) else tf1 (ZERO) (repr (Tnil)))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 0
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
Prop: tf1 (SUCC (ZERO)) (Tnil) = plus (SUCC (ZERO)) (if lq (tf1 (ZERO) (repr (Tnil))) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (repr (Tnil)))
Prop: tf1 (ZERO) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil)) = plus (ZERO) (if lq (tf1 (ZERO) (repr (Node (SUCC (SUCC (ZERO))) (Node (SUCC (ZERO)) (Tnil) (Tnil)) (Tnil)))) (tf1 (ZERO) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil))) then tf1 (ZERO) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil)) else tf1 (ZERO) (repr (Node (SUCC (SUCC (ZERO))) (Node (SUCC (ZERO)) (Tnil) (Tnil)) (Tnil))))
Prop: tf1 (ZERO) (Node (SUCC (ZERO)) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil)) (Tnil)) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Node (SUCC (ZERO)) (Tnil) (Node (ZERO) (Tnil) (Tnil)))))) (Node (ZERO) (Tnil) (Node (SUCC (ZERO)) (Tnil) (Tnil)))) (Node (ZERO) (Tnil) (Tnil))) = plus (ZERO) (if lq (tf1 (ZERO) (repr (Tnil))) (tf1 (ZERO) (Node (SUCC (ZERO)) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil)) (Tnil)) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Node (SUCC (ZERO)) (Tnil) (Node (ZERO) (Tnil) (Tnil)))))) (Node (ZERO) (Tnil) (Node (SUCC (ZERO)) (Tnil) (Tnil)))) (Node (ZERO) (Tnil) (Tnil)))) then tf1 (ZERO) (Node (SUCC (ZERO)) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil)) (Tnil)) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Node (SUCC (ZERO)) (Tnil) (Node (ZERO) (Tnil) (Tnil)))))) (Node (ZERO) (Tnil) (Node (SUCC (ZERO)) (Tnil) (Tnil)))) (Node (ZERO) (Tnil) (Tnil))) else tf1 (ZERO) (repr (Tnil)))
validate generalize_common_subterm_goal
Prop: tf1 (SUCC (ZERO)) (Node (ZERO) (Tnil) (Tnil)) = plus (SUCC (ZERO)) (if lq (tf1 (ZERO) (repr (Tnil))) (tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil))) then tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil)) else tf1 (ZERO) (repr (Tnil)))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (if lq (tf1 (ZERO) (repr (Tnil))) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (repr (Tnil)))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (if lq (tf1 (ZERO) (repr (Tnil))) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (repr (Tnil)))
Lemma List
forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
End of Lemma List


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) then tf1 (ZERO) (repr (tree3)) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
Lemma List
forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))
End of Lemma List


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 155


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) then tf1 (ZERO) (repr (tree3)) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
>>> assert forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))(rank : 0.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))

---------------------------------------
forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro tree3(rank:5.)
=================================================
Progress: 156


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
>>> assert forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))(rank : 0.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))

---------------------------------------
forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction nat1(rank:6.)
=================================================
Progress: 157


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))

---------------------------------------
forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))

0 goal(s) more...

1 conjecture(s) more...
>>> intro tree3(rank : 5.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree3 : tree
---------------------------------------
forall (tree1:tree) (nat1:nat) (tree2:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction nat1(rank:6.)
=================================================
Progress: 158


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))

---------------------------------------
forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))

0 goal(s) more...

1 conjecture(s) more...
>>> induction nat1(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree) (tree3:tree), lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) = true -> tf1 (ZERO) (tree1) = plus (ZERO) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:6.)
=================================================
Progress: 159


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree3 : tree
---------------------------------------
forall (tree1:tree) (nat1:nat) (tree2:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))

0 goal(s) more...

1 conjecture(s) more...
>>> induction nat1(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree3 : tree
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) = true -> tf1 (ZERO) (tree1) = plus (ZERO) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:6.)
=================================================
Progress: 160


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree) (tree3:tree), lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) = true -> tf1 (ZERO) (tree1) = plus (ZERO) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree) (tree3:tree), lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) = true -> tf1 (ZERO) (tree1) = if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree2(rank:7.)
=================================================
Progress: 161


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree3 : tree
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) = true -> tf1 (ZERO) (tree1) = plus (ZERO) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree3 : tree
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) = true -> tf1 (ZERO) (tree1) = if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree2(rank:7.)
=================================================
Progress: 162


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree) (tree3:tree), lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) = true -> tf1 (ZERO) (tree1) = if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2))

1 goal(s) more...

1 conjecture(s) more...
>>> induction tree2(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
---------------------------------------
forall (tree1:tree) (tree3:tree), lq (tf1 (ZERO) (repr (Tnil))) (tf1 (ZERO) (repr (tree3))) = true -> tf1 (ZERO) (tree1) = if lq (tf1 (ZERO) (repr (Tnil))) (tf1 (ZERO) (tree1)) then reprNew (tree3) else tf1 (ZERO) (repr (Tnil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 163


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree3 : tree
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) = true -> tf1 (ZERO) (tree1) = if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2))

1 goal(s) more...

1 conjecture(s) more...
>>> induction tree2(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree3 : tree
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
---------------------------------------
forall (tree1:tree), lq (tf1 (ZERO) (repr (Tnil))) (tf1 (ZERO) (repr (tree3))) = true -> tf1 (ZERO) (tree1) = if lq (tf1 (ZERO) (repr (Tnil))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (Tnil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 164


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
---------------------------------------
forall (tree1:tree) (tree3:tree), lq (tf1 (ZERO) (repr (Tnil))) (tf1 (ZERO) (repr (tree3))) = true -> tf1 (ZERO) (tree1) = if lq (tf1 (ZERO) (repr (Tnil))) (tf1 (ZERO) (tree1)) then reprNew (tree3) else tf1 (ZERO) (repr (Tnil))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
---------------------------------------
forall (tree1:tree) (tree3:tree), lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then reprNew (tree3) else tf1 (ZERO) (repr (Tnil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree3(rank:8.)
=================================================
Progress: 165


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree3 : tree
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
---------------------------------------
forall (tree1:tree), lq (tf1 (ZERO) (repr (Tnil))) (tf1 (ZERO) (repr (tree3))) = true -> tf1 (ZERO) (tree1) = if lq (tf1 (ZERO) (repr (Tnil))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (Tnil))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree3 : tree
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
---------------------------------------
forall (tree1:tree), lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (Tnil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7.)
=================================================
Progress: 166


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree3 : tree
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
---------------------------------------
forall (tree1:tree), lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (Tnil))

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree3 : tree
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
---------------------------------------
forall (tree1:tree), tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (Tnil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree1(rank:8.)
=================================================
Progress: 167


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
---------------------------------------
forall (tree1:tree) (tree3:tree), lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then reprNew (tree3) else tf1 (ZERO) (repr (Tnil))

2 goal(s) more...

1 conjecture(s) more...
>>> induction tree3(rank : 8.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
tree3 : tree
Base3 : tree3 = Tnil
---------------------------------------
forall (tree1:tree), lq (ZERO) (tf1 (ZERO) (repr (Tnil))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then reprNew (Tnil) else tf1 (ZERO) (repr (Tnil))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:7.)
=================================================
Progress: 168


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
tree3 : tree
Base3 : tree3 = Tnil
---------------------------------------
forall (tree1:tree), lq (ZERO) (tf1 (ZERO) (repr (Tnil))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then reprNew (Tnil) else tf1 (ZERO) (repr (Tnil))

3 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
tree3 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : forall (tree1:tree), lq (ZERO) (tf1 (ZERO) (repr (tree4))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then reprNew (tree4) else tf1 (ZERO) (repr (Tnil))
IH2 : forall (tree1:tree), lq (ZERO) (tf1 (ZERO) (repr (tree5))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then reprNew (tree5) else tf1 (ZERO) (repr (Tnil))
Inductive1 : tree3 = Node (nat2) (tree4) (tree5)
---------------------------------------
forall (tree1:tree), lq (ZERO) (tf1 (ZERO) (repr (Node (nat2) (tree4) (tree5)))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then reprNew (Node (nat2) (tree4) (tree5)) else tf1 (ZERO) (repr (Tnil))

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 169


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
tree3 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : forall (tree1:tree), lq (ZERO) (tf1 (ZERO) (repr (tree4))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then reprNew (tree4) else tf1 (ZERO) (repr (Tnil))
IH2 : forall (tree1:tree), lq (ZERO) (tf1 (ZERO) (repr (tree5))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then reprNew (tree5) else tf1 (ZERO) (repr (Tnil))
Inductive1 : tree3 = Node (nat2) (tree4) (tree5)
---------------------------------------
forall (tree1:tree), lq (ZERO) (tf1 (ZERO) (repr (Node (nat2) (tree4) (tree5)))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then reprNew (Node (nat2) (tree4) (tree5)) else tf1 (ZERO) (repr (Tnil))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
tree3 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : forall (tree1:tree), lq (ZERO) (tf1 (ZERO) (repr (tree4))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then reprNew (tree4) else tf1 (ZERO) (repr (Tnil))
IH2 : forall (tree1:tree), lq (ZERO) (tf1 (ZERO) (repr (tree5))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then reprNew (tree5) else tf1 (ZERO) (repr (Tnil))
Inductive1 : tree3 = Node (nat2) (tree4) (tree5)
---------------------------------------
forall (tree1:tree), lq (ZERO) (if lq (tf1 (nat2) (repr (tree4))) (tf1 (nat2) (repr (tree5))) then tf1 (nat2) (repr (tree5)) else tf1 (nat2) (repr (tree4))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then reprNew (Node (nat2) (tree4) (tree5)) else tf1 (ZERO) (repr (Tnil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7.)
=================================================
Progress: 170


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
tree3 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : forall (tree1:tree), lq (ZERO) (tf1 (ZERO) (repr (tree4))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then reprNew (tree4) else tf1 (ZERO) (repr (Tnil))
IH2 : forall (tree1:tree), lq (ZERO) (tf1 (ZERO) (repr (tree5))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then reprNew (tree5) else tf1 (ZERO) (repr (Tnil))
Inductive1 : tree3 = Node (nat2) (tree4) (tree5)
---------------------------------------
forall (tree1:tree), lq (ZERO) (if lq (tf1 (nat2) (repr (tree4))) (tf1 (nat2) (repr (tree5))) then tf1 (nat2) (repr (tree5)) else tf1 (nat2) (repr (tree4))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then reprNew (Node (nat2) (tree4) (tree5)) else tf1 (ZERO) (repr (Tnil))

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
tree3 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : forall (tree1:tree), lq (ZERO) (tf1 (ZERO) (repr (tree4))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then reprNew (tree4) else tf1 (ZERO) (repr (Tnil))
IH2 : forall (tree1:tree), lq (ZERO) (tf1 (ZERO) (repr (tree5))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then reprNew (tree5) else tf1 (ZERO) (repr (Tnil))
Inductive1 : tree3 = Node (nat2) (tree4) (tree5)
Cond1 : lq (ZERO) (if lq (tf1 (nat2) (repr (tree4))) (tf1 (nat2) (repr (tree5))) then tf1 (nat2) (repr (tree5)) else tf1 (nat2) (repr (tree4))) = true
---------------------------------------
forall (tree1:tree), tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then reprNew (Node (nat2) (tree4) (tree5)) else tf1 (ZERO) (repr (Tnil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree1(rank:8.)
=================================================
Progress: 171


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree3 : tree
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
---------------------------------------
forall (tree1:tree), tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (Tnil))

2 goal(s) more...

1 conjecture(s) more...
>>> induction tree1(rank : 8.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree3 : tree
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
tree1 : tree
Base3 : tree1 = Tnil
---------------------------------------
tf1 (ZERO) (Tnil) = if lq (ZERO) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (repr (Tnil))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7.)
=================================================
Progress: 172


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree3 : tree
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
tree1 : tree
Base3 : tree1 = Tnil
---------------------------------------
tf1 (ZERO) (Tnil) = if lq (ZERO) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (repr (Tnil))

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree3 : tree
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : tf1 (ZERO) (tree4) = if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else tf1 (ZERO) (repr (Tnil))
IH2 : tf1 (ZERO) (tree5) = if lq (ZERO) (tf1 (ZERO) (tree5)) then tf1 (ZERO) (tree5) else tf1 (ZERO) (repr (Tnil))
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
---------------------------------------
tf1 (ZERO) (Node (nat2) (tree4) (tree5)) = if lq (ZERO) (tf1 (ZERO) (Node (nat2) (tree4) (tree5))) then tf1 (ZERO) (Node (nat2) (tree4) (tree5)) else tf1 (ZERO) (repr (Tnil))

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 173


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree3 : tree
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : tf1 (ZERO) (tree4) = if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else tf1 (ZERO) (repr (Tnil))
IH2 : tf1 (ZERO) (tree5) = if lq (ZERO) (tf1 (ZERO) (tree5)) then tf1 (ZERO) (tree5) else tf1 (ZERO) (repr (Tnil))
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
---------------------------------------
tf1 (ZERO) (Node (nat2) (tree4) (tree5)) = if lq (ZERO) (tf1 (ZERO) (Node (nat2) (tree4) (tree5))) then tf1 (ZERO) (Node (nat2) (tree4) (tree5)) else tf1 (ZERO) (repr (Tnil))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree3 : tree
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : tf1 (ZERO) (tree4) = if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else tf1 (ZERO) (repr (Tnil))
IH2 : tf1 (ZERO) (tree5) = if lq (ZERO) (tf1 (ZERO) (tree5)) then tf1 (ZERO) (tree5) else tf1 (ZERO) (repr (Tnil))
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
---------------------------------------
if lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) then tf1 (nat2) (tree5) else tf1 (nat2) (tree4) = if lq (ZERO) (if lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) then tf1 (nat2) (tree5) else tf1 (nat2) (tree4)) then tf1 (ZERO) (Node (nat2) (tree4) (tree5)) else tf1 (ZERO) (repr (Tnil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5))(rank:8.)
=================================================
Progress: 174


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
tree3 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : forall (tree1:tree), lq (ZERO) (tf1 (ZERO) (repr (tree4))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then reprNew (tree4) else tf1 (ZERO) (repr (Tnil))
IH2 : forall (tree1:tree), lq (ZERO) (tf1 (ZERO) (repr (tree5))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then reprNew (tree5) else tf1 (ZERO) (repr (Tnil))
Inductive1 : tree3 = Node (nat2) (tree4) (tree5)
Cond1 : lq (ZERO) (if lq (tf1 (nat2) (repr (tree4))) (tf1 (nat2) (repr (tree5))) then tf1 (nat2) (repr (tree5)) else tf1 (nat2) (repr (tree4))) = true
---------------------------------------
forall (tree1:tree), tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then reprNew (Node (nat2) (tree4) (tree5)) else tf1 (ZERO) (repr (Tnil))

2 goal(s) more...

1 conjecture(s) more...
>>> induction tree1(rank : 8.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
tree3 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : forall (tree1:tree), lq (ZERO) (tf1 (ZERO) (repr (tree4))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then reprNew (tree4) else tf1 (ZERO) (repr (Tnil))
IH2 : forall (tree1:tree), lq (ZERO) (tf1 (ZERO) (repr (tree5))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then reprNew (tree5) else tf1 (ZERO) (repr (Tnil))
Inductive1 : tree3 = Node (nat2) (tree4) (tree5)
Cond1 : lq (ZERO) (if lq (tf1 (nat2) (repr (tree4))) (tf1 (nat2) (repr (tree5))) then tf1 (nat2) (repr (tree5)) else tf1 (nat2) (repr (tree4))) = true
tree1 : tree
Base3 : tree1 = Tnil
---------------------------------------
tf1 (ZERO) (Tnil) = if lq (ZERO) (tf1 (ZERO) (Tnil)) then reprNew (Node (nat2) (tree4) (tree5)) else tf1 (ZERO) (repr (Tnil))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7.)
=================================================
Progress: 175


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
tree3 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : forall (tree1:tree), lq (ZERO) (tf1 (ZERO) (repr (tree4))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then reprNew (tree4) else tf1 (ZERO) (repr (Tnil))
IH2 : forall (tree1:tree), lq (ZERO) (tf1 (ZERO) (repr (tree5))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then reprNew (tree5) else tf1 (ZERO) (repr (Tnil))
Inductive1 : tree3 = Node (nat2) (tree4) (tree5)
Cond1 : lq (ZERO) (if lq (tf1 (nat2) (repr (tree4))) (tf1 (nat2) (repr (tree5))) then tf1 (nat2) (repr (tree5)) else tf1 (nat2) (repr (tree4))) = true
tree1 : tree
Base3 : tree1 = Tnil
---------------------------------------
tf1 (ZERO) (Tnil) = if lq (ZERO) (tf1 (ZERO) (Tnil)) then reprNew (Node (nat2) (tree4) (tree5)) else tf1 (ZERO) (repr (Tnil))

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
tree3 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : forall (tree1:tree), lq (ZERO) (tf1 (ZERO) (repr (tree4))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then reprNew (tree4) else tf1 (ZERO) (repr (Tnil))
IH2 : forall (tree1:tree), lq (ZERO) (tf1 (ZERO) (repr (tree5))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then reprNew (tree5) else tf1 (ZERO) (repr (Tnil))
Inductive1 : tree3 = Node (nat2) (tree4) (tree5)
Cond1 : lq (ZERO) (if lq (tf1 (nat2) (repr (tree4))) (tf1 (nat2) (repr (tree5))) then tf1 (nat2) (repr (tree5)) else tf1 (nat2) (repr (tree4))) = true
tree1 : tree
nat3 : nat
tree6 : tree
tree7 : tree
IH3 : tf1 (ZERO) (tree6) = if lq (ZERO) (tf1 (ZERO) (tree6)) then reprNew (Node (nat2) (tree4) (tree5)) else tf1 (ZERO) (repr (Tnil))
IH4 : tf1 (ZERO) (tree7) = if lq (ZERO) (tf1 (ZERO) (tree7)) then reprNew (Node (nat2) (tree4) (tree5)) else tf1 (ZERO) (repr (Tnil))
Inductive2 : tree1 = Node (nat3) (tree6) (tree7)
---------------------------------------
tf1 (ZERO) (Node (nat3) (tree6) (tree7)) = if lq (ZERO) (tf1 (ZERO) (Node (nat3) (tree6) (tree7))) then reprNew (Node (nat2) (tree4) (tree5)) else tf1 (ZERO) (repr (Tnil))

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 176


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
tree3 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : forall (tree1:tree), lq (ZERO) (tf1 (ZERO) (repr (tree4))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then reprNew (tree4) else tf1 (ZERO) (repr (Tnil))
IH2 : forall (tree1:tree), lq (ZERO) (tf1 (ZERO) (repr (tree5))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then reprNew (tree5) else tf1 (ZERO) (repr (Tnil))
Inductive1 : tree3 = Node (nat2) (tree4) (tree5)
Cond1 : lq (ZERO) (if lq (tf1 (nat2) (repr (tree4))) (tf1 (nat2) (repr (tree5))) then tf1 (nat2) (repr (tree5)) else tf1 (nat2) (repr (tree4))) = true
tree1 : tree
nat3 : nat
tree6 : tree
tree7 : tree
IH3 : tf1 (ZERO) (tree6) = if lq (ZERO) (tf1 (ZERO) (tree6)) then reprNew (Node (nat2) (tree4) (tree5)) else tf1 (ZERO) (repr (Tnil))
IH4 : tf1 (ZERO) (tree7) = if lq (ZERO) (tf1 (ZERO) (tree7)) then reprNew (Node (nat2) (tree4) (tree5)) else tf1 (ZERO) (repr (Tnil))
Inductive2 : tree1 = Node (nat3) (tree6) (tree7)
---------------------------------------
tf1 (ZERO) (Node (nat3) (tree6) (tree7)) = if lq (ZERO) (tf1 (ZERO) (Node (nat3) (tree6) (tree7))) then reprNew (Node (nat2) (tree4) (tree5)) else tf1 (ZERO) (repr (Tnil))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
tree3 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : forall (tree1:tree), lq (ZERO) (tf1 (ZERO) (repr (tree4))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then reprNew (tree4) else tf1 (ZERO) (repr (Tnil))
IH2 : forall (tree1:tree), lq (ZERO) (tf1 (ZERO) (repr (tree5))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then reprNew (tree5) else tf1 (ZERO) (repr (Tnil))
Inductive1 : tree3 = Node (nat2) (tree4) (tree5)
Cond1 : lq (ZERO) (if lq (tf1 (nat2) (repr (tree4))) (tf1 (nat2) (repr (tree5))) then tf1 (nat2) (repr (tree5)) else tf1 (nat2) (repr (tree4))) = true
tree1 : tree
nat3 : nat
tree6 : tree
tree7 : tree
IH3 : tf1 (ZERO) (tree6) = if lq (ZERO) (tf1 (ZERO) (tree6)) then reprNew (Node (nat2) (tree4) (tree5)) else tf1 (ZERO) (repr (Tnil))
IH4 : tf1 (ZERO) (tree7) = if lq (ZERO) (tf1 (ZERO) (tree7)) then reprNew (Node (nat2) (tree4) (tree5)) else tf1 (ZERO) (repr (Tnil))
Inductive2 : tree1 = Node (nat3) (tree6) (tree7)
---------------------------------------
if lq (tf1 (nat3) (tree6)) (tf1 (nat3) (tree7)) then tf1 (nat3) (tree7) else tf1 (nat3) (tree6) = if lq (ZERO) (if lq (tf1 (nat3) (tree6)) (tf1 (nat3) (tree7)) then tf1 (nat3) (tree7) else tf1 (nat3) (tree6)) then reprNew (Node (nat2) (tree4) (tree5)) else tf1 (ZERO) (repr (Tnil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case lq (tf1 (nat3) (tree6)) (tf1 (nat3) (tree7))(rank:8.)
=================================================
Progress: 177


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree3 : tree
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : tf1 (ZERO) (tree4) = if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else tf1 (ZERO) (repr (Tnil))
IH2 : tf1 (ZERO) (tree5) = if lq (ZERO) (tf1 (ZERO) (tree5)) then tf1 (ZERO) (tree5) else tf1 (ZERO) (repr (Tnil))
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
---------------------------------------
if lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) then tf1 (nat2) (tree5) else tf1 (nat2) (tree4) = if lq (ZERO) (if lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) then tf1 (nat2) (tree5) else tf1 (nat2) (tree4)) then tf1 (ZERO) (Node (nat2) (tree4) (tree5)) else tf1 (ZERO) (repr (Tnil))

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5))(rank : 8.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree3 : tree
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : tf1 (ZERO) (tree4) = if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else tf1 (ZERO) (repr (Tnil))
IH2 : tf1 (ZERO) (tree5) = if lq (ZERO) (tf1 (ZERO) (tree5)) then tf1 (ZERO) (tree5) else tf1 (ZERO) (repr (Tnil))
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
Case1 : lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) = true
---------------------------------------
tf1 (nat2) (tree5) = if lq (ZERO) (tf1 (nat2) (tree5)) then tf1 (ZERO) (Node (nat2) (tree4) (tree5)) else tf1 (ZERO) (repr (Tnil))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case lq (ZERO) (tf1 (nat2) (tree5))(rank:9.)
=================================================
Progress: 178


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
tree3 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : forall (tree1:tree), lq (ZERO) (tf1 (ZERO) (repr (tree4))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then reprNew (tree4) else tf1 (ZERO) (repr (Tnil))
IH2 : forall (tree1:tree), lq (ZERO) (tf1 (ZERO) (repr (tree5))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then reprNew (tree5) else tf1 (ZERO) (repr (Tnil))
Inductive1 : tree3 = Node (nat2) (tree4) (tree5)
Cond1 : lq (ZERO) (if lq (tf1 (nat2) (repr (tree4))) (tf1 (nat2) (repr (tree5))) then tf1 (nat2) (repr (tree5)) else tf1 (nat2) (repr (tree4))) = true
tree1 : tree
nat3 : nat
tree6 : tree
tree7 : tree
IH3 : tf1 (ZERO) (tree6) = if lq (ZERO) (tf1 (ZERO) (tree6)) then reprNew (Node (nat2) (tree4) (tree5)) else tf1 (ZERO) (repr (Tnil))
IH4 : tf1 (ZERO) (tree7) = if lq (ZERO) (tf1 (ZERO) (tree7)) then reprNew (Node (nat2) (tree4) (tree5)) else tf1 (ZERO) (repr (Tnil))
Inductive2 : tree1 = Node (nat3) (tree6) (tree7)
---------------------------------------
if lq (tf1 (nat3) (tree6)) (tf1 (nat3) (tree7)) then tf1 (nat3) (tree7) else tf1 (nat3) (tree6) = if lq (ZERO) (if lq (tf1 (nat3) (tree6)) (tf1 (nat3) (tree7)) then tf1 (nat3) (tree7) else tf1 (nat3) (tree6)) then reprNew (Node (nat2) (tree4) (tree5)) else tf1 (ZERO) (repr (Tnil))

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (tf1 (nat3) (tree6)) (tf1 (nat3) (tree7))(rank : 8.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
tree3 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : forall (tree1:tree), lq (ZERO) (tf1 (ZERO) (repr (tree4))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then reprNew (tree4) else tf1 (ZERO) (repr (Tnil))
IH2 : forall (tree1:tree), lq (ZERO) (tf1 (ZERO) (repr (tree5))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then reprNew (tree5) else tf1 (ZERO) (repr (Tnil))
Inductive1 : tree3 = Node (nat2) (tree4) (tree5)
Cond1 : lq (ZERO) (if lq (tf1 (nat2) (repr (tree4))) (tf1 (nat2) (repr (tree5))) then tf1 (nat2) (repr (tree5)) else tf1 (nat2) (repr (tree4))) = true
tree1 : tree
nat3 : nat
tree6 : tree
tree7 : tree
IH3 : tf1 (ZERO) (tree6) = if lq (ZERO) (tf1 (ZERO) (tree6)) then reprNew (Node (nat2) (tree4) (tree5)) else tf1 (ZERO) (repr (Tnil))
IH4 : tf1 (ZERO) (tree7) = if lq (ZERO) (tf1 (ZERO) (tree7)) then reprNew (Node (nat2) (tree4) (tree5)) else tf1 (ZERO) (repr (Tnil))
Inductive2 : tree1 = Node (nat3) (tree6) (tree7)
Case1 : lq (tf1 (nat3) (tree6)) (tf1 (nat3) (tree7)) = true
---------------------------------------
tf1 (nat3) (tree7) = if lq (ZERO) (tf1 (nat3) (tree7)) then reprNew (Node (nat2) (tree4) (tree5)) else tf1 (ZERO) (repr (Tnil))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case lq (ZERO) (tf1 (nat3) (tree7))(rank:9.)
=================================================
Progress: 179


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree3 : tree
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : tf1 (ZERO) (tree4) = if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else tf1 (ZERO) (repr (Tnil))
IH2 : tf1 (ZERO) (tree5) = if lq (ZERO) (tf1 (ZERO) (tree5)) then tf1 (ZERO) (tree5) else tf1 (ZERO) (repr (Tnil))
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
Case1 : lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) = true
---------------------------------------
tf1 (nat2) (tree5) = if lq (ZERO) (tf1 (nat2) (tree5)) then tf1 (ZERO) (Node (nat2) (tree4) (tree5)) else tf1 (ZERO) (repr (Tnil))

3 goal(s) more...

1 conjecture(s) more...
>>> case lq (ZERO) (tf1 (nat2) (tree5))(rank : 9.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree3 : tree
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : tf1 (ZERO) (tree4) = if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else tf1 (ZERO) (repr (Tnil))
IH2 : tf1 (ZERO) (tree5) = if lq (ZERO) (tf1 (ZERO) (tree5)) then tf1 (ZERO) (tree5) else tf1 (ZERO) (repr (Tnil))
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
Case1 : lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) = true
Case2 : lq (ZERO) (tf1 (nat2) (tree5)) = true
---------------------------------------
tf1 (nat2) (tree5) = if lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) then tf1 (nat2) (tree5) else tf1 (nat2) (tree4)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:9.)
=================================================
Progress: 180


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
tree3 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : forall (tree1:tree), lq (ZERO) (tf1 (ZERO) (repr (tree4))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then reprNew (tree4) else tf1 (ZERO) (repr (Tnil))
IH2 : forall (tree1:tree), lq (ZERO) (tf1 (ZERO) (repr (tree5))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then reprNew (tree5) else tf1 (ZERO) (repr (Tnil))
Inductive1 : tree3 = Node (nat2) (tree4) (tree5)
Cond1 : lq (ZERO) (if lq (tf1 (nat2) (repr (tree4))) (tf1 (nat2) (repr (tree5))) then tf1 (nat2) (repr (tree5)) else tf1 (nat2) (repr (tree4))) = true
tree1 : tree
nat3 : nat
tree6 : tree
tree7 : tree
IH3 : tf1 (ZERO) (tree6) = if lq (ZERO) (tf1 (ZERO) (tree6)) then reprNew (Node (nat2) (tree4) (tree5)) else tf1 (ZERO) (repr (Tnil))
IH4 : tf1 (ZERO) (tree7) = if lq (ZERO) (tf1 (ZERO) (tree7)) then reprNew (Node (nat2) (tree4) (tree5)) else tf1 (ZERO) (repr (Tnil))
Inductive2 : tree1 = Node (nat3) (tree6) (tree7)
Case1 : lq (tf1 (nat3) (tree6)) (tf1 (nat3) (tree7)) = true
---------------------------------------
tf1 (nat3) (tree7) = if lq (ZERO) (tf1 (nat3) (tree7)) then reprNew (Node (nat2) (tree4) (tree5)) else tf1 (ZERO) (repr (Tnil))

3 goal(s) more...

1 conjecture(s) more...
>>> case lq (ZERO) (tf1 (nat3) (tree7))(rank : 9.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
tree3 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : forall (tree1:tree), lq (ZERO) (tf1 (ZERO) (repr (tree4))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then reprNew (tree4) else tf1 (ZERO) (repr (Tnil))
IH2 : forall (tree1:tree), lq (ZERO) (tf1 (ZERO) (repr (tree5))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then reprNew (tree5) else tf1 (ZERO) (repr (Tnil))
Inductive1 : tree3 = Node (nat2) (tree4) (tree5)
Cond1 : lq (ZERO) (if lq (tf1 (nat2) (repr (tree4))) (tf1 (nat2) (repr (tree5))) then tf1 (nat2) (repr (tree5)) else tf1 (nat2) (repr (tree4))) = true
tree1 : tree
nat3 : nat
tree6 : tree
tree7 : tree
IH3 : tf1 (ZERO) (tree6) = if lq (ZERO) (tf1 (ZERO) (tree6)) then reprNew (Node (nat2) (tree4) (tree5)) else tf1 (ZERO) (repr (Tnil))
IH4 : tf1 (ZERO) (tree7) = if lq (ZERO) (tf1 (ZERO) (tree7)) then reprNew (Node (nat2) (tree4) (tree5)) else tf1 (ZERO) (repr (Tnil))
Inductive2 : tree1 = Node (nat3) (tree6) (tree7)
Case1 : lq (tf1 (nat3) (tree6)) (tf1 (nat3) (tree7)) = true
Case2 : lq (ZERO) (tf1 (nat3) (tree7)) = true
---------------------------------------
tf1 (nat3) (tree7) = plus (nat2) (if lq (reprNew (tree4)) (reprNew (tree5)) then reprNew (tree5) else reprNew (tree4))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case lq (reprNew (tree4)) (reprNew (tree5))(rank:10.)
=================================================
Progress: 181


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree3 : tree
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : tf1 (ZERO) (tree4) = if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else tf1 (ZERO) (repr (Tnil))
IH2 : tf1 (ZERO) (tree5) = if lq (ZERO) (tf1 (ZERO) (tree5)) then tf1 (ZERO) (tree5) else tf1 (ZERO) (repr (Tnil))
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
Case1 : lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) = true
Case2 : lq (ZERO) (tf1 (nat2) (tree5)) = true
---------------------------------------
tf1 (nat2) (tree5) = if lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) then tf1 (nat2) (tree5) else tf1 (nat2) (tree4)

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 9.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree3 : tree
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : tf1 (ZERO) (tree4) = if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else tf1 (ZERO) (repr (Tnil))
IH2 : tf1 (ZERO) (tree5) = if lq (ZERO) (tf1 (ZERO) (tree5)) then tf1 (ZERO) (tree5) else tf1 (ZERO) (repr (Tnil))
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
Case1 : lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) = true
Case2 : lq (ZERO) (tf1 (nat2) (tree5)) = true
---------------------------------------
tf1 (nat2) (tree5) = if true then tf1 (nat2) (tree5) else tf1 (nat2) (tree4)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:8.)
=================================================
Progress: 182


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree3 : tree
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : tf1 (ZERO) (tree4) = if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else tf1 (ZERO) (repr (Tnil))
IH2 : tf1 (ZERO) (tree5) = if lq (ZERO) (tf1 (ZERO) (tree5)) then tf1 (ZERO) (tree5) else tf1 (ZERO) (repr (Tnil))
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
Case1 : lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) = true
Case2 : lq (ZERO) (tf1 (nat2) (tree5)) = true
---------------------------------------
tf1 (nat2) (tree5) = if true then tf1 (nat2) (tree5) else tf1 (nat2) (tree4)

4 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 8.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree3 : tree
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : tf1 (ZERO) (tree4) = if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else tf1 (ZERO) (repr (Tnil))
IH2 : tf1 (ZERO) (tree5) = if lq (ZERO) (tf1 (ZERO) (tree5)) then tf1 (ZERO) (tree5) else tf1 (ZERO) (repr (Tnil))
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
Case1 : lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) = true
Case2 : lq (ZERO) (tf1 (nat2) (tree5)) = false
---------------------------------------
tf1 (nat2) (tree5) = ZERO

3 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 0
previous tactics
simpl in goal
case lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5))
case lq (ZERO) (tf1 (nat2) (tree5))
rewrite Case1 in goal at 0
reflexivity
validate generalize_common_subterm_goal
Prop: tf1 (SUCC (ZERO)) (Node (SUCC (ZERO)) (Tnil) (Node (ZERO) (Tnil) (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Tnil) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil)) (Tnil))) (Tnil)))) = ZERO
Prop: tf1 (SUCC (ZERO)) (Node (ZERO) (Tnil) (Tnil)) = ZERO
Prop: tf1 (SUCC (ZERO)) (Tnil) = ZERO
Lemma List
forall (nat1:nat) (tree1:tree), lq (ZERO) (tf1 (nat1) (tree1)) = false -> tf1 (nat1) (tree1) = ZERO
End of Lemma List


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree3 : tree
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : tf1 (ZERO) (tree4) = if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else tf1 (ZERO) (repr (Tnil))
IH2 : tf1 (ZERO) (tree5) = if lq (ZERO) (tf1 (ZERO) (tree5)) then tf1 (ZERO) (tree5) else tf1 (ZERO) (repr (Tnil))
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
Case1 : lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) = true
Case2 : lq (ZERO) (tf1 (nat2) (tree5)) = false
---------------------------------------
tf1 (nat2) (tree5) = ZERO

3 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 183


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree3 : tree
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : tf1 (ZERO) (tree4) = if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else tf1 (ZERO) (repr (Tnil))
IH2 : tf1 (ZERO) (tree5) = if lq (ZERO) (tf1 (ZERO) (tree5)) then tf1 (ZERO) (tree5) else tf1 (ZERO) (repr (Tnil))
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
Case1 : lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) = true
Case2 : lq (ZERO) (tf1 (nat2) (tree5)) = false
---------------------------------------
tf1 (nat2) (tree5) = ZERO

3 goal(s) more...

1 conjecture(s) more...
>>> assert forall (nat1:nat) (tree1:tree), lq (ZERO) (tf1 (nat1) (tree1)) = false -> tf1 (nat1) (tree1) = ZERO(rank : 0.)


1st goal of : forall (nat1:nat) (tree1:tree), lq (ZERO) (tf1 (nat1) (tree1)) = false -> tf1 (nat1) (tree1) = ZERO

---------------------------------------
forall (nat1:nat) (tree1:tree), lq (ZERO) (tf1 (nat1) (tree1)) = false -> tf1 (nat1) (tree1) = ZERO

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat1(rank:7.)
=================================================
Progress: 184


1st goal of : forall (nat1:nat) (tree1:tree), lq (ZERO) (tf1 (nat1) (tree1)) = false -> tf1 (nat1) (tree1) = ZERO

---------------------------------------
forall (nat1:nat) (tree1:tree), lq (ZERO) (tf1 (nat1) (tree1)) = false -> tf1 (nat1) (tree1) = ZERO

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat1(rank : 7.)


1st goal of : forall (nat1:nat) (tree1:tree), lq (ZERO) (tf1 (nat1) (tree1)) = false -> tf1 (nat1) (tree1) = ZERO
nat1 : nat
---------------------------------------
forall (tree1:tree), lq (ZERO) (tf1 (nat1) (tree1)) = false -> tf1 (nat1) (tree1) = ZERO

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction tree1(rank:8.)
=================================================
Progress: 185


1st goal of : forall (nat1:nat) (tree1:tree), lq (ZERO) (tf1 (nat1) (tree1)) = false -> tf1 (nat1) (tree1) = ZERO
nat1 : nat
---------------------------------------
forall (tree1:tree), lq (ZERO) (tf1 (nat1) (tree1)) = false -> tf1 (nat1) (tree1) = ZERO

0 goal(s) more...

2 conjecture(s) more...
>>> induction tree1(rank : 8.)


1st goal of : forall (nat1:nat) (tree1:tree), lq (ZERO) (tf1 (nat1) (tree1)) = false -> tf1 (nat1) (tree1) = ZERO
nat1 : nat
tree1 : tree
Base1 : tree1 = Tnil
---------------------------------------
lq (ZERO) (tf1 (nat1) (Tnil)) = false -> tf1 (nat1) (Tnil) = ZERO

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 186


1st goal of : forall (nat1:nat) (tree1:tree), lq (ZERO) (tf1 (nat1) (tree1)) = false -> tf1 (nat1) (tree1) = ZERO
nat1 : nat
tree1 : tree
Base1 : tree1 = Tnil
---------------------------------------
lq (ZERO) (tf1 (nat1) (Tnil)) = false -> tf1 (nat1) (Tnil) = ZERO

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (nat1:nat) (tree1:tree), lq (ZERO) (tf1 (nat1) (tree1)) = false -> tf1 (nat1) (tree1) = ZERO
nat1 : nat
tree1 : tree
Base1 : tree1 = Tnil
---------------------------------------
lq (ZERO) (nat1) = false -> nat1 = ZERO

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:8.)
=================================================
Progress: 187


1st goal of : forall (nat1:nat) (tree1:tree), lq (ZERO) (tf1 (nat1) (tree1)) = false -> tf1 (nat1) (tree1) = ZERO
nat1 : nat
tree1 : tree
Base1 : tree1 = Tnil
---------------------------------------
lq (ZERO) (nat1) = false -> nat1 = ZERO

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 8.)


1st goal of : forall (nat1:nat) (tree1:tree), lq (ZERO) (tf1 (nat1) (tree1)) = false -> tf1 (nat1) (tree1) = ZERO
nat1 : nat
tree1 : tree
Base1 : tree1 = Tnil
Cond1 : lq (ZERO) (nat1) = false
---------------------------------------
nat1 = ZERO

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
validate generalize_common_subterm_goal
Prop: ZERO = ZERO
Prop: ZERO = ZERO
Prop: SUCC (SUCC (ZERO)) = ZERO
Lemma List
forall (nat1:nat), lq (ZERO) (nat1) = false -> nat1 = ZERO
End of Lemma List


1st goal of : forall (nat1:nat) (tree1:tree), lq (ZERO) (tf1 (nat1) (tree1)) = false -> tf1 (nat1) (tree1) = ZERO
nat1 : nat
tree1 : tree
Base1 : tree1 = Tnil
Cond1 : lq (ZERO) (nat1) = false
---------------------------------------
nat1 = ZERO

1 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 188


1st goal of : forall (nat1:nat) (tree1:tree), lq (ZERO) (tf1 (nat1) (tree1)) = false -> tf1 (nat1) (tree1) = ZERO
nat1 : nat
tree1 : tree
Base1 : tree1 = Tnil
Cond1 : lq (ZERO) (nat1) = false
---------------------------------------
nat1 = ZERO

1 goal(s) more...

2 conjecture(s) more...
>>> assert forall (nat1:nat), lq (ZERO) (nat1) = false -> nat1 = ZERO(rank : 0.)


1st goal of : forall (nat1:nat), lq (ZERO) (nat1) = false -> nat1 = ZERO

---------------------------------------
forall (nat1:nat), lq (ZERO) (nat1) = false -> nat1 = ZERO

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat1(rank:9.)
=================================================
Progress: 189


1st goal of : forall (nat1:nat), lq (ZERO) (nat1) = false -> nat1 = ZERO

---------------------------------------
forall (nat1:nat), lq (ZERO) (nat1) = false -> nat1 = ZERO

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9.)


1st goal of : forall (nat1:nat), lq (ZERO) (nat1) = false -> nat1 = ZERO
nat1 : nat
---------------------------------------
lq (ZERO) (nat1) = false -> nat1 = ZERO

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:9.)
=================================================
Progress: 190


1st goal of : forall (nat1:nat), lq (ZERO) (nat1) = false -> nat1 = ZERO
nat1 : nat
---------------------------------------
lq (ZERO) (nat1) = false -> nat1 = ZERO

0 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 9.)


1st goal of : forall (nat1:nat), lq (ZERO) (nat1) = false -> nat1 = ZERO
nat1 : nat
Cond1 : lq (ZERO) (nat1) = false
---------------------------------------
nat1 = ZERO

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: ZERO = ZERO
Prop: SUCC (ZERO) = ZERO
Prop: ZERO = ZERO
Lemma List
forall (nat1:nat), lq (ZERO) (nat1) = false -> nat1 = ZERO
End of Lemma List


1st goal of : forall (nat1:nat), lq (ZERO) (nat1) = false -> nat1 = ZERO
nat1 : nat
Cond1 : lq (ZERO) (nat1) = false
---------------------------------------
nat1 = ZERO

0 goal(s) more...

3 conjecture(s) more...
=================================================
Progress: 191


1st goal of : forall (nat1:nat), lq (ZERO) (nat1) = false -> nat1 = ZERO
nat1 : nat
Cond1 : lq (ZERO) (nat1) = false
---------------------------------------
nat1 = ZERO

0 goal(s) more...

3 conjecture(s) more...
>>> assert forall (nat1:nat), lq (ZERO) (nat1) = false -> nat1 = ZERO(rank : 0.)


1st goal of : forall (nat1:nat), lq (ZERO) (nat1) = false -> nat1 = ZERO

---------------------------------------
forall (nat1:nat), lq (ZERO) (nat1) = false -> nat1 = ZERO

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro nat1(rank:11.)
=================================================
Progress: 192


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
tree3 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : forall (tree1:tree), lq (ZERO) (tf1 (ZERO) (repr (tree4))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then reprNew (tree4) else tf1 (ZERO) (repr (Tnil))
IH2 : forall (tree1:tree), lq (ZERO) (tf1 (ZERO) (repr (tree5))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then reprNew (tree5) else tf1 (ZERO) (repr (Tnil))
Inductive1 : tree3 = Node (nat2) (tree4) (tree5)
Cond1 : lq (ZERO) (if lq (tf1 (nat2) (repr (tree4))) (tf1 (nat2) (repr (tree5))) then tf1 (nat2) (repr (tree5)) else tf1 (nat2) (repr (tree4))) = true
tree1 : tree
nat3 : nat
tree6 : tree
tree7 : tree
IH3 : tf1 (ZERO) (tree6) = if lq (ZERO) (tf1 (ZERO) (tree6)) then reprNew (Node (nat2) (tree4) (tree5)) else tf1 (ZERO) (repr (Tnil))
IH4 : tf1 (ZERO) (tree7) = if lq (ZERO) (tf1 (ZERO) (tree7)) then reprNew (Node (nat2) (tree4) (tree5)) else tf1 (ZERO) (repr (Tnil))
Inductive2 : tree1 = Node (nat3) (tree6) (tree7)
Case1 : lq (tf1 (nat3) (tree6)) (tf1 (nat3) (tree7)) = true
Case2 : lq (ZERO) (tf1 (nat3) (tree7)) = true
---------------------------------------
tf1 (nat3) (tree7) = plus (nat2) (if lq (reprNew (tree4)) (reprNew (tree5)) then reprNew (tree5) else reprNew (tree4))

4 goal(s) more...

1 conjecture(s) more...
>>> case lq (reprNew (tree4)) (reprNew (tree5))(rank : 10.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
tree3 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : forall (tree1:tree), lq (ZERO) (tf1 (ZERO) (repr (tree4))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then reprNew (tree4) else tf1 (ZERO) (repr (Tnil))
IH2 : forall (tree1:tree), lq (ZERO) (tf1 (ZERO) (repr (tree5))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then reprNew (tree5) else tf1 (ZERO) (repr (Tnil))
Inductive1 : tree3 = Node (nat2) (tree4) (tree5)
Cond1 : lq (ZERO) (if lq (tf1 (nat2) (repr (tree4))) (tf1 (nat2) (repr (tree5))) then tf1 (nat2) (repr (tree5)) else tf1 (nat2) (repr (tree4))) = true
tree1 : tree
nat3 : nat
tree6 : tree
tree7 : tree
IH3 : tf1 (ZERO) (tree6) = if lq (ZERO) (tf1 (ZERO) (tree6)) then reprNew (Node (nat2) (tree4) (tree5)) else tf1 (ZERO) (repr (Tnil))
IH4 : tf1 (ZERO) (tree7) = if lq (ZERO) (tf1 (ZERO) (tree7)) then reprNew (Node (nat2) (tree4) (tree5)) else tf1 (ZERO) (repr (Tnil))
Inductive2 : tree1 = Node (nat3) (tree6) (tree7)
Case1 : lq (tf1 (nat3) (tree6)) (tf1 (nat3) (tree7)) = true
Case2 : lq (ZERO) (tf1 (nat3) (tree7)) = true
Case3 : lq (reprNew (tree4)) (reprNew (tree5)) = true
---------------------------------------
tf1 (nat3) (tree7) = plus (nat2) (reprNew (tree5))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (tf1 (nat3) (tree6)) (tf1 (nat3) (tree7))
case lq (ZERO) (tf1 (nat3) (tree7))
case lq (reprNew (tree4)) (reprNew (tree5))
parent
tf1 (nat3) (tree7)
lower
tf1(_, tree7)
upper
_
remove upper
tf1(ZERO(), tree7)
remove lower
tf1(ZERO(), tree7)
remove upper
tf1(nat3, tree7)
remove lower
tf1(nat3, tree7)
remove upper
tf1(nat3, tree7)
remove lower
tf1(nat3, tree7)
remove upper
tf1(nat3, tree7)
remove lower
tf1(nat3, tree7)
validate generalize_common_subterm_goal
Prop: tf1 (SUCC (ZERO)) (Node (SUCC (SUCC (ZERO))) (Tnil) (Tnil)) = plus (SUCC (ZERO)) (reprNew (Tnil))
Prop: tf1 (ZERO) (Tnil) = plus (SUCC (ZERO)) (reprNew (Tnil))
Prop: tf1 (ZERO) (Tnil) = plus (SUCC (ZERO)) (reprNew (Tnil))
asdf
=================================================
Progress: 193


1st goal of : forall (nat1:nat), lq (ZERO) (nat1) = false -> nat1 = ZERO

---------------------------------------
forall (nat1:nat), lq (ZERO) (nat1) = false -> nat1 = ZERO

0 goal(s) more...

4 conjecture(s) more...
>>> intro nat1(rank : 11.)


1st goal of : forall (nat1:nat), lq (ZERO) (nat1) = false -> nat1 = ZERO
nat1 : nat
---------------------------------------
lq (ZERO) (nat1) = false -> nat1 = ZERO

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11.)
=================================================
Progress: 194


1st goal of : forall (nat1:nat), lq (ZERO) (nat1) = false -> nat1 = ZERO
nat1 : nat
---------------------------------------
lq (ZERO) (nat1) = false -> nat1 = ZERO

0 goal(s) more...

4 conjecture(s) more...
>>> intro Cond1(rank : 11.)


1st goal of : forall (nat1:nat), lq (ZERO) (nat1) = false -> nat1 = ZERO
nat1 : nat
Cond1 : lq (ZERO) (nat1) = false
---------------------------------------
nat1 = ZERO

0 goal(s) more...

4 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: ZERO = ZERO
Prop: SUCC (ZERO) = ZERO
Prop: ZERO = ZERO
=================================================
Progress: 195


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 12.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) then reprNew (tree3) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
case lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3)))(rank:5.)
rewrite IH2 in goal at 0(rank:12.)
rewrite <- IH2 in goal at 0(rank:20.)
=================================================
Progress: 196


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) then reprNew (tree3) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
>>> case lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3)))(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- IH2 in goal at 0(rank:5.)
=================================================
Progress: 197


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 1
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH1 in goal at 0
case lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3)))
rewrite <- IH2 in goal at 0
Prop: tf1 (SUCC (ZERO)) (Tnil) = plus (SUCC (ZERO)) (tf1 (ZERO) (Tnil))
Prop: tf1 (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Tnil) (Node (SUCC (SUCC (ZERO))) (Tnil) (Tnil))) (Tnil)) = plus (ZERO) (tf1 (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Tnil) (Node (SUCC (SUCC (ZERO))) (Tnil) (Tnil))) (Tnil)))
Prop: tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil)) = plus (ZERO) (tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil)))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 1
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH1 in goal at 0
case lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3)))
validate generalize_common_subterm_goal
Prop: tf1 (SUCC (ZERO)) (repr (Tnil)) = plus (SUCC (ZERO)) (reprNew (Tnil))
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (reprNew (Tnil))
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (reprNew (Tnil))
=================================================
Progress: 198


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 1(rank : 12.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
case lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3)))(rank:5.)
rewrite IH2 in goal at 0(rank:12.)
rewrite <- IH2 in goal at 0(rank:20.)
=================================================
Progress: 199


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
>>> case lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3)))(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- IH2 in goal at 0(rank:5.)
=================================================
Progress: 200


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 1
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH1 in goal at 1
case lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3)))
rewrite <- IH2 in goal at 0
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (tf1 (ZERO) (Tnil))
Prop: tf1 (SUCC (ZERO)) (Tnil) = plus (SUCC (ZERO)) (tf1 (ZERO) (Tnil))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (tf1 (ZERO) (Tnil))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 1
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH1 in goal at 1
case lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3)))
validate generalize_common_subterm_goal
Prop: tf1 (SUCC (ZERO)) (repr (Tnil)) = plus (SUCC (ZERO)) (reprNew (Tnil))
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (reprNew (Tnil))
Prop: tf1 (SUCC (ZERO)) (repr (Tnil)) = plus (SUCC (ZERO)) (reprNew (Tnil))
=================================================
Progress: 201


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 2(rank : 12.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) then reprNew (tree3) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
case lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3)))(rank:5.)
rewrite IH2 in goal at 0(rank:12.)
rewrite <- IH2 in goal at 0(rank:20.)
=================================================
Progress: 202


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) then reprNew (tree3) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
>>> case lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3)))(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- IH2 in goal at 0(rank:5.)
=================================================
Progress: 203


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 1
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH1 in goal at 2
case lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3)))
rewrite <- IH2 in goal at 0
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (tf1 (ZERO) (Tnil))
Prop: tf1 (ZERO) (Node (SUCC (ZERO)) (Tnil) (Tnil)) = plus (ZERO) (tf1 (ZERO) (Node (SUCC (ZERO)) (Tnil) (Tnil)))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (tf1 (ZERO) (Tnil))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 1
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH1 in goal at 2
case lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3)))
validate generalize_common_subterm_goal
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (reprNew (Tnil))
Prop: tf1 (SUCC (SUCC (ZERO))) (repr (Node (ZERO) (Tnil) (Node (SUCC (ZERO)) (Node (ZERO) (Tnil) (Tnil)) (Tnil)))) = plus (SUCC (SUCC (ZERO))) (reprNew (Node (ZERO) (Tnil) (Node (SUCC (ZERO)) (Node (ZERO) (Tnil) (Tnil)) (Tnil))))
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (reprNew (Tnil))
=================================================
Progress: 204


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 12.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3))(rank:5.)
=================================================
Progress: 205


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
>>> case lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3))(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- IH2 in goal at 0(rank:5.)
=================================================
Progress: 206


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 1
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH2 in goal at 0
case lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3))
rewrite <- IH2 in goal at 0
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (tf1 (ZERO) (Tnil))
Prop: tf1 (SUCC (ZERO)) (Tnil) = plus (SUCC (ZERO)) (tf1 (ZERO) (Tnil))
Prop: tf1 (ZERO) (Node (SUCC (SUCC (ZERO))) (Tnil) (Tnil)) = plus (ZERO) (tf1 (ZERO) (Node (SUCC (SUCC (ZERO))) (Tnil) (Tnil)))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 1
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH2 in goal at 0
case lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3))
validate generalize_common_subterm_goal
Prop: tf1 (ZERO) (repr (Node (SUCC (ZERO)) (Tnil) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Tnil))))) = plus (ZERO) (reprNew (Node (SUCC (ZERO)) (Tnil) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Tnil)))))
Prop: tf1 (ZERO) (repr (Node (SUCC (ZERO)) (Tnil) (Tnil))) = plus (ZERO) (reprNew (Node (SUCC (ZERO)) (Tnil) (Tnil)))
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (reprNew (Tnil))
=================================================
Progress: 207


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (repr (tree3)) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 12.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (repr (tree3)) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
case lq (reprNew (tree2)) (reprNew (tree3))(rank:5.)
rewrite IH2 in goal at 0(rank:12.)
rewrite <- IH2 in goal at 0(rank:20.)
=================================================
Progress: 208


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (repr (tree3)) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
>>> case lq (reprNew (tree2)) (reprNew (tree3))(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite IH2 in goal at 0(rank:5.)
=================================================
Progress: 209


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 2
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH1 in goal at 0
case lq (reprNew (tree2)) (reprNew (tree3))
rewrite IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (reprNew (Tnil))
Prop: tf1 (SUCC (ZERO)) (repr (Tnil)) = plus (SUCC (ZERO)) (reprNew (Tnil))
Prop: tf1 (ZERO) (repr (Node (ZERO) (Tnil) (Node (SUCC (ZERO)) (Tnil) (Node (ZERO) (Tnil) (Tnil))))) = plus (ZERO) (reprNew (Node (ZERO) (Tnil) (Node (SUCC (ZERO)) (Tnil) (Node (ZERO) (Tnil) (Tnil)))))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 2
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH1 in goal at 0
case lq (reprNew (tree2)) (reprNew (tree3))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (tf1 (ZERO) (Tnil))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (tf1 (ZERO) (Tnil))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (tf1 (ZERO) (Tnil))
=================================================
Progress: 210


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (repr (tree3)) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 1(rank : 12.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (repr (tree3)) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
case lq (reprNew (tree2)) (reprNew (tree3))(rank:5.)
rewrite IH2 in goal at 0(rank:12.)
rewrite <- IH2 in goal at 0(rank:20.)
=================================================
Progress: 211


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (repr (tree3)) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
>>> case lq (reprNew (tree2)) (reprNew (tree3))(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite IH2 in goal at 0(rank:5.)
=================================================
Progress: 212


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 2
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH1 in goal at 1
case lq (reprNew (tree2)) (reprNew (tree3))
rewrite IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (reprNew (Tnil))
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (reprNew (Tnil))
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (reprNew (Tnil))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 2
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH1 in goal at 1
case lq (reprNew (tree2)) (reprNew (tree3))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (tf1 (ZERO) (Tnil))
Prop: tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil)) = plus (ZERO) (tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil)))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (tf1 (ZERO) (Tnil))
=================================================
Progress: 213


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (repr (tree3)) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 2(rank : 12.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (repr (tree3)) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
case lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3))(rank:5.)
rewrite IH2 in goal at 0(rank:12.)
rewrite <- IH2 in goal at 0(rank:20.)
=================================================
Progress: 214


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (repr (tree3)) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
>>> case lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3))(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite IH2 in goal at 0(rank:5.)
=================================================
Progress: 215


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 2
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH1 in goal at 2
case lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3))
rewrite IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (reprNew (Tnil))
Prop: tf1 (ZERO) (repr (Node (ZERO) (Tnil) (Tnil))) = plus (ZERO) (reprNew (Node (ZERO) (Tnil) (Tnil)))
Prop: tf1 (SUCC (ZERO)) (repr (Tnil)) = plus (SUCC (ZERO)) (reprNew (Tnil))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 2
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH1 in goal at 2
case lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3))
Prop: tf1 (SUCC (SUCC (ZERO))) (Node (SUCC (ZERO)) (Node (ZERO) (Node (SUCC (ZERO)) (Tnil) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Tnil)))) (Tnil)) (Tnil)) = plus (SUCC (SUCC (ZERO))) (tf1 (ZERO) (Node (SUCC (ZERO)) (Node (ZERO) (Node (SUCC (ZERO)) (Tnil) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Tnil)))) (Tnil)) (Tnil)))
Prop: tf1 (SUCC (ZERO)) (Tnil) = plus (SUCC (ZERO)) (tf1 (ZERO) (Tnil))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (tf1 (ZERO) (Tnil))
=================================================
Progress: 216


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (repr (tree3)) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 12.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 2
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: tf1 (SUCC (ZERO)) (repr (Tnil)) = plus (SUCC (ZERO)) (if lq (tf1 (ZERO) (repr (Tnil))) (reprNew (Tnil)) then reprNew (Tnil) else tf1 (ZERO) (repr (Tnil)))
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (if lq (tf1 (ZERO) (repr (Tnil))) (reprNew (Tnil)) then reprNew (Tnil) else tf1 (ZERO) (repr (Tnil)))
Prop: tf1 (ZERO) (repr (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil))) = plus (ZERO) (if lq (tf1 (ZERO) (repr (Tnil))) (reprNew (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil))) then reprNew (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil)) else tf1 (ZERO) (repr (Tnil)))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 2
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
Prop: tf1 (SUCC (ZERO)) (Tnil) = plus (SUCC (ZERO)) (if lq (tf1 (ZERO) (repr (Tnil))) (reprNew (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (repr (Tnil)))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (if lq (tf1 (ZERO) (repr (Node (SUCC (ZERO)) (Tnil) (Tnil)))) (reprNew (Node (ZERO) (Tnil) (Tnil))) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (repr (Node (SUCC (ZERO)) (Tnil) (Tnil))))
Prop: tf1 (ZERO) (Node (ZERO) (Tnil) (Node (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Tnil) (Tnil)) (Node (SUCC (ZERO)) (Tnil) (Node (ZERO) (Tnil) (Tnil)))) (Node (ZERO) (Tnil) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil))))) = plus (ZERO) (if lq (tf1 (ZERO) (repr (Tnil))) (reprNew (Node (ZERO) (Tnil) (Tnil))) then tf1 (ZERO) (Node (ZERO) (Tnil) (Node (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Tnil) (Tnil)) (Node (SUCC (ZERO)) (Tnil) (Node (ZERO) (Tnil) (Tnil)))) (Node (ZERO) (Tnil) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil))))) else tf1 (ZERO) (repr (Tnil)))
validate generalize_common_subterm_goal
Prop: tf1 (SUCC (ZERO)) (Tnil) = plus (SUCC (ZERO)) (if lq (tf1 (ZERO) (repr (Node (SUCC (ZERO)) (Tnil) (Node (SUCC (ZERO)) (Tnil) (Node (ZERO) (Tnil) (Tnil)))))) (reprNew (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (repr (Node (SUCC (ZERO)) (Tnil) (Node (SUCC (ZERO)) (Tnil) (Node (ZERO) (Tnil) (Tnil))))))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (if lq (tf1 (ZERO) (repr (Tnil))) (reprNew (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (repr (Tnil)))
Prop: tf1 (SUCC (ZERO)) (Tnil) = plus (SUCC (ZERO)) (if lq (tf1 (ZERO) (repr (Tnil))) (reprNew (Node (ZERO) (Tnil) (Tnil))) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (repr (Tnil)))
=================================================
Progress: 217


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) then tf1 (ZERO) (repr (tree3)) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 12.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) then tf1 (ZERO) (repr (tree3)) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
case lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3)))(rank:5.)
rewrite IH2 in goal at 2(rank:12.)
rewrite IH2 in goal at 0(rank:12.)
rewrite IH2 in goal at 1(rank:12.)
=================================================
Progress: 218


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) then tf1 (ZERO) (repr (tree3)) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
>>> case lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3)))(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite IH2 in goal at 0(rank:5.)
=================================================
Progress: 219


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
rewrite <- IH2 in goal at 0
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH1 in goal at 0
case lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3)))
rewrite IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (reprNew (Tnil))
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (reprNew (Tnil))
Prop: tf1 (ZERO) (repr (Node (ZERO) (Tnil) (Tnil))) = plus (ZERO) (reprNew (Node (ZERO) (Tnil) (Tnil)))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
rewrite <- IH2 in goal at 0
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH1 in goal at 0
case lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3)))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (tf1 (ZERO) (Tnil))
Prop: tf1 (ZERO) (Node (SUCC (SUCC (SUCC (ZERO)))) (Tnil) (Node (SUCC (ZERO)) (Tnil) (Node (SUCC (ZERO)) (Tnil) (Node (ZERO) (Tnil) (Tnil))))) = plus (ZERO) (tf1 (ZERO) (Node (SUCC (SUCC (SUCC (ZERO)))) (Tnil) (Node (SUCC (ZERO)) (Tnil) (Node (SUCC (ZERO)) (Tnil) (Node (ZERO) (Tnil) (Tnil))))))
Prop: tf1 (SUCC (ZERO)) (Node (ZERO) (Tnil) (Tnil)) = plus (SUCC (ZERO)) (tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil)))
=================================================
Progress: 220


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) then tf1 (ZERO) (repr (tree3)) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 12.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (reprNew (tree2)) (reprNew (tree3))(rank:5.)
rewrite <- IH1 in goal at 0(rank:20.)
=================================================
Progress: 221


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
>>> case lq (reprNew (tree2)) (reprNew (tree3))(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- IH2 in goal at 0(rank:5.)
=================================================
Progress: 222


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
rewrite <- IH2 in goal at 0
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH2 in goal at 0
case lq (reprNew (tree2)) (reprNew (tree3))
rewrite <- IH2 in goal at 0
Prop: tf1 (SUCC (ZERO)) (Tnil) = plus (SUCC (ZERO)) (tf1 (ZERO) (Tnil))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (tf1 (ZERO) (Tnil))
Prop: tf1 (SUCC (ZERO)) (Node (ZERO) (Tnil) (Tnil)) = plus (SUCC (ZERO)) (tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil)))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
rewrite <- IH2 in goal at 0
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH2 in goal at 0
case lq (reprNew (tree2)) (reprNew (tree3))
validate generalize_common_subterm_goal
Prop: tf1 (SUCC (ZERO)) (repr (Tnil)) = plus (SUCC (ZERO)) (reprNew (Tnil))
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (reprNew (Tnil))
Prop: tf1 (SUCC (ZERO)) (repr (Node (ZERO) (Tnil) (Tnil))) = plus (SUCC (ZERO)) (reprNew (Node (ZERO) (Tnil) (Tnil)))
=================================================
Progress: 223


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) then tf1 (ZERO) (repr (tree3)) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH2 in goal at 1(rank : 12.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (repr (tree3)) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:4.)
=================================================
Progress: 224


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (repr (tree3)) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 4.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (repr (tree3)) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3))(rank:5.)
=================================================
Progress: 225


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (repr (tree3)) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
>>> case lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3))(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite IH2 in goal at 0(rank:5.)
=================================================
Progress: 226


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
rewrite <- IH2 in goal at 0
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH2 in goal at 1
rewrite <- IH1 in goal at 0
case lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3))
rewrite IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: tf1 (ZERO) (repr (Node (ZERO) (Tnil) (Tnil))) = plus (ZERO) (reprNew (Node (ZERO) (Tnil) (Tnil)))
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (reprNew (Tnil))
Prop: tf1 (SUCC (SUCC (ZERO))) (repr (Tnil)) = plus (SUCC (SUCC (ZERO))) (reprNew (Tnil))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
rewrite <- IH2 in goal at 0
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH2 in goal at 1
rewrite <- IH1 in goal at 0
case lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3))
Prop: tf1 (SUCC (SUCC (SUCC (SUCC (ZERO))))) (Tnil) = plus (SUCC (SUCC (SUCC (SUCC (ZERO))))) (tf1 (ZERO) (Tnil))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (tf1 (ZERO) (Tnil))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (tf1 (ZERO) (Tnil))
=================================================
Progress: 227


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) then tf1 (ZERO) (repr (tree3)) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH2 in goal at 2(rank : 12.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:4.)
=================================================
Progress: 228


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 4.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3)))(rank:5.)
=================================================
Progress: 229


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
>>> case lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3)))(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- IH2 in goal at 0(rank:5.)
=================================================
Progress: 230


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
rewrite <- IH2 in goal at 0
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH2 in goal at 2
rewrite <- IH1 in goal at 0
case lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3)))
rewrite <- IH2 in goal at 0
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (tf1 (ZERO) (Tnil))
Prop: tf1 (SUCC (SUCC (ZERO))) (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Tnil))) (Node (ZERO) (Tnil) (Tnil))) = plus (SUCC (SUCC (ZERO))) (tf1 (ZERO) (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Tnil))) (Node (ZERO) (Tnil) (Tnil))))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (tf1 (ZERO) (Tnil))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
rewrite <- IH2 in goal at 0
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH2 in goal at 2
rewrite <- IH1 in goal at 0
case lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3)))
validate generalize_common_subterm_goal
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (reprNew (Tnil))
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (reprNew (Tnil))
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (reprNew (Tnil))
=================================================
Progress: 231


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 12.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) then reprNew (tree3) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
case lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3)))(rank:5.)
rewrite IH2 in goal at 0(rank:12.)
rewrite <- IH2 in goal at 0(rank:20.)
=================================================
Progress: 232


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) then reprNew (tree3) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
>>> case lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3)))(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- IH2 in goal at 0(rank:5.)
=================================================
Progress: 233


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
rewrite <- IH2 in goal at 1
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH1 in goal at 0
case lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3)))
rewrite <- IH2 in goal at 0
Prop: tf1 (SUCC (ZERO)) (Tnil) = plus (SUCC (ZERO)) (tf1 (ZERO) (Tnil))
Prop: tf1 (ZERO) (Node (ZERO) (Node (ZERO) (Tnil) (Node (SUCC (SUCC (SUCC (SUCC (ZERO))))) (Tnil) (Tnil))) (Node (ZERO) (Tnil) (Tnil))) = plus (ZERO) (tf1 (ZERO) (Node (ZERO) (Node (ZERO) (Tnil) (Node (SUCC (SUCC (SUCC (SUCC (ZERO))))) (Tnil) (Tnil))) (Node (ZERO) (Tnil) (Tnil))))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (tf1 (ZERO) (Tnil))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
rewrite <- IH2 in goal at 1
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH1 in goal at 0
case lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3)))
validate generalize_common_subterm_goal
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (reprNew (Tnil))
Prop: tf1 (ZERO) (repr (Node (ZERO) (Tnil) (Tnil))) = plus (ZERO) (reprNew (Node (ZERO) (Tnil) (Tnil)))
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (reprNew (Tnil))
=================================================
Progress: 234


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 12.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (reprNew (tree2)) (reprNew (tree3))(rank:5.)
rewrite <- IH1 in goal at 0(rank:20.)
=================================================
Progress: 235


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
>>> case lq (reprNew (tree2)) (reprNew (tree3))(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- IH2 in goal at 0(rank:5.)
=================================================
Progress: 236


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
rewrite <- IH2 in goal at 1
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH2 in goal at 0
case lq (reprNew (tree2)) (reprNew (tree3))
rewrite <- IH2 in goal at 0
Prop: tf1 (SUCC (ZERO)) (Tnil) = plus (SUCC (ZERO)) (tf1 (ZERO) (Tnil))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (tf1 (ZERO) (Tnil))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (tf1 (ZERO) (Tnil))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
rewrite <- IH2 in goal at 1
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH2 in goal at 0
case lq (reprNew (tree2)) (reprNew (tree3))
validate generalize_common_subterm_goal
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (reprNew (Tnil))
Prop: tf1 (ZERO) (repr (Node (ZERO) (Tnil) (Tnil))) = plus (ZERO) (reprNew (Node (ZERO) (Tnil) (Tnil)))
Prop: tf1 (ZERO) (repr (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Node (SUCC (ZERO)) (Tnil) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Tnil)))))) (Tnil))) = plus (ZERO) (reprNew (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Node (SUCC (ZERO)) (Tnil) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Tnil)))))) (Tnil)))
=================================================
Progress: 237


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (repr (tree3)) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 12.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (repr (tree3)) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
case lq (reprNew (tree2)) (reprNew (tree3))(rank:5.)
rewrite IH2 in goal at 0(rank:12.)
rewrite <- IH2 in goal at 0(rank:20.)
=================================================
Progress: 238


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (repr (tree3)) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
>>> case lq (reprNew (tree2)) (reprNew (tree3))(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite IH2 in goal at 0(rank:5.)
=================================================
Progress: 239


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
rewrite <- IH2 in goal at 2
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH1 in goal at 0
case lq (reprNew (tree2)) (reprNew (tree3))
rewrite IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (reprNew (Tnil))
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (reprNew (Tnil))
Prop: tf1 (SUCC (ZERO)) (repr (Tnil)) = plus (SUCC (ZERO)) (reprNew (Tnil))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
rewrite <- IH2 in goal at 2
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH1 in goal at 0
case lq (reprNew (tree2)) (reprNew (tree3))
Prop: tf1 (ZERO) (Node (ZERO) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Tnil))) (Tnil)) = plus (ZERO) (tf1 (ZERO) (Node (ZERO) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Tnil))) (Tnil)))
Prop: tf1 (SUCC (ZERO)) (Tnil) = plus (SUCC (ZERO)) (tf1 (ZERO) (Tnil))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (tf1 (ZERO) (Tnil))
=================================================
Progress: 240


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (repr (tree3)) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 12.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:4.)
=================================================
Progress: 241


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 4.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3))(rank:5.)
=================================================
Progress: 242


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
>>> case lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3))(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- IH2 in goal at 0(rank:5.)
=================================================
Progress: 243


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
rewrite <- IH2 in goal at 2
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH2 in goal at 0
rewrite <- IH1 in goal at 0
case lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3))
rewrite <- IH2 in goal at 0
Prop: tf1 (SUCC (ZERO)) (Node (ZERO) (Tnil) (Tnil)) = plus (SUCC (ZERO)) (tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil)))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (tf1 (ZERO) (Tnil))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (tf1 (ZERO) (Tnil))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
rewrite <- IH2 in goal at 2
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH2 in goal at 0
rewrite <- IH1 in goal at 0
case lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3))
validate generalize_common_subterm_goal
Prop: tf1 (ZERO) (repr (Node (SUCC (ZERO)) (Node (ZERO) (Tnil) (Tnil)) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Node (SUCC (ZERO)) (Tnil) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Node (ZERO) (Node (SUCC (ZERO)) (Tnil) (Tnil)) (Tnil))))))))) = plus (ZERO) (reprNew (Node (SUCC (ZERO)) (Node (ZERO) (Tnil) (Tnil)) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Node (SUCC (ZERO)) (Tnil) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Node (ZERO) (Node (SUCC (ZERO)) (Tnil) (Tnil)) (Tnil)))))))))
Prop: tf1 (ZERO) (repr (Node (ZERO) (Tnil) (Node (SUCC (SUCC (ZERO))) (Tnil) (Node (ZERO) (Tnil) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil)))))) = plus (ZERO) (reprNew (Node (ZERO) (Tnil) (Node (SUCC (SUCC (ZERO))) (Tnil) (Node (ZERO) (Tnil) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil))))))
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (reprNew (Tnil))
=================================================
Progress: 244


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) then tf1 (ZERO) (repr (tree3)) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 12.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) then tf1 (ZERO) (repr (tree3)) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
case lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3)))(rank:5.)
rewrite IH2 in goal at 2(rank:12.)
rewrite IH2 in goal at 0(rank:12.)
rewrite IH2 in goal at 1(rank:12.)
=================================================
Progress: 245


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) then tf1 (ZERO) (repr (tree3)) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
>>> case lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3)))(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite IH2 in goal at 0(rank:5.)
=================================================
Progress: 246


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH2 in goal at 0
rewrite <- IH1 in goal at 1
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH1 in goal at 0
case lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3)))
rewrite IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (reprNew (Tnil))
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (reprNew (Tnil))
Prop: tf1 (SUCC (ZERO)) (repr (Tnil)) = plus (SUCC (ZERO)) (reprNew (Tnil))
previous tactics
simpl in goal
rewrite <- IH2 in goal at 0
rewrite <- IH1 in goal at 1
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH1 in goal at 0
case lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3)))
Prop: tf1 (ZERO) (Node (ZERO) (Tnil) (Node (SUCC (SUCC (SUCC (ZERO)))) (Tnil) (Tnil))) = plus (ZERO) (tf1 (ZERO) (Node (ZERO) (Tnil) (Node (SUCC (SUCC (SUCC (ZERO)))) (Tnil) (Tnil))))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (tf1 (ZERO) (Tnil))
Prop: tf1 (SUCC (ZERO)) (Tnil) = plus (SUCC (ZERO)) (tf1 (ZERO) (Tnil))
=================================================
Progress: 247


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) then tf1 (ZERO) (repr (tree3)) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 12.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then reprNew (tree3) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3))(rank:5.)
rewrite <- IH1 in goal at 0(rank:20.)
=================================================
Progress: 248


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then reprNew (tree3) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
>>> case lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3))(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- IH2 in goal at 0(rank:5.)
=================================================
Progress: 249


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH2 in goal at 0
rewrite <- IH1 in goal at 1
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH2 in goal at 0
case lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3))
rewrite <- IH2 in goal at 0
Prop: tf1 (SUCC (ZERO)) (Node (ZERO) (Tnil) (Tnil)) = plus (SUCC (ZERO)) (tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil)))
Prop: tf1 (SUCC (SUCC (ZERO))) (Tnil) = plus (SUCC (SUCC (ZERO))) (tf1 (ZERO) (Tnil))
Prop: tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil)) = plus (ZERO) (tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil)))
previous tactics
simpl in goal
rewrite <- IH2 in goal at 0
rewrite <- IH1 in goal at 1
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH2 in goal at 0
case lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3))
validate generalize_common_subterm_goal
Prop: tf1 (SUCC (ZERO)) (repr (Tnil)) = plus (SUCC (ZERO)) (reprNew (Tnil))
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (reprNew (Tnil))
Prop: tf1 (ZERO) (repr (Node (ZERO) (Tnil) (Tnil))) = plus (ZERO) (reprNew (Node (ZERO) (Tnil) (Tnil)))
=================================================
Progress: 250


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) then tf1 (ZERO) (repr (tree3)) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH2 in goal at 1(rank : 12.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (repr (tree3)) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:4.)
=================================================
Progress: 251


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (repr (tree3)) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 4.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (repr (tree3)) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3))(rank:5.)
=================================================
Progress: 252


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (repr (tree3)) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
>>> case lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3))(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite IH2 in goal at 0(rank:5.)
=================================================
Progress: 253


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH2 in goal at 0
rewrite <- IH1 in goal at 1
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH2 in goal at 1
rewrite <- IH1 in goal at 0
case lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3))
rewrite IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (reprNew (Tnil))
Prop: tf1 (SUCC (SUCC (ZERO))) (repr (Tnil)) = plus (SUCC (SUCC (ZERO))) (reprNew (Tnil))
Prop: tf1 (SUCC (ZERO)) (repr (Tnil)) = plus (SUCC (ZERO)) (reprNew (Tnil))
previous tactics
simpl in goal
rewrite <- IH2 in goal at 0
rewrite <- IH1 in goal at 1
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH2 in goal at 1
rewrite <- IH1 in goal at 0
case lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (tf1 (ZERO) (Tnil))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (tf1 (ZERO) (Tnil))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (tf1 (ZERO) (Tnil))
=================================================
Progress: 254


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) then tf1 (ZERO) (repr (tree3)) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH2 in goal at 2(rank : 12.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) then reprNew (tree3) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:4.)
=================================================
Progress: 255


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) then reprNew (tree3) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 4.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3)))(rank:5.)
=================================================
Progress: 256


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
>>> case lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3)))(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- IH2 in goal at 0(rank:5.)
=================================================
Progress: 257


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH2 in goal at 0
rewrite <- IH1 in goal at 1
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH2 in goal at 2
rewrite <- IH1 in goal at 0
case lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3)))
rewrite <- IH2 in goal at 0
Prop: tf1 (SUCC (ZERO)) (Node (ZERO) (Tnil) (Tnil)) = plus (SUCC (ZERO)) (tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil)))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (tf1 (ZERO) (Tnil))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (tf1 (ZERO) (Tnil))
previous tactics
simpl in goal
rewrite <- IH2 in goal at 0
rewrite <- IH1 in goal at 1
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH2 in goal at 2
rewrite <- IH1 in goal at 0
case lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3)))
validate generalize_common_subterm_goal
Prop: tf1 (ZERO) (repr (Node (SUCC (ZERO)) (Tnil) (Tnil))) = plus (ZERO) (reprNew (Node (SUCC (ZERO)) (Tnil) (Tnil)))
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (reprNew (Tnil))
Prop: tf1 (SUCC (SUCC (ZERO))) (repr (Node (SUCC (ZERO)) (Node (ZERO) (Node (SUCC (ZERO)) (Tnil) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil))) (Tnil)) (Tnil))) = plus (SUCC (SUCC (ZERO))) (reprNew (Node (SUCC (ZERO)) (Node (ZERO) (Node (SUCC (ZERO)) (Tnil) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil))) (Tnil)) (Tnil)))
=================================================
Progress: 258


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) then reprNew (tree3) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 12.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) then reprNew (tree3) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
case lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3)))(rank:5.)
rewrite IH2 in goal at 0(rank:12.)
rewrite <- IH2 in goal at 0(rank:20.)
=================================================
Progress: 259


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) then reprNew (tree3) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
>>> case lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3)))(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- IH2 in goal at 0(rank:5.)
=================================================
Progress: 260


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH2 in goal at 1
rewrite <- IH1 in goal at 1
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH1 in goal at 0
case lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3)))
rewrite <- IH2 in goal at 0
Prop: tf1 (SUCC (SUCC (SUCC (ZERO)))) (Tnil) = plus (SUCC (SUCC (SUCC (ZERO)))) (tf1 (ZERO) (Tnil))
Prop: tf1 (SUCC (SUCC (ZERO))) (Node (SUCC (ZERO)) (Node (ZERO) (Tnil) (Tnil)) (Tnil)) = plus (SUCC (SUCC (ZERO))) (tf1 (ZERO) (Node (SUCC (ZERO)) (Node (ZERO) (Tnil) (Tnil)) (Tnil)))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (tf1 (ZERO) (Tnil))
previous tactics
simpl in goal
rewrite <- IH2 in goal at 1
rewrite <- IH1 in goal at 1
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH1 in goal at 0
case lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3)))
validate generalize_common_subterm_goal
Prop: tf1 (SUCC (ZERO)) (repr (Node (ZERO) (Tnil) (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Node (ZERO) (Tnil) (Tnil)) (Node (ZERO) (Tnil) (Node (SUCC (ZERO)) (Tnil) (Tnil)))) (Tnil)))) = plus (SUCC (ZERO)) (reprNew (Node (ZERO) (Tnil) (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Node (ZERO) (Tnil) (Tnil)) (Node (ZERO) (Tnil) (Node (SUCC (ZERO)) (Tnil) (Tnil)))) (Tnil))))
Prop: tf1 (SUCC (ZERO)) (repr (Tnil)) = plus (SUCC (ZERO)) (reprNew (Tnil))
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (reprNew (Tnil))
=================================================
Progress: 261


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) then reprNew (tree3) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 12.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then reprNew (tree3) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3))(rank:5.)
rewrite <- IH1 in goal at 0(rank:20.)
=================================================
Progress: 262


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then reprNew (tree3) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
>>> case lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3))(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- IH2 in goal at 0(rank:5.)
=================================================
Progress: 263


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH2 in goal at 1
rewrite <- IH1 in goal at 1
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH2 in goal at 0
case lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3))
rewrite <- IH2 in goal at 0
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (tf1 (ZERO) (Tnil))
Prop: tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil)) = plus (ZERO) (tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil)))
Prop: tf1 (SUCC (ZERO)) (Node (SUCC (ZERO)) (Tnil) (Node (ZERO) (Tnil) (Tnil))) = plus (SUCC (ZERO)) (tf1 (ZERO) (Node (SUCC (ZERO)) (Tnil) (Node (ZERO) (Tnil) (Tnil))))
previous tactics
simpl in goal
rewrite <- IH2 in goal at 1
rewrite <- IH1 in goal at 1
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH2 in goal at 0
case lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3))
validate generalize_common_subterm_goal
Prop: tf1 (SUCC (ZERO)) (repr (Tnil)) = plus (SUCC (ZERO)) (reprNew (Tnil))
Prop: tf1 (ZERO) (repr (Node (ZERO) (Tnil) (Tnil))) = plus (ZERO) (reprNew (Node (ZERO) (Tnil) (Tnil)))
Prop: tf1 (SUCC (ZERO)) (repr (Node (ZERO) (Tnil) (Tnil))) = plus (SUCC (ZERO)) (reprNew (Node (ZERO) (Tnil) (Tnil)))
=================================================
Progress: 264


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) then tf1 (ZERO) (repr (tree3)) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 12.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then reprNew (tree3) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case lq (reprNew (tree2)) (reprNew (tree3))(rank:5.)
=================================================
Progress: 265


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then reprNew (tree3) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
>>> case lq (reprNew (tree2)) (reprNew (tree3))(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- IH2 in goal at 0(rank:5.)
=================================================
Progress: 266


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 0
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH1 in goal at 0
rewrite IH2 in goal at 0
case lq (reprNew (tree2)) (reprNew (tree3))
rewrite <- IH2 in goal at 0
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (tf1 (ZERO) (Tnil))
Prop: tf1 (SUCC (ZERO)) (Tnil) = plus (SUCC (ZERO)) (tf1 (ZERO) (Tnil))
Prop: tf1 (SUCC (ZERO)) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Node (SUCC (ZERO)) (Node (ZERO) (Node (SUCC (ZERO)) (Tnil) (Tnil)) (Tnil)) (Node (ZERO) (Tnil) (Tnil))))) = plus (SUCC (ZERO)) (tf1 (ZERO) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Node (SUCC (ZERO)) (Node (ZERO) (Node (SUCC (ZERO)) (Tnil) (Tnil)) (Tnil)) (Node (ZERO) (Tnil) (Tnil))))))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 0
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH1 in goal at 0
rewrite IH2 in goal at 0
case lq (reprNew (tree2)) (reprNew (tree3))
validate generalize_common_subterm_goal
Prop: tf1 (SUCC (ZERO)) (repr (Tnil)) = plus (SUCC (ZERO)) (reprNew (Tnil))
Prop: tf1 (SUCC (ZERO)) (repr (Node (ZERO) (Node (ZERO) (Tnil) (Node (ZERO) (Node (SUCC (SUCC (SUCC (SUCC (ZERO))))) (Tnil) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil))) (Tnil))) (Tnil))) = plus (SUCC (ZERO)) (reprNew (Node (ZERO) (Node (ZERO) (Tnil) (Node (ZERO) (Node (SUCC (SUCC (SUCC (SUCC (ZERO))))) (Tnil) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil))) (Tnil))) (Tnil)))
Prop: tf1 (ZERO) (repr (Node (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Node (ZERO) (Tnil) (Tnil)) (Tnil)) (Tnil)) (Tnil)) (Node (ZERO) (Tnil) (Node (SUCC (ZERO)) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Tnil))) (Tnil))))) = plus (ZERO) (reprNew (Node (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Node (ZERO) (Tnil) (Tnil)) (Tnil)) (Tnil)) (Tnil)) (Node (ZERO) (Tnil) (Node (SUCC (ZERO)) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Tnil))) (Tnil)))))
=================================================
Progress: 267


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) then tf1 (ZERO) (repr (tree3)) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH2 in goal at 1(rank : 12.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (repr (tree3)) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 0
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH1 in goal at 0
rewrite IH2 in goal at 1
Prop: tf1 (SUCC (ZERO)) (Tnil) = plus (SUCC (ZERO)) (if lq (reprNew (Node (ZERO) (Node (ZERO) (Node (ZERO) (Tnil) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Node (ZERO) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Node (SUCC (ZERO)) (Tnil) (Tnil)))) (Tnil)))) (Tnil)) (Tnil))) (reprNew (Node (ZERO) (Tnil) (Tnil))) then tf1 (ZERO) (Tnil) else reprNew (Node (ZERO) (Node (ZERO) (Node (ZERO) (Tnil) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Node (ZERO) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Node (SUCC (ZERO)) (Tnil) (Tnil)))) (Tnil)))) (Tnil)) (Tnil)))
Prop: tf1 (ZERO) (Node (SUCC (SUCC (SUCC (ZERO)))) (Tnil) (Node (ZERO) (Tnil) (Tnil))) = plus (ZERO) (if lq (reprNew (Tnil)) (reprNew (Node (SUCC (SUCC (SUCC (ZERO)))) (Node (ZERO) (Tnil) (Tnil)) (Tnil))) then tf1 (ZERO) (Node (SUCC (SUCC (SUCC (ZERO)))) (Tnil) (Node (ZERO) (Tnil) (Tnil))) else reprNew (Tnil))
Prop: tf1 (ZERO) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Tnil))) = plus (ZERO) (if lq (reprNew (Node (SUCC (ZERO)) (Tnil) (Tnil))) (reprNew (Tnil)) then tf1 (ZERO) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Tnil))) else reprNew (Node (SUCC (ZERO)) (Tnil) (Tnil)))
validate generalize_common_subterm_goal
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (if lq (reprNew (Tnil)) (reprNew (Tnil)) then tf1 (ZERO) (Tnil) else reprNew (Tnil))
Prop: tf1 (ZERO) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Node (ZERO) (Tnil) (Tnil))) = plus (ZERO) (if lq (reprNew (Tnil)) (reprNew (Tnil)) then tf1 (ZERO) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Node (ZERO) (Tnil) (Tnil))) else reprNew (Tnil))
Prop: tf1 (SUCC (ZERO)) (Tnil) = plus (SUCC (ZERO)) (if lq (reprNew (Tnil)) (reprNew (Tnil)) then tf1 (ZERO) (Tnil) else reprNew (Tnil))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 0
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH1 in goal at 0
Prop: tf1 (ZERO) (Node (ZERO) (Node (ZERO) (Tnil) (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Tnil) (Tnil)) (Tnil)) (Tnil))) (Tnil)) = plus (ZERO) (if lq (reprNew (Tnil)) (tf1 (ZERO) (Node (ZERO) (Node (ZERO) (Tnil) (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Tnil) (Tnil)) (Tnil)) (Tnil))) (Tnil))) then tf1 (ZERO) (Node (ZERO) (Node (ZERO) (Tnil) (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Tnil) (Tnil)) (Tnil)) (Tnil))) (Tnil)) else reprNew (Tnil))
Prop: tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil)) = plus (ZERO) (if lq (reprNew (Tnil)) (tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil))) then tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil)) else reprNew (Tnil))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (if lq (reprNew (Tnil)) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else reprNew (Tnil))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 0
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (if lq (tf1 (ZERO) (repr (Tnil))) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (repr (Tnil)))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (if lq (tf1 (ZERO) (repr (Node (SUCC (ZERO)) (Node (ZERO) (Tnil) (Tnil)) (Tnil)))) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (repr (Node (SUCC (ZERO)) (Node (ZERO) (Tnil) (Tnil)) (Tnil))))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (if lq (tf1 (ZERO) (repr (Node (SUCC (ZERO)) (Tnil) (Tnil)))) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (repr (Node (SUCC (ZERO)) (Tnil) (Tnil))))
validate generalize_common_subterm_goal
Prop: tf1 (ZERO) (Node (SUCC (ZERO)) (Tnil) (Tnil)) = plus (ZERO) (if lq (tf1 (ZERO) (repr (Tnil))) (tf1 (ZERO) (Node (SUCC (ZERO)) (Tnil) (Tnil))) then tf1 (ZERO) (Node (SUCC (ZERO)) (Tnil) (Tnil)) else tf1 (ZERO) (repr (Tnil)))
Prop: tf1 (ZERO) (Node (SUCC (SUCC (ZERO))) (Tnil) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil))) = plus (ZERO) (if lq (tf1 (ZERO) (repr (Tnil))) (tf1 (ZERO) (Node (SUCC (SUCC (ZERO))) (Tnil) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil)))) then tf1 (ZERO) (Node (SUCC (SUCC (ZERO))) (Tnil) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil))) else tf1 (ZERO) (repr (Tnil)))
Prop: tf1 (SUCC (SUCC (ZERO))) (Tnil) = plus (SUCC (SUCC (ZERO))) (if lq (tf1 (ZERO) (repr (Node (ZERO) (Tnil) (Tnil)))) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (repr (Node (ZERO) (Tnil) (Tnil))))
Lemma List
forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))
End of Lemma List


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) then tf1 (ZERO) (repr (tree3)) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
Lemma List
forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (tree2))
End of Lemma List


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (repr (tree3)) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 268


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) then tf1 (ZERO) (repr (tree3)) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
>>> assert forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))(rank : 0.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))

---------------------------------------
forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree2(rank:6.)
=================================================
Progress: 269


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (repr (tree3)) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
>>> assert forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (tree2))(rank : 0.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (tree2))

---------------------------------------
forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (tree2))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction nat1(rank:6.)
=================================================
Progress: 270


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))

---------------------------------------
forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))

0 goal(s) more...

1 conjecture(s) more...
>>> induction tree2(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
---------------------------------------
forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (Tnil)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (Tnil))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:6.)
=================================================
Progress: 271


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (tree2))

---------------------------------------
forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (tree2))

0 goal(s) more...

1 conjecture(s) more...
>>> induction nat1(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (tree2))
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree) (tree3:tree), lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) = true -> tf1 (ZERO) (tree1) = plus (ZERO) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (tree2))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:6.)
=================================================
Progress: 272


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
---------------------------------------
forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (Tnil)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (Tnil))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
---------------------------------------
forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (Tnil))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree1(rank:7.)
=================================================
Progress: 273


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (tree2))
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree) (tree3:tree), lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) = true -> tf1 (ZERO) (tree1) = plus (ZERO) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (tree2))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (tree2))
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree) (tree3:tree), lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) = true -> tf1 (ZERO) (tree1) = if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (tree2)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro tree3(rank:6.)
=================================================
Progress: 274


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (tree2))
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree) (tree3:tree), lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) = true -> tf1 (ZERO) (tree1) = if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (tree2)

1 goal(s) more...

1 conjecture(s) more...
>>> intro tree3(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (tree2))
nat1 : nat
Base1 : nat1 = ZERO
tree3 : tree
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) = true -> tf1 (ZERO) (tree1) = if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (tree2)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree2(rank:7.)
=================================================
Progress: 275


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
---------------------------------------
forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (Tnil))

1 goal(s) more...

1 conjecture(s) more...
>>> induction tree1(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (nat1:nat), tf1 (nat1) (Tnil) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else reprNew (Tnil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 276


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (tree2))
nat1 : nat
Base1 : nat1 = ZERO
tree3 : tree
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) = true -> tf1 (ZERO) (tree1) = if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (tree2)

1 goal(s) more...

1 conjecture(s) more...
>>> induction tree2(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (tree2))
nat1 : nat
Base1 : nat1 = ZERO
tree3 : tree
tree2 : tree
Base2 : tree2 = Tnil
---------------------------------------
forall (tree1:tree), lq (tf1 (ZERO) (repr (Tnil))) (tf1 (ZERO) (repr (tree3))) = true -> tf1 (ZERO) (tree1) = if lq (reprNew (Tnil)) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (Tnil)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 277


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (nat1:nat), tf1 (nat1) (Tnil) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else reprNew (Tnil))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (nat1:nat), nat1 = plus (nat1) (ZERO)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction nat1(rank:8.)
=================================================
Progress: 278


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (tree2))
nat1 : nat
Base1 : nat1 = ZERO
tree3 : tree
tree2 : tree
Base2 : tree2 = Tnil
---------------------------------------
forall (tree1:tree), lq (tf1 (ZERO) (repr (Tnil))) (tf1 (ZERO) (repr (tree3))) = true -> tf1 (ZERO) (tree1) = if lq (reprNew (Tnil)) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (Tnil)

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (tree2))
nat1 : nat
Base1 : nat1 = ZERO
tree3 : tree
tree2 : tree
Base2 : tree2 = Tnil
---------------------------------------
forall (tree1:tree), lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (Tnil)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7.)
=================================================
Progress: 279


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (tree2))
nat1 : nat
Base1 : nat1 = ZERO
tree3 : tree
tree2 : tree
Base2 : tree2 = Tnil
---------------------------------------
forall (tree1:tree), lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (Tnil)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (tree2))
nat1 : nat
Base1 : nat1 = ZERO
tree3 : tree
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
---------------------------------------
forall (tree1:tree), tf1 (ZERO) (tree1) = if lq (ZERO) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (Tnil)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case lq (ZERO) (reprNew (tree3))(rank:8.)
=================================================
Progress: 280


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (nat1:nat), nat1 = plus (nat1) (ZERO)

2 goal(s) more...

1 conjecture(s) more...
>>> induction nat1(rank : 8.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
nat1 : nat
Base3 : nat1 = ZERO
---------------------------------------
ZERO = plus (ZERO) (ZERO)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7.)
=================================================
Progress: 281


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
nat1 : nat
Base3 : nat1 = ZERO
---------------------------------------
ZERO = plus (ZERO) (ZERO)

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
nat1 : nat
nat2 : nat
IH1 : nat2 = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
SUCC (nat2) = plus (SUCC (nat2)) (ZERO)

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 282


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
nat1 : nat
nat2 : nat
IH1 : nat2 = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
SUCC (nat2) = plus (SUCC (nat2)) (ZERO)

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
nat1 : nat
nat2 : nat
IH1 : nat2 = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
SUCC (nat2) = SUCC (plus (nat2) (ZERO))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:7.)
=================================================
Progress: 283


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
nat1 : nat
nat2 : nat
IH1 : nat2 = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
SUCC (nat2) = SUCC (plus (nat2) (ZERO))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
nat1 : nat
nat2 : nat
IH1 : nat2 = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
SUCC (nat2) = SUCC (nat2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:6.)
=================================================
Progress: 284


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
nat1 : nat
nat2 : nat
IH1 : nat2 = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
SUCC (nat2) = SUCC (nat2)

2 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree3)) then tf1 (ZERO) (tree3) else reprNew (Tnil))
IH2 : forall (nat1:nat), tf1 (nat1) (tree4) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else reprNew (Tnil))
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
---------------------------------------
forall (nat1:nat), tf1 (nat1) (Node (nat2) (tree3) (tree4)) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (Node (nat2) (tree3) (tree4))) then tf1 (ZERO) (Node (nat2) (tree3) (tree4)) else reprNew (Tnil))

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:6.)
=================================================
Progress: 285


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree3)) then tf1 (ZERO) (tree3) else reprNew (Tnil))
IH2 : forall (nat1:nat), tf1 (nat1) (tree4) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else reprNew (Tnil))
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
---------------------------------------
forall (nat1:nat), tf1 (nat1) (Node (nat2) (tree3) (tree4)) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (Node (nat2) (tree3) (tree4))) then tf1 (ZERO) (Node (nat2) (tree3) (tree4)) else reprNew (Tnil))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree3)) then tf1 (ZERO) (tree3) else reprNew (Tnil))
IH2 : forall (nat1:nat), tf1 (nat1) (tree4) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else reprNew (Tnil))
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
---------------------------------------
forall (nat1:nat), if lq (tf1 (plus (nat1) (nat2)) (tree3)) (tf1 (plus (nat1) (nat2)) (tree4)) then tf1 (plus (nat1) (nat2)) (tree4) else tf1 (plus (nat1) (nat2)) (tree3) = plus (nat1) (if lq (ZERO) (if lq (tf1 (nat2) (tree3)) (tf1 (nat2) (tree4)) then tf1 (nat2) (tree4) else tf1 (nat2) (tree3)) then tf1 (ZERO) (Node (nat2) (tree3) (tree4)) else reprNew (Tnil))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction nat1(rank:7.)
=================================================
Progress: 286


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree3)) then tf1 (ZERO) (tree3) else reprNew (Tnil))
IH2 : forall (nat1:nat), tf1 (nat1) (tree4) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else reprNew (Tnil))
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
---------------------------------------
forall (nat1:nat), if lq (tf1 (plus (nat1) (nat2)) (tree3)) (tf1 (plus (nat1) (nat2)) (tree4)) then tf1 (plus (nat1) (nat2)) (tree4) else tf1 (plus (nat1) (nat2)) (tree3) = plus (nat1) (if lq (ZERO) (if lq (tf1 (nat2) (tree3)) (tf1 (nat2) (tree4)) then tf1 (nat2) (tree4) else tf1 (nat2) (tree3)) then tf1 (ZERO) (Node (nat2) (tree3) (tree4)) else reprNew (Tnil))

1 goal(s) more...

1 conjecture(s) more...
>>> induction nat1(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree3)) then tf1 (ZERO) (tree3) else reprNew (Tnil))
IH2 : forall (nat1:nat), tf1 (nat1) (tree4) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else reprNew (Tnil))
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
if lq (tf1 (plus (ZERO) (nat2)) (tree3)) (tf1 (plus (ZERO) (nat2)) (tree4)) then tf1 (plus (ZERO) (nat2)) (tree4) else tf1 (plus (ZERO) (nat2)) (tree3) = plus (ZERO) (if lq (ZERO) (if lq (tf1 (nat2) (tree3)) (tf1 (nat2) (tree4)) then tf1 (nat2) (tree4) else tf1 (nat2) (tree3)) then tf1 (ZERO) (Node (nat2) (tree3) (tree4)) else reprNew (Tnil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 287


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree3)) then tf1 (ZERO) (tree3) else reprNew (Tnil))
IH2 : forall (nat1:nat), tf1 (nat1) (tree4) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else reprNew (Tnil))
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
if lq (tf1 (plus (ZERO) (nat2)) (tree3)) (tf1 (plus (ZERO) (nat2)) (tree4)) then tf1 (plus (ZERO) (nat2)) (tree4) else tf1 (plus (ZERO) (nat2)) (tree3) = plus (ZERO) (if lq (ZERO) (if lq (tf1 (nat2) (tree3)) (tf1 (nat2) (tree4)) then tf1 (nat2) (tree4) else tf1 (nat2) (tree3)) then tf1 (ZERO) (Node (nat2) (tree3) (tree4)) else reprNew (Tnil))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree3)) then tf1 (ZERO) (tree3) else reprNew (Tnil))
IH2 : forall (nat1:nat), tf1 (nat1) (tree4) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else reprNew (Tnil))
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
if lq (tf1 (nat2) (tree3)) (tf1 (nat2) (tree4)) then tf1 (plus (ZERO) (nat2)) (tree4) else tf1 (plus (ZERO) (nat2)) (tree3) = if lq (ZERO) (if lq (tf1 (nat2) (tree3)) (tf1 (nat2) (tree4)) then tf1 (nat2) (tree4) else tf1 (nat2) (tree3)) then tf1 (ZERO) (Node (nat2) (tree3) (tree4)) else reprNew (Tnil)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case lq (tf1 (nat2) (tree3)) (tf1 (nat2) (tree4))(rank:8.)
=================================================
Progress: 288


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (tree2))
nat1 : nat
Base1 : nat1 = ZERO
tree3 : tree
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
---------------------------------------
forall (tree1:tree), tf1 (ZERO) (tree1) = if lq (ZERO) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (Tnil)

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (ZERO) (reprNew (tree3))(rank : 8.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (tree2))
nat1 : nat
Base1 : nat1 = ZERO
tree3 : tree
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
Case1 : lq (ZERO) (reprNew (tree3)) = true
---------------------------------------
forall (tree1:tree), tf1 (ZERO) (tree1) = tf1 (ZERO) (tree1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7.)
=================================================
Progress: 289


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (tree2))
nat1 : nat
Base1 : nat1 = ZERO
tree3 : tree
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
Case1 : lq (ZERO) (reprNew (tree3)) = true
---------------------------------------
forall (tree1:tree), tf1 (ZERO) (tree1) = tf1 (ZERO) (tree1)

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (tree2))
nat1 : nat
Base1 : nat1 = ZERO
tree3 : tree
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
Case1 : lq (ZERO) (reprNew (tree3)) = false
---------------------------------------
forall (tree1:tree), tf1 (ZERO) (tree1) = ZERO

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
induction tree1(rank:8.)
=================================================
Progress: 290


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree3)) then tf1 (ZERO) (tree3) else reprNew (Tnil))
IH2 : forall (nat1:nat), tf1 (nat1) (tree4) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else reprNew (Tnil))
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
if lq (tf1 (nat2) (tree3)) (tf1 (nat2) (tree4)) then tf1 (plus (ZERO) (nat2)) (tree4) else tf1 (plus (ZERO) (nat2)) (tree3) = if lq (ZERO) (if lq (tf1 (nat2) (tree3)) (tf1 (nat2) (tree4)) then tf1 (nat2) (tree4) else tf1 (nat2) (tree3)) then tf1 (ZERO) (Node (nat2) (tree3) (tree4)) else reprNew (Tnil)

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (tf1 (nat2) (tree3)) (tf1 (nat2) (tree4))(rank : 8.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree3)) then tf1 (ZERO) (tree3) else reprNew (Tnil))
IH2 : forall (nat1:nat), tf1 (nat1) (tree4) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else reprNew (Tnil))
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
nat1 : nat
Base2 : nat1 = ZERO
Case1 : lq (tf1 (nat2) (tree3)) (tf1 (nat2) (tree4)) = true
---------------------------------------
tf1 (nat2) (tree4) = if lq (ZERO) (tf1 (nat2) (tree4)) then tf1 (ZERO) (Node (nat2) (tree3) (tree4)) else reprNew (Tnil)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
case lq (ZERO) (tf1 (nat2) (tree4))(rank:9.)
rewrite IH2 in goal at 2(rank:24.)
rewrite IH2 in goal at 1(rank:16.)
rewrite IH2 in goal at 0(rank:24.)
=================================================
Progress: 291


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (tree2))
nat1 : nat
Base1 : nat1 = ZERO
tree3 : tree
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
Case1 : lq (ZERO) (reprNew (tree3)) = false
---------------------------------------
forall (tree1:tree), tf1 (ZERO) (tree1) = ZERO

2 goal(s) more...

1 conjecture(s) more...
>>> induction tree1(rank : 8.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (tree2))
nat1 : nat
Base1 : nat1 = ZERO
tree3 : tree
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
Case1 : lq (ZERO) (reprNew (tree3)) = false
tree1 : tree
Base3 : tree1 = Tnil
---------------------------------------
tf1 (ZERO) (Tnil) = ZERO

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7.)
=================================================
Progress: 292


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (tree2))
nat1 : nat
Base1 : nat1 = ZERO
tree3 : tree
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
Case1 : lq (ZERO) (reprNew (tree3)) = false
tree1 : tree
Base3 : tree1 = Tnil
---------------------------------------
tf1 (ZERO) (Tnil) = ZERO

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (tree2))
nat1 : nat
Base1 : nat1 = ZERO
tree3 : tree
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
Case1 : lq (ZERO) (reprNew (tree3)) = false
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : tf1 (ZERO) (tree4) = ZERO
IH2 : tf1 (ZERO) (tree5) = ZERO
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
---------------------------------------
tf1 (ZERO) (Node (nat2) (tree4) (tree5)) = ZERO

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 293


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (tree2))
nat1 : nat
Base1 : nat1 = ZERO
tree3 : tree
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
Case1 : lq (ZERO) (reprNew (tree3)) = false
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : tf1 (ZERO) (tree4) = ZERO
IH2 : tf1 (ZERO) (tree5) = ZERO
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
---------------------------------------
tf1 (ZERO) (Node (nat2) (tree4) (tree5)) = ZERO

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (tree2))
nat1 : nat
Base1 : nat1 = ZERO
tree3 : tree
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
Case1 : lq (ZERO) (reprNew (tree3)) = false
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : tf1 (ZERO) (tree4) = ZERO
IH2 : tf1 (ZERO) (tree5) = ZERO
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
---------------------------------------
if lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) then tf1 (nat2) (tree5) else tf1 (nat2) (tree4) = ZERO

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5))(rank:8.)
=================================================
Progress: 294


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (tree2))
nat1 : nat
Base1 : nat1 = ZERO
tree3 : tree
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
Case1 : lq (ZERO) (reprNew (tree3)) = false
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : tf1 (ZERO) (tree4) = ZERO
IH2 : tf1 (ZERO) (tree5) = ZERO
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
---------------------------------------
if lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) then tf1 (nat2) (tree5) else tf1 (nat2) (tree4) = ZERO

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5))(rank : 8.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (tree2))
nat1 : nat
Base1 : nat1 = ZERO
tree3 : tree
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
Case1 : lq (ZERO) (reprNew (tree3)) = false
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : tf1 (ZERO) (tree4) = ZERO
IH2 : tf1 (ZERO) (tree5) = ZERO
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
Case2 : lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) = true
---------------------------------------
tf1 (nat2) (tree5) = ZERO

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5))
parent
tf1 (nat2) (tree5)
lower
tf1(_, tree5)
upper
_
remove upper
tf1(ZERO(), tree5)
remove lower
tf1(ZERO(), tree5)
remove upper
tf1(nat2, tree5)
remove lower
tf1(nat2, tree5)
remove upper
tf1(nat2, tree5)
remove lower
tf1(nat2, tree5)
remove upper
tf1(nat2, tree5)
remove lower
tf1(nat2, tree5)
validate generalize_common_subterm_goal
Prop: tf1 (SUCC (ZERO)) (Node (ZERO) (Tnil) (Tnil)) = ZERO
Prop: tf1 (ZERO) (Tnil) = ZERO
Prop: tf1 (ZERO) (Tnil) = ZERO
asdf
=================================================
Progress: 295


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree3)) then tf1 (ZERO) (tree3) else reprNew (Tnil))
IH2 : forall (nat1:nat), tf1 (nat1) (tree4) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else reprNew (Tnil))
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
nat1 : nat
Base2 : nat1 = ZERO
Case1 : lq (tf1 (nat2) (tree3)) (tf1 (nat2) (tree4)) = true
---------------------------------------
tf1 (nat2) (tree4) = if lq (ZERO) (tf1 (nat2) (tree4)) then tf1 (ZERO) (Node (nat2) (tree3) (tree4)) else reprNew (Tnil)

3 goal(s) more...

1 conjecture(s) more...
>>> case lq (ZERO) (tf1 (nat2) (tree4))(rank : 9.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree3)) then tf1 (ZERO) (tree3) else reprNew (Tnil))
IH2 : forall (nat1:nat), tf1 (nat1) (tree4) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else reprNew (Tnil))
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
nat1 : nat
Base2 : nat1 = ZERO
Case1 : lq (tf1 (nat2) (tree3)) (tf1 (nat2) (tree4)) = true
Case2 : lq (ZERO) (tf1 (nat2) (tree4)) = true
---------------------------------------
tf1 (nat2) (tree4) = if lq (tf1 (nat2) (tree3)) (tf1 (nat2) (tree4)) then tf1 (nat2) (tree4) else tf1 (nat2) (tree3)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 8
rewrite Case1 in goal at 0(rank:17.)
rewrite IH2 in goal at 1(rank:17.)
rewrite IH1 in goal at 1(rank:25.)
rewrite IH1 in goal at 2(rank:25.)
rewrite IH2 in goal at 2(rank:25.)
rewrite IH2 in goal at 3(rank:25.)
rewrite IH2 in goal at 0(rank:25.)
rewrite IH1 in goal at 0(rank:25.)
=================================================
Progress: 296


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) then tf1 (ZERO) (repr (tree3)) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH2 in goal at 2(rank : 12.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) then reprNew (tree3) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 0
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH1 in goal at 0
rewrite IH2 in goal at 2
Prop: tf1 (ZERO) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil)) = plus (ZERO) (if lq (reprNew (Tnil)) (tf1 (ZERO) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil))) then reprNew (Tnil) else reprNew (Tnil))
Prop: tf1 (SUCC (SUCC (ZERO))) (Tnil) = plus (SUCC (SUCC (ZERO))) (if lq (reprNew (Tnil)) (tf1 (ZERO) (Tnil)) then reprNew (Tnil) else reprNew (Tnil))
Prop: tf1 (SUCC (ZERO)) (Tnil) = plus (SUCC (ZERO)) (if lq (reprNew (Tnil)) (tf1 (ZERO) (Tnil)) then reprNew (Tnil) else reprNew (Tnil))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 0
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH1 in goal at 0
Prop: tf1 (ZERO) (Node (SUCC (ZERO)) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil)) (Node (SUCC (ZERO)) (Tnil) (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Node (ZERO) (Tnil) (Tnil)) (Tnil)) (Tnil)))) = plus (ZERO) (if lq (reprNew (Tnil)) (tf1 (ZERO) (Node (SUCC (ZERO)) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil)) (Node (SUCC (ZERO)) (Tnil) (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Node (ZERO) (Tnil) (Tnil)) (Tnil)) (Tnil))))) then tf1 (ZERO) (Node (SUCC (ZERO)) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil)) (Node (SUCC (ZERO)) (Tnil) (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Node (ZERO) (Tnil) (Tnil)) (Tnil)) (Tnil)))) else reprNew (Tnil))
Prop: tf1 (ZERO) (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Tnil) (Tnil)) (Tnil)) = plus (ZERO) (if lq (reprNew (Tnil)) (tf1 (ZERO) (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Tnil) (Tnil)) (Tnil))) then tf1 (ZERO) (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Tnil) (Tnil)) (Tnil)) else reprNew (Tnil))
Prop: tf1 (SUCC (ZERO)) (Tnil) = plus (SUCC (ZERO)) (if lq (reprNew (Tnil)) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else reprNew (Tnil))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 0
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (if lq (tf1 (ZERO) (repr (Tnil))) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (repr (Tnil)))
Prop: tf1 (ZERO) (Node (SUCC (SUCC (SUCC (ZERO)))) (Tnil) (Node (ZERO) (Tnil) (Tnil))) = plus (ZERO) (if lq (tf1 (ZERO) (repr (Tnil))) (tf1 (ZERO) (Node (SUCC (SUCC (SUCC (ZERO)))) (Tnil) (Node (ZERO) (Tnil) (Tnil)))) then tf1 (ZERO) (Node (SUCC (SUCC (SUCC (ZERO)))) (Tnil) (Node (ZERO) (Tnil) (Tnil))) else tf1 (ZERO) (repr (Tnil)))
Prop: tf1 (SUCC (SUCC (ZERO))) (Tnil) = plus (SUCC (SUCC (ZERO))) (if lq (tf1 (ZERO) (repr (Tnil))) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (repr (Tnil)))
Lemma List
forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
End of Lemma List


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) then reprNew (tree3) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 297


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) then reprNew (tree3) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
>>> assert forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))(rank : 0.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))

---------------------------------------
forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree2(rank:6.)
=================================================
Progress: 298


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))

---------------------------------------
forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))

0 goal(s) more...

1 conjecture(s) more...
>>> induction tree2(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
---------------------------------------
forall (tree1:tree) (nat1:nat) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (Tnil)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (Tnil))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:6.)
=================================================
Progress: 299


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
---------------------------------------
forall (tree1:tree) (nat1:nat) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (Tnil)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (Tnil))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
---------------------------------------
forall (tree1:tree) (nat1:nat) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (Tnil))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree1(rank:7.)
=================================================
Progress: 300


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
---------------------------------------
forall (tree1:tree) (nat1:nat) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (Tnil))

1 goal(s) more...

1 conjecture(s) more...
>>> induction tree1(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (nat1:nat) (tree3:tree), tf1 (nat1) (Tnil) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (Tnil)) then reprNew (tree3) else reprNew (Tnil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 301


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (nat1:nat) (tree3:tree), tf1 (nat1) (Tnil) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (Tnil)) then reprNew (tree3) else reprNew (Tnil))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (nat1:nat) (tree3:tree), nat1 = plus (nat1) (ZERO)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction nat1(rank:8.)
=================================================
Progress: 302


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (nat1:nat) (tree3:tree), nat1 = plus (nat1) (ZERO)

2 goal(s) more...

1 conjecture(s) more...
>>> induction nat1(rank : 8.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
nat1 : nat
Base3 : nat1 = ZERO
---------------------------------------
forall (tree3:tree), ZERO = plus (ZERO) (ZERO)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7.)
=================================================
Progress: 303


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
nat1 : nat
Base3 : nat1 = ZERO
---------------------------------------
forall (tree3:tree), ZERO = plus (ZERO) (ZERO)

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
nat1 : nat
nat2 : nat
IH1 : forall (tree3:tree), nat2 = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (tree3:tree), SUCC (nat2) = plus (SUCC (nat2)) (ZERO)

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 304


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
nat1 : nat
nat2 : nat
IH1 : forall (tree3:tree), nat2 = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (tree3:tree), SUCC (nat2) = plus (SUCC (nat2)) (ZERO)

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
nat1 : nat
nat2 : nat
IH1 : forall (tree3:tree), nat2 = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (tree3:tree), SUCC (nat2) = SUCC (plus (nat2) (ZERO))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro tree3(rank:7.)
=================================================
Progress: 305


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
nat1 : nat
nat2 : nat
IH1 : forall (tree3:tree), nat2 = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (tree3:tree), SUCC (nat2) = SUCC (plus (nat2) (ZERO))

2 goal(s) more...

1 conjecture(s) more...
>>> intro tree3(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
nat1 : nat
nat2 : nat
IH1 : forall (tree3:tree), nat2 = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
tree3 : tree
---------------------------------------
SUCC (nat2) = SUCC (plus (nat2) (ZERO))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro tree3
validate generalize_common_subterm_goal
Prop: SUCC (ZERO) = plus (SUCC (ZERO)) (ZERO)
Prop: SUCC (ZERO) = plus (SUCC (ZERO)) (ZERO)
Prop: SUCC (SUCC (ZERO)) = plus (SUCC (SUCC (ZERO))) (ZERO)
Lemma List
forall (nat1:nat), nat1 = plus (nat1) (ZERO)
End of Lemma List


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
nat1 : nat
nat2 : nat
IH1 : forall (tree3:tree), nat2 = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
tree3 : tree
---------------------------------------
SUCC (nat2) = SUCC (plus (nat2) (ZERO))

2 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 306


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
nat1 : nat
nat2 : nat
IH1 : forall (tree3:tree), nat2 = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
tree3 : tree
---------------------------------------
SUCC (nat2) = SUCC (plus (nat2) (ZERO))

2 goal(s) more...

1 conjecture(s) more...
>>> assert forall (nat1:nat), nat1 = plus (nat1) (ZERO)(rank : 0.)


1st goal of : forall (nat1:nat), nat1 = plus (nat1) (ZERO)

---------------------------------------
forall (nat1:nat), nat1 = plus (nat1) (ZERO)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction nat1(rank:8.)
=================================================
Progress: 307


1st goal of : forall (nat1:nat), nat1 = plus (nat1) (ZERO)

---------------------------------------
forall (nat1:nat), nat1 = plus (nat1) (ZERO)

0 goal(s) more...

2 conjecture(s) more...
>>> induction nat1(rank : 8.)


1st goal of : forall (nat1:nat), nat1 = plus (nat1) (ZERO)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
ZERO = plus (ZERO) (ZERO)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7.)
=================================================
Progress: 308


1st goal of : forall (nat1:nat), nat1 = plus (nat1) (ZERO)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
ZERO = plus (ZERO) (ZERO)

1 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 7.)


1st goal of : forall (nat1:nat), nat1 = plus (nat1) (ZERO)
nat1 : nat
nat2 : nat
IH1 : nat2 = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
SUCC (nat2) = plus (SUCC (nat2)) (ZERO)

0 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 309


1st goal of : forall (nat1:nat), nat1 = plus (nat1) (ZERO)
nat1 : nat
nat2 : nat
IH1 : nat2 = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
SUCC (nat2) = plus (SUCC (nat2)) (ZERO)

0 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (nat1:nat), nat1 = plus (nat1) (ZERO)
nat1 : nat
nat2 : nat
IH1 : nat2 = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
SUCC (nat2) = SUCC (plus (nat2) (ZERO))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:7.)
=================================================
Progress: 310


1st goal of : forall (nat1:nat), nat1 = plus (nat1) (ZERO)
nat1 : nat
nat2 : nat
IH1 : nat2 = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
SUCC (nat2) = SUCC (plus (nat2) (ZERO))

0 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 7.)


1st goal of : forall (nat1:nat), nat1 = plus (nat1) (ZERO)
nat1 : nat
nat2 : nat
IH1 : nat2 = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
SUCC (nat2) = SUCC (nat2)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7.)
=================================================
Progress: 311


1st goal of : forall (nat1:nat), nat1 = plus (nat1) (ZERO)
nat1 : nat
nat2 : nat
IH1 : nat2 = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
SUCC (nat2) = SUCC (nat2)

0 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
nat1 : nat
nat2 : nat
IH1 : forall (tree3:tree), nat2 = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
tree3 : tree
---------------------------------------
SUCC (nat2) = SUCC (plus (nat2) (ZERO))

2 goal(s) more...

1 conjecture(s) more...
original goal
forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
lemma
forall (nat1:nat), nat1 = plus (nat1) (ZERO)
tactics
assert forall (nat1:nat), nat1 = plus (nat1) (ZERO)
induction nat1
reflexivity
simpl in goal
rewrite <- IH1 in goal at 0
reflexivity
Deduplication: 0
Tactic List : 1
rewrite <- lemma3 in goal at 0(rank:7.)
=================================================
Progress: 312


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
nat1 : nat
nat2 : nat
IH1 : forall (tree3:tree), nat2 = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
tree3 : tree
---------------------------------------
SUCC (nat2) = SUCC (plus (nat2) (ZERO))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- lemma3 in goal at 0(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
nat1 : nat
nat2 : nat
IH1 : forall (tree3:tree), nat2 = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
tree3 : tree
---------------------------------------
SUCC (nat2) = SUCC (nat2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:6.)
=================================================
Progress: 313


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
nat1 : nat
nat2 : nat
IH1 : forall (tree3:tree), nat2 = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
tree3 : tree
---------------------------------------
SUCC (nat2) = SUCC (nat2)

2 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : forall (nat1:nat) (tree3:tree), tf1 (nat1) (tree4) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree4)) then reprNew (tree3) else reprNew (Tnil))
IH2 : forall (nat1:nat) (tree3:tree), tf1 (nat1) (tree5) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree5)) then reprNew (tree3) else reprNew (Tnil))
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
---------------------------------------
forall (nat1:nat) (tree3:tree), tf1 (nat1) (Node (nat2) (tree4) (tree5)) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (Node (nat2) (tree4) (tree5))) then reprNew (tree3) else reprNew (Tnil))

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:6.)
=================================================
Progress: 314


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : forall (nat1:nat) (tree3:tree), tf1 (nat1) (tree4) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree4)) then reprNew (tree3) else reprNew (Tnil))
IH2 : forall (nat1:nat) (tree3:tree), tf1 (nat1) (tree5) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree5)) then reprNew (tree3) else reprNew (Tnil))
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
---------------------------------------
forall (nat1:nat) (tree3:tree), tf1 (nat1) (Node (nat2) (tree4) (tree5)) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (Node (nat2) (tree4) (tree5))) then reprNew (tree3) else reprNew (Tnil))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : forall (nat1:nat) (tree3:tree), tf1 (nat1) (tree4) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree4)) then reprNew (tree3) else reprNew (Tnil))
IH2 : forall (nat1:nat) (tree3:tree), tf1 (nat1) (tree5) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree5)) then reprNew (tree3) else reprNew (Tnil))
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
---------------------------------------
forall (nat1:nat) (tree3:tree), if lq (tf1 (plus (nat1) (nat2)) (tree4)) (tf1 (plus (nat1) (nat2)) (tree5)) then tf1 (plus (nat1) (nat2)) (tree5) else tf1 (plus (nat1) (nat2)) (tree4) = plus (nat1) (if lq (ZERO) (if lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) then tf1 (nat2) (tree5) else tf1 (nat2) (tree4)) then reprNew (tree3) else reprNew (Tnil))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction nat1(rank:7.)
=================================================
Progress: 315


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : forall (nat1:nat) (tree3:tree), tf1 (nat1) (tree4) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree4)) then reprNew (tree3) else reprNew (Tnil))
IH2 : forall (nat1:nat) (tree3:tree), tf1 (nat1) (tree5) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree5)) then reprNew (tree3) else reprNew (Tnil))
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
---------------------------------------
forall (nat1:nat) (tree3:tree), if lq (tf1 (plus (nat1) (nat2)) (tree4)) (tf1 (plus (nat1) (nat2)) (tree5)) then tf1 (plus (nat1) (nat2)) (tree5) else tf1 (plus (nat1) (nat2)) (tree4) = plus (nat1) (if lq (ZERO) (if lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) then tf1 (nat2) (tree5) else tf1 (nat2) (tree4)) then reprNew (tree3) else reprNew (Tnil))

1 goal(s) more...

1 conjecture(s) more...
>>> induction nat1(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : forall (nat1:nat) (tree3:tree), tf1 (nat1) (tree4) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree4)) then reprNew (tree3) else reprNew (Tnil))
IH2 : forall (nat1:nat) (tree3:tree), tf1 (nat1) (tree5) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree5)) then reprNew (tree3) else reprNew (Tnil))
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
forall (tree3:tree), if lq (tf1 (plus (ZERO) (nat2)) (tree4)) (tf1 (plus (ZERO) (nat2)) (tree5)) then tf1 (plus (ZERO) (nat2)) (tree5) else tf1 (plus (ZERO) (nat2)) (tree4) = plus (ZERO) (if lq (ZERO) (if lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) then tf1 (nat2) (tree5) else tf1 (nat2) (tree4)) then reprNew (tree3) else reprNew (Tnil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 316


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : forall (nat1:nat) (tree3:tree), tf1 (nat1) (tree4) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree4)) then reprNew (tree3) else reprNew (Tnil))
IH2 : forall (nat1:nat) (tree3:tree), tf1 (nat1) (tree5) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree5)) then reprNew (tree3) else reprNew (Tnil))
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
forall (tree3:tree), if lq (tf1 (plus (ZERO) (nat2)) (tree4)) (tf1 (plus (ZERO) (nat2)) (tree5)) then tf1 (plus (ZERO) (nat2)) (tree5) else tf1 (plus (ZERO) (nat2)) (tree4) = plus (ZERO) (if lq (ZERO) (if lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) then tf1 (nat2) (tree5) else tf1 (nat2) (tree4)) then reprNew (tree3) else reprNew (Tnil))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : forall (nat1:nat) (tree3:tree), tf1 (nat1) (tree4) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree4)) then reprNew (tree3) else reprNew (Tnil))
IH2 : forall (nat1:nat) (tree3:tree), tf1 (nat1) (tree5) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree5)) then reprNew (tree3) else reprNew (Tnil))
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
forall (tree3:tree), if lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) then tf1 (plus (ZERO) (nat2)) (tree5) else tf1 (plus (ZERO) (nat2)) (tree4) = if lq (ZERO) (if lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) then tf1 (nat2) (tree5) else tf1 (nat2) (tree4)) then reprNew (tree3) else reprNew (Tnil)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5))(rank:8.)
=================================================
Progress: 317


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : forall (nat1:nat) (tree3:tree), tf1 (nat1) (tree4) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree4)) then reprNew (tree3) else reprNew (Tnil))
IH2 : forall (nat1:nat) (tree3:tree), tf1 (nat1) (tree5) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree5)) then reprNew (tree3) else reprNew (Tnil))
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
forall (tree3:tree), if lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) then tf1 (plus (ZERO) (nat2)) (tree5) else tf1 (plus (ZERO) (nat2)) (tree4) = if lq (ZERO) (if lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) then tf1 (nat2) (tree5) else tf1 (nat2) (tree4)) then reprNew (tree3) else reprNew (Tnil)

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5))(rank : 8.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : forall (nat1:nat) (tree3:tree), tf1 (nat1) (tree4) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree4)) then reprNew (tree3) else reprNew (Tnil))
IH2 : forall (nat1:nat) (tree3:tree), tf1 (nat1) (tree5) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree5)) then reprNew (tree3) else reprNew (Tnil))
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
nat1 : nat
Base2 : nat1 = ZERO
Case1 : lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) = true
---------------------------------------
forall (tree3:tree), tf1 (nat2) (tree5) = if lq (ZERO) (tf1 (nat2) (tree5)) then reprNew (tree3) else reprNew (Tnil)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case lq (ZERO) (tf1 (nat2) (tree5))(rank:9.)
=================================================
Progress: 318


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : forall (nat1:nat) (tree3:tree), tf1 (nat1) (tree4) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree4)) then reprNew (tree3) else reprNew (Tnil))
IH2 : forall (nat1:nat) (tree3:tree), tf1 (nat1) (tree5) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree5)) then reprNew (tree3) else reprNew (Tnil))
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
nat1 : nat
Base2 : nat1 = ZERO
Case1 : lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) = true
---------------------------------------
forall (tree3:tree), tf1 (nat2) (tree5) = if lq (ZERO) (tf1 (nat2) (tree5)) then reprNew (tree3) else reprNew (Tnil)

3 goal(s) more...

1 conjecture(s) more...
>>> case lq (ZERO) (tf1 (nat2) (tree5))(rank : 9.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : forall (nat1:nat) (tree3:tree), tf1 (nat1) (tree4) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree4)) then reprNew (tree3) else reprNew (Tnil))
IH2 : forall (nat1:nat) (tree3:tree), tf1 (nat1) (tree5) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree5)) then reprNew (tree3) else reprNew (Tnil))
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
nat1 : nat
Base2 : nat1 = ZERO
Case1 : lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) = true
Case2 : lq (ZERO) (tf1 (nat2) (tree5)) = true
---------------------------------------
forall (tree3:tree), tf1 (nat2) (tree5) = reprNew (tree3)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree3(rank:10.)
=================================================
Progress: 319


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : forall (nat1:nat) (tree3:tree), tf1 (nat1) (tree4) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree4)) then reprNew (tree3) else reprNew (Tnil))
IH2 : forall (nat1:nat) (tree3:tree), tf1 (nat1) (tree5) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree5)) then reprNew (tree3) else reprNew (Tnil))
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
nat1 : nat
Base2 : nat1 = ZERO
Case1 : lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) = true
Case2 : lq (ZERO) (tf1 (nat2) (tree5)) = true
---------------------------------------
forall (tree3:tree), tf1 (nat2) (tree5) = reprNew (tree3)

4 goal(s) more...

1 conjecture(s) more...
>>> induction tree3(rank : 10.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : forall (nat1:nat) (tree3:tree), tf1 (nat1) (tree4) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree4)) then reprNew (tree3) else reprNew (Tnil))
IH2 : forall (nat1:nat) (tree3:tree), tf1 (nat1) (tree5) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree5)) then reprNew (tree3) else reprNew (Tnil))
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
nat1 : nat
Base2 : nat1 = ZERO
Case1 : lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) = true
Case2 : lq (ZERO) (tf1 (nat2) (tree5)) = true
tree3 : tree
Base3 : tree3 = Tnil
---------------------------------------
tf1 (nat2) (tree5) = reprNew (Tnil)

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 320


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : forall (nat1:nat) (tree3:tree), tf1 (nat1) (tree4) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree4)) then reprNew (tree3) else reprNew (Tnil))
IH2 : forall (nat1:nat) (tree3:tree), tf1 (nat1) (tree5) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree5)) then reprNew (tree3) else reprNew (Tnil))
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
nat1 : nat
Base2 : nat1 = ZERO
Case1 : lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) = true
Case2 : lq (ZERO) (tf1 (nat2) (tree5)) = true
tree3 : tree
Base3 : tree3 = Tnil
---------------------------------------
tf1 (nat2) (tree5) = reprNew (Tnil)

5 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : forall (nat1:nat) (tree3:tree), tf1 (nat1) (tree4) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree4)) then reprNew (tree3) else reprNew (Tnil))
IH2 : forall (nat1:nat) (tree3:tree), tf1 (nat1) (tree5) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree5)) then reprNew (tree3) else reprNew (Tnil))
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
nat1 : nat
Base2 : nat1 = ZERO
Case1 : lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) = true
Case2 : lq (ZERO) (tf1 (nat2) (tree5)) = true
tree3 : tree
Base3 : tree3 = Tnil
---------------------------------------
tf1 (nat2) (tree5) = ZERO

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: tf1 (ZERO) (Tnil) = ZERO
Prop: tf1 (SUCC (SUCC (ZERO))) (Tnil) = ZERO
Prop: tf1 (ZERO) (Tnil) = ZERO
asdf
=================================================
Progress: 321


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) then tf1 (ZERO) (repr (tree3)) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 12.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case lq (reprNew (tree2)) (reprNew (tree3))(rank:5.)
=================================================
Progress: 322


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
>>> case lq (reprNew (tree2)) (reprNew (tree3))(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- IH2 in goal at 0(rank:5.)
=================================================
Progress: 323


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 0
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH1 in goal at 1
rewrite IH2 in goal at 0
case lq (reprNew (tree2)) (reprNew (tree3))
rewrite <- IH2 in goal at 0
Prop: tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil)) = plus (ZERO) (tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil)))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (tf1 (ZERO) (Tnil))
Prop: tf1 (SUCC (SUCC (ZERO))) (Tnil) = plus (SUCC (SUCC (ZERO))) (tf1 (ZERO) (Tnil))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 0
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH1 in goal at 1
rewrite IH2 in goal at 0
case lq (reprNew (tree2)) (reprNew (tree3))
validate generalize_common_subterm_goal
Prop: tf1 (ZERO) (repr (Node (SUCC (ZERO)) (Tnil) (Tnil))) = plus (ZERO) (reprNew (Node (SUCC (ZERO)) (Tnil) (Tnil)))
Prop: tf1 (ZERO) (repr (Node (ZERO) (Tnil) (Tnil))) = plus (ZERO) (reprNew (Node (ZERO) (Tnil) (Tnil)))
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (reprNew (Tnil))
=================================================
Progress: 324


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) then tf1 (ZERO) (repr (tree3)) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH2 in goal at 1(rank : 12.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (repr (tree3)) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 0
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH1 in goal at 1
rewrite IH2 in goal at 1
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (if lq (reprNew (Tnil)) (reprNew (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (repr (Tnil)))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (if lq (reprNew (Tnil)) (reprNew (Node (ZERO) (Tnil) (Tnil))) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (repr (Tnil)))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (if lq (reprNew (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Node (SUCC (ZERO)) (Tnil) (Tnil)) (Tnil)) (Tnil))) (reprNew (Node (ZERO) (Tnil) (Tnil))) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (repr (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Node (SUCC (ZERO)) (Tnil) (Tnil)) (Tnil)) (Tnil))))
validate generalize_common_subterm_goal
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (if lq (reprNew (Tnil)) (reprNew (Node (SUCC (ZERO)) (Tnil) (Tnil))) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (repr (Tnil)))
Prop: tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil)) = plus (ZERO) (if lq (reprNew (Tnil)) (reprNew (Node (SUCC (ZERO)) (Tnil) (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Tnil) (Tnil)) (Node (SUCC (ZERO)) (Tnil) (Node (ZERO) (Tnil) (Node (ZERO) (Node (SUCC (ZERO)) (Tnil) (Node (ZERO) (Tnil) (Tnil))) (Tnil))))))) then tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil)) else tf1 (ZERO) (repr (Tnil)))
Prop: tf1 (SUCC (ZERO)) (Tnil) = plus (SUCC (ZERO)) (if lq (reprNew (Tnil)) (reprNew (Node (ZERO) (Tnil) (Tnil))) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (repr (Tnil)))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 0
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH1 in goal at 1
Prop: tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil)) = plus (ZERO) (if lq (reprNew (Tnil)) (tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil))) then tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil)) else tf1 (ZERO) (repr (Tnil)))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (if lq (reprNew (Tnil)) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (repr (Tnil)))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (if lq (reprNew (Tnil)) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (repr (Tnil)))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 0
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
Prop: tf1 (ZERO) (Node (ZERO) (Tnil) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil))) = plus (ZERO) (if lq (tf1 (ZERO) (repr (Node (ZERO) (Tnil) (Tnil)))) (tf1 (ZERO) (Node (ZERO) (Tnil) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil)))) then tf1 (ZERO) (Node (ZERO) (Tnil) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil))) else tf1 (ZERO) (repr (Node (ZERO) (Tnil) (Tnil))))
Prop: tf1 (SUCC (ZERO)) (Tnil) = plus (SUCC (ZERO)) (if lq (tf1 (ZERO) (repr (Tnil))) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (repr (Tnil)))
Prop: tf1 (SUCC (ZERO)) (Tnil) = plus (SUCC (ZERO)) (if lq (tf1 (ZERO) (repr (Node (ZERO) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Tnil))) (Tnil)))) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (repr (Node (ZERO) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Tnil))) (Tnil))))
Lemma List
forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
End of Lemma List


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) then tf1 (ZERO) (repr (tree3)) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
Lemma List
forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
End of Lemma List


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (repr (tree3)) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 325


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) then tf1 (ZERO) (repr (tree3)) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
>>> assert forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))(rank : 0.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))

---------------------------------------
forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree2(rank:6.)
=================================================
Progress: 326


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (repr (tree3)) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
>>> assert forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))(rank : 0.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))

---------------------------------------
forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction nat1(rank:6.)
=================================================
Progress: 327


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))

---------------------------------------
forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))

0 goal(s) more...

1 conjecture(s) more...
>>> induction tree2(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
---------------------------------------
forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (Tnil)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (Tnil)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:6.)
=================================================
Progress: 328


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))

---------------------------------------
forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))

0 goal(s) more...

1 conjecture(s) more...
>>> induction nat1(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree) (tree3:tree), lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) = true -> tf1 (ZERO) (tree1) = plus (ZERO) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:6.)
=================================================
Progress: 329


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
---------------------------------------
forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (Tnil)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (Tnil)))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
---------------------------------------
forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (Tnil)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree1(rank:7.)
=================================================
Progress: 330


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree) (tree3:tree), lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) = true -> tf1 (ZERO) (tree1) = plus (ZERO) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree) (tree3:tree), lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) = true -> tf1 (ZERO) (tree1) = if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro tree3(rank:6.)
=================================================
Progress: 331


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree) (tree3:tree), lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) = true -> tf1 (ZERO) (tree1) = if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2))

1 goal(s) more...

1 conjecture(s) more...
>>> intro tree3(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
nat1 : nat
Base1 : nat1 = ZERO
tree3 : tree
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) = true -> tf1 (ZERO) (tree1) = if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree2(rank:7.)
=================================================
Progress: 332


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
---------------------------------------
forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (Tnil)))

1 goal(s) more...

1 conjecture(s) more...
>>> induction tree1(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (nat1:nat), tf1 (nat1) (Tnil) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (repr (Tnil)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 333


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
nat1 : nat
Base1 : nat1 = ZERO
tree3 : tree
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) = true -> tf1 (ZERO) (tree1) = if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2))

1 goal(s) more...

1 conjecture(s) more...
>>> induction tree2(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
nat1 : nat
Base1 : nat1 = ZERO
tree3 : tree
tree2 : tree
Base2 : tree2 = Tnil
---------------------------------------
forall (tree1:tree), lq (tf1 (ZERO) (repr (Tnil))) (tf1 (ZERO) (repr (tree3))) = true -> tf1 (ZERO) (tree1) = if lq (reprNew (Tnil)) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (Tnil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 334


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (nat1:nat), tf1 (nat1) (Tnil) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (repr (Tnil)))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (nat1:nat), nat1 = plus (nat1) (ZERO)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction nat1(rank:8.)
=================================================
Progress: 335


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
nat1 : nat
Base1 : nat1 = ZERO
tree3 : tree
tree2 : tree
Base2 : tree2 = Tnil
---------------------------------------
forall (tree1:tree), lq (tf1 (ZERO) (repr (Tnil))) (tf1 (ZERO) (repr (tree3))) = true -> tf1 (ZERO) (tree1) = if lq (reprNew (Tnil)) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (Tnil))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
nat1 : nat
Base1 : nat1 = ZERO
tree3 : tree
tree2 : tree
Base2 : tree2 = Tnil
---------------------------------------
forall (tree1:tree), lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (Tnil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7.)
=================================================
Progress: 336


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
nat1 : nat
Base1 : nat1 = ZERO
tree3 : tree
tree2 : tree
Base2 : tree2 = Tnil
---------------------------------------
forall (tree1:tree), lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (Tnil))

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
nat1 : nat
Base1 : nat1 = ZERO
tree3 : tree
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
---------------------------------------
forall (tree1:tree), tf1 (ZERO) (tree1) = if lq (ZERO) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (Tnil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case lq (ZERO) (reprNew (tree3))(rank:8.)
=================================================
Progress: 337


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (nat1:nat), nat1 = plus (nat1) (ZERO)

2 goal(s) more...

1 conjecture(s) more...
>>> induction nat1(rank : 8.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
nat1 : nat
Base3 : nat1 = ZERO
---------------------------------------
ZERO = plus (ZERO) (ZERO)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7.)
=================================================
Progress: 338


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
nat1 : nat
Base3 : nat1 = ZERO
---------------------------------------
ZERO = plus (ZERO) (ZERO)

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
nat1 : nat
nat2 : nat
IH1 : nat2 = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
SUCC (nat2) = plus (SUCC (nat2)) (ZERO)

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 339


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
nat1 : nat
nat2 : nat
IH1 : nat2 = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
SUCC (nat2) = plus (SUCC (nat2)) (ZERO)

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
nat1 : nat
nat2 : nat
IH1 : nat2 = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
SUCC (nat2) = SUCC (plus (nat2) (ZERO))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:7.)
=================================================
Progress: 340


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
nat1 : nat
nat2 : nat
IH1 : nat2 = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
SUCC (nat2) = SUCC (plus (nat2) (ZERO))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
nat1 : nat
nat2 : nat
IH1 : nat2 = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
SUCC (nat2) = SUCC (nat2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:6.)
=================================================
Progress: 341


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
nat1 : nat
nat2 : nat
IH1 : nat2 = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
SUCC (nat2) = SUCC (nat2)

2 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree3)) then tf1 (ZERO) (tree3) else tf1 (ZERO) (repr (Tnil)))
IH2 : forall (nat1:nat), tf1 (nat1) (tree4) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else tf1 (ZERO) (repr (Tnil)))
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
---------------------------------------
forall (nat1:nat), tf1 (nat1) (Node (nat2) (tree3) (tree4)) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (Node (nat2) (tree3) (tree4))) then tf1 (ZERO) (Node (nat2) (tree3) (tree4)) else tf1 (ZERO) (repr (Tnil)))

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:6.)
=================================================
Progress: 342


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree3)) then tf1 (ZERO) (tree3) else tf1 (ZERO) (repr (Tnil)))
IH2 : forall (nat1:nat), tf1 (nat1) (tree4) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else tf1 (ZERO) (repr (Tnil)))
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
---------------------------------------
forall (nat1:nat), tf1 (nat1) (Node (nat2) (tree3) (tree4)) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (Node (nat2) (tree3) (tree4))) then tf1 (ZERO) (Node (nat2) (tree3) (tree4)) else tf1 (ZERO) (repr (Tnil)))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree3)) then tf1 (ZERO) (tree3) else tf1 (ZERO) (repr (Tnil)))
IH2 : forall (nat1:nat), tf1 (nat1) (tree4) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else tf1 (ZERO) (repr (Tnil)))
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
---------------------------------------
forall (nat1:nat), if lq (tf1 (plus (nat1) (nat2)) (tree3)) (tf1 (plus (nat1) (nat2)) (tree4)) then tf1 (plus (nat1) (nat2)) (tree4) else tf1 (plus (nat1) (nat2)) (tree3) = plus (nat1) (if lq (ZERO) (if lq (tf1 (nat2) (tree3)) (tf1 (nat2) (tree4)) then tf1 (nat2) (tree4) else tf1 (nat2) (tree3)) then tf1 (ZERO) (Node (nat2) (tree3) (tree4)) else tf1 (ZERO) (repr (Tnil)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction nat1(rank:7.)
=================================================
Progress: 343


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree3)) then tf1 (ZERO) (tree3) else tf1 (ZERO) (repr (Tnil)))
IH2 : forall (nat1:nat), tf1 (nat1) (tree4) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else tf1 (ZERO) (repr (Tnil)))
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
---------------------------------------
forall (nat1:nat), if lq (tf1 (plus (nat1) (nat2)) (tree3)) (tf1 (plus (nat1) (nat2)) (tree4)) then tf1 (plus (nat1) (nat2)) (tree4) else tf1 (plus (nat1) (nat2)) (tree3) = plus (nat1) (if lq (ZERO) (if lq (tf1 (nat2) (tree3)) (tf1 (nat2) (tree4)) then tf1 (nat2) (tree4) else tf1 (nat2) (tree3)) then tf1 (ZERO) (Node (nat2) (tree3) (tree4)) else tf1 (ZERO) (repr (Tnil)))

1 goal(s) more...

1 conjecture(s) more...
>>> induction nat1(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree3)) then tf1 (ZERO) (tree3) else tf1 (ZERO) (repr (Tnil)))
IH2 : forall (nat1:nat), tf1 (nat1) (tree4) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else tf1 (ZERO) (repr (Tnil)))
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
if lq (tf1 (plus (ZERO) (nat2)) (tree3)) (tf1 (plus (ZERO) (nat2)) (tree4)) then tf1 (plus (ZERO) (nat2)) (tree4) else tf1 (plus (ZERO) (nat2)) (tree3) = plus (ZERO) (if lq (ZERO) (if lq (tf1 (nat2) (tree3)) (tf1 (nat2) (tree4)) then tf1 (nat2) (tree4) else tf1 (nat2) (tree3)) then tf1 (ZERO) (Node (nat2) (tree3) (tree4)) else tf1 (ZERO) (repr (Tnil)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 344


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree3)) then tf1 (ZERO) (tree3) else tf1 (ZERO) (repr (Tnil)))
IH2 : forall (nat1:nat), tf1 (nat1) (tree4) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else tf1 (ZERO) (repr (Tnil)))
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
if lq (tf1 (plus (ZERO) (nat2)) (tree3)) (tf1 (plus (ZERO) (nat2)) (tree4)) then tf1 (plus (ZERO) (nat2)) (tree4) else tf1 (plus (ZERO) (nat2)) (tree3) = plus (ZERO) (if lq (ZERO) (if lq (tf1 (nat2) (tree3)) (tf1 (nat2) (tree4)) then tf1 (nat2) (tree4) else tf1 (nat2) (tree3)) then tf1 (ZERO) (Node (nat2) (tree3) (tree4)) else tf1 (ZERO) (repr (Tnil)))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree3)) then tf1 (ZERO) (tree3) else tf1 (ZERO) (repr (Tnil)))
IH2 : forall (nat1:nat), tf1 (nat1) (tree4) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else tf1 (ZERO) (repr (Tnil)))
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
if lq (tf1 (nat2) (tree3)) (tf1 (nat2) (tree4)) then tf1 (plus (ZERO) (nat2)) (tree4) else tf1 (plus (ZERO) (nat2)) (tree3) = if lq (ZERO) (if lq (tf1 (nat2) (tree3)) (tf1 (nat2) (tree4)) then tf1 (nat2) (tree4) else tf1 (nat2) (tree3)) then tf1 (ZERO) (Node (nat2) (tree3) (tree4)) else tf1 (ZERO) (repr (Tnil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case lq (tf1 (nat2) (tree3)) (tf1 (nat2) (tree4))(rank:8.)
=================================================
Progress: 345


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
nat1 : nat
Base1 : nat1 = ZERO
tree3 : tree
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
---------------------------------------
forall (tree1:tree), tf1 (ZERO) (tree1) = if lq (ZERO) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (Tnil))

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (ZERO) (reprNew (tree3))(rank : 8.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
nat1 : nat
Base1 : nat1 = ZERO
tree3 : tree
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
Case1 : lq (ZERO) (reprNew (tree3)) = true
---------------------------------------
forall (tree1:tree), tf1 (ZERO) (tree1) = tf1 (ZERO) (tree1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7.)
=================================================
Progress: 346


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
nat1 : nat
Base1 : nat1 = ZERO
tree3 : tree
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
Case1 : lq (ZERO) (reprNew (tree3)) = true
---------------------------------------
forall (tree1:tree), tf1 (ZERO) (tree1) = tf1 (ZERO) (tree1)

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
nat1 : nat
Base1 : nat1 = ZERO
tree3 : tree
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
Case1 : lq (ZERO) (reprNew (tree3)) = false
---------------------------------------
forall (tree1:tree), tf1 (ZERO) (tree1) = ZERO

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
induction tree1(rank:8.)
=================================================
Progress: 347


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree3)) then tf1 (ZERO) (tree3) else tf1 (ZERO) (repr (Tnil)))
IH2 : forall (nat1:nat), tf1 (nat1) (tree4) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else tf1 (ZERO) (repr (Tnil)))
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
if lq (tf1 (nat2) (tree3)) (tf1 (nat2) (tree4)) then tf1 (plus (ZERO) (nat2)) (tree4) else tf1 (plus (ZERO) (nat2)) (tree3) = if lq (ZERO) (if lq (tf1 (nat2) (tree3)) (tf1 (nat2) (tree4)) then tf1 (nat2) (tree4) else tf1 (nat2) (tree3)) then tf1 (ZERO) (Node (nat2) (tree3) (tree4)) else tf1 (ZERO) (repr (Tnil))

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (tf1 (nat2) (tree3)) (tf1 (nat2) (tree4))(rank : 8.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree3)) then tf1 (ZERO) (tree3) else tf1 (ZERO) (repr (Tnil)))
IH2 : forall (nat1:nat), tf1 (nat1) (tree4) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else tf1 (ZERO) (repr (Tnil)))
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
nat1 : nat
Base2 : nat1 = ZERO
Case1 : lq (tf1 (nat2) (tree3)) (tf1 (nat2) (tree4)) = true
---------------------------------------
tf1 (nat2) (tree4) = if lq (ZERO) (tf1 (nat2) (tree4)) then tf1 (ZERO) (Node (nat2) (tree3) (tree4)) else tf1 (ZERO) (repr (Tnil))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
case lq (ZERO) (tf1 (nat2) (tree4))(rank:9.)
rewrite IH2 in goal at 2(rank:24.)
rewrite IH2 in goal at 1(rank:16.)
rewrite IH2 in goal at 0(rank:24.)
=================================================
Progress: 348


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
nat1 : nat
Base1 : nat1 = ZERO
tree3 : tree
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
Case1 : lq (ZERO) (reprNew (tree3)) = false
---------------------------------------
forall (tree1:tree), tf1 (ZERO) (tree1) = ZERO

2 goal(s) more...

1 conjecture(s) more...
>>> induction tree1(rank : 8.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
nat1 : nat
Base1 : nat1 = ZERO
tree3 : tree
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
Case1 : lq (ZERO) (reprNew (tree3)) = false
tree1 : tree
Base3 : tree1 = Tnil
---------------------------------------
tf1 (ZERO) (Tnil) = ZERO

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7.)
=================================================
Progress: 349


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
nat1 : nat
Base1 : nat1 = ZERO
tree3 : tree
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
Case1 : lq (ZERO) (reprNew (tree3)) = false
tree1 : tree
Base3 : tree1 = Tnil
---------------------------------------
tf1 (ZERO) (Tnil) = ZERO

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
nat1 : nat
Base1 : nat1 = ZERO
tree3 : tree
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
Case1 : lq (ZERO) (reprNew (tree3)) = false
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : tf1 (ZERO) (tree4) = ZERO
IH2 : tf1 (ZERO) (tree5) = ZERO
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
---------------------------------------
tf1 (ZERO) (Node (nat2) (tree4) (tree5)) = ZERO

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 350


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
nat1 : nat
Base1 : nat1 = ZERO
tree3 : tree
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
Case1 : lq (ZERO) (reprNew (tree3)) = false
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : tf1 (ZERO) (tree4) = ZERO
IH2 : tf1 (ZERO) (tree5) = ZERO
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
---------------------------------------
tf1 (ZERO) (Node (nat2) (tree4) (tree5)) = ZERO

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
nat1 : nat
Base1 : nat1 = ZERO
tree3 : tree
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
Case1 : lq (ZERO) (reprNew (tree3)) = false
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : tf1 (ZERO) (tree4) = ZERO
IH2 : tf1 (ZERO) (tree5) = ZERO
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
---------------------------------------
if lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) then tf1 (nat2) (tree5) else tf1 (nat2) (tree4) = ZERO

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5))(rank:8.)
=================================================
Progress: 351


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
nat1 : nat
Base1 : nat1 = ZERO
tree3 : tree
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
Case1 : lq (ZERO) (reprNew (tree3)) = false
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : tf1 (ZERO) (tree4) = ZERO
IH2 : tf1 (ZERO) (tree5) = ZERO
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
---------------------------------------
if lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) then tf1 (nat2) (tree5) else tf1 (nat2) (tree4) = ZERO

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5))(rank : 8.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
nat1 : nat
Base1 : nat1 = ZERO
tree3 : tree
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
Case1 : lq (ZERO) (reprNew (tree3)) = false
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : tf1 (ZERO) (tree4) = ZERO
IH2 : tf1 (ZERO) (tree5) = ZERO
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
Case2 : lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) = true
---------------------------------------
tf1 (nat2) (tree5) = ZERO

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5))
parent
tf1 (nat2) (tree5)
lower
tf1(_, tree5)
upper
_
remove upper
tf1(ZERO(), tree5)
remove lower
tf1(ZERO(), tree5)
remove upper
tf1(nat2, tree5)
remove lower
tf1(nat2, tree5)
remove upper
tf1(nat2, tree5)
remove lower
tf1(nat2, tree5)
remove upper
tf1(nat2, tree5)
remove lower
tf1(nat2, tree5)
validate generalize_common_subterm_goal
Prop: tf1 (ZERO) (Node (SUCC (ZERO)) (Tnil) (Tnil)) = ZERO
Prop: tf1 (ZERO) (Tnil) = ZERO
Prop: tf1 (ZERO) (Tnil) = ZERO
asdf
=================================================
Progress: 352


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree3)) then tf1 (ZERO) (tree3) else tf1 (ZERO) (repr (Tnil)))
IH2 : forall (nat1:nat), tf1 (nat1) (tree4) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else tf1 (ZERO) (repr (Tnil)))
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
nat1 : nat
Base2 : nat1 = ZERO
Case1 : lq (tf1 (nat2) (tree3)) (tf1 (nat2) (tree4)) = true
---------------------------------------
tf1 (nat2) (tree4) = if lq (ZERO) (tf1 (nat2) (tree4)) then tf1 (ZERO) (Node (nat2) (tree3) (tree4)) else tf1 (ZERO) (repr (Tnil))

3 goal(s) more...

1 conjecture(s) more...
>>> case lq (ZERO) (tf1 (nat2) (tree4))(rank : 9.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree3)) then tf1 (ZERO) (tree3) else tf1 (ZERO) (repr (Tnil)))
IH2 : forall (nat1:nat), tf1 (nat1) (tree4) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else tf1 (ZERO) (repr (Tnil)))
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
nat1 : nat
Base2 : nat1 = ZERO
Case1 : lq (tf1 (nat2) (tree3)) (tf1 (nat2) (tree4)) = true
Case2 : lq (ZERO) (tf1 (nat2) (tree4)) = true
---------------------------------------
tf1 (nat2) (tree4) = if lq (tf1 (nat2) (tree3)) (tf1 (nat2) (tree4)) then tf1 (nat2) (tree4) else tf1 (nat2) (tree3)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 8
rewrite Case1 in goal at 0(rank:17.)
rewrite IH2 in goal at 1(rank:17.)
rewrite IH1 in goal at 1(rank:25.)
rewrite IH1 in goal at 2(rank:25.)
rewrite IH2 in goal at 2(rank:25.)
rewrite IH2 in goal at 3(rank:25.)
rewrite IH2 in goal at 0(rank:25.)
rewrite IH1 in goal at 0(rank:25.)
=================================================
Progress: 353


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) then tf1 (ZERO) (repr (tree3)) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH2 in goal at 2(rank : 12.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 0
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH1 in goal at 1
rewrite IH2 in goal at 2
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (if lq (reprNew (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Tnil)))) (tf1 (ZERO) (Tnil)) then reprNew (Node (ZERO) (Tnil) (Tnil)) else tf1 (ZERO) (repr (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Tnil)))))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (if lq (reprNew (Tnil)) (tf1 (ZERO) (Tnil)) then reprNew (Node (ZERO) (Tnil) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Node (SUCC (SUCC (SUCC (ZERO)))) (Tnil) (Tnil))))) else tf1 (ZERO) (repr (Tnil)))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (if lq (reprNew (Tnil)) (tf1 (ZERO) (Tnil)) then reprNew (Tnil) else tf1 (ZERO) (repr (Tnil)))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 0
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH1 in goal at 1
Prop: tf1 (SUCC (SUCC (ZERO))) (Node (SUCC (ZERO)) (Tnil) (Tnil)) = plus (SUCC (SUCC (ZERO))) (if lq (reprNew (Node (ZERO) (Tnil) (Tnil))) (tf1 (ZERO) (Node (SUCC (ZERO)) (Tnil) (Tnil))) then tf1 (ZERO) (Node (SUCC (ZERO)) (Tnil) (Tnil)) else tf1 (ZERO) (repr (Node (ZERO) (Tnil) (Tnil))))
Prop: tf1 (SUCC (ZERO)) (Tnil) = plus (SUCC (ZERO)) (if lq (reprNew (Tnil)) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (repr (Tnil)))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (if lq (reprNew (Tnil)) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (repr (Tnil)))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 0
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
Prop: tf1 (SUCC (SUCC (ZERO))) (Tnil) = plus (SUCC (SUCC (ZERO))) (if lq (tf1 (ZERO) (repr (Node (ZERO) (Tnil) (Tnil)))) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (repr (Node (ZERO) (Tnil) (Tnil))))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (if lq (tf1 (ZERO) (repr (Tnil))) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (repr (Tnil)))
Prop: tf1 (SUCC (SUCC (ZERO))) (Tnil) = plus (SUCC (SUCC (ZERO))) (if lq (tf1 (ZERO) (repr (Tnil))) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (repr (Tnil)))
Lemma List
forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))
End of Lemma List


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 354


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
>>> assert forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))(rank : 0.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))

---------------------------------------
forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree2(rank:6.)
=================================================
Progress: 355


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))

---------------------------------------
forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))

0 goal(s) more...

1 conjecture(s) more...
>>> induction tree2(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
---------------------------------------
forall (tree1:tree) (nat1:nat) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (Tnil)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else tf1 (ZERO) (repr (Tnil)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:6.)
=================================================
Progress: 356


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
---------------------------------------
forall (tree1:tree) (nat1:nat) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (Tnil)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else tf1 (ZERO) (repr (Tnil)))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
---------------------------------------
forall (tree1:tree) (nat1:nat) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree1)) then reprNew (tree3) else tf1 (ZERO) (repr (Tnil)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree1(rank:7.)
=================================================
Progress: 357


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
---------------------------------------
forall (tree1:tree) (nat1:nat) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree1)) then reprNew (tree3) else tf1 (ZERO) (repr (Tnil)))

1 goal(s) more...

1 conjecture(s) more...
>>> induction tree1(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (nat1:nat) (tree3:tree), tf1 (nat1) (Tnil) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (Tnil)) then reprNew (tree3) else tf1 (ZERO) (repr (Tnil)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 358


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (nat1:nat) (tree3:tree), tf1 (nat1) (Tnil) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (Tnil)) then reprNew (tree3) else tf1 (ZERO) (repr (Tnil)))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (nat1:nat) (tree3:tree), nat1 = plus (nat1) (ZERO)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction nat1(rank:8.)
=================================================
Progress: 359


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (nat1:nat) (tree3:tree), nat1 = plus (nat1) (ZERO)

2 goal(s) more...

1 conjecture(s) more...
>>> induction nat1(rank : 8.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
nat1 : nat
Base3 : nat1 = ZERO
---------------------------------------
forall (tree3:tree), ZERO = plus (ZERO) (ZERO)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7.)
=================================================
Progress: 360


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
nat1 : nat
Base3 : nat1 = ZERO
---------------------------------------
forall (tree3:tree), ZERO = plus (ZERO) (ZERO)

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
nat1 : nat
nat2 : nat
IH1 : forall (tree3:tree), nat2 = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (tree3:tree), SUCC (nat2) = plus (SUCC (nat2)) (ZERO)

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 361


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
nat1 : nat
nat2 : nat
IH1 : forall (tree3:tree), nat2 = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (tree3:tree), SUCC (nat2) = plus (SUCC (nat2)) (ZERO)

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
nat1 : nat
nat2 : nat
IH1 : forall (tree3:tree), nat2 = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (tree3:tree), SUCC (nat2) = SUCC (plus (nat2) (ZERO))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro tree3(rank:7.)
=================================================
Progress: 362


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
nat1 : nat
nat2 : nat
IH1 : forall (tree3:tree), nat2 = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (tree3:tree), SUCC (nat2) = SUCC (plus (nat2) (ZERO))

2 goal(s) more...

1 conjecture(s) more...
>>> intro tree3(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
nat1 : nat
nat2 : nat
IH1 : forall (tree3:tree), nat2 = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
tree3 : tree
---------------------------------------
SUCC (nat2) = SUCC (plus (nat2) (ZERO))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro tree3
validate generalize_common_subterm_goal
Prop: SUCC (ZERO) = plus (SUCC (ZERO)) (ZERO)
Prop: ZERO = plus (ZERO) (ZERO)
Prop: ZERO = plus (ZERO) (ZERO)
t is here


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
nat1 : nat
nat2 : nat
IH1 : forall (tree3:tree), nat2 = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
tree3 : tree
---------------------------------------
SUCC (nat2) = SUCC (plus (nat2) (ZERO))

2 goal(s) more...

1 conjecture(s) more...
duplicated tactic
assert forall (nat1:nat), nat1 = plus (nat1) (ZERO)
induction nat1
reflexivity
simpl in goal
rewrite <- IH1 in goal at 0
reflexivity


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
nat1 : nat
nat2 : nat
IH1 : forall (tree3:tree), nat2 = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
tree3 : tree
---------------------------------------
SUCC (nat2) = SUCC (plus (nat2) (ZERO))

2 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 363


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
nat1 : nat
nat2 : nat
IH1 : forall (tree3:tree), nat2 = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
tree3 : tree
---------------------------------------
SUCC (nat2) = SUCC (plus (nat2) (ZERO))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : -1.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
nat1 : nat
nat2 : nat
IH1 : forall (tree3:tree), nat2 = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
tree3 : tree
---------------------------------------
SUCC (nat2) = SUCC (plus (nat2) (ZERO))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- lemma3 in goal at 0(rank:7.)
=================================================
Progress: 364


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
nat1 : nat
nat2 : nat
IH1 : forall (tree3:tree), nat2 = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
tree3 : tree
---------------------------------------
SUCC (nat2) = SUCC (plus (nat2) (ZERO))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- lemma3 in goal at 0(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
nat1 : nat
nat2 : nat
IH1 : forall (tree3:tree), nat2 = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
tree3 : tree
---------------------------------------
SUCC (nat2) = SUCC (nat2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:6.)
=================================================
Progress: 365


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
nat1 : nat
nat2 : nat
IH1 : forall (tree3:tree), nat2 = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
tree3 : tree
---------------------------------------
SUCC (nat2) = SUCC (nat2)

2 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : forall (nat1:nat) (tree3:tree), tf1 (nat1) (tree4) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree4)) then reprNew (tree3) else tf1 (ZERO) (repr (Tnil)))
IH2 : forall (nat1:nat) (tree3:tree), tf1 (nat1) (tree5) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree5)) then reprNew (tree3) else tf1 (ZERO) (repr (Tnil)))
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
---------------------------------------
forall (nat1:nat) (tree3:tree), tf1 (nat1) (Node (nat2) (tree4) (tree5)) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (Node (nat2) (tree4) (tree5))) then reprNew (tree3) else tf1 (ZERO) (repr (Tnil)))

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:6.)
=================================================
Progress: 366


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : forall (nat1:nat) (tree3:tree), tf1 (nat1) (tree4) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree4)) then reprNew (tree3) else tf1 (ZERO) (repr (Tnil)))
IH2 : forall (nat1:nat) (tree3:tree), tf1 (nat1) (tree5) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree5)) then reprNew (tree3) else tf1 (ZERO) (repr (Tnil)))
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
---------------------------------------
forall (nat1:nat) (tree3:tree), tf1 (nat1) (Node (nat2) (tree4) (tree5)) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (Node (nat2) (tree4) (tree5))) then reprNew (tree3) else tf1 (ZERO) (repr (Tnil)))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : forall (nat1:nat) (tree3:tree), tf1 (nat1) (tree4) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree4)) then reprNew (tree3) else tf1 (ZERO) (repr (Tnil)))
IH2 : forall (nat1:nat) (tree3:tree), tf1 (nat1) (tree5) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree5)) then reprNew (tree3) else tf1 (ZERO) (repr (Tnil)))
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
---------------------------------------
forall (nat1:nat) (tree3:tree), if lq (tf1 (plus (nat1) (nat2)) (tree4)) (tf1 (plus (nat1) (nat2)) (tree5)) then tf1 (plus (nat1) (nat2)) (tree5) else tf1 (plus (nat1) (nat2)) (tree4) = plus (nat1) (if lq (ZERO) (if lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) then tf1 (nat2) (tree5) else tf1 (nat2) (tree4)) then reprNew (tree3) else tf1 (ZERO) (repr (Tnil)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction nat1(rank:7.)
=================================================
Progress: 367


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : forall (nat1:nat) (tree3:tree), tf1 (nat1) (tree4) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree4)) then reprNew (tree3) else tf1 (ZERO) (repr (Tnil)))
IH2 : forall (nat1:nat) (tree3:tree), tf1 (nat1) (tree5) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree5)) then reprNew (tree3) else tf1 (ZERO) (repr (Tnil)))
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
---------------------------------------
forall (nat1:nat) (tree3:tree), if lq (tf1 (plus (nat1) (nat2)) (tree4)) (tf1 (plus (nat1) (nat2)) (tree5)) then tf1 (plus (nat1) (nat2)) (tree5) else tf1 (plus (nat1) (nat2)) (tree4) = plus (nat1) (if lq (ZERO) (if lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) then tf1 (nat2) (tree5) else tf1 (nat2) (tree4)) then reprNew (tree3) else tf1 (ZERO) (repr (Tnil)))

1 goal(s) more...

1 conjecture(s) more...
>>> induction nat1(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : forall (nat1:nat) (tree3:tree), tf1 (nat1) (tree4) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree4)) then reprNew (tree3) else tf1 (ZERO) (repr (Tnil)))
IH2 : forall (nat1:nat) (tree3:tree), tf1 (nat1) (tree5) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree5)) then reprNew (tree3) else tf1 (ZERO) (repr (Tnil)))
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
forall (tree3:tree), if lq (tf1 (plus (ZERO) (nat2)) (tree4)) (tf1 (plus (ZERO) (nat2)) (tree5)) then tf1 (plus (ZERO) (nat2)) (tree5) else tf1 (plus (ZERO) (nat2)) (tree4) = plus (ZERO) (if lq (ZERO) (if lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) then tf1 (nat2) (tree5) else tf1 (nat2) (tree4)) then reprNew (tree3) else tf1 (ZERO) (repr (Tnil)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 368


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : forall (nat1:nat) (tree3:tree), tf1 (nat1) (tree4) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree4)) then reprNew (tree3) else tf1 (ZERO) (repr (Tnil)))
IH2 : forall (nat1:nat) (tree3:tree), tf1 (nat1) (tree5) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree5)) then reprNew (tree3) else tf1 (ZERO) (repr (Tnil)))
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
forall (tree3:tree), if lq (tf1 (plus (ZERO) (nat2)) (tree4)) (tf1 (plus (ZERO) (nat2)) (tree5)) then tf1 (plus (ZERO) (nat2)) (tree5) else tf1 (plus (ZERO) (nat2)) (tree4) = plus (ZERO) (if lq (ZERO) (if lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) then tf1 (nat2) (tree5) else tf1 (nat2) (tree4)) then reprNew (tree3) else tf1 (ZERO) (repr (Tnil)))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : forall (nat1:nat) (tree3:tree), tf1 (nat1) (tree4) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree4)) then reprNew (tree3) else tf1 (ZERO) (repr (Tnil)))
IH2 : forall (nat1:nat) (tree3:tree), tf1 (nat1) (tree5) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree5)) then reprNew (tree3) else tf1 (ZERO) (repr (Tnil)))
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
forall (tree3:tree), if lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) then tf1 (plus (ZERO) (nat2)) (tree5) else tf1 (plus (ZERO) (nat2)) (tree4) = if lq (ZERO) (if lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) then tf1 (nat2) (tree5) else tf1 (nat2) (tree4)) then reprNew (tree3) else tf1 (ZERO) (repr (Tnil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5))(rank:8.)
=================================================
Progress: 369


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : forall (nat1:nat) (tree3:tree), tf1 (nat1) (tree4) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree4)) then reprNew (tree3) else tf1 (ZERO) (repr (Tnil)))
IH2 : forall (nat1:nat) (tree3:tree), tf1 (nat1) (tree5) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree5)) then reprNew (tree3) else tf1 (ZERO) (repr (Tnil)))
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
forall (tree3:tree), if lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) then tf1 (plus (ZERO) (nat2)) (tree5) else tf1 (plus (ZERO) (nat2)) (tree4) = if lq (ZERO) (if lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) then tf1 (nat2) (tree5) else tf1 (nat2) (tree4)) then reprNew (tree3) else tf1 (ZERO) (repr (Tnil))

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5))(rank : 8.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : forall (nat1:nat) (tree3:tree), tf1 (nat1) (tree4) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree4)) then reprNew (tree3) else tf1 (ZERO) (repr (Tnil)))
IH2 : forall (nat1:nat) (tree3:tree), tf1 (nat1) (tree5) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree5)) then reprNew (tree3) else tf1 (ZERO) (repr (Tnil)))
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
nat1 : nat
Base2 : nat1 = ZERO
Case1 : lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) = true
---------------------------------------
forall (tree3:tree), tf1 (nat2) (tree5) = if lq (ZERO) (tf1 (nat2) (tree5)) then reprNew (tree3) else tf1 (ZERO) (repr (Tnil))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case lq (ZERO) (tf1 (nat2) (tree5))(rank:9.)
=================================================
Progress: 370


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : forall (nat1:nat) (tree3:tree), tf1 (nat1) (tree4) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree4)) then reprNew (tree3) else tf1 (ZERO) (repr (Tnil)))
IH2 : forall (nat1:nat) (tree3:tree), tf1 (nat1) (tree5) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree5)) then reprNew (tree3) else tf1 (ZERO) (repr (Tnil)))
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
nat1 : nat
Base2 : nat1 = ZERO
Case1 : lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) = true
---------------------------------------
forall (tree3:tree), tf1 (nat2) (tree5) = if lq (ZERO) (tf1 (nat2) (tree5)) then reprNew (tree3) else tf1 (ZERO) (repr (Tnil))

3 goal(s) more...

1 conjecture(s) more...
>>> case lq (ZERO) (tf1 (nat2) (tree5))(rank : 9.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : forall (nat1:nat) (tree3:tree), tf1 (nat1) (tree4) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree4)) then reprNew (tree3) else tf1 (ZERO) (repr (Tnil)))
IH2 : forall (nat1:nat) (tree3:tree), tf1 (nat1) (tree5) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree5)) then reprNew (tree3) else tf1 (ZERO) (repr (Tnil)))
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
nat1 : nat
Base2 : nat1 = ZERO
Case1 : lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) = true
Case2 : lq (ZERO) (tf1 (nat2) (tree5)) = true
---------------------------------------
forall (tree3:tree), tf1 (nat2) (tree5) = reprNew (tree3)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree3(rank:10.)
=================================================
Progress: 371


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : forall (nat1:nat) (tree3:tree), tf1 (nat1) (tree4) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree4)) then reprNew (tree3) else tf1 (ZERO) (repr (Tnil)))
IH2 : forall (nat1:nat) (tree3:tree), tf1 (nat1) (tree5) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree5)) then reprNew (tree3) else tf1 (ZERO) (repr (Tnil)))
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
nat1 : nat
Base2 : nat1 = ZERO
Case1 : lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) = true
Case2 : lq (ZERO) (tf1 (nat2) (tree5)) = true
---------------------------------------
forall (tree3:tree), tf1 (nat2) (tree5) = reprNew (tree3)

4 goal(s) more...

1 conjecture(s) more...
>>> induction tree3(rank : 10.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : forall (nat1:nat) (tree3:tree), tf1 (nat1) (tree4) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree4)) then reprNew (tree3) else tf1 (ZERO) (repr (Tnil)))
IH2 : forall (nat1:nat) (tree3:tree), tf1 (nat1) (tree5) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree5)) then reprNew (tree3) else tf1 (ZERO) (repr (Tnil)))
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
nat1 : nat
Base2 : nat1 = ZERO
Case1 : lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) = true
Case2 : lq (ZERO) (tf1 (nat2) (tree5)) = true
tree3 : tree
Base3 : tree3 = Tnil
---------------------------------------
tf1 (nat2) (tree5) = reprNew (Tnil)

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 372


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : forall (nat1:nat) (tree3:tree), tf1 (nat1) (tree4) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree4)) then reprNew (tree3) else tf1 (ZERO) (repr (Tnil)))
IH2 : forall (nat1:nat) (tree3:tree), tf1 (nat1) (tree5) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree5)) then reprNew (tree3) else tf1 (ZERO) (repr (Tnil)))
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
nat1 : nat
Base2 : nat1 = ZERO
Case1 : lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) = true
Case2 : lq (ZERO) (tf1 (nat2) (tree5)) = true
tree3 : tree
Base3 : tree3 = Tnil
---------------------------------------
tf1 (nat2) (tree5) = reprNew (Tnil)

5 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : forall (nat1:nat) (tree3:tree), tf1 (nat1) (tree4) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree4)) then reprNew (tree3) else tf1 (ZERO) (repr (Tnil)))
IH2 : forall (nat1:nat) (tree3:tree), tf1 (nat1) (tree5) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree5)) then reprNew (tree3) else tf1 (ZERO) (repr (Tnil)))
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
nat1 : nat
Base2 : nat1 = ZERO
Case1 : lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) = true
Case2 : lq (ZERO) (tf1 (nat2) (tree5)) = true
tree3 : tree
Base3 : tree3 = Tnil
---------------------------------------
tf1 (nat2) (tree5) = ZERO

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: tf1 (ZERO) (Tnil) = ZERO
Prop: tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil)) = ZERO
Prop: tf1 (ZERO) (Node (SUCC (ZERO)) (Tnil) (Tnil)) = ZERO
asdf
=================================================
Progress: 373


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) then tf1 (ZERO) (repr (tree3)) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 12.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then reprNew (tree3) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3))(rank:5.)
=================================================
Progress: 374


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then reprNew (tree3) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
>>> case lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3))(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- IH2 in goal at 0(rank:5.)
=================================================
Progress: 375


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 0
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH1 in goal at 2
rewrite IH2 in goal at 0
case lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3))
rewrite <- IH2 in goal at 0
Prop: tf1 (SUCC (ZERO)) (Tnil) = plus (SUCC (ZERO)) (tf1 (ZERO) (Tnil))
Prop: tf1 (SUCC (ZERO)) (Tnil) = plus (SUCC (ZERO)) (tf1 (ZERO) (Tnil))
Prop: tf1 (SUCC (SUCC (SUCC (ZERO)))) (Node (ZERO) (Node (SUCC (ZERO)) (Node (ZERO) (Tnil) (Tnil)) (Tnil)) (Node (SUCC (SUCC (SUCC (ZERO)))) (Tnil) (Tnil))) = plus (SUCC (SUCC (SUCC (ZERO)))) (tf1 (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Node (ZERO) (Tnil) (Tnil)) (Tnil)) (Node (SUCC (SUCC (SUCC (ZERO)))) (Tnil) (Tnil))))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 0
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH1 in goal at 2
rewrite IH2 in goal at 0
case lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3))
validate generalize_common_subterm_goal
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (reprNew (Tnil))
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (reprNew (Tnil))
Prop: tf1 (SUCC (ZERO)) (repr (Tnil)) = plus (SUCC (ZERO)) (reprNew (Tnil))
=================================================
Progress: 376


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) then tf1 (ZERO) (repr (tree3)) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH2 in goal at 1(rank : 12.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (repr (tree3)) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 0
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH1 in goal at 2
rewrite IH2 in goal at 1
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (if lq (tf1 (ZERO) (repr (Tnil))) (reprNew (Tnil)) then tf1 (ZERO) (Tnil) else reprNew (Tnil))
Prop: tf1 (ZERO) (Node (SUCC (SUCC (SUCC (ZERO)))) (Tnil) (Tnil)) = plus (ZERO) (if lq (tf1 (ZERO) (repr (Tnil))) (reprNew (Tnil)) then tf1 (ZERO) (Node (SUCC (SUCC (SUCC (ZERO)))) (Tnil) (Tnil)) else reprNew (Tnil))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (if lq (tf1 (ZERO) (repr (Tnil))) (reprNew (Tnil)) then tf1 (ZERO) (Tnil) else reprNew (Tnil))
validate generalize_common_subterm_goal
Prop: tf1 (SUCC (ZERO)) (Tnil) = plus (SUCC (ZERO)) (if lq (tf1 (ZERO) (repr (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil)))) (reprNew (Tnil)) then tf1 (ZERO) (Tnil) else reprNew (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil)))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (if lq (tf1 (ZERO) (repr (Tnil))) (reprNew (Tnil)) then tf1 (ZERO) (Tnil) else reprNew (Tnil))
Prop: tf1 (SUCC (SUCC (SUCC (SUCC (ZERO))))) (Tnil) = plus (SUCC (SUCC (SUCC (SUCC (ZERO))))) (if lq (tf1 (ZERO) (repr (Tnil))) (reprNew (Node (SUCC (ZERO)) (Node (ZERO) (Node (ZERO) (Tnil) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Tnil)))) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Tnil)))) (Tnil))) (Tnil)) (Tnil))) then tf1 (ZERO) (Tnil) else reprNew (Tnil))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 0
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH1 in goal at 2
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (if lq (tf1 (ZERO) (repr (Tnil))) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else reprNew (Tnil))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (if lq (tf1 (ZERO) (repr (Tnil))) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else reprNew (Tnil))
Prop: tf1 (SUCC (ZERO)) (Tnil) = plus (SUCC (ZERO)) (if lq (tf1 (ZERO) (repr (Tnil))) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else reprNew (Tnil))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 0
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
Prop: tf1 (ZERO) (Node (SUCC (ZERO)) (Tnil) (Tnil)) = plus (ZERO) (if lq (tf1 (ZERO) (repr (Node (ZERO) (Tnil) (Tnil)))) (tf1 (ZERO) (Node (SUCC (ZERO)) (Tnil) (Tnil))) then tf1 (ZERO) (Node (SUCC (ZERO)) (Tnil) (Tnil)) else tf1 (ZERO) (repr (Node (ZERO) (Tnil) (Tnil))))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (if lq (tf1 (ZERO) (repr (Tnil))) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (repr (Tnil)))
Prop: tf1 (ZERO) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil)) = plus (ZERO) (if lq (tf1 (ZERO) (repr (Node (ZERO) (Tnil) (Tnil)))) (tf1 (ZERO) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil))) then tf1 (ZERO) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil)) else tf1 (ZERO) (repr (Node (ZERO) (Tnil) (Tnil))))
Lemma List
forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))
End of Lemma List


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) then tf1 (ZERO) (repr (tree3)) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
Lemma List
forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (tree2))
End of Lemma List


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (repr (tree3)) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 377


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) then tf1 (ZERO) (repr (tree3)) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
>>> assert forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))(rank : 0.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))

---------------------------------------
forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree2(rank:6.)
=================================================
Progress: 378


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (repr (tree3)) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
>>> assert forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (tree2))(rank : 0.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (tree2))

---------------------------------------
forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (tree2))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction nat1(rank:6.)
=================================================
Progress: 379


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))

---------------------------------------
forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))

0 goal(s) more...

1 conjecture(s) more...
>>> induction tree2(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
---------------------------------------
forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (Tnil))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (Tnil))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:6.)
=================================================
Progress: 380


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (tree2))

---------------------------------------
forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (tree2))

0 goal(s) more...

1 conjecture(s) more...
>>> induction nat1(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (tree2))
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree) (tree3:tree), lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) = true -> tf1 (ZERO) (tree1) = plus (ZERO) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (tree2))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:6.)
=================================================
Progress: 381


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
---------------------------------------
forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (Tnil))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (Tnil))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
---------------------------------------
forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (Tnil))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree1(rank:7.)
=================================================
Progress: 382


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (tree2))
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree) (tree3:tree), lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) = true -> tf1 (ZERO) (tree1) = plus (ZERO) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (tree2))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (tree2))
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree) (tree3:tree), lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) = true -> tf1 (ZERO) (tree1) = if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (tree2)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro tree3(rank:6.)
=================================================
Progress: 383


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (tree2))
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree) (tree3:tree), lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) = true -> tf1 (ZERO) (tree1) = if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (tree2)

1 goal(s) more...

1 conjecture(s) more...
>>> intro tree3(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (tree2))
nat1 : nat
Base1 : nat1 = ZERO
tree3 : tree
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) = true -> tf1 (ZERO) (tree1) = if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (tree2)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree2(rank:7.)
=================================================
Progress: 384


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
---------------------------------------
forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (Tnil))

1 goal(s) more...

1 conjecture(s) more...
>>> induction tree1(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (nat1:nat), tf1 (nat1) (Tnil) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else reprNew (Tnil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 385


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (tree2))
nat1 : nat
Base1 : nat1 = ZERO
tree3 : tree
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) = true -> tf1 (ZERO) (tree1) = if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (tree2)

1 goal(s) more...

1 conjecture(s) more...
>>> induction tree2(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (tree2))
nat1 : nat
Base1 : nat1 = ZERO
tree3 : tree
tree2 : tree
Base2 : tree2 = Tnil
---------------------------------------
forall (tree1:tree), lq (tf1 (ZERO) (repr (Tnil))) (tf1 (ZERO) (repr (tree3))) = true -> tf1 (ZERO) (tree1) = if lq (tf1 (ZERO) (repr (Tnil))) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (Tnil)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 386


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (nat1:nat), tf1 (nat1) (Tnil) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else reprNew (Tnil))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (nat1:nat), nat1 = plus (nat1) (ZERO)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction nat1(rank:8.)
=================================================
Progress: 387


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (tree2))
nat1 : nat
Base1 : nat1 = ZERO
tree3 : tree
tree2 : tree
Base2 : tree2 = Tnil
---------------------------------------
forall (tree1:tree), lq (tf1 (ZERO) (repr (Tnil))) (tf1 (ZERO) (repr (tree3))) = true -> tf1 (ZERO) (tree1) = if lq (tf1 (ZERO) (repr (Tnil))) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (Tnil)

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (tree2))
nat1 : nat
Base1 : nat1 = ZERO
tree3 : tree
tree2 : tree
Base2 : tree2 = Tnil
---------------------------------------
forall (tree1:tree), lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (Tnil)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7.)
=================================================
Progress: 388


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (tree2))
nat1 : nat
Base1 : nat1 = ZERO
tree3 : tree
tree2 : tree
Base2 : tree2 = Tnil
---------------------------------------
forall (tree1:tree), lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (Tnil)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (tree2))
nat1 : nat
Base1 : nat1 = ZERO
tree3 : tree
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
---------------------------------------
forall (tree1:tree), tf1 (ZERO) (tree1) = if lq (ZERO) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (Tnil)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case lq (ZERO) (reprNew (tree3))(rank:8.)
=================================================
Progress: 389


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (nat1:nat), nat1 = plus (nat1) (ZERO)

2 goal(s) more...

1 conjecture(s) more...
>>> induction nat1(rank : 8.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
nat1 : nat
Base3 : nat1 = ZERO
---------------------------------------
ZERO = plus (ZERO) (ZERO)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7.)
=================================================
Progress: 390


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
nat1 : nat
Base3 : nat1 = ZERO
---------------------------------------
ZERO = plus (ZERO) (ZERO)

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
nat1 : nat
nat2 : nat
IH1 : nat2 = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
SUCC (nat2) = plus (SUCC (nat2)) (ZERO)

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 391


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
nat1 : nat
nat2 : nat
IH1 : nat2 = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
SUCC (nat2) = plus (SUCC (nat2)) (ZERO)

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
nat1 : nat
nat2 : nat
IH1 : nat2 = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
SUCC (nat2) = SUCC (plus (nat2) (ZERO))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:7.)
=================================================
Progress: 392


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
nat1 : nat
nat2 : nat
IH1 : nat2 = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
SUCC (nat2) = SUCC (plus (nat2) (ZERO))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
nat1 : nat
nat2 : nat
IH1 : nat2 = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
SUCC (nat2) = SUCC (nat2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:6.)
=================================================
Progress: 393


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
nat1 : nat
nat2 : nat
IH1 : nat2 = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
SUCC (nat2) = SUCC (nat2)

2 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree3)) then tf1 (ZERO) (tree3) else reprNew (Tnil))
IH2 : forall (nat1:nat), tf1 (nat1) (tree4) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else reprNew (Tnil))
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
---------------------------------------
forall (nat1:nat), tf1 (nat1) (Node (nat2) (tree3) (tree4)) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (Node (nat2) (tree3) (tree4))) then tf1 (ZERO) (Node (nat2) (tree3) (tree4)) else reprNew (Tnil))

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:6.)
=================================================
Progress: 394


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree3)) then tf1 (ZERO) (tree3) else reprNew (Tnil))
IH2 : forall (nat1:nat), tf1 (nat1) (tree4) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else reprNew (Tnil))
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
---------------------------------------
forall (nat1:nat), tf1 (nat1) (Node (nat2) (tree3) (tree4)) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (Node (nat2) (tree3) (tree4))) then tf1 (ZERO) (Node (nat2) (tree3) (tree4)) else reprNew (Tnil))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree3)) then tf1 (ZERO) (tree3) else reprNew (Tnil))
IH2 : forall (nat1:nat), tf1 (nat1) (tree4) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else reprNew (Tnil))
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
---------------------------------------
forall (nat1:nat), if lq (tf1 (plus (nat1) (nat2)) (tree3)) (tf1 (plus (nat1) (nat2)) (tree4)) then tf1 (plus (nat1) (nat2)) (tree4) else tf1 (plus (nat1) (nat2)) (tree3) = plus (nat1) (if lq (ZERO) (if lq (tf1 (nat2) (tree3)) (tf1 (nat2) (tree4)) then tf1 (nat2) (tree4) else tf1 (nat2) (tree3)) then tf1 (ZERO) (Node (nat2) (tree3) (tree4)) else reprNew (Tnil))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction nat1(rank:7.)
=================================================
Progress: 395


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree3)) then tf1 (ZERO) (tree3) else reprNew (Tnil))
IH2 : forall (nat1:nat), tf1 (nat1) (tree4) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else reprNew (Tnil))
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
---------------------------------------
forall (nat1:nat), if lq (tf1 (plus (nat1) (nat2)) (tree3)) (tf1 (plus (nat1) (nat2)) (tree4)) then tf1 (plus (nat1) (nat2)) (tree4) else tf1 (plus (nat1) (nat2)) (tree3) = plus (nat1) (if lq (ZERO) (if lq (tf1 (nat2) (tree3)) (tf1 (nat2) (tree4)) then tf1 (nat2) (tree4) else tf1 (nat2) (tree3)) then tf1 (ZERO) (Node (nat2) (tree3) (tree4)) else reprNew (Tnil))

1 goal(s) more...

1 conjecture(s) more...
>>> induction nat1(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree3)) then tf1 (ZERO) (tree3) else reprNew (Tnil))
IH2 : forall (nat1:nat), tf1 (nat1) (tree4) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else reprNew (Tnil))
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
if lq (tf1 (plus (ZERO) (nat2)) (tree3)) (tf1 (plus (ZERO) (nat2)) (tree4)) then tf1 (plus (ZERO) (nat2)) (tree4) else tf1 (plus (ZERO) (nat2)) (tree3) = plus (ZERO) (if lq (ZERO) (if lq (tf1 (nat2) (tree3)) (tf1 (nat2) (tree4)) then tf1 (nat2) (tree4) else tf1 (nat2) (tree3)) then tf1 (ZERO) (Node (nat2) (tree3) (tree4)) else reprNew (Tnil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 396


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree3)) then tf1 (ZERO) (tree3) else reprNew (Tnil))
IH2 : forall (nat1:nat), tf1 (nat1) (tree4) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else reprNew (Tnil))
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
if lq (tf1 (plus (ZERO) (nat2)) (tree3)) (tf1 (plus (ZERO) (nat2)) (tree4)) then tf1 (plus (ZERO) (nat2)) (tree4) else tf1 (plus (ZERO) (nat2)) (tree3) = plus (ZERO) (if lq (ZERO) (if lq (tf1 (nat2) (tree3)) (tf1 (nat2) (tree4)) then tf1 (nat2) (tree4) else tf1 (nat2) (tree3)) then tf1 (ZERO) (Node (nat2) (tree3) (tree4)) else reprNew (Tnil))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree3)) then tf1 (ZERO) (tree3) else reprNew (Tnil))
IH2 : forall (nat1:nat), tf1 (nat1) (tree4) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else reprNew (Tnil))
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
if lq (tf1 (nat2) (tree3)) (tf1 (nat2) (tree4)) then tf1 (plus (ZERO) (nat2)) (tree4) else tf1 (plus (ZERO) (nat2)) (tree3) = if lq (ZERO) (if lq (tf1 (nat2) (tree3)) (tf1 (nat2) (tree4)) then tf1 (nat2) (tree4) else tf1 (nat2) (tree3)) then tf1 (ZERO) (Node (nat2) (tree3) (tree4)) else reprNew (Tnil)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case lq (tf1 (nat2) (tree3)) (tf1 (nat2) (tree4))(rank:8.)
=================================================
Progress: 397


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (tree2))
nat1 : nat
Base1 : nat1 = ZERO
tree3 : tree
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
---------------------------------------
forall (tree1:tree), tf1 (ZERO) (tree1) = if lq (ZERO) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (Tnil)

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (ZERO) (reprNew (tree3))(rank : 8.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (tree2))
nat1 : nat
Base1 : nat1 = ZERO
tree3 : tree
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
Case1 : lq (ZERO) (reprNew (tree3)) = true
---------------------------------------
forall (tree1:tree), tf1 (ZERO) (tree1) = tf1 (ZERO) (tree1)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7.)
=================================================
Progress: 398


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (tree2))
nat1 : nat
Base1 : nat1 = ZERO
tree3 : tree
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
Case1 : lq (ZERO) (reprNew (tree3)) = true
---------------------------------------
forall (tree1:tree), tf1 (ZERO) (tree1) = tf1 (ZERO) (tree1)

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (tree2))
nat1 : nat
Base1 : nat1 = ZERO
tree3 : tree
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
Case1 : lq (ZERO) (reprNew (tree3)) = false
---------------------------------------
forall (tree1:tree), tf1 (ZERO) (tree1) = ZERO

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
induction tree1(rank:8.)
=================================================
Progress: 399


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree3)) then tf1 (ZERO) (tree3) else reprNew (Tnil))
IH2 : forall (nat1:nat), tf1 (nat1) (tree4) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else reprNew (Tnil))
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
if lq (tf1 (nat2) (tree3)) (tf1 (nat2) (tree4)) then tf1 (plus (ZERO) (nat2)) (tree4) else tf1 (plus (ZERO) (nat2)) (tree3) = if lq (ZERO) (if lq (tf1 (nat2) (tree3)) (tf1 (nat2) (tree4)) then tf1 (nat2) (tree4) else tf1 (nat2) (tree3)) then tf1 (ZERO) (Node (nat2) (tree3) (tree4)) else reprNew (Tnil)

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (tf1 (nat2) (tree3)) (tf1 (nat2) (tree4))(rank : 8.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree3)) then tf1 (ZERO) (tree3) else reprNew (Tnil))
IH2 : forall (nat1:nat), tf1 (nat1) (tree4) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else reprNew (Tnil))
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
nat1 : nat
Base2 : nat1 = ZERO
Case1 : lq (tf1 (nat2) (tree3)) (tf1 (nat2) (tree4)) = true
---------------------------------------
tf1 (nat2) (tree4) = if lq (ZERO) (tf1 (nat2) (tree4)) then tf1 (ZERO) (Node (nat2) (tree3) (tree4)) else reprNew (Tnil)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
case lq (ZERO) (tf1 (nat2) (tree4))(rank:9.)
rewrite IH2 in goal at 2(rank:24.)
rewrite IH2 in goal at 1(rank:16.)
rewrite IH2 in goal at 0(rank:24.)
=================================================
Progress: 400


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (tree2))
nat1 : nat
Base1 : nat1 = ZERO
tree3 : tree
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
Case1 : lq (ZERO) (reprNew (tree3)) = false
---------------------------------------
forall (tree1:tree), tf1 (ZERO) (tree1) = ZERO

2 goal(s) more...

1 conjecture(s) more...
>>> induction tree1(rank : 8.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (tree2))
nat1 : nat
Base1 : nat1 = ZERO
tree3 : tree
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
Case1 : lq (ZERO) (reprNew (tree3)) = false
tree1 : tree
Base3 : tree1 = Tnil
---------------------------------------
tf1 (ZERO) (Tnil) = ZERO

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7.)
=================================================
Progress: 401


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (tree2))
nat1 : nat
Base1 : nat1 = ZERO
tree3 : tree
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
Case1 : lq (ZERO) (reprNew (tree3)) = false
tree1 : tree
Base3 : tree1 = Tnil
---------------------------------------
tf1 (ZERO) (Tnil) = ZERO

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (tree2))
nat1 : nat
Base1 : nat1 = ZERO
tree3 : tree
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
Case1 : lq (ZERO) (reprNew (tree3)) = false
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : tf1 (ZERO) (tree4) = ZERO
IH2 : tf1 (ZERO) (tree5) = ZERO
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
---------------------------------------
tf1 (ZERO) (Node (nat2) (tree4) (tree5)) = ZERO

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 402


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (tree2))
nat1 : nat
Base1 : nat1 = ZERO
tree3 : tree
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
Case1 : lq (ZERO) (reprNew (tree3)) = false
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : tf1 (ZERO) (tree4) = ZERO
IH2 : tf1 (ZERO) (tree5) = ZERO
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
---------------------------------------
tf1 (ZERO) (Node (nat2) (tree4) (tree5)) = ZERO

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (tree2))
nat1 : nat
Base1 : nat1 = ZERO
tree3 : tree
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
Case1 : lq (ZERO) (reprNew (tree3)) = false
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : tf1 (ZERO) (tree4) = ZERO
IH2 : tf1 (ZERO) (tree5) = ZERO
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
---------------------------------------
if lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) then tf1 (nat2) (tree5) else tf1 (nat2) (tree4) = ZERO

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5))(rank:8.)
=================================================
Progress: 403


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (tree2))
nat1 : nat
Base1 : nat1 = ZERO
tree3 : tree
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
Case1 : lq (ZERO) (reprNew (tree3)) = false
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : tf1 (ZERO) (tree4) = ZERO
IH2 : tf1 (ZERO) (tree5) = ZERO
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
---------------------------------------
if lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) then tf1 (nat2) (tree5) else tf1 (nat2) (tree4) = ZERO

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5))(rank : 8.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (tree2))
nat1 : nat
Base1 : nat1 = ZERO
tree3 : tree
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
Case1 : lq (ZERO) (reprNew (tree3)) = false
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : tf1 (ZERO) (tree4) = ZERO
IH2 : tf1 (ZERO) (tree5) = ZERO
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
Case2 : lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) = true
---------------------------------------
tf1 (nat2) (tree5) = ZERO

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5))
parent
tf1 (nat2) (tree5)
lower
tf1(_, tree5)
upper
_
remove upper
tf1(ZERO(), tree5)
remove lower
tf1(ZERO(), tree5)
remove upper
tf1(nat2, tree5)
remove lower
tf1(nat2, tree5)
remove upper
tf1(nat2, tree5)
remove lower
tf1(nat2, tree5)
remove upper
tf1(nat2, tree5)
remove lower
tf1(nat2, tree5)
validate generalize_common_subterm_goal
Prop: tf1 (SUCC (ZERO)) (Tnil) = ZERO
Prop: tf1 (SUCC (ZERO)) (Tnil) = ZERO
Prop: tf1 (ZERO) (Node (ZERO) (Tnil) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil)) (Tnil)) (Tnil)) (Tnil))) = ZERO
asdf
=================================================
Progress: 404


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree3)) then tf1 (ZERO) (tree3) else reprNew (Tnil))
IH2 : forall (nat1:nat), tf1 (nat1) (tree4) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else reprNew (Tnil))
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
nat1 : nat
Base2 : nat1 = ZERO
Case1 : lq (tf1 (nat2) (tree3)) (tf1 (nat2) (tree4)) = true
---------------------------------------
tf1 (nat2) (tree4) = if lq (ZERO) (tf1 (nat2) (tree4)) then tf1 (ZERO) (Node (nat2) (tree3) (tree4)) else reprNew (Tnil)

3 goal(s) more...

1 conjecture(s) more...
>>> case lq (ZERO) (tf1 (nat2) (tree4))(rank : 9.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree3)) then tf1 (ZERO) (tree3) else reprNew (Tnil))
IH2 : forall (nat1:nat), tf1 (nat1) (tree4) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else reprNew (Tnil))
Inductive1 : tree1 = Node (nat2) (tree3) (tree4)
nat1 : nat
Base2 : nat1 = ZERO
Case1 : lq (tf1 (nat2) (tree3)) (tf1 (nat2) (tree4)) = true
Case2 : lq (ZERO) (tf1 (nat2) (tree4)) = true
---------------------------------------
tf1 (nat2) (tree4) = if lq (tf1 (nat2) (tree3)) (tf1 (nat2) (tree4)) then tf1 (nat2) (tree4) else tf1 (nat2) (tree3)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 8
rewrite Case1 in goal at 0(rank:17.)
rewrite IH2 in goal at 1(rank:17.)
rewrite IH1 in goal at 1(rank:25.)
rewrite IH1 in goal at 2(rank:25.)
rewrite IH2 in goal at 2(rank:25.)
rewrite IH2 in goal at 3(rank:25.)
rewrite IH2 in goal at 0(rank:25.)
rewrite IH1 in goal at 0(rank:25.)
=================================================
Progress: 405


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) then tf1 (ZERO) (repr (tree3)) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH2 in goal at 2(rank : 12.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) then reprNew (tree3) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 0
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH1 in goal at 2
rewrite IH2 in goal at 2
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (if lq (tf1 (ZERO) (repr (Tnil))) (tf1 (ZERO) (Tnil)) then reprNew (Tnil) else reprNew (Tnil))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (if lq (tf1 (ZERO) (repr (Tnil))) (tf1 (ZERO) (Tnil)) then reprNew (Node (ZERO) (Tnil) (Tnil)) else reprNew (Tnil))
Prop: tf1 (SUCC (ZERO)) (Tnil) = plus (SUCC (ZERO)) (if lq (tf1 (ZERO) (repr (Node (ZERO) (Tnil) (Tnil)))) (tf1 (ZERO) (Tnil)) then reprNew (Tnil) else reprNew (Node (ZERO) (Tnil) (Tnil)))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 0
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH1 in goal at 2
Prop: tf1 (ZERO) (Node (SUCC (SUCC (ZERO))) (Tnil) (Tnil)) = plus (ZERO) (if lq (tf1 (ZERO) (repr (Tnil))) (tf1 (ZERO) (Node (SUCC (SUCC (ZERO))) (Tnil) (Tnil))) then tf1 (ZERO) (Node (SUCC (SUCC (ZERO))) (Tnil) (Tnil)) else reprNew (Tnil))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (if lq (tf1 (ZERO) (repr (Tnil))) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else reprNew (Tnil))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (if lq (tf1 (ZERO) (repr (Tnil))) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else reprNew (Tnil))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 0
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (if lq (tf1 (ZERO) (repr (Tnil))) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (repr (Tnil)))
Prop: tf1 (SUCC (SUCC (ZERO))) (Tnil) = plus (SUCC (SUCC (ZERO))) (if lq (tf1 (ZERO) (repr (Tnil))) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (repr (Tnil)))
Prop: tf1 (SUCC (ZERO)) (Node (ZERO) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Tnil))) (Tnil)) = plus (SUCC (ZERO)) (if lq (tf1 (ZERO) (repr (Node (ZERO) (Tnil) (Tnil)))) (tf1 (ZERO) (Node (ZERO) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Tnil))) (Tnil))) then tf1 (ZERO) (Node (ZERO) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Tnil))) (Tnil)) else tf1 (ZERO) (repr (Node (ZERO) (Tnil) (Tnil))))
Lemma List
forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
End of Lemma List


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) then reprNew (tree3) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 406


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) then reprNew (tree3) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
>>> assert forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))(rank : 0.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))

---------------------------------------
forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree2(rank:6.)
=================================================
Progress: 407


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))

---------------------------------------
forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))

0 goal(s) more...

1 conjecture(s) more...
>>> induction tree2(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
---------------------------------------
forall (tree1:tree) (nat1:nat) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (Tnil))) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (Tnil))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:6.)
=================================================
Progress: 408


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
---------------------------------------
forall (tree1:tree) (nat1:nat) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (Tnil))) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (Tnil))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
---------------------------------------
forall (tree1:tree) (nat1:nat) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (Tnil))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree1(rank:7.)
=================================================
Progress: 409


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
---------------------------------------
forall (tree1:tree) (nat1:nat) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (Tnil))

1 goal(s) more...

1 conjecture(s) more...
>>> induction tree1(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (nat1:nat) (tree3:tree), tf1 (nat1) (Tnil) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (Tnil)) then reprNew (tree3) else reprNew (Tnil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 410


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (nat1:nat) (tree3:tree), tf1 (nat1) (Tnil) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (Tnil)) then reprNew (tree3) else reprNew (Tnil))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (nat1:nat) (tree3:tree), nat1 = plus (nat1) (ZERO)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction nat1(rank:8.)
=================================================
Progress: 411


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (nat1:nat) (tree3:tree), nat1 = plus (nat1) (ZERO)

2 goal(s) more...

1 conjecture(s) more...
>>> induction nat1(rank : 8.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
nat1 : nat
Base3 : nat1 = ZERO
---------------------------------------
forall (tree3:tree), ZERO = plus (ZERO) (ZERO)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7.)
=================================================
Progress: 412


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
nat1 : nat
Base3 : nat1 = ZERO
---------------------------------------
forall (tree3:tree), ZERO = plus (ZERO) (ZERO)

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
nat1 : nat
nat2 : nat
IH1 : forall (tree3:tree), nat2 = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (tree3:tree), SUCC (nat2) = plus (SUCC (nat2)) (ZERO)

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 413


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
nat1 : nat
nat2 : nat
IH1 : forall (tree3:tree), nat2 = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (tree3:tree), SUCC (nat2) = plus (SUCC (nat2)) (ZERO)

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
nat1 : nat
nat2 : nat
IH1 : forall (tree3:tree), nat2 = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (tree3:tree), SUCC (nat2) = SUCC (plus (nat2) (ZERO))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro tree3(rank:7.)
=================================================
Progress: 414


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
nat1 : nat
nat2 : nat
IH1 : forall (tree3:tree), nat2 = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (tree3:tree), SUCC (nat2) = SUCC (plus (nat2) (ZERO))

2 goal(s) more...

1 conjecture(s) more...
>>> intro tree3(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
nat1 : nat
nat2 : nat
IH1 : forall (tree3:tree), nat2 = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
tree3 : tree
---------------------------------------
SUCC (nat2) = SUCC (plus (nat2) (ZERO))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro tree3
validate generalize_common_subterm_goal
Prop: SUCC (ZERO) = plus (SUCC (ZERO)) (ZERO)
Prop: ZERO = plus (ZERO) (ZERO)
Prop: SUCC (ZERO) = plus (SUCC (ZERO)) (ZERO)
t is here


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
nat1 : nat
nat2 : nat
IH1 : forall (tree3:tree), nat2 = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
tree3 : tree
---------------------------------------
SUCC (nat2) = SUCC (plus (nat2) (ZERO))

2 goal(s) more...

1 conjecture(s) more...
duplicated tactic
assert forall (nat1:nat), nat1 = plus (nat1) (ZERO)
induction nat1
reflexivity
simpl in goal
rewrite <- IH1 in goal at 0
reflexivity


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
nat1 : nat
nat2 : nat
IH1 : forall (tree3:tree), nat2 = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
tree3 : tree
---------------------------------------
SUCC (nat2) = SUCC (plus (nat2) (ZERO))

2 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 415


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
nat1 : nat
nat2 : nat
IH1 : forall (tree3:tree), nat2 = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
tree3 : tree
---------------------------------------
SUCC (nat2) = SUCC (plus (nat2) (ZERO))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : -1.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
nat1 : nat
nat2 : nat
IH1 : forall (tree3:tree), nat2 = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
tree3 : tree
---------------------------------------
SUCC (nat2) = SUCC (plus (nat2) (ZERO))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- lemma3 in goal at 0(rank:7.)
=================================================
Progress: 416


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
nat1 : nat
nat2 : nat
IH1 : forall (tree3:tree), nat2 = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
tree3 : tree
---------------------------------------
SUCC (nat2) = SUCC (plus (nat2) (ZERO))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- lemma3 in goal at 0(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
nat1 : nat
nat2 : nat
IH1 : forall (tree3:tree), nat2 = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
tree3 : tree
---------------------------------------
SUCC (nat2) = SUCC (nat2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:6.)
=================================================
Progress: 417


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
Base2 : tree1 = Tnil
nat1 : nat
nat2 : nat
IH1 : forall (tree3:tree), nat2 = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
tree3 : tree
---------------------------------------
SUCC (nat2) = SUCC (nat2)

2 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : forall (nat1:nat) (tree3:tree), tf1 (nat1) (tree4) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree4)) then reprNew (tree3) else reprNew (Tnil))
IH2 : forall (nat1:nat) (tree3:tree), tf1 (nat1) (tree5) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree5)) then reprNew (tree3) else reprNew (Tnil))
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
---------------------------------------
forall (nat1:nat) (tree3:tree), tf1 (nat1) (Node (nat2) (tree4) (tree5)) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (Node (nat2) (tree4) (tree5))) then reprNew (tree3) else reprNew (Tnil))

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:6.)
=================================================
Progress: 418


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : forall (nat1:nat) (tree3:tree), tf1 (nat1) (tree4) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree4)) then reprNew (tree3) else reprNew (Tnil))
IH2 : forall (nat1:nat) (tree3:tree), tf1 (nat1) (tree5) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree5)) then reprNew (tree3) else reprNew (Tnil))
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
---------------------------------------
forall (nat1:nat) (tree3:tree), tf1 (nat1) (Node (nat2) (tree4) (tree5)) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (Node (nat2) (tree4) (tree5))) then reprNew (tree3) else reprNew (Tnil))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : forall (nat1:nat) (tree3:tree), tf1 (nat1) (tree4) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree4)) then reprNew (tree3) else reprNew (Tnil))
IH2 : forall (nat1:nat) (tree3:tree), tf1 (nat1) (tree5) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree5)) then reprNew (tree3) else reprNew (Tnil))
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
---------------------------------------
forall (nat1:nat) (tree3:tree), if lq (tf1 (plus (nat1) (nat2)) (tree4)) (tf1 (plus (nat1) (nat2)) (tree5)) then tf1 (plus (nat1) (nat2)) (tree5) else tf1 (plus (nat1) (nat2)) (tree4) = plus (nat1) (if lq (ZERO) (if lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) then tf1 (nat2) (tree5) else tf1 (nat2) (tree4)) then reprNew (tree3) else reprNew (Tnil))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction nat1(rank:7.)
=================================================
Progress: 419


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : forall (nat1:nat) (tree3:tree), tf1 (nat1) (tree4) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree4)) then reprNew (tree3) else reprNew (Tnil))
IH2 : forall (nat1:nat) (tree3:tree), tf1 (nat1) (tree5) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree5)) then reprNew (tree3) else reprNew (Tnil))
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
---------------------------------------
forall (nat1:nat) (tree3:tree), if lq (tf1 (plus (nat1) (nat2)) (tree4)) (tf1 (plus (nat1) (nat2)) (tree5)) then tf1 (plus (nat1) (nat2)) (tree5) else tf1 (plus (nat1) (nat2)) (tree4) = plus (nat1) (if lq (ZERO) (if lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) then tf1 (nat2) (tree5) else tf1 (nat2) (tree4)) then reprNew (tree3) else reprNew (Tnil))

1 goal(s) more...

1 conjecture(s) more...
>>> induction nat1(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : forall (nat1:nat) (tree3:tree), tf1 (nat1) (tree4) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree4)) then reprNew (tree3) else reprNew (Tnil))
IH2 : forall (nat1:nat) (tree3:tree), tf1 (nat1) (tree5) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree5)) then reprNew (tree3) else reprNew (Tnil))
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
forall (tree3:tree), if lq (tf1 (plus (ZERO) (nat2)) (tree4)) (tf1 (plus (ZERO) (nat2)) (tree5)) then tf1 (plus (ZERO) (nat2)) (tree5) else tf1 (plus (ZERO) (nat2)) (tree4) = plus (ZERO) (if lq (ZERO) (if lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) then tf1 (nat2) (tree5) else tf1 (nat2) (tree4)) then reprNew (tree3) else reprNew (Tnil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 420


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : forall (nat1:nat) (tree3:tree), tf1 (nat1) (tree4) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree4)) then reprNew (tree3) else reprNew (Tnil))
IH2 : forall (nat1:nat) (tree3:tree), tf1 (nat1) (tree5) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree5)) then reprNew (tree3) else reprNew (Tnil))
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
forall (tree3:tree), if lq (tf1 (plus (ZERO) (nat2)) (tree4)) (tf1 (plus (ZERO) (nat2)) (tree5)) then tf1 (plus (ZERO) (nat2)) (tree5) else tf1 (plus (ZERO) (nat2)) (tree4) = plus (ZERO) (if lq (ZERO) (if lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) then tf1 (nat2) (tree5) else tf1 (nat2) (tree4)) then reprNew (tree3) else reprNew (Tnil))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : forall (nat1:nat) (tree3:tree), tf1 (nat1) (tree4) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree4)) then reprNew (tree3) else reprNew (Tnil))
IH2 : forall (nat1:nat) (tree3:tree), tf1 (nat1) (tree5) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree5)) then reprNew (tree3) else reprNew (Tnil))
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
forall (tree3:tree), if lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) then tf1 (plus (ZERO) (nat2)) (tree5) else tf1 (plus (ZERO) (nat2)) (tree4) = if lq (ZERO) (if lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) then tf1 (nat2) (tree5) else tf1 (nat2) (tree4)) then reprNew (tree3) else reprNew (Tnil)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5))(rank:8.)
=================================================
Progress: 421


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : forall (nat1:nat) (tree3:tree), tf1 (nat1) (tree4) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree4)) then reprNew (tree3) else reprNew (Tnil))
IH2 : forall (nat1:nat) (tree3:tree), tf1 (nat1) (tree5) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree5)) then reprNew (tree3) else reprNew (Tnil))
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
forall (tree3:tree), if lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) then tf1 (plus (ZERO) (nat2)) (tree5) else tf1 (plus (ZERO) (nat2)) (tree4) = if lq (ZERO) (if lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) then tf1 (nat2) (tree5) else tf1 (nat2) (tree4)) then reprNew (tree3) else reprNew (Tnil)

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5))(rank : 8.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : forall (nat1:nat) (tree3:tree), tf1 (nat1) (tree4) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree4)) then reprNew (tree3) else reprNew (Tnil))
IH2 : forall (nat1:nat) (tree3:tree), tf1 (nat1) (tree5) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree5)) then reprNew (tree3) else reprNew (Tnil))
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
nat1 : nat
Base2 : nat1 = ZERO
Case1 : lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) = true
---------------------------------------
forall (tree3:tree), tf1 (nat2) (tree5) = if lq (ZERO) (tf1 (nat2) (tree5)) then reprNew (tree3) else reprNew (Tnil)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case lq (ZERO) (tf1 (nat2) (tree5))(rank:9.)
=================================================
Progress: 422


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : forall (nat1:nat) (tree3:tree), tf1 (nat1) (tree4) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree4)) then reprNew (tree3) else reprNew (Tnil))
IH2 : forall (nat1:nat) (tree3:tree), tf1 (nat1) (tree5) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree5)) then reprNew (tree3) else reprNew (Tnil))
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
nat1 : nat
Base2 : nat1 = ZERO
Case1 : lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) = true
---------------------------------------
forall (tree3:tree), tf1 (nat2) (tree5) = if lq (ZERO) (tf1 (nat2) (tree5)) then reprNew (tree3) else reprNew (Tnil)

3 goal(s) more...

1 conjecture(s) more...
>>> case lq (ZERO) (tf1 (nat2) (tree5))(rank : 9.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : forall (nat1:nat) (tree3:tree), tf1 (nat1) (tree4) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree4)) then reprNew (tree3) else reprNew (Tnil))
IH2 : forall (nat1:nat) (tree3:tree), tf1 (nat1) (tree5) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree5)) then reprNew (tree3) else reprNew (Tnil))
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
nat1 : nat
Base2 : nat1 = ZERO
Case1 : lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) = true
Case2 : lq (ZERO) (tf1 (nat2) (tree5)) = true
---------------------------------------
forall (tree3:tree), tf1 (nat2) (tree5) = reprNew (tree3)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree3(rank:10.)
=================================================
Progress: 423


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : forall (nat1:nat) (tree3:tree), tf1 (nat1) (tree4) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree4)) then reprNew (tree3) else reprNew (Tnil))
IH2 : forall (nat1:nat) (tree3:tree), tf1 (nat1) (tree5) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree5)) then reprNew (tree3) else reprNew (Tnil))
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
nat1 : nat
Base2 : nat1 = ZERO
Case1 : lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) = true
Case2 : lq (ZERO) (tf1 (nat2) (tree5)) = true
---------------------------------------
forall (tree3:tree), tf1 (nat2) (tree5) = reprNew (tree3)

4 goal(s) more...

1 conjecture(s) more...
>>> induction tree3(rank : 10.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : forall (nat1:nat) (tree3:tree), tf1 (nat1) (tree4) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree4)) then reprNew (tree3) else reprNew (Tnil))
IH2 : forall (nat1:nat) (tree3:tree), tf1 (nat1) (tree5) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree5)) then reprNew (tree3) else reprNew (Tnil))
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
nat1 : nat
Base2 : nat1 = ZERO
Case1 : lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) = true
Case2 : lq (ZERO) (tf1 (nat2) (tree5)) = true
tree3 : tree
Base3 : tree3 = Tnil
---------------------------------------
tf1 (nat2) (tree5) = reprNew (Tnil)

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 424


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : forall (nat1:nat) (tree3:tree), tf1 (nat1) (tree4) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree4)) then reprNew (tree3) else reprNew (Tnil))
IH2 : forall (nat1:nat) (tree3:tree), tf1 (nat1) (tree5) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree5)) then reprNew (tree3) else reprNew (Tnil))
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
nat1 : nat
Base2 : nat1 = ZERO
Case1 : lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) = true
Case2 : lq (ZERO) (tf1 (nat2) (tree5)) = true
tree3 : tree
Base3 : tree3 = Tnil
---------------------------------------
tf1 (nat2) (tree5) = reprNew (Tnil)

5 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : forall (nat1:nat) (tree3:tree), tf1 (nat1) (tree4) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree4)) then reprNew (tree3) else reprNew (Tnil))
IH2 : forall (nat1:nat) (tree3:tree), tf1 (nat1) (tree5) = plus (nat1) (if lq (ZERO) (tf1 (ZERO) (tree5)) then reprNew (tree3) else reprNew (Tnil))
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
nat1 : nat
Base2 : nat1 = ZERO
Case1 : lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) = true
Case2 : lq (ZERO) (tf1 (nat2) (tree5)) = true
tree3 : tree
Base3 : tree3 = Tnil
---------------------------------------
tf1 (nat2) (tree5) = ZERO

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: tf1 (ZERO) (Tnil) = ZERO
Prop: tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil)) = ZERO
Prop: tf1 (SUCC (ZERO)) (Tnil) = ZERO
asdf
=================================================
Progress: 425


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) then reprNew (tree3) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 12.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then reprNew (tree3) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case lq (reprNew (tree2)) (reprNew (tree3))(rank:5.)
=================================================
Progress: 426


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then reprNew (tree3) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
>>> case lq (reprNew (tree2)) (reprNew (tree3))(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- IH2 in goal at 0(rank:5.)
=================================================
Progress: 427


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 1
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH1 in goal at 0
rewrite IH2 in goal at 0
case lq (reprNew (tree2)) (reprNew (tree3))
rewrite <- IH2 in goal at 0
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (tf1 (ZERO) (Tnil))
Prop: tf1 (SUCC (ZERO)) (Node (ZERO) (Tnil) (Tnil)) = plus (SUCC (ZERO)) (tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil)))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (tf1 (ZERO) (Tnil))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 1
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH1 in goal at 0
rewrite IH2 in goal at 0
case lq (reprNew (tree2)) (reprNew (tree3))
validate generalize_common_subterm_goal
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (reprNew (Tnil))
Prop: tf1 (SUCC (ZERO)) (repr (Node (ZERO) (Tnil) (Node (SUCC (SUCC (ZERO))) (Tnil) (Tnil)))) = plus (SUCC (ZERO)) (reprNew (Node (ZERO) (Tnil) (Node (SUCC (SUCC (ZERO))) (Tnil) (Tnil))))
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (reprNew (Tnil))
=================================================
Progress: 428


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 12.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case lq (reprNew (tree2)) (reprNew (tree3))(rank:5.)
=================================================
Progress: 429


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
>>> case lq (reprNew (tree2)) (reprNew (tree3))(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- IH2 in goal at 0(rank:5.)
=================================================
Progress: 430


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 1
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH1 in goal at 1
rewrite IH2 in goal at 0
case lq (reprNew (tree2)) (reprNew (tree3))
rewrite <- IH2 in goal at 0
Prop: tf1 (SUCC (ZERO)) (Tnil) = plus (SUCC (ZERO)) (tf1 (ZERO) (Tnil))
Prop: tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil)) = plus (ZERO) (tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil)))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (tf1 (ZERO) (Tnil))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 1
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH1 in goal at 1
rewrite IH2 in goal at 0
case lq (reprNew (tree2)) (reprNew (tree3))
validate generalize_common_subterm_goal
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (reprNew (Tnil))
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (reprNew (Tnil))
Prop: tf1 (ZERO) (repr (Node (SUCC (ZERO)) (Tnil) (Tnil))) = plus (ZERO) (reprNew (Node (SUCC (ZERO)) (Tnil) (Tnil)))
=================================================
Progress: 431


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) then reprNew (tree3) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 12.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then reprNew (tree3) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3))(rank:5.)
=================================================
Progress: 432


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then reprNew (tree3) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
>>> case lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3))(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- IH2 in goal at 0(rank:5.)
=================================================
Progress: 433


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 1
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH1 in goal at 2
rewrite IH2 in goal at 0
case lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3))
rewrite <- IH2 in goal at 0
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (tf1 (ZERO) (Tnil))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (tf1 (ZERO) (Tnil))
Prop: tf1 (SUCC (ZERO)) (Tnil) = plus (SUCC (ZERO)) (tf1 (ZERO) (Tnil))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 1
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH1 in goal at 2
rewrite IH2 in goal at 0
case lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3))
validate generalize_common_subterm_goal
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (reprNew (Tnil))
Prop: tf1 (SUCC (SUCC (ZERO))) (repr (Tnil)) = plus (SUCC (SUCC (ZERO))) (reprNew (Tnil))
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (reprNew (Tnil))
=================================================
Progress: 434


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (repr (tree3)) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 12.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then reprNew (tree3) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 2
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH1 in goal at 0
rewrite IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (if lq (reprNew (Tnil)) (reprNew (Tnil)) then reprNew (Tnil) else reprNew (Tnil))
Prop: tf1 (SUCC (ZERO)) (repr (Tnil)) = plus (SUCC (ZERO)) (if lq (reprNew (Tnil)) (reprNew (Tnil)) then reprNew (Tnil) else reprNew (Tnil))
Prop: tf1 (ZERO) (repr (Node (SUCC (ZERO)) (Node (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Tnil) (Tnil)) (Tnil)) (Tnil)) (Tnil))) = plus (ZERO) (if lq (reprNew (Tnil)) (reprNew (Node (SUCC (ZERO)) (Node (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Tnil) (Tnil)) (Tnil)) (Tnil)) (Tnil))) then reprNew (Node (SUCC (ZERO)) (Node (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Tnil) (Tnil)) (Tnil)) (Tnil)) (Tnil)) else reprNew (Tnil))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 2
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH1 in goal at 0
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (if lq (reprNew (Tnil)) (reprNew (Node (SUCC (ZERO)) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Tnil))) (Tnil))) then tf1 (ZERO) (Tnil) else reprNew (Tnil))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (if lq (reprNew (Tnil)) (reprNew (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Tnil) (Tnil)) (Node (ZERO) (Tnil) (Tnil)))) then tf1 (ZERO) (Tnil) else reprNew (Tnil))
Prop: tf1 (SUCC (ZERO)) (Node (SUCC (ZERO)) (Tnil) (Node (SUCC (ZERO)) (Tnil) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Tnil))))) = plus (SUCC (ZERO)) (if lq (reprNew (Tnil)) (reprNew (Tnil)) then tf1 (ZERO) (Node (SUCC (ZERO)) (Tnil) (Node (SUCC (ZERO)) (Tnil) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Tnil))))) else reprNew (Tnil))
validate generalize_common_subterm_goal
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (if lq (reprNew (Node (ZERO) (Tnil) (Tnil))) (reprNew (Node (ZERO) (Tnil) (Tnil))) then tf1 (ZERO) (Tnil) else reprNew (Node (ZERO) (Tnil) (Tnil)))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (if lq (reprNew (Node (ZERO) (Tnil) (Tnil))) (reprNew (Tnil)) then tf1 (ZERO) (Tnil) else reprNew (Node (ZERO) (Tnil) (Tnil)))
Prop: tf1 (SUCC (ZERO)) (Node (SUCC (SUCC (SUCC (ZERO)))) (Tnil) (Tnil)) = plus (SUCC (ZERO)) (if lq (reprNew (Tnil)) (reprNew (Tnil)) then tf1 (ZERO) (Node (SUCC (SUCC (SUCC (ZERO)))) (Tnil) (Tnil)) else reprNew (Tnil))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 2
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (if lq (tf1 (ZERO) (repr (Node (ZERO) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Node (SUCC (ZERO)) (Node (SUCC (SUCC (SUCC (ZERO)))) (Tnil) (Tnil)) (Node (SUCC (ZERO)) (Tnil) (Tnil)))) (Node (SUCC (ZERO)) (Tnil) (Tnil))))) (reprNew (Node (ZERO) (Node (SUCC (ZERO)) (Tnil) (Tnil)) (Tnil))) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (repr (Node (ZERO) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Node (SUCC (ZERO)) (Node (SUCC (SUCC (SUCC (ZERO)))) (Tnil) (Tnil)) (Node (SUCC (ZERO)) (Tnil) (Tnil)))) (Node (SUCC (ZERO)) (Tnil) (Tnil)))))
Prop: tf1 (ZERO) (Node (SUCC (ZERO)) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Node (ZERO) (Tnil) (Tnil))) (Tnil)) = plus (ZERO) (if lq (tf1 (ZERO) (repr (Tnil))) (reprNew (Tnil)) then tf1 (ZERO) (Node (SUCC (ZERO)) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Node (ZERO) (Tnil) (Tnil))) (Tnil)) else tf1 (ZERO) (repr (Tnil)))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (if lq (tf1 (ZERO) (repr (Tnil))) (reprNew (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Node (ZERO) (Node (SUCC (SUCC (SUCC (ZERO)))) (Tnil) (Node (SUCC (SUCC (SUCC (ZERO)))) (Node (ZERO) (Node (SUCC (ZERO)) (Node (ZERO) (Tnil) (Tnil)) (Tnil)) (Tnil)) (Node (ZERO) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Tnil)))) (Tnil)))) (Tnil)))) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (repr (Tnil)))
validate generalize_common_subterm_goal
Prop: tf1 (SUCC (ZERO)) (Node (SUCC (ZERO)) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil)) (Tnil)) = plus (SUCC (ZERO)) (if lq (tf1 (ZERO) (repr (Tnil))) (reprNew (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Tnil))))) then tf1 (ZERO) (Node (SUCC (ZERO)) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil)) (Tnil)) else tf1 (ZERO) (repr (Tnil)))
Prop: tf1 (ZERO) (Node (ZERO) (Tnil) (Node (SUCC (SUCC (ZERO))) (Tnil) (Node (ZERO) (Tnil) (Tnil)))) = plus (ZERO) (if lq (tf1 (ZERO) (repr (Tnil))) (reprNew (Tnil)) then tf1 (ZERO) (Node (ZERO) (Tnil) (Node (SUCC (SUCC (ZERO))) (Tnil) (Node (ZERO) (Tnil) (Tnil)))) else tf1 (ZERO) (repr (Tnil)))
Prop: tf1 (ZERO) (Node (SUCC (ZERO)) (Tnil) (Tnil)) = plus (ZERO) (if lq (tf1 (ZERO) (repr (Node (SUCC (ZERO)) (Tnil) (Tnil)))) (reprNew (Tnil)) then tf1 (ZERO) (Node (SUCC (ZERO)) (Tnil) (Tnil)) else tf1 (ZERO) (repr (Node (SUCC (ZERO)) (Tnil) (Tnil))))
=================================================
Progress: 435


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (repr (tree3)) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 12.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then reprNew (tree3) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 2
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH1 in goal at 1
rewrite IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (if lq (reprNew (Node (SUCC (SUCC (SUCC (ZERO)))) (Node (SUCC (ZERO)) (Tnil) (Tnil)) (Node (ZERO) (Tnil) (Tnil)))) (reprNew (Tnil)) then reprNew (Tnil) else tf1 (ZERO) (repr (Node (SUCC (SUCC (SUCC (ZERO)))) (Node (SUCC (ZERO)) (Tnil) (Tnil)) (Node (ZERO) (Tnil) (Tnil)))))
Prop: tf1 (ZERO) (repr (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil))) = plus (ZERO) (if lq (reprNew (Tnil)) (reprNew (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil))) then reprNew (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil)) else tf1 (ZERO) (repr (Tnil)))
Prop: tf1 (ZERO) (repr (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Tnil)))) = plus (ZERO) (if lq (reprNew (Tnil)) (reprNew (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Tnil)))) then reprNew (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Tnil))) else tf1 (ZERO) (repr (Tnil)))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 2
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH1 in goal at 1
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (if lq (reprNew (Node (SUCC (SUCC (SUCC (ZERO)))) (Tnil) (Tnil))) (reprNew (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (repr (Node (SUCC (SUCC (SUCC (ZERO)))) (Tnil) (Tnil))))
Prop: tf1 (SUCC (SUCC (SUCC (ZERO)))) (Node (ZERO) (Tnil) (Tnil)) = plus (SUCC (SUCC (SUCC (ZERO)))) (if lq (reprNew (Tnil)) (reprNew (Node (ZERO) (Tnil) (Tnil))) then tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil)) else tf1 (ZERO) (repr (Tnil)))
Prop: tf1 (SUCC (SUCC (ZERO))) (Tnil) = plus (SUCC (SUCC (ZERO))) (if lq (reprNew (Tnil)) (reprNew (Node (ZERO) (Tnil) (Tnil))) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (repr (Tnil)))
validate generalize_common_subterm_goal
Prop: tf1 (SUCC (ZERO)) (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Tnil) (Tnil)) (Tnil)) = plus (SUCC (ZERO)) (if lq (reprNew (Tnil)) (reprNew (Tnil)) then tf1 (ZERO) (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Tnil) (Tnil)) (Tnil)) else tf1 (ZERO) (repr (Tnil)))
Prop: tf1 (ZERO) (Node (SUCC (SUCC (SUCC (ZERO)))) (Tnil) (Tnil)) = plus (ZERO) (if lq (reprNew (Tnil)) (reprNew (Tnil)) then tf1 (ZERO) (Node (SUCC (SUCC (SUCC (ZERO)))) (Tnil) (Tnil)) else tf1 (ZERO) (repr (Tnil)))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (if lq (reprNew (Tnil)) (reprNew (Node (ZERO) (Tnil) (Tnil))) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (repr (Tnil)))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 2
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (if lq (tf1 (ZERO) (repr (Node (SUCC (SUCC (ZERO))) (Tnil) (Tnil)))) (reprNew (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (repr (Node (SUCC (SUCC (ZERO))) (Tnil) (Tnil))))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (if lq (tf1 (ZERO) (repr (Tnil))) (reprNew (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (repr (Tnil)))
Prop: tf1 (ZERO) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Node (ZERO) (Tnil) (Tnil))) = plus (ZERO) (if lq (tf1 (ZERO) (repr (Tnil))) (reprNew (Node (SUCC (ZERO)) (Tnil) (Tnil))) then tf1 (ZERO) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Node (ZERO) (Tnil) (Tnil))) else tf1 (ZERO) (repr (Tnil)))
validate generalize_common_subterm_goal
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (if lq (tf1 (ZERO) (repr (Node (ZERO) (Node (ZERO) (Tnil) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil))) (Node (SUCC (ZERO)) (Tnil) (Node (SUCC (ZERO)) (Tnil) (Tnil)))))) (reprNew (Node (ZERO) (Tnil) (Tnil))) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (repr (Node (ZERO) (Node (ZERO) (Tnil) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil))) (Node (SUCC (ZERO)) (Tnil) (Node (SUCC (ZERO)) (Tnil) (Tnil))))))
Prop: tf1 (ZERO) (Node (SUCC (SUCC (ZERO))) (Tnil) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil)) (Tnil))) = plus (ZERO) (if lq (tf1 (ZERO) (repr (Tnil))) (reprNew (Node (ZERO) (Tnil) (Node (SUCC (ZERO)) (Tnil) (Tnil)))) then tf1 (ZERO) (Node (SUCC (SUCC (ZERO))) (Tnil) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil)) (Tnil))) else tf1 (ZERO) (repr (Tnil)))
Prop: tf1 (SUCC (SUCC (SUCC (ZERO)))) (Tnil) = plus (SUCC (SUCC (SUCC (ZERO)))) (if lq (tf1 (ZERO) (repr (Tnil))) (reprNew (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (repr (Tnil)))
=================================================
Progress: 436


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (repr (tree3)) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 12.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then reprNew (tree3) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 2
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH1 in goal at 2
rewrite IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: tf1 (ZERO) (repr (Node (SUCC (ZERO)) (Tnil) (Tnil))) = plus (ZERO) (if lq (tf1 (ZERO) (repr (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil)))) (reprNew (Node (SUCC (ZERO)) (Tnil) (Tnil))) then reprNew (Node (SUCC (ZERO)) (Tnil) (Tnil)) else reprNew (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil)))
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (if lq (tf1 (ZERO) (repr (Tnil))) (reprNew (Tnil)) then reprNew (Tnil) else reprNew (Tnil))
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (if lq (tf1 (ZERO) (repr (Tnil))) (reprNew (Tnil)) then reprNew (Tnil) else reprNew (Tnil))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 2
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH1 in goal at 2
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (if lq (tf1 (ZERO) (repr (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil)))) (reprNew (Tnil)) then tf1 (ZERO) (Tnil) else reprNew (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil)))
Prop: tf1 (SUCC (SUCC (ZERO))) (Node (ZERO) (Tnil) (Node (SUCC (ZERO)) (Tnil) (Tnil))) = plus (SUCC (SUCC (ZERO))) (if lq (tf1 (ZERO) (repr (Node (SUCC (SUCC (SUCC (SUCC (ZERO))))) (Tnil) (Tnil)))) (reprNew (Tnil)) then tf1 (ZERO) (Node (ZERO) (Tnil) (Node (SUCC (ZERO)) (Tnil) (Tnil))) else reprNew (Node (SUCC (SUCC (SUCC (SUCC (ZERO))))) (Tnil) (Tnil)))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (if lq (tf1 (ZERO) (repr (Node (ZERO) (Tnil) (Tnil)))) (reprNew (Tnil)) then tf1 (ZERO) (Tnil) else reprNew (Node (ZERO) (Tnil) (Tnil)))
validate generalize_common_subterm_goal
Prop: tf1 (ZERO) (Node (ZERO) (Node (ZERO) (Tnil) (Node (SUCC (ZERO)) (Tnil) (Tnil))) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Tnil)))) = plus (ZERO) (if lq (tf1 (ZERO) (repr (Tnil))) (reprNew (Node (SUCC (SUCC (ZERO))) (Tnil) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Tnil))))) then tf1 (ZERO) (Node (ZERO) (Node (ZERO) (Tnil) (Node (SUCC (ZERO)) (Tnil) (Tnil))) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Tnil)))) else reprNew (Tnil))
Prop: tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil)) = plus (ZERO) (if lq (tf1 (ZERO) (repr (Tnil))) (reprNew (Node (ZERO) (Tnil) (Tnil))) then tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil)) else reprNew (Tnil))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (if lq (tf1 (ZERO) (repr (Tnil))) (reprNew (Node (ZERO) (Tnil) (Tnil))) then tf1 (ZERO) (Tnil) else reprNew (Tnil))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH2 in goal at 2
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (if lq (tf1 (ZERO) (repr (Tnil))) (reprNew (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (repr (Tnil)))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (if lq (tf1 (ZERO) (repr (Tnil))) (reprNew (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Tnil))))) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (repr (Tnil)))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (if lq (tf1 (ZERO) (repr (Tnil))) (reprNew (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (repr (Tnil)))
Lemma List
forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
End of Lemma List


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (repr (tree3)) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 437


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (repr (tree3)) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
>>> assert forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))(rank : 0.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))

---------------------------------------
forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree2(rank:6.)
=================================================
Progress: 438


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))

---------------------------------------
forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))

0 goal(s) more...

1 conjecture(s) more...
>>> induction tree2(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
---------------------------------------
forall (tree1:tree) (nat1:nat) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (Tnil))) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (Tnil)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:6.)
=================================================
Progress: 439


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
---------------------------------------
forall (tree1:tree) (nat1:nat) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (Tnil))) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (Tnil)))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
---------------------------------------
forall (tree1:tree) (nat1:nat) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (ZERO) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (Tnil)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree3(rank:7.)
=================================================
Progress: 440


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
---------------------------------------
forall (tree1:tree) (nat1:nat) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (ZERO) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (Tnil)))

1 goal(s) more...

1 conjecture(s) more...
>>> induction tree3(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
tree3 : tree
Base2 : tree3 = Tnil
---------------------------------------
forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (if lq (ZERO) (reprNew (Tnil)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (Tnil)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 441


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
tree3 : tree
Base2 : tree3 = Tnil
---------------------------------------
forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (if lq (ZERO) (reprNew (Tnil)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (Tnil)))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (reprNew (tree3)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree2 : tree
Base1 : tree2 = Tnil
tree3 : tree
Base2 : tree3 = Tnil
---------------------------------------
forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (ZERO)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
induction nat1(rank:16.)
induction tree1(rank:16.)
=================================================
Progress: 442


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) then tf1 (ZERO) (repr (tree3)) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 12.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then reprNew (tree3) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case lq (reprNew (tree2)) (reprNew (tree3))(rank:5.)
=================================================
Progress: 443


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then reprNew (tree3) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
>>> case lq (reprNew (tree2)) (reprNew (tree3))(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- IH2 in goal at 0(rank:5.)
=================================================
Progress: 444


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
rewrite <- IH2 in goal at 0
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH1 in goal at 0
rewrite IH2 in goal at 0
case lq (reprNew (tree2)) (reprNew (tree3))
rewrite <- IH2 in goal at 0
Prop: tf1 (SUCC (SUCC (SUCC (ZERO)))) (Tnil) = plus (SUCC (SUCC (SUCC (ZERO)))) (tf1 (ZERO) (Tnil))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (tf1 (ZERO) (Tnil))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (tf1 (ZERO) (Tnil))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
rewrite <- IH2 in goal at 0
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH1 in goal at 0
rewrite IH2 in goal at 0
case lq (reprNew (tree2)) (reprNew (tree3))
validate generalize_common_subterm_goal
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (reprNew (Tnil))
Prop: tf1 (SUCC (ZERO)) (repr (Tnil)) = plus (SUCC (ZERO)) (reprNew (Tnil))
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (reprNew (Tnil))
=================================================
Progress: 445


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) then tf1 (ZERO) (repr (tree3)) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH2 in goal at 1(rank : 12.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (repr (tree3)) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
rewrite <- IH2 in goal at 0
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH1 in goal at 0
rewrite IH2 in goal at 1
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (if lq (reprNew (Tnil)) (reprNew (Tnil)) then tf1 (ZERO) (Tnil) else reprNew (Tnil))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (if lq (reprNew (Node (ZERO) (Node (SUCC (ZERO)) (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Node (SUCC (ZERO)) (Node (ZERO) (Tnil) (Tnil)) (Tnil)) (Tnil)) (Tnil)) (Tnil)) (Tnil))) (reprNew (Tnil)) then tf1 (ZERO) (Tnil) else reprNew (Node (ZERO) (Node (SUCC (ZERO)) (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Node (SUCC (ZERO)) (Node (ZERO) (Tnil) (Tnil)) (Tnil)) (Tnil)) (Tnil)) (Tnil)) (Tnil)))
Prop: tf1 (ZERO) (Node (SUCC (SUCC (SUCC (ZERO)))) (Tnil) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil))) = plus (ZERO) (if lq (reprNew (Tnil)) (reprNew (Tnil)) then tf1 (ZERO) (Node (SUCC (SUCC (SUCC (ZERO)))) (Tnil) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil))) else reprNew (Tnil))
validate generalize_common_subterm_goal
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (if lq (reprNew (Tnil)) (reprNew (Tnil)) then tf1 (ZERO) (Tnil) else reprNew (Tnil))
Prop: tf1 (ZERO) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil)) (Tnil)) = plus (ZERO) (if lq (reprNew (Tnil)) (reprNew (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil))) then tf1 (ZERO) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil)) (Tnil)) else reprNew (Tnil))
Prop: tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil)) = plus (ZERO) (if lq (reprNew (Tnil)) (reprNew (Tnil)) then tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil)) else reprNew (Tnil))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
rewrite <- IH2 in goal at 0
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH1 in goal at 0
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (if lq (reprNew (Tnil)) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else reprNew (Tnil))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (if lq (reprNew (Tnil)) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else reprNew (Tnil))
Prop: tf1 (SUCC (SUCC (ZERO))) (Tnil) = plus (SUCC (SUCC (ZERO))) (if lq (reprNew (Tnil)) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else reprNew (Tnil))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
rewrite <- IH2 in goal at 0
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (if lq (reprNew (Tnil)) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (repr (Tnil)))
Prop: tf1 (ZERO) (Node (SUCC (SUCC (ZERO))) (Tnil) (Tnil)) = plus (ZERO) (if lq (reprNew (Tnil)) (tf1 (ZERO) (Node (SUCC (SUCC (ZERO))) (Tnil) (Tnil))) then tf1 (ZERO) (Node (SUCC (SUCC (ZERO))) (Tnil) (Tnil)) else tf1 (ZERO) (repr (Tnil)))
Prop: tf1 (ZERO) (Node (SUCC (ZERO)) (Tnil) (Tnil)) = plus (ZERO) (if lq (reprNew (Node (SUCC (SUCC (ZERO))) (Tnil) (Tnil))) (tf1 (ZERO) (Node (SUCC (ZERO)) (Tnil) (Tnil))) then tf1 (ZERO) (Node (SUCC (ZERO)) (Tnil) (Tnil)) else tf1 (ZERO) (repr (Node (SUCC (SUCC (ZERO))) (Tnil) (Tnil))))
validate generalize_common_subterm_goal
Prop: tf1 (ZERO) (Node (SUCC (SUCC (ZERO))) (Tnil) (Tnil)) = plus (ZERO) (if lq (reprNew (Tnil)) (tf1 (ZERO) (Node (SUCC (SUCC (ZERO))) (Tnil) (Tnil))) then tf1 (ZERO) (Node (SUCC (SUCC (ZERO))) (Tnil) (Tnil)) else tf1 (ZERO) (repr (Tnil)))
Prop: tf1 (ZERO) (Node (SUCC (ZERO)) (Tnil) (Tnil)) = plus (ZERO) (if lq (reprNew (Node (ZERO) (Tnil) (Tnil))) (tf1 (ZERO) (Node (SUCC (ZERO)) (Tnil) (Tnil))) then tf1 (ZERO) (Node (SUCC (ZERO)) (Tnil) (Tnil)) else tf1 (ZERO) (repr (Node (ZERO) (Tnil) (Tnil))))
Prop: tf1 (SUCC (ZERO)) (Tnil) = plus (SUCC (ZERO)) (if lq (reprNew (Tnil)) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (repr (Tnil)))
Lemma List
forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
End of Lemma List


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) then tf1 (ZERO) (repr (tree3)) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 446


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) then tf1 (ZERO) (repr (tree3)) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

0 conjecture(s) more...
>>> assert forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))(rank : 0.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))

---------------------------------------
forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro tree3(rank:5.)
=================================================
Progress: 447


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))

---------------------------------------
forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))

0 goal(s) more...

1 conjecture(s) more...
>>> intro tree3(rank : 5.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree3 : tree
---------------------------------------
forall (tree1:tree) (nat1:nat) (tree2:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction nat1(rank:6.)
=================================================
Progress: 448


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree3 : tree
---------------------------------------
forall (tree1:tree) (nat1:nat) (tree2:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))

0 goal(s) more...

1 conjecture(s) more...
>>> induction nat1(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree3 : tree
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) = true -> tf1 (ZERO) (tree1) = plus (ZERO) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:6.)
=================================================
Progress: 449


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree3 : tree
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) = true -> tf1 (ZERO) (tree1) = plus (ZERO) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree3 : tree
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) = true -> tf1 (ZERO) (tree1) = if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree2(rank:7.)
=================================================
Progress: 450


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree3 : tree
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) = true -> tf1 (ZERO) (tree1) = if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2))

1 goal(s) more...

1 conjecture(s) more...
>>> induction tree2(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree3 : tree
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
---------------------------------------
forall (tree1:tree), lq (tf1 (ZERO) (repr (Tnil))) (tf1 (ZERO) (repr (tree3))) = true -> tf1 (ZERO) (tree1) = if lq (reprNew (Tnil)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (Tnil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 451


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree3 : tree
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
---------------------------------------
forall (tree1:tree), lq (tf1 (ZERO) (repr (Tnil))) (tf1 (ZERO) (repr (tree3))) = true -> tf1 (ZERO) (tree1) = if lq (reprNew (Tnil)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (Tnil))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree3 : tree
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
---------------------------------------
forall (tree1:tree), lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (Tnil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7.)
=================================================
Progress: 452


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree3 : tree
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
---------------------------------------
forall (tree1:tree), lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (Tnil))

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree3 : tree
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
---------------------------------------
forall (tree1:tree), tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (Tnil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree1(rank:8.)
=================================================
Progress: 453


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree3 : tree
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
---------------------------------------
forall (tree1:tree), tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (Tnil))

2 goal(s) more...

1 conjecture(s) more...
>>> induction tree1(rank : 8.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree3 : tree
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
tree1 : tree
Base3 : tree1 = Tnil
---------------------------------------
tf1 (ZERO) (Tnil) = if lq (ZERO) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (repr (Tnil))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7.)
=================================================
Progress: 454


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree3 : tree
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
tree1 : tree
Base3 : tree1 = Tnil
---------------------------------------
tf1 (ZERO) (Tnil) = if lq (ZERO) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (repr (Tnil))

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree3 : tree
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : tf1 (ZERO) (tree4) = if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else tf1 (ZERO) (repr (Tnil))
IH2 : tf1 (ZERO) (tree5) = if lq (ZERO) (tf1 (ZERO) (tree5)) then tf1 (ZERO) (tree5) else tf1 (ZERO) (repr (Tnil))
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
---------------------------------------
tf1 (ZERO) (Node (nat2) (tree4) (tree5)) = if lq (ZERO) (tf1 (ZERO) (Node (nat2) (tree4) (tree5))) then tf1 (ZERO) (Node (nat2) (tree4) (tree5)) else tf1 (ZERO) (repr (Tnil))

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 455


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree3 : tree
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : tf1 (ZERO) (tree4) = if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else tf1 (ZERO) (repr (Tnil))
IH2 : tf1 (ZERO) (tree5) = if lq (ZERO) (tf1 (ZERO) (tree5)) then tf1 (ZERO) (tree5) else tf1 (ZERO) (repr (Tnil))
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
---------------------------------------
tf1 (ZERO) (Node (nat2) (tree4) (tree5)) = if lq (ZERO) (tf1 (ZERO) (Node (nat2) (tree4) (tree5))) then tf1 (ZERO) (Node (nat2) (tree4) (tree5)) else tf1 (ZERO) (repr (Tnil))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree3 : tree
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : tf1 (ZERO) (tree4) = if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else tf1 (ZERO) (repr (Tnil))
IH2 : tf1 (ZERO) (tree5) = if lq (ZERO) (tf1 (ZERO) (tree5)) then tf1 (ZERO) (tree5) else tf1 (ZERO) (repr (Tnil))
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
---------------------------------------
if lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) then tf1 (nat2) (tree5) else tf1 (nat2) (tree4) = if lq (ZERO) (if lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) then tf1 (nat2) (tree5) else tf1 (nat2) (tree4)) then tf1 (ZERO) (Node (nat2) (tree4) (tree5)) else tf1 (ZERO) (repr (Tnil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5))(rank:8.)
=================================================
Progress: 456


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree3 : tree
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : tf1 (ZERO) (tree4) = if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else tf1 (ZERO) (repr (Tnil))
IH2 : tf1 (ZERO) (tree5) = if lq (ZERO) (tf1 (ZERO) (tree5)) then tf1 (ZERO) (tree5) else tf1 (ZERO) (repr (Tnil))
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
---------------------------------------
if lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) then tf1 (nat2) (tree5) else tf1 (nat2) (tree4) = if lq (ZERO) (if lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) then tf1 (nat2) (tree5) else tf1 (nat2) (tree4)) then tf1 (ZERO) (Node (nat2) (tree4) (tree5)) else tf1 (ZERO) (repr (Tnil))

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5))(rank : 8.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree3 : tree
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : tf1 (ZERO) (tree4) = if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else tf1 (ZERO) (repr (Tnil))
IH2 : tf1 (ZERO) (tree5) = if lq (ZERO) (tf1 (ZERO) (tree5)) then tf1 (ZERO) (tree5) else tf1 (ZERO) (repr (Tnil))
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
Case1 : lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) = true
---------------------------------------
tf1 (nat2) (tree5) = if lq (ZERO) (tf1 (nat2) (tree5)) then tf1 (ZERO) (Node (nat2) (tree4) (tree5)) else tf1 (ZERO) (repr (Tnil))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case lq (ZERO) (tf1 (nat2) (tree5))(rank:9.)
=================================================
Progress: 457


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree3 : tree
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : tf1 (ZERO) (tree4) = if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else tf1 (ZERO) (repr (Tnil))
IH2 : tf1 (ZERO) (tree5) = if lq (ZERO) (tf1 (ZERO) (tree5)) then tf1 (ZERO) (tree5) else tf1 (ZERO) (repr (Tnil))
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
Case1 : lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) = true
---------------------------------------
tf1 (nat2) (tree5) = if lq (ZERO) (tf1 (nat2) (tree5)) then tf1 (ZERO) (Node (nat2) (tree4) (tree5)) else tf1 (ZERO) (repr (Tnil))

3 goal(s) more...

1 conjecture(s) more...
>>> case lq (ZERO) (tf1 (nat2) (tree5))(rank : 9.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree3 : tree
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : tf1 (ZERO) (tree4) = if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else tf1 (ZERO) (repr (Tnil))
IH2 : tf1 (ZERO) (tree5) = if lq (ZERO) (tf1 (ZERO) (tree5)) then tf1 (ZERO) (tree5) else tf1 (ZERO) (repr (Tnil))
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
Case1 : lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) = true
Case2 : lq (ZERO) (tf1 (nat2) (tree5)) = true
---------------------------------------
tf1 (nat2) (tree5) = if lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) then tf1 (nat2) (tree5) else tf1 (nat2) (tree4)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:9.)
=================================================
Progress: 458


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree3 : tree
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : tf1 (ZERO) (tree4) = if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else tf1 (ZERO) (repr (Tnil))
IH2 : tf1 (ZERO) (tree5) = if lq (ZERO) (tf1 (ZERO) (tree5)) then tf1 (ZERO) (tree5) else tf1 (ZERO) (repr (Tnil))
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
Case1 : lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) = true
Case2 : lq (ZERO) (tf1 (nat2) (tree5)) = true
---------------------------------------
tf1 (nat2) (tree5) = if lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) then tf1 (nat2) (tree5) else tf1 (nat2) (tree4)

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 9.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree3 : tree
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : tf1 (ZERO) (tree4) = if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else tf1 (ZERO) (repr (Tnil))
IH2 : tf1 (ZERO) (tree5) = if lq (ZERO) (tf1 (ZERO) (tree5)) then tf1 (ZERO) (tree5) else tf1 (ZERO) (repr (Tnil))
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
Case1 : lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) = true
Case2 : lq (ZERO) (tf1 (nat2) (tree5)) = true
---------------------------------------
tf1 (nat2) (tree5) = if true then tf1 (nat2) (tree5) else tf1 (nat2) (tree4)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:8.)
=================================================
Progress: 459


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree3 : tree
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : tf1 (ZERO) (tree4) = if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else tf1 (ZERO) (repr (Tnil))
IH2 : tf1 (ZERO) (tree5) = if lq (ZERO) (tf1 (ZERO) (tree5)) then tf1 (ZERO) (tree5) else tf1 (ZERO) (repr (Tnil))
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
Case1 : lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) = true
Case2 : lq (ZERO) (tf1 (nat2) (tree5)) = true
---------------------------------------
tf1 (nat2) (tree5) = if true then tf1 (nat2) (tree5) else tf1 (nat2) (tree4)

4 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 8.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree3 : tree
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : tf1 (ZERO) (tree4) = if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else tf1 (ZERO) (repr (Tnil))
IH2 : tf1 (ZERO) (tree5) = if lq (ZERO) (tf1 (ZERO) (tree5)) then tf1 (ZERO) (tree5) else tf1 (ZERO) (repr (Tnil))
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
Case1 : lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) = true
Case2 : lq (ZERO) (tf1 (nat2) (tree5)) = false
---------------------------------------
tf1 (nat2) (tree5) = ZERO

3 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 0
previous tactics
simpl in goal
case lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5))
case lq (ZERO) (tf1 (nat2) (tree5))
rewrite Case1 in goal at 0
reflexivity
validate generalize_common_subterm_goal
Prop: tf1 (SUCC (ZERO)) (Node (ZERO) (Node (SUCC (ZERO)) (Tnil) (Tnil)) (Tnil)) = ZERO
Prop: tf1 (ZERO) (Tnil) = ZERO
Prop: tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil)) = ZERO
Lemma List
forall (nat1:nat) (tree1:tree), lq (ZERO) (tf1 (nat1) (tree1)) = false -> tf1 (nat1) (tree1) = ZERO
End of Lemma List


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree3 : tree
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : tf1 (ZERO) (tree4) = if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else tf1 (ZERO) (repr (Tnil))
IH2 : tf1 (ZERO) (tree5) = if lq (ZERO) (tf1 (ZERO) (tree5)) then tf1 (ZERO) (tree5) else tf1 (ZERO) (repr (Tnil))
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
Case1 : lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) = true
Case2 : lq (ZERO) (tf1 (nat2) (tree5)) = false
---------------------------------------
tf1 (nat2) (tree5) = ZERO

3 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 460


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else tf1 (ZERO) (repr (tree2)))
tree3 : tree
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : tf1 (ZERO) (tree4) = if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else tf1 (ZERO) (repr (Tnil))
IH2 : tf1 (ZERO) (tree5) = if lq (ZERO) (tf1 (ZERO) (tree5)) then tf1 (ZERO) (tree5) else tf1 (ZERO) (repr (Tnil))
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
Case1 : lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) = true
Case2 : lq (ZERO) (tf1 (nat2) (tree5)) = false
---------------------------------------
tf1 (nat2) (tree5) = ZERO

3 goal(s) more...

1 conjecture(s) more...
>>> assert forall (nat1:nat) (tree1:tree), lq (ZERO) (tf1 (nat1) (tree1)) = false -> tf1 (nat1) (tree1) = ZERO(rank : 0.)


1st goal of : forall (nat1:nat) (tree1:tree), lq (ZERO) (tf1 (nat1) (tree1)) = false -> tf1 (nat1) (tree1) = ZERO

---------------------------------------
forall (nat1:nat) (tree1:tree), lq (ZERO) (tf1 (nat1) (tree1)) = false -> tf1 (nat1) (tree1) = ZERO

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat1(rank:7.)
=================================================
Progress: 461


1st goal of : forall (nat1:nat) (tree1:tree), lq (ZERO) (tf1 (nat1) (tree1)) = false -> tf1 (nat1) (tree1) = ZERO

---------------------------------------
forall (nat1:nat) (tree1:tree), lq (ZERO) (tf1 (nat1) (tree1)) = false -> tf1 (nat1) (tree1) = ZERO

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat1(rank : 7.)


1st goal of : forall (nat1:nat) (tree1:tree), lq (ZERO) (tf1 (nat1) (tree1)) = false -> tf1 (nat1) (tree1) = ZERO
nat1 : nat
---------------------------------------
forall (tree1:tree), lq (ZERO) (tf1 (nat1) (tree1)) = false -> tf1 (nat1) (tree1) = ZERO

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction tree1(rank:8.)
=================================================
Progress: 462


1st goal of : forall (nat1:nat) (tree1:tree), lq (ZERO) (tf1 (nat1) (tree1)) = false -> tf1 (nat1) (tree1) = ZERO
nat1 : nat
---------------------------------------
forall (tree1:tree), lq (ZERO) (tf1 (nat1) (tree1)) = false -> tf1 (nat1) (tree1) = ZERO

0 goal(s) more...

2 conjecture(s) more...
>>> induction tree1(rank : 8.)


1st goal of : forall (nat1:nat) (tree1:tree), lq (ZERO) (tf1 (nat1) (tree1)) = false -> tf1 (nat1) (tree1) = ZERO
nat1 : nat
tree1 : tree
Base1 : tree1 = Tnil
---------------------------------------
lq (ZERO) (tf1 (nat1) (Tnil)) = false -> tf1 (nat1) (Tnil) = ZERO

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 463


1st goal of : forall (nat1:nat) (tree1:tree), lq (ZERO) (tf1 (nat1) (tree1)) = false -> tf1 (nat1) (tree1) = ZERO
nat1 : nat
tree1 : tree
Base1 : tree1 = Tnil
---------------------------------------
lq (ZERO) (tf1 (nat1) (Tnil)) = false -> tf1 (nat1) (Tnil) = ZERO

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (nat1:nat) (tree1:tree), lq (ZERO) (tf1 (nat1) (tree1)) = false -> tf1 (nat1) (tree1) = ZERO
nat1 : nat
tree1 : tree
Base1 : tree1 = Tnil
---------------------------------------
lq (ZERO) (nat1) = false -> nat1 = ZERO

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:8.)
=================================================
Progress: 464


1st goal of : forall (nat1:nat) (tree1:tree), lq (ZERO) (tf1 (nat1) (tree1)) = false -> tf1 (nat1) (tree1) = ZERO
nat1 : nat
tree1 : tree
Base1 : tree1 = Tnil
---------------------------------------
lq (ZERO) (nat1) = false -> nat1 = ZERO

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 8.)


1st goal of : forall (nat1:nat) (tree1:tree), lq (ZERO) (tf1 (nat1) (tree1)) = false -> tf1 (nat1) (tree1) = ZERO
nat1 : nat
tree1 : tree
Base1 : tree1 = Tnil
Cond1 : lq (ZERO) (nat1) = false
---------------------------------------
nat1 = ZERO

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
validate generalize_common_subterm_goal
Prop: ZERO = ZERO
Prop: ZERO = ZERO
Prop: ZERO = ZERO
=================================================
Progress: 465


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) then tf1 (ZERO) (repr (tree3)) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH2 in goal at 2(rank : 12.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) then reprNew (tree3) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
rewrite <- IH2 in goal at 0
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH1 in goal at 0
rewrite IH2 in goal at 2
Prop: tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil)) = plus (ZERO) (if lq (reprNew (Tnil)) (tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil))) then reprNew (Node (ZERO) (Tnil) (Tnil)) else reprNew (Tnil))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (if lq (reprNew (Tnil)) (tf1 (ZERO) (Tnil)) then reprNew (Tnil) else reprNew (Tnil))
Prop: tf1 (ZERO) (Node (SUCC (ZERO)) (Node (ZERO) (Tnil) (Tnil)) (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Tnil) (Tnil)) (Tnil))) = plus (ZERO) (if lq (reprNew (Tnil)) (tf1 (ZERO) (Node (SUCC (ZERO)) (Node (ZERO) (Tnil) (Tnil)) (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Tnil) (Tnil)) (Tnil)))) then reprNew (Tnil) else reprNew (Tnil))
validate generalize_common_subterm_goal
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (if lq (reprNew (Tnil)) (tf1 (ZERO) (Tnil)) then reprNew (Node (ZERO) (Tnil) (Node (SUCC (ZERO)) (Node (ZERO) (Tnil) (Tnil)) (Tnil))) else reprNew (Tnil))
Prop: tf1 (SUCC (ZERO)) (Tnil) = plus (SUCC (ZERO)) (if lq (reprNew (Node (ZERO) (Tnil) (Tnil))) (tf1 (ZERO) (Tnil)) then reprNew (Node (SUCC (ZERO)) (Tnil) (Tnil)) else reprNew (Node (ZERO) (Tnil) (Tnil)))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (if lq (reprNew (Tnil)) (tf1 (ZERO) (Tnil)) then reprNew (Node (ZERO) (Tnil) (Tnil)) else reprNew (Tnil))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
rewrite <- IH2 in goal at 0
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH1 in goal at 0
Prop: tf1 (SUCC (ZERO)) (Node (ZERO) (Tnil) (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Tnil) (Tnil)) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Tnil))))) = plus (SUCC (ZERO)) (if lq (reprNew (Tnil)) (tf1 (ZERO) (Node (ZERO) (Tnil) (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Tnil) (Tnil)) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Tnil)))))) then tf1 (ZERO) (Node (ZERO) (Tnil) (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Tnil) (Tnil)) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Tnil))))) else reprNew (Tnil))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (if lq (reprNew (Tnil)) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else reprNew (Tnil))
Prop: tf1 (SUCC (ZERO)) (Tnil) = plus (SUCC (ZERO)) (if lq (reprNew (Tnil)) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else reprNew (Tnil))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
rewrite <- IH2 in goal at 0
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (if lq (reprNew (Node (ZERO) (Tnil) (Tnil))) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (repr (Node (ZERO) (Tnil) (Tnil))))
Prop: tf1 (ZERO) (Node (ZERO) (Node (ZERO) (Tnil) (Node (ZERO) (Node (ZERO) (Tnil) (Node (SUCC (ZERO)) (Tnil) (Node (ZERO) (Tnil) (Tnil)))) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Tnil))))) (Node (SUCC (ZERO)) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Tnil)))) (Node (SUCC (ZERO)) (Tnil) (Tnil)))) = plus (ZERO) (if lq (reprNew (Tnil)) (tf1 (ZERO) (Node (ZERO) (Node (ZERO) (Tnil) (Node (ZERO) (Node (ZERO) (Tnil) (Node (SUCC (ZERO)) (Tnil) (Node (ZERO) (Tnil) (Tnil)))) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Tnil))))) (Node (SUCC (ZERO)) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Tnil)))) (Node (SUCC (ZERO)) (Tnil) (Tnil))))) then tf1 (ZERO) (Node (ZERO) (Node (ZERO) (Tnil) (Node (ZERO) (Node (ZERO) (Tnil) (Node (SUCC (ZERO)) (Tnil) (Node (ZERO) (Tnil) (Tnil)))) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Tnil))))) (Node (SUCC (ZERO)) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Tnil)))) (Node (SUCC (ZERO)) (Tnil) (Tnil)))) else tf1 (ZERO) (repr (Tnil)))
Prop: tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil)) = plus (ZERO) (if lq (reprNew (Tnil)) (tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil))) then tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil)) else tf1 (ZERO) (repr (Tnil)))
Lemma List
forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
End of Lemma List


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) then reprNew (tree3) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 466


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) then reprNew (tree3) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
>>> assert forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))(rank : 0.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))

---------------------------------------
forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction nat1(rank:6.)
=================================================
Progress: 467


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))

---------------------------------------
forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))

0 goal(s) more...

1 conjecture(s) more...
>>> induction nat1(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree) (tree3:tree), lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) = true -> tf1 (ZERO) (tree1) = plus (ZERO) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:6.)
=================================================
Progress: 468


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree) (tree3:tree), lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) = true -> tf1 (ZERO) (tree1) = plus (ZERO) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree) (tree3:tree), lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) = true -> tf1 (ZERO) (tree1) = if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree2(rank:7.)
=================================================
Progress: 469


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree) (tree3:tree), lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) = true -> tf1 (ZERO) (tree1) = if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2)

1 goal(s) more...

1 conjecture(s) more...
>>> induction tree2(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
---------------------------------------
forall (tree1:tree) (tree3:tree), lq (tf1 (ZERO) (repr (Tnil))) (tf1 (ZERO) (repr (tree3))) = true -> tf1 (ZERO) (tree1) = if lq (reprNew (Tnil)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (Tnil)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 470


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
---------------------------------------
forall (tree1:tree) (tree3:tree), lq (tf1 (ZERO) (repr (Tnil))) (tf1 (ZERO) (repr (tree3))) = true -> tf1 (ZERO) (tree1) = if lq (reprNew (Tnil)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (Tnil)

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
---------------------------------------
forall (tree1:tree) (tree3:tree), lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (Tnil)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree3(rank:8.)
=================================================
Progress: 471


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
---------------------------------------
forall (tree1:tree) (tree3:tree), lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (Tnil)

2 goal(s) more...

1 conjecture(s) more...
>>> induction tree3(rank : 8.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
tree3 : tree
Base3 : tree3 = Tnil
---------------------------------------
forall (tree1:tree), lq (ZERO) (tf1 (ZERO) (repr (Tnil))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then reprNew (Tnil) else reprNew (Tnil)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:7.)
=================================================
Progress: 472


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
tree3 : tree
Base3 : tree3 = Tnil
---------------------------------------
forall (tree1:tree), lq (ZERO) (tf1 (ZERO) (repr (Tnil))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then reprNew (Tnil) else reprNew (Tnil)

3 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
tree3 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : forall (tree1:tree), lq (ZERO) (tf1 (ZERO) (repr (tree4))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then reprNew (tree4) else reprNew (Tnil)
IH2 : forall (tree1:tree), lq (ZERO) (tf1 (ZERO) (repr (tree5))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then reprNew (tree5) else reprNew (Tnil)
Inductive1 : tree3 = Node (nat2) (tree4) (tree5)
---------------------------------------
forall (tree1:tree), lq (ZERO) (tf1 (ZERO) (repr (Node (nat2) (tree4) (tree5)))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then reprNew (Node (nat2) (tree4) (tree5)) else reprNew (Tnil)

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 473


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
tree3 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : forall (tree1:tree), lq (ZERO) (tf1 (ZERO) (repr (tree4))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then reprNew (tree4) else reprNew (Tnil)
IH2 : forall (tree1:tree), lq (ZERO) (tf1 (ZERO) (repr (tree5))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then reprNew (tree5) else reprNew (Tnil)
Inductive1 : tree3 = Node (nat2) (tree4) (tree5)
---------------------------------------
forall (tree1:tree), lq (ZERO) (tf1 (ZERO) (repr (Node (nat2) (tree4) (tree5)))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then reprNew (Node (nat2) (tree4) (tree5)) else reprNew (Tnil)

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
tree3 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : forall (tree1:tree), lq (ZERO) (tf1 (ZERO) (repr (tree4))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then reprNew (tree4) else reprNew (Tnil)
IH2 : forall (tree1:tree), lq (ZERO) (tf1 (ZERO) (repr (tree5))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then reprNew (tree5) else reprNew (Tnil)
Inductive1 : tree3 = Node (nat2) (tree4) (tree5)
---------------------------------------
forall (tree1:tree), lq (ZERO) (if lq (tf1 (nat2) (repr (tree4))) (tf1 (nat2) (repr (tree5))) then tf1 (nat2) (repr (tree5)) else tf1 (nat2) (repr (tree4))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then reprNew (Node (nat2) (tree4) (tree5)) else reprNew (Tnil)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7.)
=================================================
Progress: 474


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
tree3 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : forall (tree1:tree), lq (ZERO) (tf1 (ZERO) (repr (tree4))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then reprNew (tree4) else reprNew (Tnil)
IH2 : forall (tree1:tree), lq (ZERO) (tf1 (ZERO) (repr (tree5))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then reprNew (tree5) else reprNew (Tnil)
Inductive1 : tree3 = Node (nat2) (tree4) (tree5)
---------------------------------------
forall (tree1:tree), lq (ZERO) (if lq (tf1 (nat2) (repr (tree4))) (tf1 (nat2) (repr (tree5))) then tf1 (nat2) (repr (tree5)) else tf1 (nat2) (repr (tree4))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then reprNew (Node (nat2) (tree4) (tree5)) else reprNew (Tnil)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
tree3 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : forall (tree1:tree), lq (ZERO) (tf1 (ZERO) (repr (tree4))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then reprNew (tree4) else reprNew (Tnil)
IH2 : forall (tree1:tree), lq (ZERO) (tf1 (ZERO) (repr (tree5))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then reprNew (tree5) else reprNew (Tnil)
Inductive1 : tree3 = Node (nat2) (tree4) (tree5)
Cond1 : lq (ZERO) (if lq (tf1 (nat2) (repr (tree4))) (tf1 (nat2) (repr (tree5))) then tf1 (nat2) (repr (tree5)) else tf1 (nat2) (repr (tree4))) = true
---------------------------------------
forall (tree1:tree), tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then reprNew (Node (nat2) (tree4) (tree5)) else reprNew (Tnil)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree1(rank:8.)
=================================================
Progress: 475


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
tree3 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : forall (tree1:tree), lq (ZERO) (tf1 (ZERO) (repr (tree4))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then reprNew (tree4) else reprNew (Tnil)
IH2 : forall (tree1:tree), lq (ZERO) (tf1 (ZERO) (repr (tree5))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then reprNew (tree5) else reprNew (Tnil)
Inductive1 : tree3 = Node (nat2) (tree4) (tree5)
Cond1 : lq (ZERO) (if lq (tf1 (nat2) (repr (tree4))) (tf1 (nat2) (repr (tree5))) then tf1 (nat2) (repr (tree5)) else tf1 (nat2) (repr (tree4))) = true
---------------------------------------
forall (tree1:tree), tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then reprNew (Node (nat2) (tree4) (tree5)) else reprNew (Tnil)

2 goal(s) more...

1 conjecture(s) more...
>>> induction tree1(rank : 8.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
tree3 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : forall (tree1:tree), lq (ZERO) (tf1 (ZERO) (repr (tree4))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then reprNew (tree4) else reprNew (Tnil)
IH2 : forall (tree1:tree), lq (ZERO) (tf1 (ZERO) (repr (tree5))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then reprNew (tree5) else reprNew (Tnil)
Inductive1 : tree3 = Node (nat2) (tree4) (tree5)
Cond1 : lq (ZERO) (if lq (tf1 (nat2) (repr (tree4))) (tf1 (nat2) (repr (tree5))) then tf1 (nat2) (repr (tree5)) else tf1 (nat2) (repr (tree4))) = true
tree1 : tree
Base3 : tree1 = Tnil
---------------------------------------
tf1 (ZERO) (Tnil) = if lq (ZERO) (tf1 (ZERO) (Tnil)) then reprNew (Node (nat2) (tree4) (tree5)) else reprNew (Tnil)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7.)
=================================================
Progress: 476


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
tree3 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : forall (tree1:tree), lq (ZERO) (tf1 (ZERO) (repr (tree4))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then reprNew (tree4) else reprNew (Tnil)
IH2 : forall (tree1:tree), lq (ZERO) (tf1 (ZERO) (repr (tree5))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then reprNew (tree5) else reprNew (Tnil)
Inductive1 : tree3 = Node (nat2) (tree4) (tree5)
Cond1 : lq (ZERO) (if lq (tf1 (nat2) (repr (tree4))) (tf1 (nat2) (repr (tree5))) then tf1 (nat2) (repr (tree5)) else tf1 (nat2) (repr (tree4))) = true
tree1 : tree
Base3 : tree1 = Tnil
---------------------------------------
tf1 (ZERO) (Tnil) = if lq (ZERO) (tf1 (ZERO) (Tnil)) then reprNew (Node (nat2) (tree4) (tree5)) else reprNew (Tnil)

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
tree3 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : forall (tree1:tree), lq (ZERO) (tf1 (ZERO) (repr (tree4))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then reprNew (tree4) else reprNew (Tnil)
IH2 : forall (tree1:tree), lq (ZERO) (tf1 (ZERO) (repr (tree5))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then reprNew (tree5) else reprNew (Tnil)
Inductive1 : tree3 = Node (nat2) (tree4) (tree5)
Cond1 : lq (ZERO) (if lq (tf1 (nat2) (repr (tree4))) (tf1 (nat2) (repr (tree5))) then tf1 (nat2) (repr (tree5)) else tf1 (nat2) (repr (tree4))) = true
tree1 : tree
nat3 : nat
tree6 : tree
tree7 : tree
IH3 : tf1 (ZERO) (tree6) = if lq (ZERO) (tf1 (ZERO) (tree6)) then reprNew (Node (nat2) (tree4) (tree5)) else reprNew (Tnil)
IH4 : tf1 (ZERO) (tree7) = if lq (ZERO) (tf1 (ZERO) (tree7)) then reprNew (Node (nat2) (tree4) (tree5)) else reprNew (Tnil)
Inductive2 : tree1 = Node (nat3) (tree6) (tree7)
---------------------------------------
tf1 (ZERO) (Node (nat3) (tree6) (tree7)) = if lq (ZERO) (tf1 (ZERO) (Node (nat3) (tree6) (tree7))) then reprNew (Node (nat2) (tree4) (tree5)) else reprNew (Tnil)

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 477


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
tree3 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : forall (tree1:tree), lq (ZERO) (tf1 (ZERO) (repr (tree4))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then reprNew (tree4) else reprNew (Tnil)
IH2 : forall (tree1:tree), lq (ZERO) (tf1 (ZERO) (repr (tree5))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then reprNew (tree5) else reprNew (Tnil)
Inductive1 : tree3 = Node (nat2) (tree4) (tree5)
Cond1 : lq (ZERO) (if lq (tf1 (nat2) (repr (tree4))) (tf1 (nat2) (repr (tree5))) then tf1 (nat2) (repr (tree5)) else tf1 (nat2) (repr (tree4))) = true
tree1 : tree
nat3 : nat
tree6 : tree
tree7 : tree
IH3 : tf1 (ZERO) (tree6) = if lq (ZERO) (tf1 (ZERO) (tree6)) then reprNew (Node (nat2) (tree4) (tree5)) else reprNew (Tnil)
IH4 : tf1 (ZERO) (tree7) = if lq (ZERO) (tf1 (ZERO) (tree7)) then reprNew (Node (nat2) (tree4) (tree5)) else reprNew (Tnil)
Inductive2 : tree1 = Node (nat3) (tree6) (tree7)
---------------------------------------
tf1 (ZERO) (Node (nat3) (tree6) (tree7)) = if lq (ZERO) (tf1 (ZERO) (Node (nat3) (tree6) (tree7))) then reprNew (Node (nat2) (tree4) (tree5)) else reprNew (Tnil)

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
tree3 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : forall (tree1:tree), lq (ZERO) (tf1 (ZERO) (repr (tree4))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then reprNew (tree4) else reprNew (Tnil)
IH2 : forall (tree1:tree), lq (ZERO) (tf1 (ZERO) (repr (tree5))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then reprNew (tree5) else reprNew (Tnil)
Inductive1 : tree3 = Node (nat2) (tree4) (tree5)
Cond1 : lq (ZERO) (if lq (tf1 (nat2) (repr (tree4))) (tf1 (nat2) (repr (tree5))) then tf1 (nat2) (repr (tree5)) else tf1 (nat2) (repr (tree4))) = true
tree1 : tree
nat3 : nat
tree6 : tree
tree7 : tree
IH3 : tf1 (ZERO) (tree6) = if lq (ZERO) (tf1 (ZERO) (tree6)) then reprNew (Node (nat2) (tree4) (tree5)) else reprNew (Tnil)
IH4 : tf1 (ZERO) (tree7) = if lq (ZERO) (tf1 (ZERO) (tree7)) then reprNew (Node (nat2) (tree4) (tree5)) else reprNew (Tnil)
Inductive2 : tree1 = Node (nat3) (tree6) (tree7)
---------------------------------------
if lq (tf1 (nat3) (tree6)) (tf1 (nat3) (tree7)) then tf1 (nat3) (tree7) else tf1 (nat3) (tree6) = if lq (ZERO) (if lq (tf1 (nat3) (tree6)) (tf1 (nat3) (tree7)) then tf1 (nat3) (tree7) else tf1 (nat3) (tree6)) then reprNew (Node (nat2) (tree4) (tree5)) else reprNew (Tnil)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case lq (tf1 (nat3) (tree6)) (tf1 (nat3) (tree7))(rank:8.)
=================================================
Progress: 478


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
tree3 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : forall (tree1:tree), lq (ZERO) (tf1 (ZERO) (repr (tree4))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then reprNew (tree4) else reprNew (Tnil)
IH2 : forall (tree1:tree), lq (ZERO) (tf1 (ZERO) (repr (tree5))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then reprNew (tree5) else reprNew (Tnil)
Inductive1 : tree3 = Node (nat2) (tree4) (tree5)
Cond1 : lq (ZERO) (if lq (tf1 (nat2) (repr (tree4))) (tf1 (nat2) (repr (tree5))) then tf1 (nat2) (repr (tree5)) else tf1 (nat2) (repr (tree4))) = true
tree1 : tree
nat3 : nat
tree6 : tree
tree7 : tree
IH3 : tf1 (ZERO) (tree6) = if lq (ZERO) (tf1 (ZERO) (tree6)) then reprNew (Node (nat2) (tree4) (tree5)) else reprNew (Tnil)
IH4 : tf1 (ZERO) (tree7) = if lq (ZERO) (tf1 (ZERO) (tree7)) then reprNew (Node (nat2) (tree4) (tree5)) else reprNew (Tnil)
Inductive2 : tree1 = Node (nat3) (tree6) (tree7)
---------------------------------------
if lq (tf1 (nat3) (tree6)) (tf1 (nat3) (tree7)) then tf1 (nat3) (tree7) else tf1 (nat3) (tree6) = if lq (ZERO) (if lq (tf1 (nat3) (tree6)) (tf1 (nat3) (tree7)) then tf1 (nat3) (tree7) else tf1 (nat3) (tree6)) then reprNew (Node (nat2) (tree4) (tree5)) else reprNew (Tnil)

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (tf1 (nat3) (tree6)) (tf1 (nat3) (tree7))(rank : 8.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
tree3 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : forall (tree1:tree), lq (ZERO) (tf1 (ZERO) (repr (tree4))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then reprNew (tree4) else reprNew (Tnil)
IH2 : forall (tree1:tree), lq (ZERO) (tf1 (ZERO) (repr (tree5))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then reprNew (tree5) else reprNew (Tnil)
Inductive1 : tree3 = Node (nat2) (tree4) (tree5)
Cond1 : lq (ZERO) (if lq (tf1 (nat2) (repr (tree4))) (tf1 (nat2) (repr (tree5))) then tf1 (nat2) (repr (tree5)) else tf1 (nat2) (repr (tree4))) = true
tree1 : tree
nat3 : nat
tree6 : tree
tree7 : tree
IH3 : tf1 (ZERO) (tree6) = if lq (ZERO) (tf1 (ZERO) (tree6)) then reprNew (Node (nat2) (tree4) (tree5)) else reprNew (Tnil)
IH4 : tf1 (ZERO) (tree7) = if lq (ZERO) (tf1 (ZERO) (tree7)) then reprNew (Node (nat2) (tree4) (tree5)) else reprNew (Tnil)
Inductive2 : tree1 = Node (nat3) (tree6) (tree7)
Case1 : lq (tf1 (nat3) (tree6)) (tf1 (nat3) (tree7)) = true
---------------------------------------
tf1 (nat3) (tree7) = if lq (ZERO) (tf1 (nat3) (tree7)) then reprNew (Node (nat2) (tree4) (tree5)) else reprNew (Tnil)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case lq (ZERO) (tf1 (nat3) (tree7))(rank:9.)
=================================================
Progress: 479


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
tree3 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : forall (tree1:tree), lq (ZERO) (tf1 (ZERO) (repr (tree4))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then reprNew (tree4) else reprNew (Tnil)
IH2 : forall (tree1:tree), lq (ZERO) (tf1 (ZERO) (repr (tree5))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then reprNew (tree5) else reprNew (Tnil)
Inductive1 : tree3 = Node (nat2) (tree4) (tree5)
Cond1 : lq (ZERO) (if lq (tf1 (nat2) (repr (tree4))) (tf1 (nat2) (repr (tree5))) then tf1 (nat2) (repr (tree5)) else tf1 (nat2) (repr (tree4))) = true
tree1 : tree
nat3 : nat
tree6 : tree
tree7 : tree
IH3 : tf1 (ZERO) (tree6) = if lq (ZERO) (tf1 (ZERO) (tree6)) then reprNew (Node (nat2) (tree4) (tree5)) else reprNew (Tnil)
IH4 : tf1 (ZERO) (tree7) = if lq (ZERO) (tf1 (ZERO) (tree7)) then reprNew (Node (nat2) (tree4) (tree5)) else reprNew (Tnil)
Inductive2 : tree1 = Node (nat3) (tree6) (tree7)
Case1 : lq (tf1 (nat3) (tree6)) (tf1 (nat3) (tree7)) = true
---------------------------------------
tf1 (nat3) (tree7) = if lq (ZERO) (tf1 (nat3) (tree7)) then reprNew (Node (nat2) (tree4) (tree5)) else reprNew (Tnil)

3 goal(s) more...

1 conjecture(s) more...
>>> case lq (ZERO) (tf1 (nat3) (tree7))(rank : 9.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
tree3 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : forall (tree1:tree), lq (ZERO) (tf1 (ZERO) (repr (tree4))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then reprNew (tree4) else reprNew (Tnil)
IH2 : forall (tree1:tree), lq (ZERO) (tf1 (ZERO) (repr (tree5))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then reprNew (tree5) else reprNew (Tnil)
Inductive1 : tree3 = Node (nat2) (tree4) (tree5)
Cond1 : lq (ZERO) (if lq (tf1 (nat2) (repr (tree4))) (tf1 (nat2) (repr (tree5))) then tf1 (nat2) (repr (tree5)) else tf1 (nat2) (repr (tree4))) = true
tree1 : tree
nat3 : nat
tree6 : tree
tree7 : tree
IH3 : tf1 (ZERO) (tree6) = if lq (ZERO) (tf1 (ZERO) (tree6)) then reprNew (Node (nat2) (tree4) (tree5)) else reprNew (Tnil)
IH4 : tf1 (ZERO) (tree7) = if lq (ZERO) (tf1 (ZERO) (tree7)) then reprNew (Node (nat2) (tree4) (tree5)) else reprNew (Tnil)
Inductive2 : tree1 = Node (nat3) (tree6) (tree7)
Case1 : lq (tf1 (nat3) (tree6)) (tf1 (nat3) (tree7)) = true
Case2 : lq (ZERO) (tf1 (nat3) (tree7)) = true
---------------------------------------
tf1 (nat3) (tree7) = plus (nat2) (if lq (reprNew (tree4)) (reprNew (tree5)) then reprNew (tree5) else reprNew (tree4))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case lq (reprNew (tree4)) (reprNew (tree5))(rank:10.)
=================================================
Progress: 480


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
tree3 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : forall (tree1:tree), lq (ZERO) (tf1 (ZERO) (repr (tree4))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then reprNew (tree4) else reprNew (Tnil)
IH2 : forall (tree1:tree), lq (ZERO) (tf1 (ZERO) (repr (tree5))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then reprNew (tree5) else reprNew (Tnil)
Inductive1 : tree3 = Node (nat2) (tree4) (tree5)
Cond1 : lq (ZERO) (if lq (tf1 (nat2) (repr (tree4))) (tf1 (nat2) (repr (tree5))) then tf1 (nat2) (repr (tree5)) else tf1 (nat2) (repr (tree4))) = true
tree1 : tree
nat3 : nat
tree6 : tree
tree7 : tree
IH3 : tf1 (ZERO) (tree6) = if lq (ZERO) (tf1 (ZERO) (tree6)) then reprNew (Node (nat2) (tree4) (tree5)) else reprNew (Tnil)
IH4 : tf1 (ZERO) (tree7) = if lq (ZERO) (tf1 (ZERO) (tree7)) then reprNew (Node (nat2) (tree4) (tree5)) else reprNew (Tnil)
Inductive2 : tree1 = Node (nat3) (tree6) (tree7)
Case1 : lq (tf1 (nat3) (tree6)) (tf1 (nat3) (tree7)) = true
Case2 : lq (ZERO) (tf1 (nat3) (tree7)) = true
---------------------------------------
tf1 (nat3) (tree7) = plus (nat2) (if lq (reprNew (tree4)) (reprNew (tree5)) then reprNew (tree5) else reprNew (tree4))

4 goal(s) more...

1 conjecture(s) more...
>>> case lq (reprNew (tree4)) (reprNew (tree5))(rank : 10.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (tree1)) then reprNew (tree3) else reprNew (tree2))
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
tree3 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : forall (tree1:tree), lq (ZERO) (tf1 (ZERO) (repr (tree4))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then reprNew (tree4) else reprNew (Tnil)
IH2 : forall (tree1:tree), lq (ZERO) (tf1 (ZERO) (repr (tree5))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then reprNew (tree5) else reprNew (Tnil)
Inductive1 : tree3 = Node (nat2) (tree4) (tree5)
Cond1 : lq (ZERO) (if lq (tf1 (nat2) (repr (tree4))) (tf1 (nat2) (repr (tree5))) then tf1 (nat2) (repr (tree5)) else tf1 (nat2) (repr (tree4))) = true
tree1 : tree
nat3 : nat
tree6 : tree
tree7 : tree
IH3 : tf1 (ZERO) (tree6) = if lq (ZERO) (tf1 (ZERO) (tree6)) then reprNew (Node (nat2) (tree4) (tree5)) else reprNew (Tnil)
IH4 : tf1 (ZERO) (tree7) = if lq (ZERO) (tf1 (ZERO) (tree7)) then reprNew (Node (nat2) (tree4) (tree5)) else reprNew (Tnil)
Inductive2 : tree1 = Node (nat3) (tree6) (tree7)
Case1 : lq (tf1 (nat3) (tree6)) (tf1 (nat3) (tree7)) = true
Case2 : lq (ZERO) (tf1 (nat3) (tree7)) = true
Case3 : lq (reprNew (tree4)) (reprNew (tree5)) = true
---------------------------------------
tf1 (nat3) (tree7) = plus (nat2) (reprNew (tree5))

5 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (tf1 (nat3) (tree6)) (tf1 (nat3) (tree7))
case lq (ZERO) (tf1 (nat3) (tree7))
case lq (reprNew (tree4)) (reprNew (tree5))
parent
tf1 (nat3) (tree7)
lower
tf1(_, tree7)
upper
_
remove upper
tf1(ZERO(), tree7)
remove lower
tf1(ZERO(), tree7)
remove upper
tf1(nat3, tree7)
remove lower
tf1(nat3, tree7)
remove upper
tf1(nat3, tree7)
remove lower
tf1(nat3, tree7)
remove upper
tf1(nat3, tree7)
remove lower
tf1(nat3, tree7)
validate generalize_common_subterm_goal
Prop: tf1 (SUCC (ZERO)) (Node (ZERO) (Tnil) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil)) (Node (SUCC (ZERO)) (Node (ZERO) (Tnil) (Tnil)) (Node (SUCC (SUCC (SUCC (SUCC (ZERO))))) (Tnil) (Tnil))))) = plus (SUCC (ZERO)) (reprNew (Tnil))
Prop: tf1 (ZERO) (Tnil) = plus (SUCC (ZERO)) (reprNew (Node (ZERO) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil)) (Node (SUCC (ZERO)) (Node (ZERO) (Tnil) (Tnil)) (Tnil))) (Node (ZERO) (Tnil) (Tnil))))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (reprNew (Tnil))
asdf
=================================================
Progress: 481


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) then reprNew (tree3) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 12.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then reprNew (tree3) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case lq (reprNew (tree2)) (reprNew (tree3))(rank:5.)
=================================================
Progress: 482


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then reprNew (tree3) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
>>> case lq (reprNew (tree2)) (reprNew (tree3))(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- IH2 in goal at 0(rank:5.)
=================================================
Progress: 483


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
rewrite <- IH2 in goal at 1
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH1 in goal at 0
rewrite IH2 in goal at 0
case lq (reprNew (tree2)) (reprNew (tree3))
rewrite <- IH2 in goal at 0
Prop: tf1 (SUCC (ZERO)) (Tnil) = plus (SUCC (ZERO)) (tf1 (ZERO) (Tnil))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (tf1 (ZERO) (Tnil))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (tf1 (ZERO) (Tnil))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
rewrite <- IH2 in goal at 1
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH1 in goal at 0
rewrite IH2 in goal at 0
case lq (reprNew (tree2)) (reprNew (tree3))
validate generalize_common_subterm_goal
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (reprNew (Tnil))
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (reprNew (Tnil))
Prop: tf1 (ZERO) (repr (Node (SUCC (ZERO)) (Node (ZERO) (Tnil) (Tnil)) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil)))) = plus (ZERO) (reprNew (Node (SUCC (ZERO)) (Node (ZERO) (Tnil) (Tnil)) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil))))
=================================================
Progress: 484


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (repr (tree3)) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 12.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then reprNew (tree3) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
rewrite <- IH2 in goal at 2
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH1 in goal at 0
rewrite IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (if lq (reprNew (Node (SUCC (ZERO)) (Node (SUCC (SUCC (ZERO))) (Tnil) (Tnil)) (Node (ZERO) (Tnil) (Tnil)))) (reprNew (Tnil)) then reprNew (Tnil) else reprNew (Node (SUCC (ZERO)) (Node (SUCC (SUCC (ZERO))) (Tnil) (Tnil)) (Node (ZERO) (Tnil) (Tnil))))
Prop: tf1 (SUCC (ZERO)) (repr (Node (ZERO) (Tnil) (Tnil))) = plus (SUCC (ZERO)) (if lq (reprNew (Tnil)) (reprNew (Node (ZERO) (Tnil) (Tnil))) then reprNew (Node (ZERO) (Tnil) (Tnil)) else reprNew (Tnil))
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (if lq (reprNew (Tnil)) (reprNew (Tnil)) then reprNew (Tnil) else reprNew (Tnil))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
rewrite <- IH2 in goal at 2
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH1 in goal at 0
Prop: tf1 (SUCC (ZERO)) (Tnil) = plus (SUCC (ZERO)) (if lq (reprNew (Tnil)) (reprNew (Node (ZERO) (Tnil) (Tnil))) then tf1 (ZERO) (Tnil) else reprNew (Tnil))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (if lq (reprNew (Node (ZERO) (Tnil) (Tnil))) (reprNew (Tnil)) then tf1 (ZERO) (Tnil) else reprNew (Node (ZERO) (Tnil) (Tnil)))
Prop: tf1 (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Tnil) (Tnil)) (Tnil)) = plus (ZERO) (if lq (reprNew (Node (ZERO) (Tnil) (Tnil))) (reprNew (Node (ZERO) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil)) (Node (SUCC (ZERO)) (Tnil) (Tnil))) (Tnil))) then tf1 (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Tnil) (Tnil)) (Tnil)) else reprNew (Node (ZERO) (Tnil) (Tnil)))
previous tactics
simpl in goal
rewrite <- IH1 in goal at 2
rewrite <- IH2 in goal at 2
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (if lq (reprNew (Node (SUCC (SUCC (SUCC (ZERO)))) (Tnil) (Node (ZERO) (Tnil) (Tnil)))) (reprNew (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Tnil) (Tnil)) (Tnil))) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (repr (Node (SUCC (SUCC (SUCC (ZERO)))) (Tnil) (Node (ZERO) (Tnil) (Tnil)))))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (if lq (reprNew (Tnil)) (reprNew (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Tnil) (Tnil)) (Tnil)) (Node (SUCC (ZERO)) (Tnil) (Node (ZERO) (Tnil) (Tnil)))) (Node (ZERO) (Tnil) (Tnil))))))) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (repr (Tnil)))
Prop: tf1 (SUCC (ZERO)) (Node (ZERO) (Tnil) (Tnil)) = plus (SUCC (ZERO)) (if lq (reprNew (Node (SUCC (ZERO)) (Node (SUCC (SUCC (ZERO))) (Tnil) (Tnil)) (Tnil))) (reprNew (Tnil)) then tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil)) else tf1 (ZERO) (repr (Node (SUCC (ZERO)) (Node (SUCC (SUCC (ZERO))) (Tnil) (Tnil)) (Tnil))))
validate generalize_common_subterm_goal
Prop: tf1 (ZERO) (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Tnil) (Tnil)) (Tnil)) = plus (ZERO) (if lq (reprNew (Tnil)) (reprNew (Tnil)) then tf1 (ZERO) (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Tnil) (Tnil)) (Tnil)) else tf1 (ZERO) (repr (Tnil)))
Prop: tf1 (SUCC (ZERO)) (Tnil) = plus (SUCC (ZERO)) (if lq (reprNew (Tnil)) (reprNew (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (repr (Tnil)))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (if lq (reprNew (Tnil)) (reprNew (Node (ZERO) (Node (SUCC (ZERO)) (Node (ZERO) (Tnil) (Tnil)) (Tnil)) (Node (SUCC (ZERO)) (Tnil) (Tnil)))) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (repr (Tnil)))
Lemma List
forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (tree2))
End of Lemma List


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (repr (tree3)) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 485


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (repr (tree3)) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
>>> assert forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (tree2))(rank : 0.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (tree2))

---------------------------------------
forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (tree2))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree2(rank:6.)
=================================================
Progress: 486


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (tree2))

---------------------------------------
forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (tree2))

0 goal(s) more...

1 conjecture(s) more...
>>> induction tree2(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
---------------------------------------
forall (tree1:tree) (nat1:nat) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (Tnil)) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (Tnil))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:6.)
=================================================
Progress: 487


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
---------------------------------------
forall (tree1:tree) (nat1:nat) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (Tnil)) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (Tnil))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
---------------------------------------
forall (tree1:tree) (nat1:nat) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (ZERO) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (Tnil))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree3(rank:7.)
=================================================
Progress: 488


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
---------------------------------------
forall (tree1:tree) (nat1:nat) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (ZERO) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (Tnil))

1 goal(s) more...

1 conjecture(s) more...
>>> induction tree3(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree3 : tree
Base2 : tree3 = Tnil
---------------------------------------
forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (if lq (ZERO) (reprNew (Tnil)) then tf1 (ZERO) (tree1) else reprNew (Tnil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 489


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree3 : tree
Base2 : tree3 = Tnil
---------------------------------------
forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (if lq (ZERO) (reprNew (Tnil)) then tf1 (ZERO) (tree1) else reprNew (Tnil))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), tf1 (nat1) (tree1) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (tree1) else reprNew (tree2))
tree2 : tree
Base1 : tree2 = Tnil
tree3 : tree
Base2 : tree3 = Tnil
---------------------------------------
forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (ZERO)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
induction nat1(rank:16.)
induction tree1(rank:16.)
=================================================
Progress: 490


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) then tf1 (ZERO) (repr (tree3)) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 12.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then reprNew (tree3) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case lq (reprNew (tree2)) (reprNew (tree3))(rank:5.)
=================================================
Progress: 491


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then reprNew (tree3) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
>>> case lq (reprNew (tree2)) (reprNew (tree3))(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- IH2 in goal at 0(rank:5.)
=================================================
Progress: 492


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH2 in goal at 0
rewrite <- IH1 in goal at 1
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH1 in goal at 0
rewrite IH2 in goal at 0
case lq (reprNew (tree2)) (reprNew (tree3))
rewrite <- IH2 in goal at 0
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (tf1 (ZERO) (Tnil))
Prop: tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil)) = plus (ZERO) (tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil)))
Prop: tf1 (SUCC (ZERO)) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Tnil))) = plus (SUCC (ZERO)) (tf1 (ZERO) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Tnil))))
previous tactics
simpl in goal
rewrite <- IH2 in goal at 0
rewrite <- IH1 in goal at 1
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH1 in goal at 0
rewrite IH2 in goal at 0
case lq (reprNew (tree2)) (reprNew (tree3))
validate generalize_common_subterm_goal
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (reprNew (Tnil))
Prop: tf1 (SUCC (ZERO)) (repr (Tnil)) = plus (SUCC (ZERO)) (reprNew (Tnil))
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (reprNew (Tnil))
=================================================
Progress: 493


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) then tf1 (ZERO) (repr (tree3)) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH2 in goal at 1(rank : 12.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then tf1 (ZERO) (repr (tree3)) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH2 in goal at 0
rewrite <- IH1 in goal at 1
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH1 in goal at 0
rewrite IH2 in goal at 1
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (if lq (reprNew (Tnil)) (reprNew (Tnil)) then tf1 (ZERO) (Tnil) else reprNew (Tnil))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (if lq (reprNew (Node (SUCC (SUCC (ZERO))) (Tnil) (Tnil))) (reprNew (Tnil)) then tf1 (ZERO) (Tnil) else reprNew (Node (SUCC (SUCC (ZERO))) (Tnil) (Tnil)))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (if lq (reprNew (Tnil)) (reprNew (Tnil)) then tf1 (ZERO) (Tnil) else reprNew (Tnil))
validate generalize_common_subterm_goal
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (if lq (reprNew (Tnil)) (reprNew (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Tnil)))) then tf1 (ZERO) (Tnil) else reprNew (Tnil))
Prop: tf1 (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Tnil) (Tnil)) (Tnil)) = plus (ZERO) (if lq (reprNew (Tnil)) (reprNew (Tnil)) then tf1 (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Tnil) (Tnil)) (Tnil)) else reprNew (Tnil))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (if lq (reprNew (Tnil)) (reprNew (Tnil)) then tf1 (ZERO) (Tnil) else reprNew (Tnil))
previous tactics
simpl in goal
rewrite <- IH2 in goal at 0
rewrite <- IH1 in goal at 1
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH1 in goal at 0
Prop: tf1 (SUCC (SUCC (SUCC (ZERO)))) (Node (SUCC (ZERO)) (Node (ZERO) (Node (SUCC (ZERO)) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil)) (Tnil)) (Tnil)) (Node (ZERO) (Node (SUCC (ZERO)) (Tnil) (Node (ZERO) (Tnil) (Tnil))) (Tnil))) = plus (SUCC (SUCC (SUCC (ZERO)))) (if lq (reprNew (Tnil)) (tf1 (ZERO) (Node (SUCC (ZERO)) (Node (ZERO) (Node (SUCC (ZERO)) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil)) (Tnil)) (Tnil)) (Node (ZERO) (Node (SUCC (ZERO)) (Tnil) (Node (ZERO) (Tnil) (Tnil))) (Tnil)))) then tf1 (ZERO) (Node (SUCC (ZERO)) (Node (ZERO) (Node (SUCC (ZERO)) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil)) (Tnil)) (Tnil)) (Node (ZERO) (Node (SUCC (ZERO)) (Tnil) (Node (ZERO) (Tnil) (Tnil))) (Tnil))) else reprNew (Tnil))
Prop: tf1 (ZERO) (Node (ZERO) (Tnil) (Node (SUCC (SUCC (ZERO))) (Tnil) (Tnil))) = plus (ZERO) (if lq (reprNew (Tnil)) (tf1 (ZERO) (Node (ZERO) (Tnil) (Node (SUCC (SUCC (ZERO))) (Tnil) (Tnil)))) then tf1 (ZERO) (Node (ZERO) (Tnil) (Node (SUCC (SUCC (ZERO))) (Tnil) (Tnil))) else reprNew (Tnil))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (if lq (reprNew (Tnil)) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else reprNew (Tnil))
previous tactics
simpl in goal
rewrite <- IH2 in goal at 0
rewrite <- IH1 in goal at 1
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
Prop: tf1 (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Tnil) (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Tnil) (Tnil)) (Tnil))) (Tnil)) = plus (ZERO) (if lq (tf1 (ZERO) (repr (Node (ZERO) (Tnil) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Tnil))))))) (tf1 (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Tnil) (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Tnil) (Tnil)) (Tnil))) (Tnil))) then tf1 (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Tnil) (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Tnil) (Tnil)) (Tnil))) (Tnil)) else reprNew (Node (ZERO) (Tnil) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Tnil))))))
Prop: tf1 (SUCC (ZERO)) (Tnil) = plus (SUCC (ZERO)) (if lq (tf1 (ZERO) (repr (Tnil))) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else reprNew (Tnil))
Prop: tf1 (SUCC (ZERO)) (Tnil) = plus (SUCC (ZERO)) (if lq (tf1 (ZERO) (repr (Tnil))) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else reprNew (Tnil))
=================================================
Progress: 494


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) then tf1 (ZERO) (repr (tree3)) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH2 in goal at 2(rank : 12.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) then reprNew (tree3) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH2 in goal at 0
rewrite <- IH1 in goal at 1
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH1 in goal at 0
rewrite IH2 in goal at 2
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (if lq (reprNew (Tnil)) (tf1 (ZERO) (Tnil)) then reprNew (Tnil) else reprNew (Tnil))
Prop: tf1 (SUCC (SUCC (SUCC (ZERO)))) (Node (ZERO) (Node (SUCC (ZERO)) (Tnil) (Node (SUCC (ZERO)) (Tnil) (Tnil))) (Tnil)) = plus (SUCC (SUCC (SUCC (ZERO)))) (if lq (reprNew (Node (ZERO) (Tnil) (Tnil))) (tf1 (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Tnil) (Node (SUCC (ZERO)) (Tnil) (Tnil))) (Tnil))) then reprNew (Node (ZERO) (Tnil) (Tnil)) else reprNew (Node (ZERO) (Tnil) (Tnil)))
Prop: tf1 (SUCC (ZERO)) (Node (SUCC (ZERO)) (Tnil) (Tnil)) = plus (SUCC (ZERO)) (if lq (reprNew (Tnil)) (tf1 (ZERO) (Node (SUCC (ZERO)) (Tnil) (Tnil))) then reprNew (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Tnil) (Tnil)) (Tnil)) else reprNew (Tnil))
validate generalize_common_subterm_goal
Prop: tf1 (SUCC (SUCC (ZERO))) (Tnil) = plus (SUCC (SUCC (ZERO))) (if lq (reprNew (Node (ZERO) (Tnil) (Tnil))) (tf1 (ZERO) (Tnil)) then reprNew (Tnil) else reprNew (Node (ZERO) (Tnil) (Tnil)))
Prop: tf1 (ZERO) (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Tnil) (Tnil)) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Tnil)))) = plus (ZERO) (if lq (reprNew (Node (ZERO) (Tnil) (Tnil))) (tf1 (ZERO) (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Tnil) (Tnil)) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Tnil))))) then reprNew (Tnil) else reprNew (Node (ZERO) (Tnil) (Tnil)))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (if lq (reprNew (Node (ZERO) (Tnil) (Tnil))) (tf1 (ZERO) (Tnil)) then reprNew (Tnil) else reprNew (Node (ZERO) (Tnil) (Tnil)))
previous tactics
simpl in goal
rewrite <- IH2 in goal at 0
rewrite <- IH1 in goal at 1
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH1 in goal at 0
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (if lq (reprNew (Tnil)) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else reprNew (Tnil))
Prop: tf1 (SUCC (ZERO)) (Tnil) = plus (SUCC (ZERO)) (if lq (reprNew (Tnil)) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else reprNew (Tnil))
Prop: tf1 (ZERO) (Node (SUCC (ZERO)) (Tnil) (Tnil)) = plus (ZERO) (if lq (reprNew (Tnil)) (tf1 (ZERO) (Node (SUCC (ZERO)) (Tnil) (Tnil))) then tf1 (ZERO) (Node (SUCC (ZERO)) (Tnil) (Tnil)) else reprNew (Tnil))
previous tactics
simpl in goal
rewrite <- IH2 in goal at 0
rewrite <- IH1 in goal at 1
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
Prop: tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil)) = plus (ZERO) (if lq (tf1 (ZERO) (repr (Tnil))) (tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil))) then tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil)) else reprNew (Tnil))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (if lq (tf1 (ZERO) (repr (Node (SUCC (SUCC (ZERO))) (Tnil) (Tnil)))) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else reprNew (Node (SUCC (SUCC (ZERO))) (Tnil) (Tnil)))
Prop: tf1 (SUCC (ZERO)) (Node (ZERO) (Tnil) (Tnil)) = plus (SUCC (ZERO)) (if lq (tf1 (ZERO) (repr (Node (SUCC (ZERO)) (Node (ZERO) (Node (ZERO) (Tnil) (Node (SUCC (ZERO)) (Node (ZERO) (Tnil) (Tnil)) (Tnil))) (Tnil)) (Node (SUCC (ZERO)) (Tnil) (Node (ZERO) (Tnil) (Tnil)))))) (tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil))) then tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil)) else reprNew (Node (SUCC (ZERO)) (Node (ZERO) (Node (ZERO) (Tnil) (Node (SUCC (ZERO)) (Node (ZERO) (Tnil) (Tnil)) (Tnil))) (Tnil)) (Node (SUCC (ZERO)) (Tnil) (Node (ZERO) (Tnil) (Tnil)))))
validate generalize_common_subterm_goal
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (if lq (tf1 (ZERO) (repr (Tnil))) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else reprNew (Tnil))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (if lq (tf1 (ZERO) (repr (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Node (SUCC (SUCC (ZERO))) (Node (SUCC (ZERO)) (Tnil) (Tnil)) (Tnil))))) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else reprNew (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Node (SUCC (SUCC (ZERO))) (Node (SUCC (ZERO)) (Tnil) (Tnil)) (Tnil))))
Prop: tf1 (SUCC (ZERO)) (Tnil) = plus (SUCC (ZERO)) (if lq (tf1 (ZERO) (repr (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Tnil) (Tnil)) (Tnil)))) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else reprNew (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Tnil) (Tnil)) (Tnil)))
Lemma List
forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))
End of Lemma List


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) then tf1 (ZERO) (repr (tree3)) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 495


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) then tf1 (ZERO) (repr (tree3)) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
>>> assert forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))(rank : 0.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))

---------------------------------------
forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro tree3(rank:5.)
=================================================
Progress: 496


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))

---------------------------------------
forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))

0 goal(s) more...

1 conjecture(s) more...
>>> intro tree3(rank : 5.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))
tree3 : tree
---------------------------------------
forall (tree1:tree) (nat1:nat) (tree2:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction nat1(rank:6.)
=================================================
Progress: 497


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))
tree3 : tree
---------------------------------------
forall (tree1:tree) (nat1:nat) (tree2:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))

0 goal(s) more...

1 conjecture(s) more...
>>> induction nat1(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))
tree3 : tree
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) = true -> tf1 (ZERO) (tree1) = plus (ZERO) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:6.)
=================================================
Progress: 498


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))
tree3 : tree
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) = true -> tf1 (ZERO) (tree1) = plus (ZERO) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))
tree3 : tree
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) = true -> tf1 (ZERO) (tree1) = if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree2(rank:7.)
=================================================
Progress: 499


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))
tree3 : tree
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (repr (tree3))) = true -> tf1 (ZERO) (tree1) = if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2)

1 goal(s) more...

1 conjecture(s) more...
>>> induction tree2(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))
tree3 : tree
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
---------------------------------------
forall (tree1:tree), lq (tf1 (ZERO) (repr (Tnil))) (tf1 (ZERO) (repr (tree3))) = true -> tf1 (ZERO) (tree1) = if lq (tf1 (ZERO) (repr (Tnil))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (Tnil)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 500


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))
tree3 : tree
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
---------------------------------------
forall (tree1:tree), lq (tf1 (ZERO) (repr (Tnil))) (tf1 (ZERO) (repr (tree3))) = true -> tf1 (ZERO) (tree1) = if lq (tf1 (ZERO) (repr (Tnil))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (Tnil)

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))
tree3 : tree
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
---------------------------------------
forall (tree1:tree), lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (Tnil)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:7.)
=================================================
Progress: 501


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))
tree3 : tree
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
---------------------------------------
forall (tree1:tree), lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true -> tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (Tnil)

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))
tree3 : tree
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
---------------------------------------
forall (tree1:tree), tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (Tnil)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree1(rank:8.)
=================================================
Progress: 502


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))
tree3 : tree
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
---------------------------------------
forall (tree1:tree), tf1 (ZERO) (tree1) = if lq (ZERO) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (Tnil)

2 goal(s) more...

1 conjecture(s) more...
>>> induction tree1(rank : 8.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))
tree3 : tree
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
tree1 : tree
Base3 : tree1 = Tnil
---------------------------------------
tf1 (ZERO) (Tnil) = if lq (ZERO) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else reprNew (Tnil)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7.)
=================================================
Progress: 503


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))
tree3 : tree
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
tree1 : tree
Base3 : tree1 = Tnil
---------------------------------------
tf1 (ZERO) (Tnil) = if lq (ZERO) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else reprNew (Tnil)

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))
tree3 : tree
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : tf1 (ZERO) (tree4) = if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else reprNew (Tnil)
IH2 : tf1 (ZERO) (tree5) = if lq (ZERO) (tf1 (ZERO) (tree5)) then tf1 (ZERO) (tree5) else reprNew (Tnil)
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
---------------------------------------
tf1 (ZERO) (Node (nat2) (tree4) (tree5)) = if lq (ZERO) (tf1 (ZERO) (Node (nat2) (tree4) (tree5))) then tf1 (ZERO) (Node (nat2) (tree4) (tree5)) else reprNew (Tnil)

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 504


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))
tree3 : tree
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : tf1 (ZERO) (tree4) = if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else reprNew (Tnil)
IH2 : tf1 (ZERO) (tree5) = if lq (ZERO) (tf1 (ZERO) (tree5)) then tf1 (ZERO) (tree5) else reprNew (Tnil)
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
---------------------------------------
tf1 (ZERO) (Node (nat2) (tree4) (tree5)) = if lq (ZERO) (tf1 (ZERO) (Node (nat2) (tree4) (tree5))) then tf1 (ZERO) (Node (nat2) (tree4) (tree5)) else reprNew (Tnil)

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))
tree3 : tree
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : tf1 (ZERO) (tree4) = if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else reprNew (Tnil)
IH2 : tf1 (ZERO) (tree5) = if lq (ZERO) (tf1 (ZERO) (tree5)) then tf1 (ZERO) (tree5) else reprNew (Tnil)
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
---------------------------------------
if lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) then tf1 (nat2) (tree5) else tf1 (nat2) (tree4) = if lq (ZERO) (if lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) then tf1 (nat2) (tree5) else tf1 (nat2) (tree4)) then tf1 (ZERO) (Node (nat2) (tree4) (tree5)) else reprNew (Tnil)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5))(rank:8.)
=================================================
Progress: 505


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))
tree3 : tree
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : tf1 (ZERO) (tree4) = if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else reprNew (Tnil)
IH2 : tf1 (ZERO) (tree5) = if lq (ZERO) (tf1 (ZERO) (tree5)) then tf1 (ZERO) (tree5) else reprNew (Tnil)
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
---------------------------------------
if lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) then tf1 (nat2) (tree5) else tf1 (nat2) (tree4) = if lq (ZERO) (if lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) then tf1 (nat2) (tree5) else tf1 (nat2) (tree4)) then tf1 (ZERO) (Node (nat2) (tree4) (tree5)) else reprNew (Tnil)

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5))(rank : 8.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))
tree3 : tree
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : tf1 (ZERO) (tree4) = if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else reprNew (Tnil)
IH2 : tf1 (ZERO) (tree5) = if lq (ZERO) (tf1 (ZERO) (tree5)) then tf1 (ZERO) (tree5) else reprNew (Tnil)
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
Case1 : lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) = true
---------------------------------------
tf1 (nat2) (tree5) = if lq (ZERO) (tf1 (nat2) (tree5)) then tf1 (ZERO) (Node (nat2) (tree4) (tree5)) else reprNew (Tnil)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case lq (ZERO) (tf1 (nat2) (tree5))(rank:9.)
=================================================
Progress: 506


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))
tree3 : tree
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : tf1 (ZERO) (tree4) = if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else reprNew (Tnil)
IH2 : tf1 (ZERO) (tree5) = if lq (ZERO) (tf1 (ZERO) (tree5)) then tf1 (ZERO) (tree5) else reprNew (Tnil)
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
Case1 : lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) = true
---------------------------------------
tf1 (nat2) (tree5) = if lq (ZERO) (tf1 (nat2) (tree5)) then tf1 (ZERO) (Node (nat2) (tree4) (tree5)) else reprNew (Tnil)

3 goal(s) more...

1 conjecture(s) more...
>>> case lq (ZERO) (tf1 (nat2) (tree5))(rank : 9.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))
tree3 : tree
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : tf1 (ZERO) (tree4) = if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else reprNew (Tnil)
IH2 : tf1 (ZERO) (tree5) = if lq (ZERO) (tf1 (ZERO) (tree5)) then tf1 (ZERO) (tree5) else reprNew (Tnil)
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
Case1 : lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) = true
Case2 : lq (ZERO) (tf1 (nat2) (tree5)) = true
---------------------------------------
tf1 (nat2) (tree5) = if lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) then tf1 (nat2) (tree5) else tf1 (nat2) (tree4)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:9.)
=================================================
Progress: 507


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))
tree3 : tree
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : tf1 (ZERO) (tree4) = if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else reprNew (Tnil)
IH2 : tf1 (ZERO) (tree5) = if lq (ZERO) (tf1 (ZERO) (tree5)) then tf1 (ZERO) (tree5) else reprNew (Tnil)
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
Case1 : lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) = true
Case2 : lq (ZERO) (tf1 (nat2) (tree5)) = true
---------------------------------------
tf1 (nat2) (tree5) = if lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) then tf1 (nat2) (tree5) else tf1 (nat2) (tree4)

4 goal(s) more...

1 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 9.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))
tree3 : tree
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : tf1 (ZERO) (tree4) = if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else reprNew (Tnil)
IH2 : tf1 (ZERO) (tree5) = if lq (ZERO) (tf1 (ZERO) (tree5)) then tf1 (ZERO) (tree5) else reprNew (Tnil)
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
Case1 : lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) = true
Case2 : lq (ZERO) (tf1 (nat2) (tree5)) = true
---------------------------------------
tf1 (nat2) (tree5) = if true then tf1 (nat2) (tree5) else tf1 (nat2) (tree4)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:8.)
=================================================
Progress: 508


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))
tree3 : tree
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : tf1 (ZERO) (tree4) = if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else reprNew (Tnil)
IH2 : tf1 (ZERO) (tree5) = if lq (ZERO) (tf1 (ZERO) (tree5)) then tf1 (ZERO) (tree5) else reprNew (Tnil)
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
Case1 : lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) = true
Case2 : lq (ZERO) (tf1 (nat2) (tree5)) = true
---------------------------------------
tf1 (nat2) (tree5) = if true then tf1 (nat2) (tree5) else tf1 (nat2) (tree4)

4 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 8.)


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))
tree3 : tree
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : tf1 (ZERO) (tree4) = if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else reprNew (Tnil)
IH2 : tf1 (ZERO) (tree5) = if lq (ZERO) (tf1 (ZERO) (tree5)) then tf1 (ZERO) (tree5) else reprNew (Tnil)
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
Case1 : lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) = true
Case2 : lq (ZERO) (tf1 (nat2) (tree5)) = false
---------------------------------------
tf1 (nat2) (tree5) = ZERO

3 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 0
previous tactics
simpl in goal
case lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5))
case lq (ZERO) (tf1 (nat2) (tree5))
rewrite Case1 in goal at 0
reflexivity
validate generalize_common_subterm_goal
Prop: tf1 (ZERO) (Node (SUCC (ZERO)) (Tnil) (Node (ZERO) (Tnil) (Tnil))) = ZERO
Prop: tf1 (SUCC (ZERO)) (Tnil) = ZERO
Prop: tf1 (SUCC (ZERO)) (Tnil) = ZERO
Lemma List
forall (nat1:nat) (tree1:tree), lq (ZERO) (tf1 (nat1) (tree1)) = false -> tf1 (nat1) (tree1) = ZERO
End of Lemma List


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))
tree3 : tree
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : tf1 (ZERO) (tree4) = if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else reprNew (Tnil)
IH2 : tf1 (ZERO) (tree5) = if lq (ZERO) (tf1 (ZERO) (tree5)) then tf1 (ZERO) (tree5) else reprNew (Tnil)
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
Case1 : lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) = true
Case2 : lq (ZERO) (tf1 (nat2) (tree5)) = false
---------------------------------------
tf1 (nat2) (tree5) = ZERO

3 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 509


1st goal of : forall (tree1:tree) (nat1:nat) (tree2:tree) (tree3:tree), lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true -> tf1 (nat1) (tree1) = plus (nat1) (if lq (tf1 (ZERO) (repr (tree2))) (tf1 (ZERO) (tree1)) then tf1 (ZERO) (tree1) else reprNew (tree2))
tree3 : tree
nat1 : nat
Base1 : nat1 = ZERO
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (ZERO) (tf1 (ZERO) (repr (tree3))) = true
tree1 : tree
nat2 : nat
tree4 : tree
tree5 : tree
IH1 : tf1 (ZERO) (tree4) = if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else reprNew (Tnil)
IH2 : tf1 (ZERO) (tree5) = if lq (ZERO) (tf1 (ZERO) (tree5)) then tf1 (ZERO) (tree5) else reprNew (Tnil)
Inductive1 : tree1 = Node (nat2) (tree4) (tree5)
Case1 : lq (tf1 (nat2) (tree4)) (tf1 (nat2) (tree5)) = true
Case2 : lq (ZERO) (tf1 (nat2) (tree5)) = false
---------------------------------------
tf1 (nat2) (tree5) = ZERO

3 goal(s) more...

1 conjecture(s) more...
>>> assert forall (nat1:nat) (tree1:tree), lq (ZERO) (tf1 (nat1) (tree1)) = false -> tf1 (nat1) (tree1) = ZERO(rank : 0.)


1st goal of : forall (nat1:nat) (tree1:tree), lq (ZERO) (tf1 (nat1) (tree1)) = false -> tf1 (nat1) (tree1) = ZERO

---------------------------------------
forall (nat1:nat) (tree1:tree), lq (ZERO) (tf1 (nat1) (tree1)) = false -> tf1 (nat1) (tree1) = ZERO

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat1(rank:7.)
=================================================
Progress: 510


1st goal of : forall (nat1:nat) (tree1:tree), lq (ZERO) (tf1 (nat1) (tree1)) = false -> tf1 (nat1) (tree1) = ZERO

---------------------------------------
forall (nat1:nat) (tree1:tree), lq (ZERO) (tf1 (nat1) (tree1)) = false -> tf1 (nat1) (tree1) = ZERO

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat1(rank : 7.)


1st goal of : forall (nat1:nat) (tree1:tree), lq (ZERO) (tf1 (nat1) (tree1)) = false -> tf1 (nat1) (tree1) = ZERO
nat1 : nat
---------------------------------------
forall (tree1:tree), lq (ZERO) (tf1 (nat1) (tree1)) = false -> tf1 (nat1) (tree1) = ZERO

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction tree1(rank:8.)
=================================================
Progress: 511


1st goal of : forall (nat1:nat) (tree1:tree), lq (ZERO) (tf1 (nat1) (tree1)) = false -> tf1 (nat1) (tree1) = ZERO
nat1 : nat
---------------------------------------
forall (tree1:tree), lq (ZERO) (tf1 (nat1) (tree1)) = false -> tf1 (nat1) (tree1) = ZERO

0 goal(s) more...

2 conjecture(s) more...
>>> induction tree1(rank : 8.)


1st goal of : forall (nat1:nat) (tree1:tree), lq (ZERO) (tf1 (nat1) (tree1)) = false -> tf1 (nat1) (tree1) = ZERO
nat1 : nat
tree1 : tree
Base1 : tree1 = Tnil
---------------------------------------
lq (ZERO) (tf1 (nat1) (Tnil)) = false -> tf1 (nat1) (Tnil) = ZERO

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 512


1st goal of : forall (nat1:nat) (tree1:tree), lq (ZERO) (tf1 (nat1) (tree1)) = false -> tf1 (nat1) (tree1) = ZERO
nat1 : nat
tree1 : tree
Base1 : tree1 = Tnil
---------------------------------------
lq (ZERO) (tf1 (nat1) (Tnil)) = false -> tf1 (nat1) (Tnil) = ZERO

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (nat1:nat) (tree1:tree), lq (ZERO) (tf1 (nat1) (tree1)) = false -> tf1 (nat1) (tree1) = ZERO
nat1 : nat
tree1 : tree
Base1 : tree1 = Tnil
---------------------------------------
lq (ZERO) (nat1) = false -> nat1 = ZERO

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:8.)
=================================================
Progress: 513


1st goal of : forall (nat1:nat) (tree1:tree), lq (ZERO) (tf1 (nat1) (tree1)) = false -> tf1 (nat1) (tree1) = ZERO
nat1 : nat
tree1 : tree
Base1 : tree1 = Tnil
---------------------------------------
lq (ZERO) (nat1) = false -> nat1 = ZERO

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 8.)


1st goal of : forall (nat1:nat) (tree1:tree), lq (ZERO) (tf1 (nat1) (tree1)) = false -> tf1 (nat1) (tree1) = ZERO
nat1 : nat
tree1 : tree
Base1 : tree1 = Tnil
Cond1 : lq (ZERO) (nat1) = false
---------------------------------------
nat1 = ZERO

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
validate generalize_common_subterm_goal
Prop: ZERO = ZERO
Prop: ZERO = ZERO
Prop: ZERO = ZERO
=================================================
Progress: 514


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (tf1 (ZERO) (repr (tree3))) then reprNew (tree3) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 12.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then reprNew (tree3) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case lq (reprNew (tree2)) (reprNew (tree3))(rank:5.)
=================================================
Progress: 515


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (if lq (reprNew (tree2)) (reprNew (tree3)) then reprNew (tree3) else reprNew (tree2))

1 goal(s) more...

0 conjecture(s) more...
>>> case lq (reprNew (tree2)) (reprNew (tree3))(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- IH2 in goal at 0(rank:5.)
=================================================
Progress: 516


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (reprNew (tree3))

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 5.)


1st goal of : forall (tree1:tree), main (tree1) = mainNew (tree1)
tree1 : tree
nat1 : nat
tree2 : tree
tree3 : tree
IH1 : tf1 (ZERO) (repr (tree2)) = reprNew (tree2)
IH2 : tf1 (ZERO) (repr (tree3)) = reprNew (tree3)
Inductive1 : tree1 = Node (nat1) (tree2) (tree3)
Case1 : lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3))) = true
Case2 : lq (reprNew (tree2)) (reprNew (tree3)) = true
---------------------------------------
tf1 (nat1) (repr (tree3)) = plus (nat1) (tf1 (ZERO) (repr (tree3)))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH2 in goal at 1
rewrite <- IH1 in goal at 1
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH1 in goal at 0
rewrite IH2 in goal at 0
case lq (reprNew (tree2)) (reprNew (tree3))
rewrite <- IH2 in goal at 0
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (tf1 (ZERO) (Tnil))
Prop: tf1 (SUCC (ZERO)) (Tnil) = plus (SUCC (ZERO)) (tf1 (ZERO) (Tnil))
Prop: tf1 (ZERO) (Tnil) = plus (ZERO) (tf1 (ZERO) (Tnil))
previous tactics
simpl in goal
rewrite <- IH2 in goal at 1
rewrite <- IH1 in goal at 1
case lq (tf1 (nat1) (repr (tree2))) (tf1 (nat1) (repr (tree3)))
rewrite IH1 in goal at 0
rewrite IH2 in goal at 0
case lq (reprNew (tree2)) (reprNew (tree3))
validate generalize_common_subterm_goal
Prop: tf1 (SUCC (SUCC (SUCC (ZERO)))) (repr (Tnil)) = plus (SUCC (SUCC (SUCC (ZERO)))) (reprNew (Tnil))
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (reprNew (Tnil))
Prop: tf1 (ZERO) (repr (Tnil)) = plus (ZERO) (reprNew (Tnil))
=================================================
Progress: 517


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))

---------------------------------------
forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))

0 goal(s) more...

1 conjecture(s) more...
>>> induction nat1(rank : 14.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (tree1:tree), tf1 (ZERO) (tree1) = plus (ZERO) (tf1 (ZERO) (tree1))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:5.)
=================================================
Progress: 518


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (tree1:tree), tf1 (ZERO) (tree1) = plus (ZERO) (tf1 (ZERO) (tree1))

1 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 5.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree), tf1 (nat2) (tree1) = plus (nat2) (tf1 (ZERO) (tree1))
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (tree1:tree), tf1 (SUCC (nat2)) (tree1) = plus (SUCC (nat2)) (tf1 (ZERO) (tree1))

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:5.)
=================================================
Progress: 519


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree), tf1 (nat2) (tree1) = plus (nat2) (tf1 (ZERO) (tree1))
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (tree1:tree), tf1 (SUCC (nat2)) (tree1) = plus (SUCC (nat2)) (tf1 (ZERO) (tree1))

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 5.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree), tf1 (nat2) (tree1) = plus (nat2) (tf1 (ZERO) (tree1))
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (tree1:tree), tf1 (SUCC (nat2)) (tree1) = SUCC (plus (nat2) (tf1 (ZERO) (tree1)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:13.)
induction tree1(rank:14.)
=================================================
Progress: 520


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree), tf1 (nat2) (tree1) = plus (nat2) (tf1 (ZERO) (tree1))
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (tree1:tree), tf1 (SUCC (nat2)) (tree1) = SUCC (plus (nat2) (tf1 (ZERO) (tree1)))

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 13.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree), tf1 (nat2) (tree1) = plus (nat2) (tf1 (ZERO) (tree1))
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (tree1:tree), tf1 (SUCC (nat2)) (tree1) = SUCC (tf1 (nat2) (tree1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction tree1(rank:6.)
=================================================
Progress: 521


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree), tf1 (nat2) (tree1) = plus (nat2) (tf1 (ZERO) (tree1))
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (tree1:tree), tf1 (SUCC (nat2)) (tree1) = SUCC (tf1 (nat2) (tree1))

0 goal(s) more...

1 conjecture(s) more...
>>> induction tree1(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree), tf1 (nat2) (tree1) = plus (nat2) (tf1 (ZERO) (tree1))
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
Base1 : tree1 = Tnil
---------------------------------------
tf1 (SUCC (nat2)) (Tnil) = SUCC (tf1 (nat2) (Tnil))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:5.)
=================================================
Progress: 522


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree), tf1 (nat2) (tree1) = plus (nat2) (tf1 (ZERO) (tree1))
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
Base1 : tree1 = Tnil
---------------------------------------
tf1 (SUCC (nat2)) (Tnil) = SUCC (tf1 (nat2) (Tnil))

1 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 5.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree), tf1 (nat2) (tree1) = plus (nat2) (tf1 (ZERO) (tree1))
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
tree2 : tree
tree3 : tree
IH2 : tf1 (SUCC (nat2)) (tree2) = SUCC (tf1 (nat2) (tree2))
IH3 : tf1 (SUCC (nat2)) (tree3) = SUCC (tf1 (nat2) (tree3))
Inductive2 : tree1 = Node (nat3) (tree2) (tree3)
---------------------------------------
tf1 (SUCC (nat2)) (Node (nat3) (tree2) (tree3)) = SUCC (tf1 (nat2) (Node (nat3) (tree2) (tree3)))

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:5.)
=================================================
Progress: 523


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree), tf1 (nat2) (tree1) = plus (nat2) (tf1 (ZERO) (tree1))
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
tree2 : tree
tree3 : tree
IH2 : tf1 (SUCC (nat2)) (tree2) = SUCC (tf1 (nat2) (tree2))
IH3 : tf1 (SUCC (nat2)) (tree3) = SUCC (tf1 (nat2) (tree3))
Inductive2 : tree1 = Node (nat3) (tree2) (tree3)
---------------------------------------
tf1 (SUCC (nat2)) (Node (nat3) (tree2) (tree3)) = SUCC (tf1 (nat2) (Node (nat3) (tree2) (tree3)))

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 5.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree), tf1 (nat2) (tree1) = plus (nat2) (tf1 (ZERO) (tree1))
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
tree2 : tree
tree3 : tree
IH2 : tf1 (SUCC (nat2)) (tree2) = SUCC (tf1 (nat2) (tree2))
IH3 : tf1 (SUCC (nat2)) (tree3) = SUCC (tf1 (nat2) (tree3))
Inductive2 : tree1 = Node (nat3) (tree2) (tree3)
---------------------------------------
if lq (tf1 (SUCC (plus (nat2) (nat3))) (tree2)) (tf1 (SUCC (plus (nat2) (nat3))) (tree3)) then tf1 (SUCC (plus (nat2) (nat3))) (tree3) else tf1 (SUCC (plus (nat2) (nat3))) (tree2) = SUCC (if lq (tf1 (plus (nat2) (nat3)) (tree2)) (tf1 (plus (nat2) (nat3)) (tree3)) then tf1 (plus (nat2) (nat3)) (tree3) else tf1 (plus (nat2) (nat3)) (tree2))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case lq (tf1 (plus (nat2) (nat3)) (tree2)) (tf1 (plus (nat2) (nat3)) (tree3))(rank:6.)
case lq (tf1 (SUCC (plus (nat2) (nat3))) (tree2)) (tf1 (SUCC (plus (nat2) (nat3))) (tree3))(rank:6.)
=================================================
Progress: 524


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree), tf1 (nat2) (tree1) = plus (nat2) (tf1 (ZERO) (tree1))
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
tree2 : tree
tree3 : tree
IH2 : tf1 (SUCC (nat2)) (tree2) = SUCC (tf1 (nat2) (tree2))
IH3 : tf1 (SUCC (nat2)) (tree3) = SUCC (tf1 (nat2) (tree3))
Inductive2 : tree1 = Node (nat3) (tree2) (tree3)
---------------------------------------
if lq (tf1 (SUCC (plus (nat2) (nat3))) (tree2)) (tf1 (SUCC (plus (nat2) (nat3))) (tree3)) then tf1 (SUCC (plus (nat2) (nat3))) (tree3) else tf1 (SUCC (plus (nat2) (nat3))) (tree2) = SUCC (if lq (tf1 (plus (nat2) (nat3)) (tree2)) (tf1 (plus (nat2) (nat3)) (tree3)) then tf1 (plus (nat2) (nat3)) (tree3) else tf1 (plus (nat2) (nat3)) (tree2))

0 goal(s) more...

1 conjecture(s) more...
>>> case lq (tf1 (plus (nat2) (nat3)) (tree2)) (tf1 (plus (nat2) (nat3)) (tree3))(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree), tf1 (nat2) (tree1) = plus (nat2) (tf1 (ZERO) (tree1))
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
tree2 : tree
tree3 : tree
IH2 : tf1 (SUCC (nat2)) (tree2) = SUCC (tf1 (nat2) (tree2))
IH3 : tf1 (SUCC (nat2)) (tree3) = SUCC (tf1 (nat2) (tree3))
Inductive2 : tree1 = Node (nat3) (tree2) (tree3)
Case1 : lq (tf1 (plus (nat2) (nat3)) (tree2)) (tf1 (plus (nat2) (nat3)) (tree3)) = true
---------------------------------------
if lq (tf1 (SUCC (plus (nat2) (nat3))) (tree2)) (tf1 (SUCC (plus (nat2) (nat3))) (tree3)) then tf1 (SUCC (plus (nat2) (nat3))) (tree3) else tf1 (SUCC (plus (nat2) (nat3))) (tree2) = SUCC (tf1 (plus (nat2) (nat3)) (tree3))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case lq (tf1 (SUCC (plus (nat2) (nat3))) (tree2)) (tf1 (SUCC (plus (nat2) (nat3))) (tree3))(rank:7.)
=================================================
Progress: 525


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree), tf1 (nat2) (tree1) = plus (nat2) (tf1 (ZERO) (tree1))
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
tree2 : tree
tree3 : tree
IH2 : tf1 (SUCC (nat2)) (tree2) = SUCC (tf1 (nat2) (tree2))
IH3 : tf1 (SUCC (nat2)) (tree3) = SUCC (tf1 (nat2) (tree3))
Inductive2 : tree1 = Node (nat3) (tree2) (tree3)
---------------------------------------
if lq (tf1 (SUCC (plus (nat2) (nat3))) (tree2)) (tf1 (SUCC (plus (nat2) (nat3))) (tree3)) then tf1 (SUCC (plus (nat2) (nat3))) (tree3) else tf1 (SUCC (plus (nat2) (nat3))) (tree2) = SUCC (if lq (tf1 (plus (nat2) (nat3)) (tree2)) (tf1 (plus (nat2) (nat3)) (tree3)) then tf1 (plus (nat2) (nat3)) (tree3) else tf1 (plus (nat2) (nat3)) (tree2))

0 goal(s) more...

1 conjecture(s) more...
>>> case lq (tf1 (SUCC (plus (nat2) (nat3))) (tree2)) (tf1 (SUCC (plus (nat2) (nat3))) (tree3))(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree), tf1 (nat2) (tree1) = plus (nat2) (tf1 (ZERO) (tree1))
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
tree2 : tree
tree3 : tree
IH2 : tf1 (SUCC (nat2)) (tree2) = SUCC (tf1 (nat2) (tree2))
IH3 : tf1 (SUCC (nat2)) (tree3) = SUCC (tf1 (nat2) (tree3))
Inductive2 : tree1 = Node (nat3) (tree2) (tree3)
Case1 : lq (tf1 (SUCC (plus (nat2) (nat3))) (tree2)) (tf1 (SUCC (plus (nat2) (nat3))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat2) (nat3))) (tree3) = SUCC (if lq (tf1 (plus (nat2) (nat3)) (tree2)) (tf1 (plus (nat2) (nat3)) (tree3)) then tf1 (plus (nat2) (nat3)) (tree3) else tf1 (plus (nat2) (nat3)) (tree2))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case lq (tf1 (plus (nat2) (nat3)) (tree2)) (tf1 (plus (nat2) (nat3)) (tree3))(rank:7.)
=================================================
Progress: 526


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree), tf1 (nat2) (tree1) = plus (nat2) (tf1 (ZERO) (tree1))
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
tree2 : tree
tree3 : tree
IH2 : tf1 (SUCC (nat2)) (tree2) = SUCC (tf1 (nat2) (tree2))
IH3 : tf1 (SUCC (nat2)) (tree3) = SUCC (tf1 (nat2) (tree3))
Inductive2 : tree1 = Node (nat3) (tree2) (tree3)
Case1 : lq (tf1 (plus (nat2) (nat3)) (tree2)) (tf1 (plus (nat2) (nat3)) (tree3)) = true
---------------------------------------
if lq (tf1 (SUCC (plus (nat2) (nat3))) (tree2)) (tf1 (SUCC (plus (nat2) (nat3))) (tree3)) then tf1 (SUCC (plus (nat2) (nat3))) (tree3) else tf1 (SUCC (plus (nat2) (nat3))) (tree2) = SUCC (tf1 (plus (nat2) (nat3)) (tree3))

1 goal(s) more...

1 conjecture(s) more...
>>> case lq (tf1 (SUCC (plus (nat2) (nat3))) (tree2)) (tf1 (SUCC (plus (nat2) (nat3))) (tree3))(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree), tf1 (nat2) (tree1) = plus (nat2) (tf1 (ZERO) (tree1))
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
tree2 : tree
tree3 : tree
IH2 : tf1 (SUCC (nat2)) (tree2) = SUCC (tf1 (nat2) (tree2))
IH3 : tf1 (SUCC (nat2)) (tree3) = SUCC (tf1 (nat2) (tree3))
Inductive2 : tree1 = Node (nat3) (tree2) (tree3)
Case1 : lq (tf1 (plus (nat2) (nat3)) (tree2)) (tf1 (plus (nat2) (nat3)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat2) (nat3))) (tree2)) (tf1 (SUCC (plus (nat2) (nat3))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat2) (nat3))) (tree3) = SUCC (tf1 (plus (nat2) (nat3)) (tree3))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (tf1 (plus (nat2) (nat3)) (tree2)) (tf1 (plus (nat2) (nat3)) (tree3))
case lq (tf1 (SUCC (plus (nat2) (nat3))) (tree2)) (tf1 (SUCC (plus (nat2) (nat3))) (tree3))
parent
plus (nat2) (nat3)
lower
plus(nat2, _)
upper
tf1(SUCC(_), tree3)
remove upper
nat2
remove lower
nat2
remove upper
plus(nat2, nat3)
remove lower
plus(nat2, nat3)
remove upper
plus(nat2, nat3)
remove lower
plus(nat2, nat3)
remove upper
plus(nat2, nat3)
remove lower
plus(nat2, nat3)
parent
plus (nat2) (nat3)
lower
plus(nat2, _)
upper
SUCC(tf1(_, tree3))
remove upper
nat2
remove lower
nat2
remove upper
plus(nat2, nat3)
remove lower
plus(nat2, nat3)
remove upper
plus(nat2, nat3)
remove lower
plus(nat2, nat3)
remove upper
plus(nat2, nat3)
remove lower
plus(nat2, nat3)
Prop: tf1 (SUCC (ZERO)) (Tnil) = SUCC (tf1 (ZERO) (Tnil))
Prop: tf1 (SUCC (ZERO)) (Tnil) = SUCC (tf1 (ZERO) (Tnil))
Prop: tf1 (SUCC (ZERO)) (Tnil) = SUCC (tf1 (ZERO) (Tnil))
Lemma List
forall (nat1:nat) (tree1:tree), tf1 (SUCC (nat1)) (tree1) = SUCC (tf1 (nat1) (tree1))
End of Lemma List


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree), tf1 (nat2) (tree1) = plus (nat2) (tf1 (ZERO) (tree1))
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
tree2 : tree
tree3 : tree
IH2 : tf1 (SUCC (nat2)) (tree2) = SUCC (tf1 (nat2) (tree2))
IH3 : tf1 (SUCC (nat2)) (tree3) = SUCC (tf1 (nat2) (tree3))
Inductive2 : tree1 = Node (nat3) (tree2) (tree3)
Case1 : lq (tf1 (plus (nat2) (nat3)) (tree2)) (tf1 (plus (nat2) (nat3)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat2) (nat3))) (tree2)) (tf1 (SUCC (plus (nat2) (nat3))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat2) (nat3))) (tree3) = SUCC (tf1 (plus (nat2) (nat3)) (tree3))

2 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 527


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree), tf1 (nat2) (tree1) = plus (nat2) (tf1 (ZERO) (tree1))
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
tree2 : tree
tree3 : tree
IH2 : tf1 (SUCC (nat2)) (tree2) = SUCC (tf1 (nat2) (tree2))
IH3 : tf1 (SUCC (nat2)) (tree3) = SUCC (tf1 (nat2) (tree3))
Inductive2 : tree1 = Node (nat3) (tree2) (tree3)
Case1 : lq (tf1 (plus (nat2) (nat3)) (tree2)) (tf1 (plus (nat2) (nat3)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat2) (nat3))) (tree2)) (tf1 (SUCC (plus (nat2) (nat3))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat2) (nat3))) (tree3) = SUCC (tf1 (plus (nat2) (nat3)) (tree3))

2 goal(s) more...

1 conjecture(s) more...
>>> assert forall (nat1:nat) (tree1:tree), tf1 (SUCC (nat1)) (tree1) = SUCC (tf1 (nat1) (tree1))(rank : 0.)


1st goal of : forall (nat1:nat) (tree1:tree), tf1 (SUCC (nat1)) (tree1) = SUCC (tf1 (nat1) (tree1))

---------------------------------------
forall (nat1:nat) (tree1:tree), tf1 (SUCC (nat1)) (tree1) = SUCC (tf1 (nat1) (tree1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction tree1(rank:8.)
=================================================
Progress: 528


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree), tf1 (nat2) (tree1) = plus (nat2) (tf1 (ZERO) (tree1))
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
tree2 : tree
tree3 : tree
IH2 : tf1 (SUCC (nat2)) (tree2) = SUCC (tf1 (nat2) (tree2))
IH3 : tf1 (SUCC (nat2)) (tree3) = SUCC (tf1 (nat2) (tree3))
Inductive2 : tree1 = Node (nat3) (tree2) (tree3)
Case1 : lq (tf1 (SUCC (plus (nat2) (nat3))) (tree2)) (tf1 (SUCC (plus (nat2) (nat3))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat2) (nat3))) (tree3) = SUCC (if lq (tf1 (plus (nat2) (nat3)) (tree2)) (tf1 (plus (nat2) (nat3)) (tree3)) then tf1 (plus (nat2) (nat3)) (tree3) else tf1 (plus (nat2) (nat3)) (tree2))

1 goal(s) more...

1 conjecture(s) more...
>>> case lq (tf1 (plus (nat2) (nat3)) (tree2)) (tf1 (plus (nat2) (nat3)) (tree3))(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree), tf1 (nat2) (tree1) = plus (nat2) (tf1 (ZERO) (tree1))
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
tree2 : tree
tree3 : tree
IH2 : tf1 (SUCC (nat2)) (tree2) = SUCC (tf1 (nat2) (tree2))
IH3 : tf1 (SUCC (nat2)) (tree3) = SUCC (tf1 (nat2) (tree3))
Inductive2 : tree1 = Node (nat3) (tree2) (tree3)
Case1 : lq (tf1 (SUCC (plus (nat2) (nat3))) (tree2)) (tf1 (SUCC (plus (nat2) (nat3))) (tree3)) = true
Case2 : lq (tf1 (plus (nat2) (nat3)) (tree2)) (tf1 (plus (nat2) (nat3)) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat2) (nat3))) (tree3) = SUCC (tf1 (plus (nat2) (nat3)) (tree3))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
case lq (tf1 (SUCC (plus (nat2) (nat3))) (tree2)) (tf1 (SUCC (plus (nat2) (nat3))) (tree3))
case lq (tf1 (plus (nat2) (nat3)) (tree2)) (tf1 (plus (nat2) (nat3)) (tree3))
parent
plus (nat2) (nat3)
lower
plus(nat2, _)
upper
tf1(SUCC(_), tree3)
remove upper
nat2
remove lower
nat2
remove upper
plus(nat2, nat3)
remove lower
plus(nat2, nat3)
remove upper
plus(nat2, nat3)
remove lower
plus(nat2, nat3)
remove upper
plus(nat2, nat3)
remove lower
plus(nat2, nat3)
parent
plus (nat2) (nat3)
lower
plus(nat2, _)
upper
SUCC(tf1(_, tree3))
remove upper
nat2
remove lower
nat2
remove upper
plus(nat2, nat3)
remove lower
plus(nat2, nat3)
remove upper
plus(nat2, nat3)
remove lower
plus(nat2, nat3)
remove upper
plus(nat2, nat3)
remove lower
plus(nat2, nat3)
Prop: tf1 (SUCC (ZERO)) (Tnil) = SUCC (tf1 (ZERO) (Tnil))
Prop: tf1 (SUCC (ZERO)) (Tnil) = SUCC (tf1 (ZERO) (Tnil))
Prop: tf1 (SUCC (ZERO)) (Tnil) = SUCC (tf1 (ZERO) (Tnil))
=================================================
Progress: 529


1st goal of : forall (nat1:nat) (tree1:tree), tf1 (SUCC (nat1)) (tree1) = SUCC (tf1 (nat1) (tree1))

---------------------------------------
forall (nat1:nat) (tree1:tree), tf1 (SUCC (nat1)) (tree1) = SUCC (tf1 (nat1) (tree1))

0 goal(s) more...

2 conjecture(s) more...
>>> induction tree1(rank : 8.)


1st goal of : forall (nat1:nat) (tree1:tree), tf1 (SUCC (nat1)) (tree1) = SUCC (tf1 (nat1) (tree1))
tree1 : tree
Base1 : tree1 = Tnil
---------------------------------------
forall (nat1:nat), tf1 (SUCC (nat1)) (Tnil) = SUCC (tf1 (nat1) (Tnil))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7.)
=================================================
Progress: 530


1st goal of : forall (nat1:nat) (tree1:tree), tf1 (SUCC (nat1)) (tree1) = SUCC (tf1 (nat1) (tree1))
tree1 : tree
Base1 : tree1 = Tnil
---------------------------------------
forall (nat1:nat), tf1 (SUCC (nat1)) (Tnil) = SUCC (tf1 (nat1) (Tnil))

1 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 7.)


1st goal of : forall (nat1:nat) (tree1:tree), tf1 (SUCC (nat1)) (tree1) = SUCC (tf1 (nat1) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (SUCC (nat1)) (tree2) = SUCC (tf1 (nat1) (tree2))
IH2 : forall (nat1:nat), tf1 (SUCC (nat1)) (tree3) = SUCC (tf1 (nat1) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
---------------------------------------
forall (nat1:nat), tf1 (SUCC (nat1)) (Node (nat2) (tree2) (tree3)) = SUCC (tf1 (nat1) (Node (nat2) (tree2) (tree3)))

0 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 531


1st goal of : forall (nat1:nat) (tree1:tree), tf1 (SUCC (nat1)) (tree1) = SUCC (tf1 (nat1) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (SUCC (nat1)) (tree2) = SUCC (tf1 (nat1) (tree2))
IH2 : forall (nat1:nat), tf1 (SUCC (nat1)) (tree3) = SUCC (tf1 (nat1) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
---------------------------------------
forall (nat1:nat), tf1 (SUCC (nat1)) (Node (nat2) (tree2) (tree3)) = SUCC (tf1 (nat1) (Node (nat2) (tree2) (tree3)))

0 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (nat1:nat) (tree1:tree), tf1 (SUCC (nat1)) (tree1) = SUCC (tf1 (nat1) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (SUCC (nat1)) (tree2) = SUCC (tf1 (nat1) (tree2))
IH2 : forall (nat1:nat), tf1 (SUCC (nat1)) (tree3) = SUCC (tf1 (nat1) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
---------------------------------------
forall (nat1:nat), if lq (tf1 (SUCC (plus (nat1) (nat2))) (tree2)) (tf1 (SUCC (plus (nat1) (nat2))) (tree3)) then tf1 (SUCC (plus (nat1) (nat2))) (tree3) else tf1 (SUCC (plus (nat1) (nat2))) (tree2) = SUCC (if lq (tf1 (plus (nat1) (nat2)) (tree2)) (tf1 (plus (nat1) (nat2)) (tree3)) then tf1 (plus (nat1) (nat2)) (tree3) else tf1 (plus (nat1) (nat2)) (tree2))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction nat1(rank:8.)
=================================================
Progress: 532


1st goal of : forall (nat1:nat) (tree1:tree), tf1 (SUCC (nat1)) (tree1) = SUCC (tf1 (nat1) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (SUCC (nat1)) (tree2) = SUCC (tf1 (nat1) (tree2))
IH2 : forall (nat1:nat), tf1 (SUCC (nat1)) (tree3) = SUCC (tf1 (nat1) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
---------------------------------------
forall (nat1:nat), if lq (tf1 (SUCC (plus (nat1) (nat2))) (tree2)) (tf1 (SUCC (plus (nat1) (nat2))) (tree3)) then tf1 (SUCC (plus (nat1) (nat2))) (tree3) else tf1 (SUCC (plus (nat1) (nat2))) (tree2) = SUCC (if lq (tf1 (plus (nat1) (nat2)) (tree2)) (tf1 (plus (nat1) (nat2)) (tree3)) then tf1 (plus (nat1) (nat2)) (tree3) else tf1 (plus (nat1) (nat2)) (tree2))

0 goal(s) more...

2 conjecture(s) more...
>>> induction nat1(rank : 8.)


1st goal of : forall (nat1:nat) (tree1:tree), tf1 (SUCC (nat1)) (tree1) = SUCC (tf1 (nat1) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (SUCC (nat1)) (tree2) = SUCC (tf1 (nat1) (tree2))
IH2 : forall (nat1:nat), tf1 (SUCC (nat1)) (tree3) = SUCC (tf1 (nat1) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
if lq (tf1 (SUCC (plus (ZERO) (nat2))) (tree2)) (tf1 (SUCC (plus (ZERO) (nat2))) (tree3)) then tf1 (SUCC (plus (ZERO) (nat2))) (tree3) else tf1 (SUCC (plus (ZERO) (nat2))) (tree2) = SUCC (if lq (tf1 (plus (ZERO) (nat2)) (tree2)) (tf1 (plus (ZERO) (nat2)) (tree3)) then tf1 (plus (ZERO) (nat2)) (tree3) else tf1 (plus (ZERO) (nat2)) (tree2))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 533


1st goal of : forall (nat1:nat) (tree1:tree), tf1 (SUCC (nat1)) (tree1) = SUCC (tf1 (nat1) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (SUCC (nat1)) (tree2) = SUCC (tf1 (nat1) (tree2))
IH2 : forall (nat1:nat), tf1 (SUCC (nat1)) (tree3) = SUCC (tf1 (nat1) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
if lq (tf1 (SUCC (plus (ZERO) (nat2))) (tree2)) (tf1 (SUCC (plus (ZERO) (nat2))) (tree3)) then tf1 (SUCC (plus (ZERO) (nat2))) (tree3) else tf1 (SUCC (plus (ZERO) (nat2))) (tree2) = SUCC (if lq (tf1 (plus (ZERO) (nat2)) (tree2)) (tf1 (plus (ZERO) (nat2)) (tree3)) then tf1 (plus (ZERO) (nat2)) (tree3) else tf1 (plus (ZERO) (nat2)) (tree2))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (nat1:nat) (tree1:tree), tf1 (SUCC (nat1)) (tree1) = SUCC (tf1 (nat1) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (SUCC (nat1)) (tree2) = SUCC (tf1 (nat1) (tree2))
IH2 : forall (nat1:nat), tf1 (SUCC (nat1)) (tree3) = SUCC (tf1 (nat1) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
if lq (tf1 (SUCC (nat2)) (tree2)) (tf1 (SUCC (nat2)) (tree3)) then tf1 (SUCC (plus (ZERO) (nat2))) (tree3) else tf1 (SUCC (plus (ZERO) (nat2))) (tree2) = SUCC (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (plus (ZERO) (nat2)) (tree3) else tf1 (plus (ZERO) (nat2)) (tree2))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 8
case lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3))(rank:9.)
rewrite IH1 in goal at 0(rank:16.)
rewrite IH1 in goal at 2(rank:16.)
rewrite IH2 in goal at 0(rank:24.)
rewrite IH2 in goal at 1(rank:24.)
rewrite IH2 in goal at 2(rank:24.)
rewrite IH1 in goal at 1(rank:16.)
case lq (tf1 (SUCC (nat2)) (tree2)) (tf1 (SUCC (nat2)) (tree3))(rank:9.)
=================================================
Progress: 534


1st goal of : forall (nat1:nat) (tree1:tree), tf1 (SUCC (nat1)) (tree1) = SUCC (tf1 (nat1) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (SUCC (nat1)) (tree2) = SUCC (tf1 (nat1) (tree2))
IH2 : forall (nat1:nat), tf1 (SUCC (nat1)) (tree3) = SUCC (tf1 (nat1) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
if lq (tf1 (SUCC (nat2)) (tree2)) (tf1 (SUCC (nat2)) (tree3)) then tf1 (SUCC (plus (ZERO) (nat2))) (tree3) else tf1 (SUCC (plus (ZERO) (nat2))) (tree2) = SUCC (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (plus (ZERO) (nat2)) (tree3) else tf1 (plus (ZERO) (nat2)) (tree2))

1 goal(s) more...

2 conjecture(s) more...
>>> case lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3))(rank : 9.)


1st goal of : forall (nat1:nat) (tree1:tree), tf1 (SUCC (nat1)) (tree1) = SUCC (tf1 (nat1) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (SUCC (nat1)) (tree2) = SUCC (tf1 (nat1) (tree2))
IH2 : forall (nat1:nat), tf1 (SUCC (nat1)) (tree3) = SUCC (tf1 (nat1) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
Base1 : nat1 = ZERO
Case1 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
---------------------------------------
if lq (tf1 (SUCC (nat2)) (tree2)) (tf1 (SUCC (nat2)) (tree3)) then tf1 (SUCC (plus (ZERO) (nat2))) (tree3) else tf1 (SUCC (plus (ZERO) (nat2))) (tree2) = SUCC (tf1 (nat2) (tree3))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 8
case lq (tf1 (SUCC (nat2)) (tree2)) (tf1 (SUCC (nat2)) (tree3))(rank:10.)
rewrite IH1 in goal at 0(rank:25.)
rewrite IH1 in goal at 2(rank:25.)
rewrite IH2 in goal at 0(rank:25.)
rewrite IH2 in goal at 1(rank:25.)
rewrite IH2 in goal at 2(rank:25.)
rewrite IH1 in goal at 1(rank:25.)
rewrite <- IH2 in goal at 0(rank:25.)
=================================================
Progress: 535


1st goal of : forall (nat1:nat) (tree1:tree), tf1 (SUCC (nat1)) (tree1) = SUCC (tf1 (nat1) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (SUCC (nat1)) (tree2) = SUCC (tf1 (nat1) (tree2))
IH2 : forall (nat1:nat), tf1 (SUCC (nat1)) (tree3) = SUCC (tf1 (nat1) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
if lq (tf1 (SUCC (nat2)) (tree2)) (tf1 (SUCC (nat2)) (tree3)) then tf1 (SUCC (plus (ZERO) (nat2))) (tree3) else tf1 (SUCC (plus (ZERO) (nat2))) (tree2) = SUCC (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (plus (ZERO) (nat2)) (tree3) else tf1 (plus (ZERO) (nat2)) (tree2))

1 goal(s) more...

2 conjecture(s) more...
>>> case lq (tf1 (SUCC (nat2)) (tree2)) (tf1 (SUCC (nat2)) (tree3))(rank : 9.)


1st goal of : forall (nat1:nat) (tree1:tree), tf1 (SUCC (nat1)) (tree1) = SUCC (tf1 (nat1) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (SUCC (nat1)) (tree2) = SUCC (tf1 (nat1) (tree2))
IH2 : forall (nat1:nat), tf1 (SUCC (nat1)) (tree3) = SUCC (tf1 (nat1) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
Base1 : nat1 = ZERO
Case1 : lq (tf1 (SUCC (nat2)) (tree2)) (tf1 (SUCC (nat2)) (tree3)) = true
---------------------------------------
tf1 (SUCC (nat2)) (tree3) = SUCC (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (plus (ZERO) (nat2)) (tree3) else tf1 (plus (ZERO) (nat2)) (tree2))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3))(rank:10.)
rewrite IH2 in goal at 0(rank:17.)
=================================================
Progress: 536


1st goal of : forall (nat1:nat) (tree1:tree), tf1 (SUCC (nat1)) (tree1) = SUCC (tf1 (nat1) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (SUCC (nat1)) (tree2) = SUCC (tf1 (nat1) (tree2))
IH2 : forall (nat1:nat), tf1 (SUCC (nat1)) (tree3) = SUCC (tf1 (nat1) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
Base1 : nat1 = ZERO
Case1 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
---------------------------------------
if lq (tf1 (SUCC (nat2)) (tree2)) (tf1 (SUCC (nat2)) (tree3)) then tf1 (SUCC (plus (ZERO) (nat2))) (tree3) else tf1 (SUCC (plus (ZERO) (nat2))) (tree2) = SUCC (tf1 (nat2) (tree3))

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (tf1 (SUCC (nat2)) (tree2)) (tf1 (SUCC (nat2)) (tree3))(rank : 10.)


1st goal of : forall (nat1:nat) (tree1:tree), tf1 (SUCC (nat1)) (tree1) = SUCC (tf1 (nat1) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (SUCC (nat1)) (tree2) = SUCC (tf1 (nat1) (tree2))
IH2 : forall (nat1:nat), tf1 (SUCC (nat1)) (tree3) = SUCC (tf1 (nat1) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
Base1 : nat1 = ZERO
Case1 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
Case2 : lq (tf1 (SUCC (nat2)) (tree2)) (tf1 (SUCC (nat2)) (tree3)) = true
---------------------------------------
tf1 (SUCC (nat2)) (tree3) = SUCC (tf1 (nat2) (tree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite IH2 in goal at 0(rank:18.)
rewrite <- IH2 in goal at 0(rank:18.)
=================================================
Progress: 537


1st goal of : forall (nat1:nat) (tree1:tree), tf1 (SUCC (nat1)) (tree1) = SUCC (tf1 (nat1) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (SUCC (nat1)) (tree2) = SUCC (tf1 (nat1) (tree2))
IH2 : forall (nat1:nat), tf1 (SUCC (nat1)) (tree3) = SUCC (tf1 (nat1) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
Base1 : nat1 = ZERO
Case1 : lq (tf1 (SUCC (nat2)) (tree2)) (tf1 (SUCC (nat2)) (tree3)) = true
---------------------------------------
tf1 (SUCC (nat2)) (tree3) = SUCC (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (plus (ZERO) (nat2)) (tree3) else tf1 (plus (ZERO) (nat2)) (tree2))

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3))(rank : 10.)


1st goal of : forall (nat1:nat) (tree1:tree), tf1 (SUCC (nat1)) (tree1) = SUCC (tf1 (nat1) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (SUCC (nat1)) (tree2) = SUCC (tf1 (nat1) (tree2))
IH2 : forall (nat1:nat), tf1 (SUCC (nat1)) (tree3) = SUCC (tf1 (nat1) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
Base1 : nat1 = ZERO
Case1 : lq (tf1 (SUCC (nat2)) (tree2)) (tf1 (SUCC (nat2)) (tree3)) = true
Case2 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
---------------------------------------
tf1 (SUCC (nat2)) (tree3) = SUCC (tf1 (nat2) (tree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite IH2 in goal at 0(rank:18.)
rewrite <- IH2 in goal at 0(rank:18.)
=================================================
Progress: 538


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))

---------------------------------------
forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))

0 goal(s) more...

1 conjecture(s) more...
>>> induction tree1(rank : 14.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
Base1 : tree1 = Tnil
---------------------------------------
forall (nat1:nat), tf1 (nat1) (Tnil) = plus (nat1) (tf1 (ZERO) (Tnil))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:6.)
=================================================
Progress: 539


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
Base1 : tree1 = Tnil
---------------------------------------
forall (nat1:nat), tf1 (nat1) (Tnil) = plus (nat1) (tf1 (ZERO) (Tnil))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
Base1 : tree1 = Tnil
---------------------------------------
forall (nat1:nat), nat1 = plus (nat1) (ZERO)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction nat1(rank:7.)
=================================================
Progress: 540


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
Base1 : tree1 = Tnil
---------------------------------------
forall (nat1:nat), nat1 = plus (nat1) (ZERO)

1 goal(s) more...

1 conjecture(s) more...
>>> induction nat1(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
Base1 : tree1 = Tnil
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
ZERO = plus (ZERO) (ZERO)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:6.)
=================================================
Progress: 541


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
Base1 : tree1 = Tnil
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
ZERO = plus (ZERO) (ZERO)

2 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
Base1 : tree1 = Tnil
nat1 : nat
nat2 : nat
IH1 : nat2 = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
SUCC (nat2) = plus (SUCC (nat2)) (ZERO)

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:6.)
=================================================
Progress: 542


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
Base1 : tree1 = Tnil
nat1 : nat
nat2 : nat
IH1 : nat2 = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
SUCC (nat2) = plus (SUCC (nat2)) (ZERO)

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
Base1 : tree1 = Tnil
nat1 : nat
nat2 : nat
IH1 : nat2 = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
SUCC (nat2) = SUCC (plus (nat2) (ZERO))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:6.)
=================================================
Progress: 543


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
Base1 : tree1 = Tnil
nat1 : nat
nat2 : nat
IH1 : nat2 = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
SUCC (nat2) = SUCC (plus (nat2) (ZERO))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
Base1 : tree1 = Tnil
nat1 : nat
nat2 : nat
IH1 : nat2 = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
SUCC (nat2) = SUCC (nat2)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:5.)
=================================================
Progress: 544


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
Base1 : tree1 = Tnil
nat1 : nat
nat2 : nat
IH1 : nat2 = plus (nat2) (ZERO)
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
SUCC (nat2) = SUCC (nat2)

1 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 5.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
---------------------------------------
forall (nat1:nat), tf1 (nat1) (Node (nat2) (tree2) (tree3)) = plus (nat1) (tf1 (ZERO) (Node (nat2) (tree2) (tree3)))

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:5.)
=================================================
Progress: 545


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
---------------------------------------
forall (nat1:nat), tf1 (nat1) (Node (nat2) (tree2) (tree3)) = plus (nat1) (tf1 (ZERO) (Node (nat2) (tree2) (tree3)))

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 5.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
---------------------------------------
forall (nat1:nat), if lq (tf1 (plus (nat1) (nat2)) (tree2)) (tf1 (plus (nat1) (nat2)) (tree3)) then tf1 (plus (nat1) (nat2)) (tree3) else tf1 (plus (nat1) (nat2)) (tree2) = plus (nat1) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction nat1(rank:6.)
=================================================
Progress: 546


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
---------------------------------------
forall (nat1:nat), if lq (tf1 (plus (nat1) (nat2)) (tree2)) (tf1 (plus (nat1) (nat2)) (tree3)) then tf1 (plus (nat1) (nat2)) (tree3) else tf1 (plus (nat1) (nat2)) (tree2) = plus (nat1) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))

0 goal(s) more...

1 conjecture(s) more...
>>> induction nat1(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
if lq (tf1 (plus (ZERO) (nat2)) (tree2)) (tf1 (plus (ZERO) (nat2)) (tree3)) then tf1 (plus (ZERO) (nat2)) (tree3) else tf1 (plus (ZERO) (nat2)) (tree2) = plus (ZERO) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:6.)
=================================================
Progress: 547


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
if lq (tf1 (plus (ZERO) (nat2)) (tree2)) (tf1 (plus (ZERO) (nat2)) (tree3)) then tf1 (plus (ZERO) (nat2)) (tree3) else tf1 (plus (ZERO) (nat2)) (tree2) = plus (ZERO) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (plus (ZERO) (nat2)) (tree3) else tf1 (plus (ZERO) (nat2)) (tree2) = if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3))(rank:7.)
=================================================
Progress: 548


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (plus (ZERO) (nat2)) (tree3) else tf1 (plus (ZERO) (nat2)) (tree2) = if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)

1 goal(s) more...

1 conjecture(s) more...
>>> case lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3))(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
Base1 : nat1 = ZERO
Case1 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
---------------------------------------
tf1 (nat2) (tree3) = tf1 (nat2) (tree3)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:6.)
=================================================
Progress: 549


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
Base1 : nat1 = ZERO
Case1 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
---------------------------------------
tf1 (nat2) (tree3) = tf1 (nat2) (tree3)

2 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
Base1 : nat1 = ZERO
Case1 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = false
---------------------------------------
tf1 (nat2) (tree2) = tf1 (nat2) (tree2)

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
reflexivity(rank:5.)
=================================================
Progress: 550


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
Base1 : nat1 = ZERO
Case1 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = false
---------------------------------------
tf1 (nat2) (tree2) = tf1 (nat2) (tree2)

1 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 5.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
---------------------------------------
if lq (tf1 (plus (SUCC (nat3)) (nat2)) (tree2)) (tf1 (plus (SUCC (nat3)) (nat2)) (tree3)) then tf1 (plus (SUCC (nat3)) (nat2)) (tree3) else tf1 (plus (SUCC (nat3)) (nat2)) (tree2) = plus (SUCC (nat3)) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:5.)
=================================================
Progress: 551


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
---------------------------------------
if lq (tf1 (plus (SUCC (nat3)) (nat2)) (tree2)) (tf1 (plus (SUCC (nat3)) (nat2)) (tree3)) then tf1 (plus (SUCC (nat3)) (nat2)) (tree3) else tf1 (plus (SUCC (nat3)) (nat2)) (tree2) = plus (SUCC (nat3)) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 5.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
---------------------------------------
if lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) then tf1 (plus (SUCC (nat3)) (nat2)) (tree3) else tf1 (plus (SUCC (nat3)) (nat2)) (tree2) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 10
case lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))(rank:6.)
rewrite IH1 in goal at 0(rank:13.)
rewrite IH1 in goal at 2(rank:21.)
rewrite IH2 in goal at 0(rank:21.)
rewrite IH2 in goal at 1(rank:21.)
rewrite IH2 in goal at 2(rank:21.)
rewrite IH2 in goal at 3(rank:21.)
rewrite IH1 in goal at 3(rank:21.)
rewrite IH1 in goal at 1(rank:21.)
rewrite <- IH3 in goal at 0(rank:13.)
=================================================
Progress: 552


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
---------------------------------------
if lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) then tf1 (plus (SUCC (nat3)) (nat2)) (tree3) else tf1 (plus (SUCC (nat3)) (nat2)) (tree2) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

0 goal(s) more...

1 conjecture(s) more...
>>> case lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
case lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3))(rank:7.)
rewrite IH2 in goal at 1(rank:14.)
rewrite IH1 in goal at 0(rank:22.)
rewrite IH1 in goal at 2(rank:22.)
rewrite IH2 in goal at 0(rank:22.)
rewrite IH2 in goal at 3(rank:22.)
rewrite <- IH3 in goal at 0(rank:22.)
rewrite IH1 in goal at 1(rank:22.)
rewrite IH2 in goal at 2(rank:22.)
=================================================
Progress: 553


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> case lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3))(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
Case2 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (plus (nat3) (tf1 (nat2) (tree3)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
rewrite IH2 in goal at 0(rank:23.)
rewrite IH2 in goal at 1(rank:23.)
rewrite IH2 in goal at 2(rank:23.)
rewrite <- IH3 in goal at 0(rank:23.)
=================================================
Progress: 554


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
---------------------------------------
if lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) then tf1 (plus (SUCC (nat3)) (nat2)) (tree3) else tf1 (plus (SUCC (nat3)) (nat2)) (tree2) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 13.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
---------------------------------------
if lq (plus (SUCC (plus (nat3) (nat2))) (tf1 (ZERO) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) then tf1 (plus (SUCC (nat3)) (nat2)) (tree3) else plus (plus (SUCC (nat3)) (nat2)) (tf1 (ZERO) (tree2)) = SUCC (plus (nat3) (if lq (plus (nat2) (tf1 (ZERO) (tree2))) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else plus (nat2) (tf1 (ZERO) (tree2))))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:5.)
=================================================
Progress: 555


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
---------------------------------------
if lq (plus (SUCC (plus (nat3) (nat2))) (tf1 (ZERO) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) then tf1 (plus (SUCC (nat3)) (nat2)) (tree3) else plus (plus (SUCC (nat3)) (nat2)) (tf1 (ZERO) (tree2)) = SUCC (plus (nat3) (if lq (plus (nat2) (tf1 (ZERO) (tree2))) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else plus (nat2) (tf1 (ZERO) (tree2))))

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 5.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
---------------------------------------
if lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) then tf1 (plus (SUCC (nat3)) (nat2)) (tree3) else plus (plus (SUCC (nat3)) (nat2)) (tf1 (ZERO) (tree2)) = SUCC (plus (nat3) (if lq (plus (nat2) (tf1 (ZERO) (tree2))) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else plus (nat2) (tf1 (ZERO) (tree2))))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 13
case lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))(rank:6.)
rewrite <- IH1 in goal at 0(rank:13.)
rewrite <- IH1 in goal at 1(rank:21.)
rewrite <- IH1 in goal at 2(rank:21.)
rewrite <- IH1 in goal at 3(rank:21.)
rewrite IH1 in goal at 0(rank:21.)
rewrite IH1 in goal at 2(rank:21.)
rewrite IH2 in goal at 0(rank:21.)
rewrite IH2 in goal at 1(rank:21.)
rewrite IH2 in goal at 2(rank:21.)
rewrite IH2 in goal at 3(rank:21.)
rewrite IH1 in goal at 3(rank:21.)
rewrite IH1 in goal at 1(rank:21.)
=================================================
Progress: 556


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
---------------------------------------
if lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) then tf1 (plus (SUCC (nat3)) (nat2)) (tree3) else plus (plus (SUCC (nat3)) (nat2)) (tf1 (ZERO) (tree2)) = SUCC (plus (nat3) (if lq (plus (nat2) (tf1 (ZERO) (tree2))) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else plus (nat2) (tf1 (ZERO) (tree2))))

0 goal(s) more...

1 conjecture(s) more...
>>> case lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (plus (nat3) (if lq (plus (nat2) (tf1 (ZERO) (tree2))) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else plus (nat2) (tf1 (ZERO) (tree2))))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 11
case lq (plus (nat2) (tf1 (ZERO) (tree2))) (tf1 (nat2) (tree3))(rank:7.)
rewrite IH2 in goal at 1(rank:14.)
rewrite <- IH1 in goal at 0(rank:14.)
rewrite IH1 in goal at 0(rank:22.)
rewrite IH1 in goal at 1(rank:22.)
rewrite IH1 in goal at 2(rank:22.)
rewrite IH2 in goal at 0(rank:22.)
rewrite IH2 in goal at 3(rank:22.)
rewrite IH2 in goal at 2(rank:22.)
rewrite <- IH1 in goal at 1(rank:14.)
rewrite <- IH1 in goal at 2(rank:14.)
=================================================
Progress: 557


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (plus (nat3) (if lq (plus (nat2) (tf1 (ZERO) (tree2))) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else plus (nat2) (tf1 (ZERO) (tree2))))

1 goal(s) more...

1 conjecture(s) more...
>>> case lq (plus (nat2) (tf1 (ZERO) (tree2))) (tf1 (nat2) (tree3))(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
Case2 : lq (plus (nat2) (tf1 (ZERO) (tree2))) (tf1 (nat2) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (plus (nat3) (tf1 (nat2) (tree3)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite IH2 in goal at 0(rank:23.)
rewrite IH2 in goal at 1(rank:23.)
rewrite IH2 in goal at 2(rank:23.)
=================================================
Progress: 558


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
---------------------------------------
if lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) then tf1 (plus (SUCC (nat3)) (nat2)) (tree3) else tf1 (plus (SUCC (nat3)) (nat2)) (tree2) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH3 in goal at 0(rank : 13.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
---------------------------------------
if lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) then tf1 (plus (SUCC (nat3)) (nat2)) (tree3) else tf1 (plus (SUCC (nat3)) (nat2)) (tree2) = SUCC (if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 10
case lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3))(rank:6.)
rewrite IH1 in goal at 0(rank:21.)
rewrite IH1 in goal at 2(rank:21.)
rewrite IH2 in goal at 0(rank:21.)
rewrite IH2 in goal at 1(rank:21.)
rewrite IH2 in goal at 2(rank:21.)
rewrite IH2 in goal at 3(rank:21.)
rewrite IH1 in goal at 3(rank:21.)
rewrite IH1 in goal at 1(rank:21.)
case lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))(rank:6.)
=================================================
Progress: 559


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
---------------------------------------
if lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) then tf1 (plus (SUCC (nat3)) (nat2)) (tree3) else tf1 (plus (SUCC (nat3)) (nat2)) (tree2) = SUCC (if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2))

0 goal(s) more...

1 conjecture(s) more...
>>> case lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3))(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
---------------------------------------
if lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) then tf1 (plus (SUCC (nat3)) (nat2)) (tree3) else tf1 (plus (SUCC (nat3)) (nat2)) (tree2) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
case lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))(rank:7.)
rewrite IH2 in goal at 3(rank:14.)
rewrite IH1 in goal at 0(rank:22.)
rewrite IH1 in goal at 2(rank:22.)
rewrite IH2 in goal at 0(rank:22.)
rewrite IH2 in goal at 1(rank:22.)
rewrite IH2 in goal at 2(rank:22.)
rewrite IH1 in goal at 1(rank:22.)
rewrite IH3 in goal at 0(rank:14.)
=================================================
Progress: 560


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
---------------------------------------
if lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) then tf1 (plus (SUCC (nat3)) (nat2)) (tree3) else tf1 (plus (SUCC (nat3)) (nat2)) (tree2) = SUCC (if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2))

0 goal(s) more...

1 conjecture(s) more...
>>> case lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
case lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3))(rank:7.)
rewrite IH2 in goal at 1(rank:14.)
rewrite IH3 in goal at 0(rank:14.)
rewrite IH1 in goal at 0(rank:22.)
rewrite IH1 in goal at 1(rank:22.)
rewrite IH1 in goal at 2(rank:22.)
rewrite IH2 in goal at 0(rank:22.)
rewrite IH2 in goal at 3(rank:22.)
rewrite IH2 in goal at 2(rank:22.)
=================================================
Progress: 561


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
---------------------------------------
if lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) then tf1 (plus (SUCC (nat3)) (nat2)) (tree3) else tf1 (plus (SUCC (nat3)) (nat2)) (tree2) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

1 goal(s) more...

1 conjecture(s) more...
>>> case lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
rewrite IH2 in goal at 0(rank:23.)
rewrite IH2 in goal at 1(rank:23.)
rewrite IH2 in goal at 2(rank:23.)
rewrite IH3 in goal at 0(rank:23.)
=================================================
Progress: 562


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2))

1 goal(s) more...

1 conjecture(s) more...
>>> case lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3))(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
Case2 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
rewrite IH2 in goal at 0(rank:23.)
rewrite IH2 in goal at 1(rank:23.)
rewrite IH2 in goal at 2(rank:23.)
rewrite IH3 in goal at 0(rank:23.)
=================================================
Progress: 563


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
---------------------------------------
if lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) then tf1 (plus (SUCC (nat3)) (nat2)) (tree3) else plus (plus (SUCC (nat3)) (nat2)) (tf1 (ZERO) (tree2)) = SUCC (plus (nat3) (if lq (plus (nat2) (tf1 (ZERO) (tree2))) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else plus (nat2) (tf1 (ZERO) (tree2))))

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 13.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
---------------------------------------
if lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) then tf1 (plus (SUCC (nat3)) (nat2)) (tree3) else tf1 (plus (SUCC (nat3)) (nat2)) (tree2) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
case lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3))(rank:6.)
rewrite IH1 in goal at 1(rank:21.)
rewrite IH2 in goal at 0(rank:21.)
rewrite IH2 in goal at 1(rank:21.)
rewrite IH2 in goal at 2(rank:21.)
rewrite IH2 in goal at 3(rank:21.)
rewrite IH1 in goal at 2(rank:21.)
case lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))(rank:6.)
rewrite <- IH3 in goal at 0(rank:13.)
=================================================
Progress: 564


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
---------------------------------------
if lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) then tf1 (plus (SUCC (nat3)) (nat2)) (tree3) else tf1 (plus (SUCC (nat3)) (nat2)) (tree2) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

0 goal(s) more...

1 conjecture(s) more...
>>> case lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3))(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
---------------------------------------
if lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) then tf1 (plus (SUCC (nat3)) (nat2)) (tree3) else tf1 (plus (SUCC (nat3)) (nat2)) (tree2) = SUCC (plus (nat3) (tf1 (nat2) (tree3)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
case lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))(rank:7.)
rewrite IH2 in goal at 3(rank:14.)
rewrite IH1 in goal at 0(rank:22.)
rewrite IH1 in goal at 2(rank:22.)
rewrite IH2 in goal at 0(rank:22.)
rewrite IH2 in goal at 1(rank:22.)
rewrite IH2 in goal at 2(rank:22.)
rewrite IH1 in goal at 1(rank:22.)
rewrite <- IH3 in goal at 0(rank:14.)
=================================================
Progress: 565


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
---------------------------------------
if lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) then tf1 (plus (SUCC (nat3)) (nat2)) (tree3) else tf1 (plus (SUCC (nat3)) (nat2)) (tree2) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

0 goal(s) more...

1 conjecture(s) more...
>>> case lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
case lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3))(rank:7.)
rewrite IH2 in goal at 1(rank:14.)
rewrite IH1 in goal at 0(rank:22.)
rewrite IH1 in goal at 2(rank:22.)
rewrite IH2 in goal at 0(rank:22.)
rewrite IH2 in goal at 3(rank:22.)
rewrite <- IH3 in goal at 0(rank:22.)
rewrite IH1 in goal at 1(rank:22.)
rewrite IH2 in goal at 2(rank:22.)
=================================================
Progress: 566


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
---------------------------------------
if lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) then tf1 (plus (SUCC (nat3)) (nat2)) (tree3) else tf1 (plus (SUCC (nat3)) (nat2)) (tree2) = SUCC (plus (nat3) (tf1 (nat2) (tree3)))

1 goal(s) more...

1 conjecture(s) more...
>>> case lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (plus (nat3) (tf1 (nat2) (tree3)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
rewrite IH2 in goal at 0(rank:23.)
rewrite IH2 in goal at 1(rank:23.)
rewrite IH2 in goal at 2(rank:23.)
rewrite <- IH3 in goal at 0(rank:23.)
=================================================
Progress: 567


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> case lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3))(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
Case2 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (plus (nat3) (tf1 (nat2) (tree3)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
rewrite IH2 in goal at 0(rank:23.)
rewrite IH2 in goal at 1(rank:23.)
rewrite IH2 in goal at 2(rank:23.)
rewrite <- IH3 in goal at 0(rank:23.)
=================================================
Progress: 568


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
---------------------------------------
if lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) then tf1 (plus (SUCC (nat3)) (nat2)) (tree3) else tf1 (plus (SUCC (nat3)) (nat2)) (tree2) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH3 in goal at 0(rank : 13.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
---------------------------------------
if lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) then tf1 (plus (SUCC (nat3)) (nat2)) (tree3) else tf1 (plus (SUCC (nat3)) (nat2)) (tree2) = SUCC (if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 10
case lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3))(rank:6.)
rewrite IH1 in goal at 0(rank:21.)
rewrite IH1 in goal at 2(rank:21.)
rewrite IH2 in goal at 0(rank:21.)
rewrite IH2 in goal at 1(rank:21.)
rewrite IH2 in goal at 2(rank:21.)
rewrite IH2 in goal at 3(rank:21.)
rewrite IH1 in goal at 3(rank:21.)
rewrite IH1 in goal at 1(rank:21.)
case lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))(rank:6.)
=================================================
Progress: 569


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
---------------------------------------
if lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) then tf1 (plus (SUCC (nat3)) (nat2)) (tree3) else tf1 (plus (SUCC (nat3)) (nat2)) (tree2) = SUCC (if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2))

0 goal(s) more...

1 conjecture(s) more...
>>> case lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3))(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
---------------------------------------
if lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) then tf1 (plus (SUCC (nat3)) (nat2)) (tree3) else tf1 (plus (SUCC (nat3)) (nat2)) (tree2) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
case lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))(rank:7.)
rewrite IH2 in goal at 3(rank:14.)
rewrite IH1 in goal at 0(rank:22.)
rewrite IH1 in goal at 2(rank:22.)
rewrite IH2 in goal at 0(rank:22.)
rewrite IH2 in goal at 1(rank:22.)
rewrite IH2 in goal at 2(rank:22.)
rewrite IH1 in goal at 1(rank:22.)
rewrite IH3 in goal at 0(rank:14.)
=================================================
Progress: 570


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
---------------------------------------
if lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) then tf1 (plus (SUCC (nat3)) (nat2)) (tree3) else tf1 (plus (SUCC (nat3)) (nat2)) (tree2) = SUCC (if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2))

0 goal(s) more...

1 conjecture(s) more...
>>> case lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
case lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3))(rank:7.)
rewrite IH2 in goal at 1(rank:14.)
rewrite IH3 in goal at 0(rank:14.)
rewrite IH1 in goal at 0(rank:22.)
rewrite IH1 in goal at 1(rank:22.)
rewrite IH1 in goal at 2(rank:22.)
rewrite IH2 in goal at 0(rank:22.)
rewrite IH2 in goal at 3(rank:22.)
rewrite IH2 in goal at 2(rank:22.)
=================================================
Progress: 571


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
---------------------------------------
if lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) then tf1 (plus (SUCC (nat3)) (nat2)) (tree3) else tf1 (plus (SUCC (nat3)) (nat2)) (tree2) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

1 goal(s) more...

1 conjecture(s) more...
>>> case lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
rewrite IH2 in goal at 0(rank:23.)
rewrite IH2 in goal at 1(rank:23.)
rewrite IH2 in goal at 2(rank:23.)
rewrite IH3 in goal at 0(rank:23.)
=================================================
Progress: 572


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2))

1 goal(s) more...

1 conjecture(s) more...
>>> case lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3))(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
Case2 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
rewrite IH2 in goal at 0(rank:23.)
rewrite IH2 in goal at 1(rank:23.)
rewrite IH2 in goal at 2(rank:23.)
rewrite IH3 in goal at 0(rank:23.)
=================================================
Progress: 573


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree), tf1 (nat2) (tree1) = plus (nat2) (tf1 (ZERO) (tree1))
Inductive1 : nat1 = SUCC (nat2)
---------------------------------------
forall (tree1:tree), tf1 (SUCC (nat2)) (tree1) = SUCC (plus (nat2) (tf1 (ZERO) (tree1)))

0 goal(s) more...

1 conjecture(s) more...
>>> induction tree1(rank : 14.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree), tf1 (nat2) (tree1) = plus (nat2) (tf1 (ZERO) (tree1))
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
Base1 : tree1 = Tnil
---------------------------------------
tf1 (SUCC (nat2)) (Tnil) = SUCC (plus (nat2) (tf1 (ZERO) (Tnil)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:6.)
=================================================
Progress: 574


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree), tf1 (nat2) (tree1) = plus (nat2) (tf1 (ZERO) (tree1))
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
Base1 : tree1 = Tnil
---------------------------------------
tf1 (SUCC (nat2)) (Tnil) = SUCC (plus (nat2) (tf1 (ZERO) (Tnil)))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree), tf1 (nat2) (tree1) = plus (nat2) (tf1 (ZERO) (tree1))
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
Base1 : tree1 = Tnil
---------------------------------------
SUCC (nat2) = SUCC (plus (nat2) (ZERO))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
validate generalize_common_subterm_goal
Prop: ZERO = plus (ZERO) (ZERO)
Prop: ZERO = plus (ZERO) (ZERO)
Prop: SUCC (ZERO) = plus (SUCC (ZERO)) (ZERO)
t is here


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree), tf1 (nat2) (tree1) = plus (nat2) (tf1 (ZERO) (tree1))
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
Base1 : tree1 = Tnil
---------------------------------------
SUCC (nat2) = SUCC (plus (nat2) (ZERO))

1 goal(s) more...

1 conjecture(s) more...
duplicated tactic
assert forall (nat1:nat), nat1 = plus (nat1) (ZERO)
induction nat1
reflexivity
simpl in goal
rewrite <- IH1 in goal at 0
reflexivity


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree), tf1 (nat2) (tree1) = plus (nat2) (tf1 (ZERO) (tree1))
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
Base1 : tree1 = Tnil
---------------------------------------
SUCC (nat2) = SUCC (plus (nat2) (ZERO))

1 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 575


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree), tf1 (nat2) (tree1) = plus (nat2) (tf1 (ZERO) (tree1))
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
Base1 : tree1 = Tnil
---------------------------------------
SUCC (nat2) = SUCC (plus (nat2) (ZERO))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : -1.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree), tf1 (nat2) (tree1) = plus (nat2) (tf1 (ZERO) (tree1))
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
Base1 : tree1 = Tnil
---------------------------------------
SUCC (nat2) = SUCC (plus (nat2) (ZERO))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- lemma3 in goal at 0(rank:6.)
=================================================
Progress: 576


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree), tf1 (nat2) (tree1) = plus (nat2) (tf1 (ZERO) (tree1))
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
Base1 : tree1 = Tnil
---------------------------------------
SUCC (nat2) = SUCC (plus (nat2) (ZERO))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- lemma3 in goal at 0(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree), tf1 (nat2) (tree1) = plus (nat2) (tf1 (ZERO) (tree1))
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
Base1 : tree1 = Tnil
---------------------------------------
SUCC (nat2) = SUCC (nat2)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:5.)
=================================================
Progress: 577


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree), tf1 (nat2) (tree1) = plus (nat2) (tf1 (ZERO) (tree1))
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
Base1 : tree1 = Tnil
---------------------------------------
SUCC (nat2) = SUCC (nat2)

1 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 5.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree), tf1 (nat2) (tree1) = plus (nat2) (tf1 (ZERO) (tree1))
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
tree2 : tree
tree3 : tree
IH2 : tf1 (SUCC (nat2)) (tree2) = SUCC (plus (nat2) (tf1 (ZERO) (tree2)))
IH3 : tf1 (SUCC (nat2)) (tree3) = SUCC (plus (nat2) (tf1 (ZERO) (tree3)))
Inductive2 : tree1 = Node (nat3) (tree2) (tree3)
---------------------------------------
tf1 (SUCC (nat2)) (Node (nat3) (tree2) (tree3)) = SUCC (plus (nat2) (tf1 (ZERO) (Node (nat3) (tree2) (tree3))))

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:5.)
=================================================
Progress: 578


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree), tf1 (nat2) (tree1) = plus (nat2) (tf1 (ZERO) (tree1))
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
tree2 : tree
tree3 : tree
IH2 : tf1 (SUCC (nat2)) (tree2) = SUCC (plus (nat2) (tf1 (ZERO) (tree2)))
IH3 : tf1 (SUCC (nat2)) (tree3) = SUCC (plus (nat2) (tf1 (ZERO) (tree3)))
Inductive2 : tree1 = Node (nat3) (tree2) (tree3)
---------------------------------------
tf1 (SUCC (nat2)) (Node (nat3) (tree2) (tree3)) = SUCC (plus (nat2) (tf1 (ZERO) (Node (nat3) (tree2) (tree3))))

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 5.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree), tf1 (nat2) (tree1) = plus (nat2) (tf1 (ZERO) (tree1))
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
tree2 : tree
tree3 : tree
IH2 : tf1 (SUCC (nat2)) (tree2) = SUCC (plus (nat2) (tf1 (ZERO) (tree2)))
IH3 : tf1 (SUCC (nat2)) (tree3) = SUCC (plus (nat2) (tf1 (ZERO) (tree3)))
Inductive2 : tree1 = Node (nat3) (tree2) (tree3)
---------------------------------------
if lq (tf1 (SUCC (plus (nat2) (nat3))) (tree2)) (tf1 (SUCC (plus (nat2) (nat3))) (tree3)) then tf1 (SUCC (plus (nat2) (nat3))) (tree3) else tf1 (SUCC (plus (nat2) (nat3))) (tree2) = SUCC (plus (nat2) (if lq (tf1 (nat3) (tree2)) (tf1 (nat3) (tree3)) then tf1 (nat3) (tree3) else tf1 (nat3) (tree2)))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case lq (tf1 (nat3) (tree2)) (tf1 (nat3) (tree3))(rank:6.)
case lq (tf1 (SUCC (plus (nat2) (nat3))) (tree2)) (tf1 (SUCC (plus (nat2) (nat3))) (tree3))(rank:6.)
=================================================
Progress: 579


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree), tf1 (nat2) (tree1) = plus (nat2) (tf1 (ZERO) (tree1))
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
tree2 : tree
tree3 : tree
IH2 : tf1 (SUCC (nat2)) (tree2) = SUCC (plus (nat2) (tf1 (ZERO) (tree2)))
IH3 : tf1 (SUCC (nat2)) (tree3) = SUCC (plus (nat2) (tf1 (ZERO) (tree3)))
Inductive2 : tree1 = Node (nat3) (tree2) (tree3)
---------------------------------------
if lq (tf1 (SUCC (plus (nat2) (nat3))) (tree2)) (tf1 (SUCC (plus (nat2) (nat3))) (tree3)) then tf1 (SUCC (plus (nat2) (nat3))) (tree3) else tf1 (SUCC (plus (nat2) (nat3))) (tree2) = SUCC (plus (nat2) (if lq (tf1 (nat3) (tree2)) (tf1 (nat3) (tree3)) then tf1 (nat3) (tree3) else tf1 (nat3) (tree2)))

0 goal(s) more...

1 conjecture(s) more...
>>> case lq (tf1 (nat3) (tree2)) (tf1 (nat3) (tree3))(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree), tf1 (nat2) (tree1) = plus (nat2) (tf1 (ZERO) (tree1))
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
tree2 : tree
tree3 : tree
IH2 : tf1 (SUCC (nat2)) (tree2) = SUCC (plus (nat2) (tf1 (ZERO) (tree2)))
IH3 : tf1 (SUCC (nat2)) (tree3) = SUCC (plus (nat2) (tf1 (ZERO) (tree3)))
Inductive2 : tree1 = Node (nat3) (tree2) (tree3)
Case1 : lq (tf1 (nat3) (tree2)) (tf1 (nat3) (tree3)) = true
---------------------------------------
if lq (tf1 (SUCC (plus (nat2) (nat3))) (tree2)) (tf1 (SUCC (plus (nat2) (nat3))) (tree3)) then tf1 (SUCC (plus (nat2) (nat3))) (tree3) else tf1 (SUCC (plus (nat2) (nat3))) (tree2) = SUCC (plus (nat2) (tf1 (nat3) (tree3)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case lq (tf1 (SUCC (plus (nat2) (nat3))) (tree2)) (tf1 (SUCC (plus (nat2) (nat3))) (tree3))(rank:7.)
=================================================
Progress: 580


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree), tf1 (nat2) (tree1) = plus (nat2) (tf1 (ZERO) (tree1))
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
tree2 : tree
tree3 : tree
IH2 : tf1 (SUCC (nat2)) (tree2) = SUCC (plus (nat2) (tf1 (ZERO) (tree2)))
IH3 : tf1 (SUCC (nat2)) (tree3) = SUCC (plus (nat2) (tf1 (ZERO) (tree3)))
Inductive2 : tree1 = Node (nat3) (tree2) (tree3)
---------------------------------------
if lq (tf1 (SUCC (plus (nat2) (nat3))) (tree2)) (tf1 (SUCC (plus (nat2) (nat3))) (tree3)) then tf1 (SUCC (plus (nat2) (nat3))) (tree3) else tf1 (SUCC (plus (nat2) (nat3))) (tree2) = SUCC (plus (nat2) (if lq (tf1 (nat3) (tree2)) (tf1 (nat3) (tree3)) then tf1 (nat3) (tree3) else tf1 (nat3) (tree2)))

0 goal(s) more...

1 conjecture(s) more...
>>> case lq (tf1 (SUCC (plus (nat2) (nat3))) (tree2)) (tf1 (SUCC (plus (nat2) (nat3))) (tree3))(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree), tf1 (nat2) (tree1) = plus (nat2) (tf1 (ZERO) (tree1))
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
tree2 : tree
tree3 : tree
IH2 : tf1 (SUCC (nat2)) (tree2) = SUCC (plus (nat2) (tf1 (ZERO) (tree2)))
IH3 : tf1 (SUCC (nat2)) (tree3) = SUCC (plus (nat2) (tf1 (ZERO) (tree3)))
Inductive2 : tree1 = Node (nat3) (tree2) (tree3)
Case1 : lq (tf1 (SUCC (plus (nat2) (nat3))) (tree2)) (tf1 (SUCC (plus (nat2) (nat3))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat2) (nat3))) (tree3) = SUCC (plus (nat2) (if lq (tf1 (nat3) (tree2)) (tf1 (nat3) (tree3)) then tf1 (nat3) (tree3) else tf1 (nat3) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case lq (tf1 (nat3) (tree2)) (tf1 (nat3) (tree3))(rank:7.)
=================================================
Progress: 581


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree), tf1 (nat2) (tree1) = plus (nat2) (tf1 (ZERO) (tree1))
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
tree2 : tree
tree3 : tree
IH2 : tf1 (SUCC (nat2)) (tree2) = SUCC (plus (nat2) (tf1 (ZERO) (tree2)))
IH3 : tf1 (SUCC (nat2)) (tree3) = SUCC (plus (nat2) (tf1 (ZERO) (tree3)))
Inductive2 : tree1 = Node (nat3) (tree2) (tree3)
Case1 : lq (tf1 (nat3) (tree2)) (tf1 (nat3) (tree3)) = true
---------------------------------------
if lq (tf1 (SUCC (plus (nat2) (nat3))) (tree2)) (tf1 (SUCC (plus (nat2) (nat3))) (tree3)) then tf1 (SUCC (plus (nat2) (nat3))) (tree3) else tf1 (SUCC (plus (nat2) (nat3))) (tree2) = SUCC (plus (nat2) (tf1 (nat3) (tree3)))

1 goal(s) more...

1 conjecture(s) more...
>>> case lq (tf1 (SUCC (plus (nat2) (nat3))) (tree2)) (tf1 (SUCC (plus (nat2) (nat3))) (tree3))(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree), tf1 (nat2) (tree1) = plus (nat2) (tf1 (ZERO) (tree1))
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
tree2 : tree
tree3 : tree
IH2 : tf1 (SUCC (nat2)) (tree2) = SUCC (plus (nat2) (tf1 (ZERO) (tree2)))
IH3 : tf1 (SUCC (nat2)) (tree3) = SUCC (plus (nat2) (tf1 (ZERO) (tree3)))
Inductive2 : tree1 = Node (nat3) (tree2) (tree3)
Case1 : lq (tf1 (nat3) (tree2)) (tf1 (nat3) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat2) (nat3))) (tree2)) (tf1 (SUCC (plus (nat2) (nat3))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat2) (nat3))) (tree3) = SUCC (plus (nat2) (tf1 (nat3) (tree3)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
reflexivity
simpl in goal
rewrite <- lemma3 in goal at 0
reflexivity
simpl in goal
case lq (tf1 (nat3) (tree2)) (tf1 (nat3) (tree3))
case lq (tf1 (SUCC (plus (nat2) (nat3))) (tree2)) (tf1 (SUCC (plus (nat2) (nat3))) (tree3))
validate generalize_common_subterm_goal
Prop: tf1 (SUCC (plus (ZERO) (ZERO))) (Node (ZERO) (Tnil) (Tnil)) = SUCC (plus (ZERO) (tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil))))
Prop: tf1 (SUCC (plus (ZERO) (ZERO))) (Tnil) = SUCC (plus (ZERO) (tf1 (ZERO) (Tnil)))
Prop: tf1 (SUCC (plus (ZERO) (ZERO))) (Tnil) = SUCC (plus (ZERO) (tf1 (ZERO) (Tnil)))
Lemma List
forall (nat1:nat) (nat2:nat) (tree1:tree), tf1 (SUCC (plus (nat1) (nat2))) (tree1) = SUCC (plus (nat1) (tf1 (nat2) (tree1)))
End of Lemma List


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree), tf1 (nat2) (tree1) = plus (nat2) (tf1 (ZERO) (tree1))
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
tree2 : tree
tree3 : tree
IH2 : tf1 (SUCC (nat2)) (tree2) = SUCC (plus (nat2) (tf1 (ZERO) (tree2)))
IH3 : tf1 (SUCC (nat2)) (tree3) = SUCC (plus (nat2) (tf1 (ZERO) (tree3)))
Inductive2 : tree1 = Node (nat3) (tree2) (tree3)
Case1 : lq (tf1 (nat3) (tree2)) (tf1 (nat3) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat2) (nat3))) (tree2)) (tf1 (SUCC (plus (nat2) (nat3))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat2) (nat3))) (tree3) = SUCC (plus (nat2) (tf1 (nat3) (tree3)))

2 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 582


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree), tf1 (nat2) (tree1) = plus (nat2) (tf1 (ZERO) (tree1))
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
tree2 : tree
tree3 : tree
IH2 : tf1 (SUCC (nat2)) (tree2) = SUCC (plus (nat2) (tf1 (ZERO) (tree2)))
IH3 : tf1 (SUCC (nat2)) (tree3) = SUCC (plus (nat2) (tf1 (ZERO) (tree3)))
Inductive2 : tree1 = Node (nat3) (tree2) (tree3)
Case1 : lq (tf1 (nat3) (tree2)) (tf1 (nat3) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat2) (nat3))) (tree2)) (tf1 (SUCC (plus (nat2) (nat3))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat2) (nat3))) (tree3) = SUCC (plus (nat2) (tf1 (nat3) (tree3)))

2 goal(s) more...

1 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (tree1:tree), tf1 (SUCC (plus (nat1) (nat2))) (tree1) = SUCC (plus (nat1) (tf1 (nat2) (tree1)))(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree), tf1 (SUCC (plus (nat1) (nat2))) (tree1) = SUCC (plus (nat1) (tf1 (nat2) (tree1)))

---------------------------------------
forall (nat1:nat) (nat2:nat) (tree1:tree), tf1 (SUCC (plus (nat1) (nat2))) (tree1) = SUCC (plus (nat1) (tf1 (nat2) (tree1)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction nat1(rank:8.)
=================================================
Progress: 583


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree), tf1 (nat2) (tree1) = plus (nat2) (tf1 (ZERO) (tree1))
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
tree2 : tree
tree3 : tree
IH2 : tf1 (SUCC (nat2)) (tree2) = SUCC (plus (nat2) (tf1 (ZERO) (tree2)))
IH3 : tf1 (SUCC (nat2)) (tree3) = SUCC (plus (nat2) (tf1 (ZERO) (tree3)))
Inductive2 : tree1 = Node (nat3) (tree2) (tree3)
Case1 : lq (tf1 (SUCC (plus (nat2) (nat3))) (tree2)) (tf1 (SUCC (plus (nat2) (nat3))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat2) (nat3))) (tree3) = SUCC (plus (nat2) (if lq (tf1 (nat3) (tree2)) (tf1 (nat3) (tree3)) then tf1 (nat3) (tree3) else tf1 (nat3) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> case lq (tf1 (nat3) (tree2)) (tf1 (nat3) (tree3))(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
nat1 : nat
nat2 : nat
IH1 : forall (tree1:tree), tf1 (nat2) (tree1) = plus (nat2) (tf1 (ZERO) (tree1))
Inductive1 : nat1 = SUCC (nat2)
tree1 : tree
nat3 : nat
tree2 : tree
tree3 : tree
IH2 : tf1 (SUCC (nat2)) (tree2) = SUCC (plus (nat2) (tf1 (ZERO) (tree2)))
IH3 : tf1 (SUCC (nat2)) (tree3) = SUCC (plus (nat2) (tf1 (ZERO) (tree3)))
Inductive2 : tree1 = Node (nat3) (tree2) (tree3)
Case1 : lq (tf1 (SUCC (plus (nat2) (nat3))) (tree2)) (tf1 (SUCC (plus (nat2) (nat3))) (tree3)) = true
Case2 : lq (tf1 (nat3) (tree2)) (tf1 (nat3) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat2) (nat3))) (tree3) = SUCC (plus (nat2) (tf1 (nat3) (tree3)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH1 in goal at 0
reflexivity
simpl in goal
rewrite <- lemma3 in goal at 0
reflexivity
simpl in goal
case lq (tf1 (SUCC (plus (nat2) (nat3))) (tree2)) (tf1 (SUCC (plus (nat2) (nat3))) (tree3))
case lq (tf1 (nat3) (tree2)) (tf1 (nat3) (tree3))
validate generalize_common_subterm_goal
Prop: tf1 (SUCC (plus (SUCC (ZERO)) (SUCC (SUCC (ZERO))))) (Node (ZERO) (Tnil) (Tnil)) = SUCC (plus (SUCC (ZERO)) (tf1 (SUCC (SUCC (ZERO))) (Node (ZERO) (Tnil) (Tnil))))
Prop: tf1 (SUCC (plus (ZERO) (ZERO))) (Tnil) = SUCC (plus (ZERO) (tf1 (ZERO) (Tnil)))
Prop: tf1 (SUCC (plus (SUCC (ZERO)) (ZERO))) (Node (ZERO) (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Tnil) (Tnil)) (Tnil)) (Node (ZERO) (Tnil) (Node (SUCC (ZERO)) (Tnil) (Tnil)))) (Tnil)) = SUCC (plus (SUCC (ZERO)) (tf1 (ZERO) (Node (ZERO) (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Tnil) (Tnil)) (Tnil)) (Node (ZERO) (Tnil) (Node (SUCC (ZERO)) (Tnil) (Tnil)))) (Tnil))))
=================================================
Progress: 584


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree), tf1 (SUCC (plus (nat1) (nat2))) (tree1) = SUCC (plus (nat1) (tf1 (nat2) (tree1)))

---------------------------------------
forall (nat1:nat) (nat2:nat) (tree1:tree), tf1 (SUCC (plus (nat1) (nat2))) (tree1) = SUCC (plus (nat1) (tf1 (nat2) (tree1)))

0 goal(s) more...

2 conjecture(s) more...
>>> induction nat1(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree), tf1 (SUCC (plus (nat1) (nat2))) (tree1) = SUCC (plus (nat1) (tf1 (nat2) (tree1)))
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (nat2:nat) (tree1:tree), tf1 (SUCC (plus (ZERO) (nat2))) (tree1) = SUCC (plus (ZERO) (tf1 (nat2) (tree1)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 585


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree), tf1 (SUCC (plus (nat1) (nat2))) (tree1) = SUCC (plus (nat1) (tf1 (nat2) (tree1)))
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (nat2:nat) (tree1:tree), tf1 (SUCC (plus (ZERO) (nat2))) (tree1) = SUCC (plus (ZERO) (tf1 (nat2) (tree1)))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree), tf1 (SUCC (plus (nat1) (nat2))) (tree1) = SUCC (plus (nat1) (tf1 (nat2) (tree1)))
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (nat2:nat) (tree1:tree), tf1 (SUCC (nat2)) (tree1) = SUCC (tf1 (nat2) (tree1))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction tree1(rank:9.)
=================================================
Progress: 586


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree), tf1 (SUCC (plus (nat1) (nat2))) (tree1) = SUCC (plus (nat1) (tf1 (nat2) (tree1)))
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (nat2:nat) (tree1:tree), tf1 (SUCC (nat2)) (tree1) = SUCC (tf1 (nat2) (tree1))

1 goal(s) more...

2 conjecture(s) more...
>>> induction tree1(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree), tf1 (SUCC (plus (nat1) (nat2))) (tree1) = SUCC (plus (nat1) (tf1 (nat2) (tree1)))
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (nat2:nat), tf1 (SUCC (nat2)) (Tnil) = SUCC (tf1 (nat2) (Tnil))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:8.)
=================================================
Progress: 587


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree), tf1 (SUCC (plus (nat1) (nat2))) (tree1) = SUCC (plus (nat1) (tf1 (nat2) (tree1)))
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (nat2:nat), tf1 (SUCC (nat2)) (Tnil) = SUCC (tf1 (nat2) (Tnil))

2 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree), tf1 (SUCC (plus (nat1) (nat2))) (tree1) = SUCC (plus (nat1) (tf1 (nat2) (tree1)))
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat3 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat2:nat), tf1 (SUCC (nat2)) (tree2) = SUCC (tf1 (nat2) (tree2))
IH2 : forall (nat2:nat), tf1 (SUCC (nat2)) (tree3) = SUCC (tf1 (nat2) (tree3))
Inductive1 : tree1 = Node (nat3) (tree2) (tree3)
---------------------------------------
forall (nat2:nat), tf1 (SUCC (nat2)) (Node (nat3) (tree2) (tree3)) = SUCC (tf1 (nat2) (Node (nat3) (tree2) (tree3)))

1 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 588


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree), tf1 (SUCC (plus (nat1) (nat2))) (tree1) = SUCC (plus (nat1) (tf1 (nat2) (tree1)))
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat3 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat2:nat), tf1 (SUCC (nat2)) (tree2) = SUCC (tf1 (nat2) (tree2))
IH2 : forall (nat2:nat), tf1 (SUCC (nat2)) (tree3) = SUCC (tf1 (nat2) (tree3))
Inductive1 : tree1 = Node (nat3) (tree2) (tree3)
---------------------------------------
forall (nat2:nat), tf1 (SUCC (nat2)) (Node (nat3) (tree2) (tree3)) = SUCC (tf1 (nat2) (Node (nat3) (tree2) (tree3)))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree), tf1 (SUCC (plus (nat1) (nat2))) (tree1) = SUCC (plus (nat1) (tf1 (nat2) (tree1)))
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat3 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat2:nat), tf1 (SUCC (nat2)) (tree2) = SUCC (tf1 (nat2) (tree2))
IH2 : forall (nat2:nat), tf1 (SUCC (nat2)) (tree3) = SUCC (tf1 (nat2) (tree3))
Inductive1 : tree1 = Node (nat3) (tree2) (tree3)
---------------------------------------
forall (nat2:nat), if lq (tf1 (SUCC (plus (nat2) (nat3))) (tree2)) (tf1 (SUCC (plus (nat2) (nat3))) (tree3)) then tf1 (SUCC (plus (nat2) (nat3))) (tree3) else tf1 (SUCC (plus (nat2) (nat3))) (tree2) = SUCC (if lq (tf1 (plus (nat2) (nat3)) (tree2)) (tf1 (plus (nat2) (nat3)) (tree3)) then tf1 (plus (nat2) (nat3)) (tree3) else tf1 (plus (nat2) (nat3)) (tree2))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction nat2(rank:9.)
=================================================
Progress: 589


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree), tf1 (SUCC (plus (nat1) (nat2))) (tree1) = SUCC (plus (nat1) (tf1 (nat2) (tree1)))
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat3 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat2:nat), tf1 (SUCC (nat2)) (tree2) = SUCC (tf1 (nat2) (tree2))
IH2 : forall (nat2:nat), tf1 (SUCC (nat2)) (tree3) = SUCC (tf1 (nat2) (tree3))
Inductive1 : tree1 = Node (nat3) (tree2) (tree3)
---------------------------------------
forall (nat2:nat), if lq (tf1 (SUCC (plus (nat2) (nat3))) (tree2)) (tf1 (SUCC (plus (nat2) (nat3))) (tree3)) then tf1 (SUCC (plus (nat2) (nat3))) (tree3) else tf1 (SUCC (plus (nat2) (nat3))) (tree2) = SUCC (if lq (tf1 (plus (nat2) (nat3)) (tree2)) (tf1 (plus (nat2) (nat3)) (tree3)) then tf1 (plus (nat2) (nat3)) (tree3) else tf1 (plus (nat2) (nat3)) (tree2))

1 goal(s) more...

2 conjecture(s) more...
>>> induction nat2(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree), tf1 (SUCC (plus (nat1) (nat2))) (tree1) = SUCC (plus (nat1) (tf1 (nat2) (tree1)))
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat3 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat2:nat), tf1 (SUCC (nat2)) (tree2) = SUCC (tf1 (nat2) (tree2))
IH2 : forall (nat2:nat), tf1 (SUCC (nat2)) (tree3) = SUCC (tf1 (nat2) (tree3))
Inductive1 : tree1 = Node (nat3) (tree2) (tree3)
nat2 : nat
Base2 : nat2 = ZERO
---------------------------------------
if lq (tf1 (SUCC (plus (ZERO) (nat3))) (tree2)) (tf1 (SUCC (plus (ZERO) (nat3))) (tree3)) then tf1 (SUCC (plus (ZERO) (nat3))) (tree3) else tf1 (SUCC (plus (ZERO) (nat3))) (tree2) = SUCC (if lq (tf1 (plus (ZERO) (nat3)) (tree2)) (tf1 (plus (ZERO) (nat3)) (tree3)) then tf1 (plus (ZERO) (nat3)) (tree3) else tf1 (plus (ZERO) (nat3)) (tree2))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 590


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree), tf1 (SUCC (plus (nat1) (nat2))) (tree1) = SUCC (plus (nat1) (tf1 (nat2) (tree1)))
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat3 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat2:nat), tf1 (SUCC (nat2)) (tree2) = SUCC (tf1 (nat2) (tree2))
IH2 : forall (nat2:nat), tf1 (SUCC (nat2)) (tree3) = SUCC (tf1 (nat2) (tree3))
Inductive1 : tree1 = Node (nat3) (tree2) (tree3)
nat2 : nat
Base2 : nat2 = ZERO
---------------------------------------
if lq (tf1 (SUCC (plus (ZERO) (nat3))) (tree2)) (tf1 (SUCC (plus (ZERO) (nat3))) (tree3)) then tf1 (SUCC (plus (ZERO) (nat3))) (tree3) else tf1 (SUCC (plus (ZERO) (nat3))) (tree2) = SUCC (if lq (tf1 (plus (ZERO) (nat3)) (tree2)) (tf1 (plus (ZERO) (nat3)) (tree3)) then tf1 (plus (ZERO) (nat3)) (tree3) else tf1 (plus (ZERO) (nat3)) (tree2))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree), tf1 (SUCC (plus (nat1) (nat2))) (tree1) = SUCC (plus (nat1) (tf1 (nat2) (tree1)))
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat3 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat2:nat), tf1 (SUCC (nat2)) (tree2) = SUCC (tf1 (nat2) (tree2))
IH2 : forall (nat2:nat), tf1 (SUCC (nat2)) (tree3) = SUCC (tf1 (nat2) (tree3))
Inductive1 : tree1 = Node (nat3) (tree2) (tree3)
nat2 : nat
Base2 : nat2 = ZERO
---------------------------------------
if lq (tf1 (SUCC (nat3)) (tree2)) (tf1 (SUCC (nat3)) (tree3)) then tf1 (SUCC (plus (ZERO) (nat3))) (tree3) else tf1 (SUCC (plus (ZERO) (nat3))) (tree2) = SUCC (if lq (tf1 (nat3) (tree2)) (tf1 (nat3) (tree3)) then tf1 (plus (ZERO) (nat3)) (tree3) else tf1 (plus (ZERO) (nat3)) (tree2))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 8
case lq (tf1 (nat3) (tree2)) (tf1 (nat3) (tree3))(rank:10.)
rewrite IH1 in goal at 0(rank:17.)
rewrite IH1 in goal at 2(rank:17.)
rewrite IH2 in goal at 0(rank:25.)
rewrite IH2 in goal at 1(rank:25.)
rewrite IH2 in goal at 2(rank:25.)
rewrite IH1 in goal at 1(rank:17.)
case lq (tf1 (SUCC (nat3)) (tree2)) (tf1 (SUCC (nat3)) (tree3))(rank:10.)
=================================================
Progress: 591


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree), tf1 (SUCC (plus (nat1) (nat2))) (tree1) = SUCC (plus (nat1) (tf1 (nat2) (tree1)))
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat3 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat2:nat), tf1 (SUCC (nat2)) (tree2) = SUCC (tf1 (nat2) (tree2))
IH2 : forall (nat2:nat), tf1 (SUCC (nat2)) (tree3) = SUCC (tf1 (nat2) (tree3))
Inductive1 : tree1 = Node (nat3) (tree2) (tree3)
nat2 : nat
Base2 : nat2 = ZERO
---------------------------------------
if lq (tf1 (SUCC (nat3)) (tree2)) (tf1 (SUCC (nat3)) (tree3)) then tf1 (SUCC (plus (ZERO) (nat3))) (tree3) else tf1 (SUCC (plus (ZERO) (nat3))) (tree2) = SUCC (if lq (tf1 (nat3) (tree2)) (tf1 (nat3) (tree3)) then tf1 (plus (ZERO) (nat3)) (tree3) else tf1 (plus (ZERO) (nat3)) (tree2))

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (tf1 (nat3) (tree2)) (tf1 (nat3) (tree3))(rank : 10.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree), tf1 (SUCC (plus (nat1) (nat2))) (tree1) = SUCC (plus (nat1) (tf1 (nat2) (tree1)))
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat3 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat2:nat), tf1 (SUCC (nat2)) (tree2) = SUCC (tf1 (nat2) (tree2))
IH2 : forall (nat2:nat), tf1 (SUCC (nat2)) (tree3) = SUCC (tf1 (nat2) (tree3))
Inductive1 : tree1 = Node (nat3) (tree2) (tree3)
nat2 : nat
Base2 : nat2 = ZERO
Case1 : lq (tf1 (nat3) (tree2)) (tf1 (nat3) (tree3)) = true
---------------------------------------
if lq (tf1 (SUCC (nat3)) (tree2)) (tf1 (SUCC (nat3)) (tree3)) then tf1 (SUCC (plus (ZERO) (nat3))) (tree3) else tf1 (SUCC (plus (ZERO) (nat3))) (tree2) = SUCC (tf1 (nat3) (tree3))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 8
case lq (tf1 (SUCC (nat3)) (tree2)) (tf1 (SUCC (nat3)) (tree3))(rank:11.)
rewrite IH1 in goal at 0(rank:26.)
rewrite IH1 in goal at 2(rank:26.)
rewrite IH2 in goal at 0(rank:26.)
rewrite IH2 in goal at 1(rank:26.)
rewrite IH2 in goal at 2(rank:26.)
rewrite IH1 in goal at 1(rank:26.)
rewrite <- IH2 in goal at 0(rank:26.)
=================================================
Progress: 592


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree), tf1 (SUCC (plus (nat1) (nat2))) (tree1) = SUCC (plus (nat1) (tf1 (nat2) (tree1)))
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat3 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat2:nat), tf1 (SUCC (nat2)) (tree2) = SUCC (tf1 (nat2) (tree2))
IH2 : forall (nat2:nat), tf1 (SUCC (nat2)) (tree3) = SUCC (tf1 (nat2) (tree3))
Inductive1 : tree1 = Node (nat3) (tree2) (tree3)
nat2 : nat
Base2 : nat2 = ZERO
---------------------------------------
if lq (tf1 (SUCC (nat3)) (tree2)) (tf1 (SUCC (nat3)) (tree3)) then tf1 (SUCC (plus (ZERO) (nat3))) (tree3) else tf1 (SUCC (plus (ZERO) (nat3))) (tree2) = SUCC (if lq (tf1 (nat3) (tree2)) (tf1 (nat3) (tree3)) then tf1 (plus (ZERO) (nat3)) (tree3) else tf1 (plus (ZERO) (nat3)) (tree2))

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (tf1 (SUCC (nat3)) (tree2)) (tf1 (SUCC (nat3)) (tree3))(rank : 10.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree), tf1 (SUCC (plus (nat1) (nat2))) (tree1) = SUCC (plus (nat1) (tf1 (nat2) (tree1)))
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat3 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat2:nat), tf1 (SUCC (nat2)) (tree2) = SUCC (tf1 (nat2) (tree2))
IH2 : forall (nat2:nat), tf1 (SUCC (nat2)) (tree3) = SUCC (tf1 (nat2) (tree3))
Inductive1 : tree1 = Node (nat3) (tree2) (tree3)
nat2 : nat
Base2 : nat2 = ZERO
Case1 : lq (tf1 (SUCC (nat3)) (tree2)) (tf1 (SUCC (nat3)) (tree3)) = true
---------------------------------------
tf1 (SUCC (nat3)) (tree3) = SUCC (if lq (tf1 (nat3) (tree2)) (tf1 (nat3) (tree3)) then tf1 (plus (ZERO) (nat3)) (tree3) else tf1 (plus (ZERO) (nat3)) (tree2))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case lq (tf1 (nat3) (tree2)) (tf1 (nat3) (tree3))(rank:11.)
rewrite IH2 in goal at 0(rank:18.)
=================================================
Progress: 593


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree), tf1 (SUCC (plus (nat1) (nat2))) (tree1) = SUCC (plus (nat1) (tf1 (nat2) (tree1)))
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat3 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat2:nat), tf1 (SUCC (nat2)) (tree2) = SUCC (tf1 (nat2) (tree2))
IH2 : forall (nat2:nat), tf1 (SUCC (nat2)) (tree3) = SUCC (tf1 (nat2) (tree3))
Inductive1 : tree1 = Node (nat3) (tree2) (tree3)
nat2 : nat
Base2 : nat2 = ZERO
Case1 : lq (tf1 (nat3) (tree2)) (tf1 (nat3) (tree3)) = true
---------------------------------------
if lq (tf1 (SUCC (nat3)) (tree2)) (tf1 (SUCC (nat3)) (tree3)) then tf1 (SUCC (plus (ZERO) (nat3))) (tree3) else tf1 (SUCC (plus (ZERO) (nat3))) (tree2) = SUCC (tf1 (nat3) (tree3))

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (tf1 (SUCC (nat3)) (tree2)) (tf1 (SUCC (nat3)) (tree3))(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree), tf1 (SUCC (plus (nat1) (nat2))) (tree1) = SUCC (plus (nat1) (tf1 (nat2) (tree1)))
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat3 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat2:nat), tf1 (SUCC (nat2)) (tree2) = SUCC (tf1 (nat2) (tree2))
IH2 : forall (nat2:nat), tf1 (SUCC (nat2)) (tree3) = SUCC (tf1 (nat2) (tree3))
Inductive1 : tree1 = Node (nat3) (tree2) (tree3)
nat2 : nat
Base2 : nat2 = ZERO
Case1 : lq (tf1 (nat3) (tree2)) (tf1 (nat3) (tree3)) = true
Case2 : lq (tf1 (SUCC (nat3)) (tree2)) (tf1 (SUCC (nat3)) (tree3)) = true
---------------------------------------
tf1 (SUCC (nat3)) (tree3) = SUCC (tf1 (nat3) (tree3))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite IH2 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
=================================================
Progress: 594


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree), tf1 (SUCC (plus (nat1) (nat2))) (tree1) = SUCC (plus (nat1) (tf1 (nat2) (tree1)))
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat3 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat2:nat), tf1 (SUCC (nat2)) (tree2) = SUCC (tf1 (nat2) (tree2))
IH2 : forall (nat2:nat), tf1 (SUCC (nat2)) (tree3) = SUCC (tf1 (nat2) (tree3))
Inductive1 : tree1 = Node (nat3) (tree2) (tree3)
nat2 : nat
Base2 : nat2 = ZERO
Case1 : lq (tf1 (SUCC (nat3)) (tree2)) (tf1 (SUCC (nat3)) (tree3)) = true
---------------------------------------
tf1 (SUCC (nat3)) (tree3) = SUCC (if lq (tf1 (nat3) (tree2)) (tf1 (nat3) (tree3)) then tf1 (plus (ZERO) (nat3)) (tree3) else tf1 (plus (ZERO) (nat3)) (tree2))

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (tf1 (nat3) (tree2)) (tf1 (nat3) (tree3))(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree), tf1 (SUCC (plus (nat1) (nat2))) (tree1) = SUCC (plus (nat1) (tf1 (nat2) (tree1)))
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
nat3 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat2:nat), tf1 (SUCC (nat2)) (tree2) = SUCC (tf1 (nat2) (tree2))
IH2 : forall (nat2:nat), tf1 (SUCC (nat2)) (tree3) = SUCC (tf1 (nat2) (tree3))
Inductive1 : tree1 = Node (nat3) (tree2) (tree3)
nat2 : nat
Base2 : nat2 = ZERO
Case1 : lq (tf1 (SUCC (nat3)) (tree2)) (tf1 (SUCC (nat3)) (tree3)) = true
Case2 : lq (tf1 (nat3) (tree2)) (tf1 (nat3) (tree3)) = true
---------------------------------------
tf1 (SUCC (nat3)) (tree3) = SUCC (tf1 (nat3) (tree3))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite IH2 in goal at 0(rank:19.)
rewrite <- IH2 in goal at 0(rank:19.)
=================================================
Progress: 595


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH2 in goal at 1(rank : 14.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
plus (SUCC (plus (nat3) (nat2))) (tf1 (ZERO) (tree3)) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:6.)
=================================================
Progress: 596


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
plus (SUCC (plus (nat3) (nat2))) (tf1 (ZERO) (tree3)) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3))) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
rewrite IH2 in goal at 1(rank:14.)
rewrite IH1 in goal at 0(rank:22.)
rewrite IH1 in goal at 2(rank:22.)
rewrite IH2 in goal at 0(rank:22.)
rewrite IH2 in goal at 3(rank:22.)
rewrite <- IH2 in goal at 0(rank:22.)
rewrite IH1 in goal at 1(rank:22.)
rewrite IH2 in goal at 2(rank:22.)
rewrite <- IH3 in goal at 0(rank:22.)
=================================================
Progress: 597


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (plus (nat3) (if lq (plus (nat2) (tf1 (ZERO) (tree2))) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else plus (nat2) (tf1 (ZERO) (tree2))))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH2 in goal at 1(rank : 14.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
plus (SUCC (plus (nat3) (nat2))) (tf1 (ZERO) (tree3)) = SUCC (plus (nat3) (if lq (plus (nat2) (tf1 (ZERO) (tree2))) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else plus (nat2) (tf1 (ZERO) (tree2))))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:6.)
=================================================
Progress: 598


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
plus (SUCC (plus (nat3) (nat2))) (tf1 (ZERO) (tree3)) = SUCC (plus (nat3) (if lq (plus (nat2) (tf1 (ZERO) (tree2))) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else plus (nat2) (tf1 (ZERO) (tree2))))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3))) = SUCC (plus (nat3) (if lq (plus (nat2) (tf1 (ZERO) (tree2))) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else plus (nat2) (tf1 (ZERO) (tree2))))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 11
rewrite IH2 in goal at 1(rank:14.)
rewrite <- IH1 in goal at 0(rank:14.)
rewrite IH1 in goal at 0(rank:22.)
rewrite IH1 in goal at 1(rank:22.)
rewrite IH1 in goal at 2(rank:22.)
rewrite IH2 in goal at 0(rank:22.)
rewrite IH2 in goal at 3(rank:22.)
rewrite <- IH1 in goal at 1(rank:14.)
rewrite <- IH1 in goal at 2(rank:14.)
rewrite IH2 in goal at 2(rank:22.)
rewrite <- IH2 in goal at 0(rank:22.)
=================================================
Progress: 599


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (plus (nat3) (if lq (plus (nat2) (tf1 (ZERO) (tree2))) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else plus (nat2) (tf1 (ZERO) (tree2))))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 14.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
case lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3))(rank:7.)
rewrite IH2 in goal at 0(rank:22.)
rewrite IH2 in goal at 2(rank:22.)
rewrite IH2 in goal at 3(rank:22.)
rewrite <- IH3 in goal at 0(rank:22.)
=================================================
Progress: 600


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> case lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3))(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
Case2 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (plus (nat3) (tf1 (nat2) (tree3)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
rewrite IH2 in goal at 0(rank:23.)
rewrite IH2 in goal at 1(rank:23.)
rewrite IH2 in goal at 2(rank:23.)
rewrite <- IH3 in goal at 0(rank:23.)
=================================================
Progress: 601


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (plus (nat3) (if lq (plus (nat2) (tf1 (ZERO) (tree2))) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else plus (nat2) (tf1 (ZERO) (tree2))))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 1(rank : 14.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else plus (nat2) (tf1 (ZERO) (tree2))))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
case lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3))(rank:7.)
rewrite IH1 in goal at 2(rank:22.)
rewrite IH2 in goal at 0(rank:22.)
rewrite IH2 in goal at 2(rank:22.)
rewrite IH2 in goal at 3(rank:22.)
=================================================
Progress: 602


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else plus (nat2) (tf1 (ZERO) (tree2))))

1 goal(s) more...

1 conjecture(s) more...
>>> case lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3))(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
Case2 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (plus (nat3) (tf1 (nat2) (tree3)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
rewrite IH2 in goal at 0(rank:23.)
rewrite IH2 in goal at 1(rank:23.)
rewrite IH2 in goal at 2(rank:23.)
rewrite <- IH3 in goal at 0(rank:23.)
=================================================
Progress: 603


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (plus (nat3) (if lq (plus (nat2) (tf1 (ZERO) (tree2))) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else plus (nat2) (tf1 (ZERO) (tree2))))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 2(rank : 14.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (plus (nat3) (if lq (plus (nat2) (tf1 (ZERO) (tree2))) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
case lq (plus (nat2) (tf1 (ZERO) (tree2))) (tf1 (nat2) (tree3))(rank:7.)
rewrite IH1 in goal at 1(rank:22.)
rewrite IH2 in goal at 0(rank:22.)
rewrite IH2 in goal at 2(rank:22.)
rewrite IH2 in goal at 3(rank:22.)
=================================================
Progress: 604


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (plus (nat3) (if lq (plus (nat2) (tf1 (ZERO) (tree2))) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> case lq (plus (nat2) (tf1 (ZERO) (tree2))) (tf1 (nat2) (tree3))(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
Case2 : lq (plus (nat2) (tf1 (ZERO) (tree2))) (tf1 (nat2) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (plus (nat3) (tf1 (nat2) (tree3)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite IH2 in goal at 0(rank:23.)
rewrite IH2 in goal at 1(rank:23.)
rewrite IH2 in goal at 2(rank:23.)
=================================================
Progress: 605


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
---------------------------------------
if lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) then tf1 (plus (SUCC (nat3)) (nat2)) (tree3) else tf1 (plus (SUCC (nat3)) (nat2)) (tree2) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH2 in goal at 3(rank : 14.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
---------------------------------------
if lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) then tf1 (plus (SUCC (nat3)) (nat2)) (tree3) else tf1 (plus (SUCC (nat3)) (nat2)) (tree2) = SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 8
case lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))(rank:7.)
rewrite IH1 in goal at 0(rank:22.)
rewrite IH1 in goal at 2(rank:22.)
rewrite IH2 in goal at 0(rank:22.)
rewrite IH2 in goal at 1(rank:22.)
rewrite IH2 in goal at 2(rank:22.)
rewrite IH1 in goal at 1(rank:22.)
rewrite IH2 in goal at 3(rank:14.)
=================================================
Progress: 606


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
---------------------------------------
if lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) then tf1 (plus (SUCC (nat3)) (nat2)) (tree3) else tf1 (plus (SUCC (nat3)) (nat2)) (tree2) = SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3)))

1 goal(s) more...

1 conjecture(s) more...
>>> case lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
rewrite IH2 in goal at 1(rank:15.)
rewrite IH2 in goal at 0(rank:23.)
rewrite <- IH2 in goal at 0(rank:15.)
rewrite IH2 in goal at 2(rank:23.)
=================================================
Progress: 607


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
---------------------------------------
if lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) then tf1 (plus (SUCC (nat3)) (nat2)) (tree3) else tf1 (plus (SUCC (nat3)) (nat2)) (tree2) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 14.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
---------------------------------------
if lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) then tf1 (plus (SUCC (nat3)) (nat2)) (tree3) else tf1 (plus (SUCC (nat3)) (nat2)) (tree2) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 10
case lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3))(rank:7.)
rewrite IH1 in goal at 0(rank:14.)
rewrite IH1 in goal at 2(rank:22.)
rewrite IH2 in goal at 0(rank:22.)
rewrite IH2 in goal at 1(rank:22.)
rewrite IH2 in goal at 2(rank:22.)
rewrite IH2 in goal at 3(rank:22.)
rewrite IH1 in goal at 3(rank:22.)
rewrite IH1 in goal at 1(rank:22.)
case lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))(rank:7.)
=================================================
Progress: 608


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
---------------------------------------
if lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) then tf1 (plus (SUCC (nat3)) (nat2)) (tree3) else tf1 (plus (SUCC (nat3)) (nat2)) (tree2) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> case lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3))(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
---------------------------------------
if lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) then tf1 (plus (SUCC (nat3)) (nat2)) (tree3) else tf1 (plus (SUCC (nat3)) (nat2)) (tree2) = SUCC (plus (nat3) (tf1 (nat2) (tree3)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
case lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))(rank:8.)
rewrite IH2 in goal at 3(rank:15.)
rewrite IH1 in goal at 0(rank:23.)
rewrite IH1 in goal at 2(rank:23.)
rewrite IH2 in goal at 0(rank:23.)
rewrite IH2 in goal at 1(rank:23.)
rewrite IH2 in goal at 2(rank:23.)
rewrite IH1 in goal at 1(rank:23.)
rewrite <- IH3 in goal at 0(rank:23.)
=================================================
Progress: 609


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
---------------------------------------
if lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) then tf1 (plus (SUCC (nat3)) (nat2)) (tree3) else tf1 (plus (SUCC (nat3)) (nat2)) (tree2) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> case lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
case lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3))(rank:8.)
rewrite IH2 in goal at 1(rank:15.)
rewrite <- IH3 in goal at 0(rank:15.)
rewrite IH1 in goal at 0(rank:23.)
rewrite IH1 in goal at 1(rank:23.)
rewrite IH1 in goal at 2(rank:23.)
rewrite IH2 in goal at 0(rank:23.)
rewrite IH2 in goal at 3(rank:23.)
rewrite IH2 in goal at 2(rank:23.)
=================================================
Progress: 610


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
---------------------------------------
if lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) then tf1 (plus (SUCC (nat3)) (nat2)) (tree3) else tf1 (plus (SUCC (nat3)) (nat2)) (tree2) = SUCC (plus (nat3) (tf1 (nat2) (tree3)))

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))(rank : 8.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
Case3 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (plus (nat3) (tf1 (nat2) (tree3)))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
rewrite <- IH3 in goal at 0(rank:16.)
rewrite IH2 in goal at 2(rank:24.)
rewrite IH2 in goal at 0(rank:24.)
rewrite IH2 in goal at 1(rank:24.)
=================================================
Progress: 611


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3))(rank : 8.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
Case3 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (plus (nat3) (tf1 (nat2) (tree3)))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
rewrite <- IH3 in goal at 0(rank:16.)
rewrite IH2 in goal at 2(rank:24.)
rewrite IH2 in goal at 0(rank:24.)
rewrite IH2 in goal at 1(rank:24.)
=================================================
Progress: 612


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH2 in goal at 1(rank : 14.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
plus (SUCC (plus (nat3) (nat2))) (tf1 (ZERO) (tree3)) = SUCC (if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:6.)
=================================================
Progress: 613


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
plus (SUCC (plus (nat3) (nat2))) (tf1 (ZERO) (tree3)) = SUCC (if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3))) = SUCC (if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
rewrite IH2 in goal at 1(rank:14.)
rewrite IH3 in goal at 0(rank:14.)
rewrite IH1 in goal at 0(rank:22.)
rewrite IH1 in goal at 1(rank:22.)
rewrite IH1 in goal at 2(rank:22.)
rewrite IH2 in goal at 0(rank:22.)
rewrite IH2 in goal at 3(rank:22.)
rewrite IH2 in goal at 2(rank:22.)
rewrite <- IH2 in goal at 0(rank:22.)
=================================================
Progress: 614


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 14.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 7
case lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3))(rank:7.)
rewrite IH1 in goal at 0(rank:22.)
rewrite IH1 in goal at 1(rank:22.)
rewrite IH1 in goal at 2(rank:22.)
rewrite IH2 in goal at 0(rank:22.)
rewrite IH2 in goal at 2(rank:22.)
rewrite IH2 in goal at 3(rank:22.)
=================================================
Progress: 615


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> case lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3))(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
Case2 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (plus (nat3) (tf1 (nat2) (tree3)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
rewrite IH2 in goal at 0(rank:23.)
rewrite IH2 in goal at 1(rank:23.)
rewrite IH2 in goal at 2(rank:23.)
rewrite <- IH3 in goal at 0(rank:23.)
=================================================
Progress: 616


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
---------------------------------------
if lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) then tf1 (plus (SUCC (nat3)) (nat2)) (tree3) else tf1 (plus (SUCC (nat3)) (nat2)) (tree2) = SUCC (plus (nat3) (tf1 (nat2) (tree3)))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH2 in goal at 3(rank : 14.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
---------------------------------------
if lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) then tf1 (plus (SUCC (nat3)) (nat2)) (tree3) else tf1 (plus (SUCC (nat3)) (nat2)) (tree2) = SUCC (plus (nat3) (plus (nat2) (tf1 (ZERO) (tree3))))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 8
case lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))(rank:7.)
rewrite IH1 in goal at 0(rank:22.)
rewrite IH1 in goal at 2(rank:22.)
rewrite IH2 in goal at 0(rank:22.)
rewrite IH2 in goal at 1(rank:22.)
rewrite IH2 in goal at 2(rank:22.)
rewrite IH1 in goal at 1(rank:22.)
rewrite IH2 in goal at 3(rank:14.)
=================================================
Progress: 617


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
---------------------------------------
if lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) then tf1 (plus (SUCC (nat3)) (nat2)) (tree3) else tf1 (plus (SUCC (nat3)) (nat2)) (tree2) = SUCC (plus (nat3) (plus (nat2) (tf1 (ZERO) (tree3))))

1 goal(s) more...

1 conjecture(s) more...
>>> case lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (plus (nat3) (plus (nat2) (tf1 (ZERO) (tree3))))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
rewrite IH2 in goal at 1(rank:15.)
rewrite IH2 in goal at 0(rank:23.)
rewrite <- IH2 in goal at 0(rank:15.)
rewrite IH2 in goal at 2(rank:23.)
=================================================
Progress: 618


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
---------------------------------------
if lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) then tf1 (plus (SUCC (nat3)) (nat2)) (tree3) else tf1 (plus (SUCC (nat3)) (nat2)) (tree2) = SUCC (plus (nat3) (tf1 (nat2) (tree3)))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH3 in goal at 0(rank : 14.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
---------------------------------------
if lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) then tf1 (plus (SUCC (nat3)) (nat2)) (tree3) else tf1 (plus (SUCC (nat3)) (nat2)) (tree2) = SUCC (if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 10
case lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3))(rank:7.)
rewrite IH1 in goal at 0(rank:22.)
rewrite IH1 in goal at 2(rank:22.)
rewrite IH2 in goal at 0(rank:22.)
rewrite IH2 in goal at 1(rank:22.)
rewrite IH2 in goal at 2(rank:22.)
rewrite IH2 in goal at 3(rank:22.)
rewrite IH1 in goal at 3(rank:22.)
rewrite IH1 in goal at 1(rank:22.)
case lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))(rank:7.)
=================================================
Progress: 619


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
---------------------------------------
if lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) then tf1 (plus (SUCC (nat3)) (nat2)) (tree3) else tf1 (plus (SUCC (nat3)) (nat2)) (tree2) = SUCC (if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2))

1 goal(s) more...

1 conjecture(s) more...
>>> case lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3))(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
Case2 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
---------------------------------------
if lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) then tf1 (plus (SUCC (nat3)) (nat2)) (tree3) else tf1 (plus (SUCC (nat3)) (nat2)) (tree2) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
case lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))(rank:8.)
rewrite IH2 in goal at 3(rank:15.)
rewrite IH1 in goal at 0(rank:23.)
rewrite IH1 in goal at 2(rank:23.)
rewrite IH2 in goal at 0(rank:23.)
rewrite IH2 in goal at 1(rank:23.)
rewrite IH2 in goal at 2(rank:23.)
rewrite IH1 in goal at 1(rank:23.)
rewrite IH3 in goal at 0(rank:23.)
=================================================
Progress: 620


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
---------------------------------------
if lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) then tf1 (plus (SUCC (nat3)) (nat2)) (tree3) else tf1 (plus (SUCC (nat3)) (nat2)) (tree2) = SUCC (if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2))

1 goal(s) more...

1 conjecture(s) more...
>>> case lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
case lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3))(rank:8.)
rewrite IH2 in goal at 1(rank:15.)
rewrite IH3 in goal at 0(rank:15.)
rewrite IH1 in goal at 0(rank:23.)
rewrite IH1 in goal at 1(rank:23.)
rewrite IH1 in goal at 2(rank:23.)
rewrite IH2 in goal at 0(rank:23.)
rewrite IH2 in goal at 3(rank:23.)
rewrite IH2 in goal at 2(rank:23.)
=================================================
Progress: 621


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
Case2 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
---------------------------------------
if lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) then tf1 (plus (SUCC (nat3)) (nat2)) (tree3) else tf1 (plus (SUCC (nat3)) (nat2)) (tree2) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))(rank : 8.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
Case2 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case3 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
rewrite IH2 in goal at 0(rank:24.)
rewrite IH2 in goal at 1(rank:24.)
rewrite IH2 in goal at 2(rank:24.)
rewrite IH3 in goal at 0(rank:24.)
=================================================
Progress: 622


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2))

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3))(rank : 8.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
Case3 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
rewrite IH2 in goal at 0(rank:24.)
rewrite IH2 in goal at 1(rank:24.)
rewrite IH2 in goal at 2(rank:24.)
rewrite IH3 in goal at 0(rank:24.)
=================================================
Progress: 623


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH2 in goal at 1(rank : 14.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
plus (SUCC (plus (nat3) (nat2))) (tf1 (ZERO) (tree3)) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:6.)
=================================================
Progress: 624


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
plus (SUCC (plus (nat3) (nat2))) (tf1 (ZERO) (tree3)) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3))) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
rewrite IH2 in goal at 1(rank:14.)
rewrite IH1 in goal at 0(rank:22.)
rewrite IH1 in goal at 2(rank:22.)
rewrite IH2 in goal at 0(rank:22.)
rewrite IH2 in goal at 3(rank:22.)
rewrite <- IH2 in goal at 0(rank:22.)
rewrite IH1 in goal at 1(rank:22.)
rewrite IH2 in goal at 2(rank:22.)
rewrite <- IH3 in goal at 0(rank:22.)
=================================================
Progress: 625


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
---------------------------------------
if lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) then tf1 (plus (SUCC (nat3)) (nat2)) (tree3) else tf1 (plus (SUCC (nat3)) (nat2)) (tree2) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH2 in goal at 3(rank : 14.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
---------------------------------------
if lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) then tf1 (plus (SUCC (nat3)) (nat2)) (tree3) else tf1 (plus (SUCC (nat3)) (nat2)) (tree2) = SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 8
case lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))(rank:7.)
rewrite IH1 in goal at 0(rank:22.)
rewrite IH1 in goal at 2(rank:22.)
rewrite IH2 in goal at 0(rank:22.)
rewrite IH2 in goal at 1(rank:22.)
rewrite IH2 in goal at 2(rank:22.)
rewrite IH1 in goal at 1(rank:22.)
rewrite IH2 in goal at 3(rank:14.)
=================================================
Progress: 626


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
---------------------------------------
if lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) then tf1 (plus (SUCC (nat3)) (nat2)) (tree3) else tf1 (plus (SUCC (nat3)) (nat2)) (tree2) = SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3)))

1 goal(s) more...

1 conjecture(s) more...
>>> case lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
rewrite IH2 in goal at 1(rank:15.)
rewrite IH2 in goal at 0(rank:23.)
rewrite <- IH2 in goal at 0(rank:15.)
rewrite IH2 in goal at 2(rank:23.)
=================================================
Progress: 627


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
---------------------------------------
if lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) then tf1 (plus (SUCC (nat3)) (nat2)) (tree3) else tf1 (plus (SUCC (nat3)) (nat2)) (tree2) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 14.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
---------------------------------------
if lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) then tf1 (plus (SUCC (nat3)) (nat2)) (tree3) else tf1 (plus (SUCC (nat3)) (nat2)) (tree2) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 10
case lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3))(rank:7.)
rewrite IH1 in goal at 0(rank:22.)
rewrite IH1 in goal at 2(rank:22.)
rewrite IH2 in goal at 0(rank:22.)
rewrite IH2 in goal at 1(rank:22.)
rewrite IH2 in goal at 2(rank:22.)
rewrite IH2 in goal at 3(rank:22.)
rewrite IH1 in goal at 3(rank:22.)
rewrite IH1 in goal at 1(rank:22.)
case lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))(rank:7.)
=================================================
Progress: 628


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
---------------------------------------
if lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) then tf1 (plus (SUCC (nat3)) (nat2)) (tree3) else tf1 (plus (SUCC (nat3)) (nat2)) (tree2) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> case lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3))(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
---------------------------------------
if lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) then tf1 (plus (SUCC (nat3)) (nat2)) (tree3) else tf1 (plus (SUCC (nat3)) (nat2)) (tree2) = SUCC (plus (nat3) (tf1 (nat2) (tree3)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
case lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))(rank:8.)
rewrite IH2 in goal at 3(rank:15.)
rewrite IH1 in goal at 0(rank:23.)
rewrite IH1 in goal at 2(rank:23.)
rewrite IH2 in goal at 0(rank:23.)
rewrite IH2 in goal at 1(rank:23.)
rewrite IH2 in goal at 2(rank:23.)
rewrite IH1 in goal at 1(rank:23.)
rewrite <- IH3 in goal at 0(rank:23.)
=================================================
Progress: 629


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
---------------------------------------
if lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) then tf1 (plus (SUCC (nat3)) (nat2)) (tree3) else tf1 (plus (SUCC (nat3)) (nat2)) (tree2) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> case lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
case lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3))(rank:8.)
rewrite IH2 in goal at 1(rank:15.)
rewrite <- IH3 in goal at 0(rank:15.)
rewrite IH1 in goal at 0(rank:23.)
rewrite IH1 in goal at 1(rank:23.)
rewrite IH1 in goal at 2(rank:23.)
rewrite IH2 in goal at 0(rank:23.)
rewrite IH2 in goal at 3(rank:23.)
rewrite IH2 in goal at 2(rank:23.)
=================================================
Progress: 630


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
---------------------------------------
if lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) then tf1 (plus (SUCC (nat3)) (nat2)) (tree3) else tf1 (plus (SUCC (nat3)) (nat2)) (tree2) = SUCC (plus (nat3) (tf1 (nat2) (tree3)))

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))(rank : 8.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
Case3 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (plus (nat3) (tf1 (nat2) (tree3)))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
rewrite <- IH3 in goal at 0(rank:16.)
rewrite IH2 in goal at 2(rank:24.)
rewrite IH2 in goal at 0(rank:24.)
rewrite IH2 in goal at 1(rank:24.)
=================================================
Progress: 631


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3))(rank : 8.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
Case3 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (plus (nat3) (tf1 (nat2) (tree3)))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
rewrite <- IH3 in goal at 0(rank:16.)
rewrite IH2 in goal at 2(rank:24.)
rewrite IH2 in goal at 0(rank:24.)
rewrite IH2 in goal at 1(rank:24.)
=================================================
Progress: 632


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH2 in goal at 1(rank : 14.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
plus (SUCC (plus (nat3) (nat2))) (tf1 (ZERO) (tree3)) = SUCC (if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:6.)
=================================================
Progress: 633


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
plus (SUCC (plus (nat3) (nat2))) (tf1 (ZERO) (tree3)) = SUCC (if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3))) = SUCC (if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
rewrite IH2 in goal at 1(rank:14.)
rewrite IH3 in goal at 0(rank:14.)
rewrite IH1 in goal at 0(rank:22.)
rewrite IH1 in goal at 1(rank:22.)
rewrite IH1 in goal at 2(rank:22.)
rewrite IH2 in goal at 0(rank:22.)
rewrite IH2 in goal at 3(rank:22.)
rewrite IH2 in goal at 2(rank:22.)
rewrite <- IH2 in goal at 0(rank:22.)
=================================================
Progress: 634


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 14.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 7
case lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3))(rank:7.)
rewrite IH1 in goal at 0(rank:22.)
rewrite IH1 in goal at 1(rank:22.)
rewrite IH1 in goal at 2(rank:22.)
rewrite IH2 in goal at 0(rank:22.)
rewrite IH2 in goal at 2(rank:22.)
rewrite IH2 in goal at 3(rank:22.)
=================================================
Progress: 635


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> case lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3))(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
Case2 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (plus (nat3) (tf1 (nat2) (tree3)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
rewrite IH2 in goal at 0(rank:23.)
rewrite IH2 in goal at 1(rank:23.)
rewrite IH2 in goal at 2(rank:23.)
rewrite <- IH3 in goal at 0(rank:23.)
=================================================
Progress: 636


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3))) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH2 in goal at 1(rank : 14.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (tf1 (ZERO) (tree3)))) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 7
rewrite IH1 in goal at 0(rank:22.)
rewrite IH1 in goal at 2(rank:22.)
rewrite IH2 in goal at 2(rank:22.)
rewrite IH2 in goal at 3(rank:22.)
rewrite <- IH3 in goal at 0(rank:22.)
rewrite IH2 in goal at 0(rank:22.)
rewrite IH1 in goal at 1(rank:22.)
=================================================
Progress: 637


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3))) = SUCC (plus (nat3) (if lq (plus (nat2) (tf1 (ZERO) (tree2))) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else plus (nat2) (tf1 (ZERO) (tree2))))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH2 in goal at 1(rank : 14.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (tf1 (ZERO) (tree3)))) = SUCC (plus (nat3) (if lq (plus (nat2) (tf1 (ZERO) (tree2))) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else plus (nat2) (tf1 (ZERO) (tree2))))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
rewrite <- IH1 in goal at 0(rank:14.)
rewrite IH1 in goal at 0(rank:22.)
rewrite IH1 in goal at 2(rank:22.)
rewrite IH2 in goal at 0(rank:22.)
rewrite IH2 in goal at 2(rank:22.)
rewrite IH2 in goal at 3(rank:22.)
rewrite IH1 in goal at 1(rank:22.)
rewrite <- IH1 in goal at 1(rank:14.)
rewrite <- IH1 in goal at 2(rank:14.)
=================================================
Progress: 638


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3))) = SUCC (plus (nat3) (if lq (plus (nat2) (tf1 (ZERO) (tree2))) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else plus (nat2) (tf1 (ZERO) (tree2))))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 14.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3))) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 6
case lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3))(rank:7.)
rewrite IH2 in goal at 0(rank:22.)
rewrite IH2 in goal at 2(rank:22.)
rewrite IH2 in goal at 3(rank:22.)
rewrite <- IH2 in goal at 0(rank:22.)
rewrite <- IH3 in goal at 0(rank:22.)
=================================================
Progress: 639


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3))) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> case lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3))(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
Case2 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3))) = SUCC (plus (nat3) (tf1 (nat2) (tree3)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
rewrite IH2 in goal at 2(rank:15.)
rewrite IH2 in goal at 0(rank:23.)
rewrite IH2 in goal at 1(rank:23.)
rewrite <- IH3 in goal at 0(rank:23.)
rewrite <- IH2 in goal at 0(rank:15.)
=================================================
Progress: 640


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3))) = SUCC (plus (nat3) (if lq (plus (nat2) (tf1 (ZERO) (tree2))) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else plus (nat2) (tf1 (ZERO) (tree2))))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 1(rank : 14.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3))) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else plus (nat2) (tf1 (ZERO) (tree2))))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 6
case lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3))(rank:7.)
rewrite IH1 in goal at 2(rank:22.)
rewrite IH2 in goal at 0(rank:22.)
rewrite IH2 in goal at 2(rank:22.)
rewrite IH2 in goal at 3(rank:22.)
rewrite <- IH2 in goal at 0(rank:22.)
=================================================
Progress: 641


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3))) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else plus (nat2) (tf1 (ZERO) (tree2))))

1 goal(s) more...

1 conjecture(s) more...
>>> case lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3))(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
Case2 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3))) = SUCC (plus (nat3) (tf1 (nat2) (tree3)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
rewrite IH2 in goal at 2(rank:15.)
rewrite IH2 in goal at 0(rank:23.)
rewrite IH2 in goal at 1(rank:23.)
rewrite <- IH3 in goal at 0(rank:23.)
rewrite <- IH2 in goal at 0(rank:15.)
=================================================
Progress: 642


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3))) = SUCC (plus (nat3) (if lq (plus (nat2) (tf1 (ZERO) (tree2))) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else plus (nat2) (tf1 (ZERO) (tree2))))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 2(rank : 14.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3))) = SUCC (plus (nat3) (if lq (plus (nat2) (tf1 (ZERO) (tree2))) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 6
case lq (plus (nat2) (tf1 (ZERO) (tree2))) (tf1 (nat2) (tree3))(rank:7.)
rewrite IH1 in goal at 1(rank:22.)
rewrite IH2 in goal at 0(rank:22.)
rewrite IH2 in goal at 2(rank:22.)
rewrite IH2 in goal at 3(rank:22.)
rewrite <- IH2 in goal at 0(rank:22.)
=================================================
Progress: 643


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3))) = SUCC (plus (nat3) (if lq (plus (nat2) (tf1 (ZERO) (tree2))) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> case lq (plus (nat2) (tf1 (ZERO) (tree2))) (tf1 (nat2) (tree3))(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
Case2 : lq (plus (nat2) (tf1 (ZERO) (tree2))) (tf1 (nat2) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3))) = SUCC (plus (nat3) (tf1 (nat2) (tree3)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
rewrite IH2 in goal at 2(rank:15.)
rewrite <- IH2 in goal at 0(rank:15.)
rewrite IH2 in goal at 0(rank:23.)
rewrite IH2 in goal at 1(rank:23.)
=================================================
Progress: 644


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
---------------------------------------
if lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) then tf1 (plus (SUCC (nat3)) (nat2)) (tree3) else tf1 (plus (SUCC (nat3)) (nat2)) (tree2) = SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3)))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH2 in goal at 3(rank : 14.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
---------------------------------------
if lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) then tf1 (plus (SUCC (nat3)) (nat2)) (tree3) else tf1 (plus (SUCC (nat3)) (nat2)) (tree2) = SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (tf1 (ZERO) (tree3))))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
rewrite IH1 in goal at 0(rank:22.)
rewrite IH1 in goal at 2(rank:22.)
rewrite IH2 in goal at 1(rank:22.)
rewrite IH2 in goal at 2(rank:22.)
rewrite IH1 in goal at 1(rank:22.)
=================================================
Progress: 645


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
---------------------------------------
if lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) then tf1 (plus (SUCC (nat3)) (nat2)) (tree3) else tf1 (plus (SUCC (nat3)) (nat2)) (tree2) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 14.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
---------------------------------------
if lq (plus (SUCC (plus (nat3) (nat2))) (tf1 (ZERO) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) then tf1 (plus (SUCC (nat3)) (nat2)) (tree3) else plus (plus (SUCC (nat3)) (nat2)) (tf1 (ZERO) (tree2)) = SUCC (plus (nat3) (if lq (plus (nat2) (tf1 (ZERO) (tree2))) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else plus (nat2) (tf1 (ZERO) (tree2))))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:6.)
=================================================
Progress: 646


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
---------------------------------------
if lq (plus (SUCC (plus (nat3) (nat2))) (tf1 (ZERO) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) then tf1 (plus (SUCC (nat3)) (nat2)) (tree3) else plus (plus (SUCC (nat3)) (nat2)) (tf1 (ZERO) (tree2)) = SUCC (plus (nat3) (if lq (plus (nat2) (tf1 (ZERO) (tree2))) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else plus (nat2) (tf1 (ZERO) (tree2))))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
---------------------------------------
if lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) then tf1 (plus (SUCC (nat3)) (nat2)) (tree3) else plus (plus (SUCC (nat3)) (nat2)) (tf1 (ZERO) (tree2)) = SUCC (plus (nat3) (if lq (plus (nat2) (tf1 (ZERO) (tree2))) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else plus (nat2) (tf1 (ZERO) (tree2))))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 13
case lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))(rank:7.)
rewrite <- IH1 in goal at 0(rank:14.)
rewrite <- IH1 in goal at 1(rank:22.)
rewrite <- IH1 in goal at 2(rank:22.)
rewrite <- IH1 in goal at 3(rank:22.)
rewrite IH1 in goal at 0(rank:22.)
rewrite IH1 in goal at 2(rank:22.)
rewrite IH2 in goal at 0(rank:22.)
rewrite IH2 in goal at 1(rank:22.)
rewrite IH2 in goal at 2(rank:22.)
rewrite IH2 in goal at 3(rank:22.)
rewrite IH1 in goal at 3(rank:22.)
rewrite IH1 in goal at 1(rank:22.)
=================================================
Progress: 647


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
---------------------------------------
if lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) then tf1 (plus (SUCC (nat3)) (nat2)) (tree3) else plus (plus (SUCC (nat3)) (nat2)) (tf1 (ZERO) (tree2)) = SUCC (plus (nat3) (if lq (plus (nat2) (tf1 (ZERO) (tree2))) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else plus (nat2) (tf1 (ZERO) (tree2))))

1 goal(s) more...

1 conjecture(s) more...
>>> case lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (plus (nat3) (if lq (plus (nat2) (tf1 (ZERO) (tree2))) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else plus (nat2) (tf1 (ZERO) (tree2))))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 11
case lq (plus (nat2) (tf1 (ZERO) (tree2))) (tf1 (nat2) (tree3))(rank:8.)
rewrite IH2 in goal at 1(rank:15.)
rewrite <- IH1 in goal at 0(rank:15.)
rewrite IH1 in goal at 0(rank:23.)
rewrite IH1 in goal at 1(rank:23.)
rewrite IH1 in goal at 2(rank:23.)
rewrite IH2 in goal at 0(rank:23.)
rewrite IH2 in goal at 3(rank:23.)
rewrite IH2 in goal at 2(rank:23.)
rewrite <- IH1 in goal at 1(rank:15.)
rewrite <- IH1 in goal at 2(rank:15.)
=================================================
Progress: 648


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (plus (nat3) (if lq (plus (nat2) (tf1 (ZERO) (tree2))) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else plus (nat2) (tf1 (ZERO) (tree2))))

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (plus (nat2) (tf1 (ZERO) (tree2))) (tf1 (nat2) (tree3))(rank : 8.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
Case3 : lq (plus (nat2) (tf1 (ZERO) (tree2))) (tf1 (nat2) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (plus (nat3) (tf1 (nat2) (tree3)))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite IH2 in goal at 0(rank:24.)
rewrite IH2 in goal at 1(rank:24.)
rewrite IH2 in goal at 2(rank:24.)
=================================================
Progress: 649


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3))) = SUCC (if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH2 in goal at 1(rank : 14.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (tf1 (ZERO) (tree3)))) = SUCC (if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 7
rewrite IH3 in goal at 0(rank:14.)
rewrite IH1 in goal at 0(rank:22.)
rewrite IH1 in goal at 1(rank:22.)
rewrite IH1 in goal at 2(rank:22.)
rewrite IH2 in goal at 0(rank:22.)
rewrite IH2 in goal at 2(rank:22.)
rewrite IH2 in goal at 3(rank:22.)
=================================================
Progress: 650


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3))) = SUCC (if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 14.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3))) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 8
case lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3))(rank:7.)
rewrite IH1 in goal at 0(rank:22.)
rewrite IH1 in goal at 2(rank:22.)
rewrite IH2 in goal at 0(rank:22.)
rewrite IH2 in goal at 2(rank:22.)
rewrite IH2 in goal at 3(rank:22.)
rewrite IH1 in goal at 1(rank:22.)
rewrite <- IH2 in goal at 0(rank:22.)
=================================================
Progress: 651


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3))) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> case lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3))(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
Case2 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3))) = SUCC (plus (nat3) (tf1 (nat2) (tree3)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
rewrite IH2 in goal at 2(rank:15.)
rewrite IH2 in goal at 0(rank:23.)
rewrite IH2 in goal at 1(rank:23.)
rewrite <- IH3 in goal at 0(rank:23.)
rewrite <- IH2 in goal at 0(rank:15.)
=================================================
Progress: 652


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
---------------------------------------
if lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) then tf1 (plus (SUCC (nat3)) (nat2)) (tree3) else tf1 (plus (SUCC (nat3)) (nat2)) (tree2) = SUCC (plus (nat3) (plus (nat2) (tf1 (ZERO) (tree3))))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH2 in goal at 3(rank : 14.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
---------------------------------------
if lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) then tf1 (plus (SUCC (nat3)) (nat2)) (tree3) else tf1 (plus (SUCC (nat3)) (nat2)) (tree2) = SUCC (plus (nat3) (plus (nat2) (plus (ZERO) (tf1 (ZERO) (tree3)))))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
rewrite IH1 in goal at 0(rank:22.)
rewrite IH1 in goal at 2(rank:22.)
rewrite IH2 in goal at 1(rank:22.)
rewrite IH2 in goal at 2(rank:22.)
rewrite IH1 in goal at 1(rank:22.)
=================================================
Progress: 653


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3))) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH2 in goal at 1(rank : 14.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (tf1 (ZERO) (tree3)))) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 7
rewrite IH1 in goal at 0(rank:22.)
rewrite IH1 in goal at 2(rank:22.)
rewrite IH2 in goal at 2(rank:22.)
rewrite IH2 in goal at 3(rank:22.)
rewrite <- IH3 in goal at 0(rank:22.)
rewrite IH2 in goal at 0(rank:22.)
rewrite IH1 in goal at 1(rank:22.)
=================================================
Progress: 654


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
---------------------------------------
if lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) then tf1 (plus (SUCC (nat3)) (nat2)) (tree3) else tf1 (plus (SUCC (nat3)) (nat2)) (tree2) = SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3)))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH2 in goal at 3(rank : 14.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
---------------------------------------
if lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) then tf1 (plus (SUCC (nat3)) (nat2)) (tree3) else tf1 (plus (SUCC (nat3)) (nat2)) (tree2) = SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (tf1 (ZERO) (tree3))))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
rewrite IH1 in goal at 0(rank:22.)
rewrite IH1 in goal at 2(rank:22.)
rewrite IH2 in goal at 1(rank:22.)
rewrite IH2 in goal at 2(rank:22.)
rewrite IH1 in goal at 1(rank:22.)
=================================================
Progress: 655


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3))) = SUCC (if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH2 in goal at 1(rank : 14.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (tf1 (ZERO) (tree3)))) = SUCC (if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 7
rewrite IH3 in goal at 0(rank:14.)
rewrite IH1 in goal at 0(rank:22.)
rewrite IH1 in goal at 1(rank:22.)
rewrite IH1 in goal at 2(rank:22.)
rewrite IH2 in goal at 0(rank:22.)
rewrite IH2 in goal at 2(rank:22.)
rewrite IH2 in goal at 3(rank:22.)
=================================================
Progress: 656


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3))) = SUCC (if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 14.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3))) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 8
case lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3))(rank:7.)
rewrite IH1 in goal at 0(rank:22.)
rewrite IH1 in goal at 2(rank:22.)
rewrite IH2 in goal at 0(rank:22.)
rewrite IH2 in goal at 2(rank:22.)
rewrite IH2 in goal at 3(rank:22.)
rewrite IH1 in goal at 1(rank:22.)
rewrite <- IH2 in goal at 0(rank:22.)
=================================================
Progress: 657


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3))) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> case lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3))(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
Case2 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3))) = SUCC (plus (nat3) (tf1 (nat2) (tree3)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
rewrite IH2 in goal at 2(rank:15.)
rewrite IH2 in goal at 0(rank:23.)
rewrite IH2 in goal at 1(rank:23.)
rewrite <- IH3 in goal at 0(rank:23.)
rewrite <- IH2 in goal at 0(rank:15.)
=================================================
Progress: 658


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (tf1 (ZERO) (tree3)))) = SUCC (plus (nat3) (if lq (plus (nat2) (tf1 (ZERO) (tree2))) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else plus (nat2) (tf1 (ZERO) (tree2))))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 14.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (tf1 (ZERO) (tree3)))) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
rewrite IH2 in goal at 0(rank:22.)
rewrite IH2 in goal at 2(rank:22.)
rewrite IH2 in goal at 3(rank:22.)
rewrite <- IH3 in goal at 0(rank:22.)
=================================================
Progress: 659


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (tf1 (ZERO) (tree3)))) = SUCC (plus (nat3) (if lq (plus (nat2) (tf1 (ZERO) (tree2))) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else plus (nat2) (tf1 (ZERO) (tree2))))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 1(rank : 14.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (tf1 (ZERO) (tree3)))) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else plus (nat2) (tf1 (ZERO) (tree2))))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
rewrite IH1 in goal at 2(rank:22.)
rewrite IH2 in goal at 0(rank:22.)
rewrite IH2 in goal at 2(rank:22.)
rewrite IH2 in goal at 3(rank:22.)
=================================================
Progress: 660


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (tf1 (ZERO) (tree3)))) = SUCC (plus (nat3) (if lq (plus (nat2) (tf1 (ZERO) (tree2))) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else plus (nat2) (tf1 (ZERO) (tree2))))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 2(rank : 14.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (tf1 (ZERO) (tree3)))) = SUCC (plus (nat3) (if lq (plus (nat2) (tf1 (ZERO) (tree2))) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
rewrite IH1 in goal at 1(rank:22.)
rewrite IH2 in goal at 0(rank:22.)
rewrite IH2 in goal at 2(rank:22.)
rewrite IH2 in goal at 3(rank:22.)
=================================================
Progress: 661


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
---------------------------------------
if lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) then tf1 (plus (SUCC (nat3)) (nat2)) (tree3) else plus (plus (SUCC (nat3)) (nat2)) (tf1 (ZERO) (tree2)) = SUCC (plus (nat3) (if lq (plus (nat2) (tf1 (ZERO) (tree2))) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else plus (nat2) (tf1 (ZERO) (tree2))))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 14.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
---------------------------------------
if lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) then tf1 (plus (SUCC (nat3)) (nat2)) (tree3) else tf1 (plus (SUCC (nat3)) (nat2)) (tree2) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
case lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3))(rank:7.)
rewrite IH1 in goal at 1(rank:22.)
rewrite IH2 in goal at 0(rank:22.)
rewrite IH2 in goal at 1(rank:22.)
rewrite IH2 in goal at 2(rank:22.)
rewrite IH2 in goal at 3(rank:22.)
rewrite IH1 in goal at 2(rank:22.)
case lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))(rank:7.)
rewrite <- IH3 in goal at 0(rank:22.)
=================================================
Progress: 662


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
---------------------------------------
if lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) then tf1 (plus (SUCC (nat3)) (nat2)) (tree3) else tf1 (plus (SUCC (nat3)) (nat2)) (tree2) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> case lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3))(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
---------------------------------------
if lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) then tf1 (plus (SUCC (nat3)) (nat2)) (tree3) else tf1 (plus (SUCC (nat3)) (nat2)) (tree2) = SUCC (plus (nat3) (tf1 (nat2) (tree3)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
case lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))(rank:8.)
rewrite IH2 in goal at 3(rank:15.)
rewrite IH1 in goal at 0(rank:23.)
rewrite IH1 in goal at 2(rank:23.)
rewrite IH2 in goal at 0(rank:23.)
rewrite IH2 in goal at 1(rank:23.)
rewrite IH2 in goal at 2(rank:23.)
rewrite IH1 in goal at 1(rank:23.)
rewrite <- IH3 in goal at 0(rank:23.)
=================================================
Progress: 663


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
---------------------------------------
if lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) then tf1 (plus (SUCC (nat3)) (nat2)) (tree3) else tf1 (plus (SUCC (nat3)) (nat2)) (tree2) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> case lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
case lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3))(rank:8.)
rewrite IH2 in goal at 1(rank:15.)
rewrite <- IH3 in goal at 0(rank:15.)
rewrite IH1 in goal at 0(rank:23.)
rewrite IH1 in goal at 1(rank:23.)
rewrite IH1 in goal at 2(rank:23.)
rewrite IH2 in goal at 0(rank:23.)
rewrite IH2 in goal at 3(rank:23.)
rewrite IH2 in goal at 2(rank:23.)
=================================================
Progress: 664


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
---------------------------------------
if lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) then tf1 (plus (SUCC (nat3)) (nat2)) (tree3) else tf1 (plus (SUCC (nat3)) (nat2)) (tree2) = SUCC (plus (nat3) (tf1 (nat2) (tree3)))

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))(rank : 8.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
Case3 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (plus (nat3) (tf1 (nat2) (tree3)))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
rewrite <- IH3 in goal at 0(rank:16.)
rewrite IH2 in goal at 2(rank:24.)
rewrite IH2 in goal at 0(rank:24.)
rewrite IH2 in goal at 1(rank:24.)
=================================================
Progress: 665


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3))(rank : 8.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
Case3 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (plus (nat3) (tf1 (nat2) (tree3)))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
rewrite <- IH3 in goal at 0(rank:16.)
rewrite IH2 in goal at 2(rank:24.)
rewrite IH2 in goal at 0(rank:24.)
rewrite IH2 in goal at 1(rank:24.)
=================================================
Progress: 666


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (tf1 (ZERO) (tree3)))) = SUCC (if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 14.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (tf1 (ZERO) (tree3)))) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 6
rewrite IH1 in goal at 0(rank:22.)
rewrite IH1 in goal at 2(rank:22.)
rewrite IH2 in goal at 0(rank:22.)
rewrite IH2 in goal at 2(rank:22.)
rewrite IH2 in goal at 3(rank:22.)
rewrite IH1 in goal at 1(rank:22.)
=================================================
Progress: 667


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (tf1 (ZERO) (tree3)))) = SUCC (if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 14.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (tf1 (ZERO) (tree3)))) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 6
rewrite IH1 in goal at 0(rank:22.)
rewrite IH1 in goal at 2(rank:22.)
rewrite IH2 in goal at 0(rank:22.)
rewrite IH2 in goal at 2(rank:22.)
rewrite IH2 in goal at 3(rank:22.)
rewrite IH1 in goal at 1(rank:22.)
=================================================
Progress: 668


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3)))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH2 in goal at 1(rank : 15.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
plus (SUCC (plus (nat3) (nat2))) (tf1 (ZERO) (tree3)) = SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:6.)
=================================================
Progress: 669


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
plus (SUCC (plus (nat3) (nat2))) (tf1 (ZERO) (tree3)) = SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3)))

2 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree2) = SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3)))

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 3
Tactic List : 3
rewrite IH1 in goal at 0(rank:14.)
rewrite IH2 in goal at 0(rank:22.)
rewrite <- IH2 in goal at 0(rank:14.)
=================================================
Progress: 670


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree2) = SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3)))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 14.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
plus (SUCC (plus (nat3) (nat2))) (tf1 (ZERO) (tree2)) = SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:6.)
=================================================
Progress: 671


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
plus (SUCC (plus (nat3) (nat2))) (tf1 (ZERO) (tree2)) = SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3)))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2))) = SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
rewrite IH1 in goal at 0(rank:22.)
rewrite IH2 in goal at 0(rank:22.)
rewrite <- IH1 in goal at 0(rank:22.)
rewrite <- IH2 in goal at 0(rank:22.)
=================================================
Progress: 672


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree2) = SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3)))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 14.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree2) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite IH3 in goal at 0(rank:6.)
=================================================
Progress: 673


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree2) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree2) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 8
case lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3))(rank:7.)
rewrite IH1 in goal at 1(rank:14.)
rewrite IH1 in goal at 2(rank:22.)
rewrite IH1 in goal at 3(rank:22.)
rewrite IH2 in goal at 0(rank:22.)
rewrite IH2 in goal at 1(rank:22.)
rewrite IH1 in goal at 0(rank:22.)
rewrite IH2 in goal at 2(rank:22.)
=================================================
Progress: 674


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree2) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> case lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3))(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
Case3 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree2) = SUCC (plus (nat3) (tf1 (nat2) (tree3)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite <- IH3 in goal at 0(rank:15.)
rewrite IH1 in goal at 0(rank:23.)
rewrite IH2 in goal at 0(rank:23.)
=================================================
Progress: 675


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree2) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 1(rank : 14.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
plus (SUCC (plus (nat3) (nat2))) (tf1 (ZERO) (tree2)) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:6.)
=================================================
Progress: 676


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
plus (SUCC (plus (nat3) (nat2))) (tf1 (ZERO) (tree2)) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2))) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 8
rewrite IH1 in goal at 1(rank:14.)
rewrite IH1 in goal at 2(rank:22.)
rewrite IH2 in goal at 0(rank:22.)
rewrite IH2 in goal at 1(rank:22.)
rewrite IH2 in goal at 2(rank:22.)
rewrite <- IH1 in goal at 0(rank:22.)
rewrite IH1 in goal at 3(rank:22.)
rewrite IH1 in goal at 0(rank:22.)
=================================================
Progress: 677


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2))) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 1(rank : 14.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (tf1 (ZERO) (tree2)))) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 7
rewrite <- IH3 in goal at 0(rank:14.)
rewrite IH1 in goal at 0(rank:22.)
rewrite IH1 in goal at 2(rank:22.)
rewrite IH1 in goal at 3(rank:22.)
rewrite IH2 in goal at 0(rank:22.)
rewrite IH2 in goal at 1(rank:22.)
rewrite IH2 in goal at 2(rank:22.)
=================================================
Progress: 678


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (tf1 (ZERO) (tree2)))) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH3 in goal at 0(rank : 14.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (tf1 (ZERO) (tree2)))) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH3 in goal at 0
case lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3))
rewrite IH2 in goal at 3
case lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))
rewrite IH2 in goal at 1
reflexivity
rewrite <- IH2 in goal at 0
rewrite IH3 in goal at 0
rewrite IH1 in goal at 1
simpl in goal
rewrite IH1 in goal at 1
rewrite <- IH3 in goal at 0
Prop: SUCC (plus (SUCC (SUCC (SUCC (ZERO)))) (plus (ZERO) (tf1 (ZERO) (Tnil)))) = SUCC (tf1 (SUCC (SUCC (SUCC (ZERO)))) (Node (ZERO) (Tnil) (Tnil)))
Prop: SUCC (plus (SUCC (ZERO)) (plus (ZERO) (tf1 (ZERO) (Tnil)))) = SUCC (tf1 (SUCC (ZERO)) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Node (SUCC (SUCC (ZERO))) (Tnil) (Node (ZERO) (Tnil) (Tnil)))) (Tnil)))
Prop: SUCC (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil))))) = SUCC (tf1 (ZERO) (Tnil))
validate generalize_common_subterm_goal
Prop: SUCC (plus (SUCC (SUCC (ZERO))) (plus (ZERO) (tf1 (ZERO) (Tnil)))) = SUCC (tf1 (SUCC (SUCC (ZERO))) (Tnil))
Prop: SUCC (plus (SUCC (ZERO)) (plus (ZERO) (tf1 (ZERO) (Node (SUCC (ZERO)) (Tnil) (Tnil))))) = SUCC (tf1 (SUCC (ZERO)) (Tnil))
Prop: SUCC (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Node (SUCC (SUCC (SUCC (ZERO)))) (Tnil) (Tnil)) (Tnil)) (Tnil))))) = SUCC (tf1 (ZERO) (Tnil))
previous tactics
simpl in goal
rewrite <- IH3 in goal at 0
case lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3))
rewrite IH2 in goal at 3
case lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))
rewrite IH2 in goal at 1
reflexivity
rewrite <- IH2 in goal at 0
rewrite IH3 in goal at 0
rewrite IH1 in goal at 1
simpl in goal
rewrite IH1 in goal at 1
validate generalize_common_subterm_goal
Prop: plus (plus (SUCC (ZERO)) (SUCC (ZERO))) (plus (ZERO) (tf1 (ZERO) (Tnil))) = plus (SUCC (ZERO)) (if lq (tf1 (SUCC (ZERO)) (Tnil)) (tf1 (SUCC (ZERO)) (Tnil)) then tf1 (SUCC (ZERO)) (Tnil) else tf1 (SUCC (ZERO)) (Tnil))
Prop: plus (plus (SUCC (ZERO)) (ZERO)) (plus (ZERO) (tf1 (ZERO) (Node (ZERO) (Tnil) (Node (SUCC (ZERO)) (Tnil) (Tnil))))) = plus (SUCC (ZERO)) (if lq (tf1 (ZERO) (Node (ZERO) (Tnil) (Node (SUCC (ZERO)) (Tnil) (Tnil)))) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (Node (ZERO) (Tnil) (Node (SUCC (ZERO)) (Tnil) (Tnil))))
Prop: plus (plus (SUCC (ZERO)) (ZERO)) (plus (ZERO) (tf1 (ZERO) (Tnil))) = plus (SUCC (ZERO)) (if lq (tf1 (ZERO) (Tnil)) (tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil))) then tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil)) else tf1 (ZERO) (Tnil))
previous tactics
simpl in goal
rewrite <- IH3 in goal at 0
case lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3))
rewrite IH2 in goal at 3
case lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))
rewrite IH2 in goal at 1
reflexivity
rewrite <- IH2 in goal at 0
rewrite IH3 in goal at 0
rewrite IH1 in goal at 1
simpl in goal
validate generalize_common_subterm_goal
Prop: plus (plus (ZERO) (ZERO)) (tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil))) = plus (ZERO) (if lq (tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil))) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil)))
Prop: plus (plus (ZERO) (ZERO)) (tf1 (ZERO) (Tnil)) = plus (ZERO) (if lq (tf1 (ZERO) (Tnil)) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (Tnil))
Prop: plus (plus (ZERO) (ZERO)) (tf1 (ZERO) (Tnil)) = plus (ZERO) (if lq (tf1 (ZERO) (Tnil)) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (Tnil))
Lemma List
forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (tf1 (nat1) (tree2))
End of Lemma List


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (tf1 (ZERO) (tree2)))) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

1 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 679


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (tf1 (ZERO) (tree2)))) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

1 goal(s) more...

1 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (tf1 (nat1) (tree2))(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (tf1 (nat1) (tree2))

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (tf1 (nat1) (tree2))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 680


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (tf1 (nat1) (tree2))

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (tf1 (nat1) (tree2))

0 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (tf1 (nat1) (tree2))

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (tf1 (ZERO) (tree1))) = SUCC (tf1 (nat1) (tree2))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat2(rank:11.)
=================================================
Progress: 681


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (tf1 (nat1) (tree2))

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (tf1 (ZERO) (tree1))) = SUCC (tf1 (nat1) (tree2))

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat2(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (tf1 (nat1) (tree2))
nat2 : nat
---------------------------------------
forall (nat1:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (tf1 (ZERO) (tree1))) = SUCC (tf1 (nat1) (tree2))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat3(rank:11.)
=================================================
Progress: 682


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (tf1 (nat1) (tree2))
nat2 : nat
---------------------------------------
forall (nat1:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (tf1 (ZERO) (tree1))) = SUCC (tf1 (nat1) (tree2))

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat3(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (tf1 (nat1) (tree2))
nat2 : nat
nat3 : nat
---------------------------------------
forall (nat1:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (tf1 (ZERO) (tree1))) = SUCC (tf1 (nat1) (tree2))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction tree1(rank:12.)
=================================================
Progress: 683


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (tf1 (nat1) (tree2))
nat2 : nat
nat3 : nat
---------------------------------------
forall (nat1:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (tf1 (ZERO) (tree1))) = SUCC (tf1 (nat1) (tree2))

0 goal(s) more...

2 conjecture(s) more...
>>> induction tree1(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (tf1 (nat1) (tree2))
nat2 : nat
nat3 : nat
tree1 : tree
Base1 : tree1 = Tnil
---------------------------------------
forall (nat1:nat) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (Tnil)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (Tnil)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (tf1 (ZERO) (Tnil))) = SUCC (tf1 (nat1) (tree2))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:12.)
=================================================
Progress: 684


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (tf1 (nat1) (tree2))
nat2 : nat
nat3 : nat
tree1 : tree
Base1 : tree1 = Tnil
---------------------------------------
forall (nat1:nat) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (Tnil)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (Tnil)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (tf1 (ZERO) (Tnil))) = SUCC (tf1 (nat1) (tree2))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (tf1 (nat1) (tree2))
nat2 : nat
nat3 : nat
tree1 : tree
Base1 : tree1 = Tnil
---------------------------------------
forall (nat1:nat) (tree2:tree), lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (tf1 (nat1) (tree2))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction tree2(rank:13.)
=================================================
Progress: 685


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (tf1 (nat1) (tree2))
nat2 : nat
nat3 : nat
tree1 : tree
Base1 : tree1 = Tnil
---------------------------------------
forall (nat1:nat) (tree2:tree), lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (tf1 (nat1) (tree2))

1 goal(s) more...

2 conjecture(s) more...
>>> induction tree2(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (tf1 (nat1) (tree2))
nat2 : nat
nat3 : nat
tree1 : tree
Base1 : tree1 = Tnil
tree2 : tree
Base2 : tree2 = Tnil
---------------------------------------
forall (nat1:nat), lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (Tnil)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (Tnil)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (tf1 (nat1) (Tnil))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 686


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (tf1 (nat1) (tree2))
nat2 : nat
nat3 : nat
tree1 : tree
Base1 : tree1 = Tnil
tree2 : tree
Base2 : tree2 = Tnil
---------------------------------------
forall (nat1:nat), lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (Tnil)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (Tnil)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (tf1 (nat1) (Tnil))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (tf1 (nat1) (tree2))
nat2 : nat
nat3 : nat
tree1 : tree
Base1 : tree1 = Tnil
tree2 : tree
Base2 : tree2 = Tnil
---------------------------------------
forall (nat1:nat), lq (plus (nat3) (nat2)) (plus (nat3) (nat2)) = true->lq (plus (nat3) (nat2)) (plus (nat3) (nat2)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (nat1)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:13.)
=================================================
Progress: 687


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (tf1 (nat1) (tree2))
nat2 : nat
nat3 : nat
tree1 : tree
Base1 : tree1 = Tnil
tree2 : tree
Base2 : tree2 = Tnil
---------------------------------------
forall (nat1:nat), lq (plus (nat3) (nat2)) (plus (nat3) (nat2)) = true->lq (plus (nat3) (nat2)) (plus (nat3) (nat2)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (nat1)

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (tf1 (nat1) (tree2))
nat2 : nat
nat3 : nat
tree1 : tree
Base1 : tree1 = Tnil
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (plus (nat3) (nat2)) (plus (nat3) (nat2)) = true
---------------------------------------
forall (nat1:nat), lq (plus (nat3) (nat2)) (plus (nat3) (nat2)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (nat1)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:13.)
=================================================
Progress: 688


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (tf1 (nat1) (tree2))
nat2 : nat
nat3 : nat
tree1 : tree
Base1 : tree1 = Tnil
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (plus (nat3) (nat2)) (plus (nat3) (nat2)) = true
---------------------------------------
forall (nat1:nat), lq (plus (nat3) (nat2)) (plus (nat3) (nat2)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (nat1)

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (tf1 (nat1) (tree2))
nat2 : nat
nat3 : nat
tree1 : tree
Base1 : tree1 = Tnil
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (plus (nat3) (nat2)) (plus (nat3) (nat2)) = true
Cond2 : lq (plus (nat3) (nat2)) (plus (nat3) (nat2)) = false
---------------------------------------
forall (nat1:nat), SUCC (plus (nat1) (ZERO)) = SUCC (nat1)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction nat1(rank:14.)
=================================================
Progress: 689


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (tf1 (nat1) (tree2))
nat2 : nat
nat3 : nat
tree1 : tree
Base1 : tree1 = Tnil
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (plus (nat3) (nat2)) (plus (nat3) (nat2)) = true
Cond2 : lq (plus (nat3) (nat2)) (plus (nat3) (nat2)) = false
---------------------------------------
forall (nat1:nat), SUCC (plus (nat1) (ZERO)) = SUCC (nat1)

2 goal(s) more...

2 conjecture(s) more...
>>> induction nat1(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (tf1 (nat1) (tree2))
nat2 : nat
nat3 : nat
tree1 : tree
Base1 : tree1 = Tnil
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (plus (nat3) (nat2)) (plus (nat3) (nat2)) = true
Cond2 : lq (plus (nat3) (nat2)) (plus (nat3) (nat2)) = false
nat1 : nat
Base3 : nat1 = ZERO
---------------------------------------
SUCC (plus (ZERO) (ZERO)) = SUCC (ZERO)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:13.)
=================================================
Progress: 690


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (tf1 (nat1) (tree2))
nat2 : nat
nat3 : nat
tree1 : tree
Base1 : tree1 = Tnil
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (plus (nat3) (nat2)) (plus (nat3) (nat2)) = true
Cond2 : lq (plus (nat3) (nat2)) (plus (nat3) (nat2)) = false
nat1 : nat
Base3 : nat1 = ZERO
---------------------------------------
SUCC (plus (ZERO) (ZERO)) = SUCC (ZERO)

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (tf1 (nat1) (tree2))
nat2 : nat
nat3 : nat
tree1 : tree
Base1 : tree1 = Tnil
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (plus (nat3) (nat2)) (plus (nat3) (nat2)) = true
Cond2 : lq (plus (nat3) (nat2)) (plus (nat3) (nat2)) = false
nat1 : nat
nat4 : nat
IH1 : SUCC (plus (nat4) (ZERO)) = SUCC (nat4)
Inductive1 : nat1 = SUCC (nat4)
---------------------------------------
SUCC (plus (SUCC (nat4)) (ZERO)) = SUCC (SUCC (nat4))

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 691


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (tf1 (nat1) (tree2))
nat2 : nat
nat3 : nat
tree1 : tree
Base1 : tree1 = Tnil
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (plus (nat3) (nat2)) (plus (nat3) (nat2)) = true
Cond2 : lq (plus (nat3) (nat2)) (plus (nat3) (nat2)) = false
nat1 : nat
nat4 : nat
IH1 : SUCC (plus (nat4) (ZERO)) = SUCC (nat4)
Inductive1 : nat1 = SUCC (nat4)
---------------------------------------
SUCC (plus (SUCC (nat4)) (ZERO)) = SUCC (SUCC (nat4))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (tf1 (nat1) (tree2))
nat2 : nat
nat3 : nat
tree1 : tree
Base1 : tree1 = Tnil
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (plus (nat3) (nat2)) (plus (nat3) (nat2)) = true
Cond2 : lq (plus (nat3) (nat2)) (plus (nat3) (nat2)) = false
nat1 : nat
nat4 : nat
IH1 : SUCC (plus (nat4) (ZERO)) = SUCC (nat4)
Inductive1 : nat1 = SUCC (nat4)
---------------------------------------
SUCC (SUCC (plus (nat4) (ZERO))) = SUCC (SUCC (nat4))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:21.)
rewrite <- IH1 in goal at 0(rank:21.)
=================================================
Progress: 692


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
---------------------------------------
if lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) then tf1 (plus (SUCC (nat3)) (nat2)) (tree3) else tf1 (plus (SUCC (nat3)) (nat2)) (tree2) = SUCC (plus (nat3) (tf1 (nat2) (tree3)))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH2 in goal at 3(rank : 15.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
---------------------------------------
if lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) then tf1 (plus (SUCC (nat3)) (nat2)) (tree3) else tf1 (plus (SUCC (nat3)) (nat2)) (tree2) = SUCC (plus (nat3) (plus (nat2) (tf1 (ZERO) (tree3))))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 8
case lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))(rank:8.)
rewrite IH1 in goal at 0(rank:23.)
rewrite IH1 in goal at 2(rank:23.)
rewrite IH2 in goal at 0(rank:23.)
rewrite IH2 in goal at 1(rank:23.)
rewrite IH2 in goal at 2(rank:23.)
rewrite IH1 in goal at 1(rank:23.)
rewrite IH2 in goal at 3(rank:15.)
=================================================
Progress: 693


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
---------------------------------------
if lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) then tf1 (plus (SUCC (nat3)) (nat2)) (tree3) else tf1 (plus (SUCC (nat3)) (nat2)) (tree2) = SUCC (plus (nat3) (plus (nat2) (tf1 (ZERO) (tree3))))

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))(rank : 8.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
Case3 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (plus (nat3) (plus (nat2) (tf1 (ZERO) (tree3))))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
rewrite IH2 in goal at 1(rank:16.)
rewrite IH2 in goal at 0(rank:24.)
rewrite <- IH2 in goal at 0(rank:16.)
rewrite IH2 in goal at 2(rank:24.)
=================================================
Progress: 694


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH2 in goal at 1(rank : 15.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
plus (SUCC (plus (nat3) (nat2))) (tf1 (ZERO) (tree3)) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 695


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
plus (SUCC (plus (nat3) (nat2))) (tf1 (ZERO) (tree3)) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3))) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
rewrite IH2 in goal at 1(rank:15.)
rewrite IH1 in goal at 0(rank:23.)
rewrite IH1 in goal at 2(rank:23.)
rewrite IH2 in goal at 0(rank:23.)
rewrite IH2 in goal at 3(rank:23.)
rewrite <- IH2 in goal at 0(rank:23.)
rewrite IH1 in goal at 1(rank:23.)
rewrite <- IH3 in goal at 0(rank:15.)
rewrite IH2 in goal at 2(rank:23.)
=================================================
Progress: 696


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH3 in goal at 0(rank : 15.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite IH2 in goal at 0(rank:23.)
rewrite IH2 in goal at 2(rank:23.)
=================================================
Progress: 697


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (plus (nat3) (plus (nat2) (tf1 (ZERO) (tree3))))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH2 in goal at 1(rank : 15.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
plus (SUCC (plus (nat3) (nat2))) (tf1 (ZERO) (tree3)) = SUCC (plus (nat3) (plus (nat2) (tf1 (ZERO) (tree3))))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 698


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
plus (SUCC (plus (nat3) (nat2))) (tf1 (ZERO) (tree3)) = SUCC (plus (nat3) (plus (nat2) (tf1 (ZERO) (tree3))))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3))) = SUCC (plus (nat3) (plus (nat2) (tf1 (ZERO) (tree3))))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 6
rewrite IH2 in goal at 0(rank:23.)
rewrite IH2 in goal at 2(rank:23.)
rewrite <- IH2 in goal at 0(rank:23.)
rewrite <- IH2 in goal at 1(rank:23.)
rewrite <- IH2 in goal at 2(rank:23.)
rewrite IH2 in goal at 1(rank:23.)
=================================================
Progress: 699


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (plus (nat3) (plus (nat2) (tf1 (ZERO) (tree3))))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 15.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (plus (nat3) (tf1 (nat2) (tree3)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- IH3 in goal at 0(rank:7.)
=================================================
Progress: 700


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (plus (nat3) (tf1 (nat2) (tree3)))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH3 in goal at 0(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 8
case lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3))(rank:8.)
rewrite IH2 in goal at 1(rank:15.)
rewrite IH1 in goal at 0(rank:23.)
rewrite IH1 in goal at 1(rank:23.)
rewrite IH1 in goal at 2(rank:23.)
rewrite IH2 in goal at 0(rank:23.)
rewrite IH2 in goal at 2(rank:23.)
rewrite IH2 in goal at 3(rank:23.)
=================================================
Progress: 701


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2))

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3))(rank : 8.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
Case3 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
rewrite IH2 in goal at 0(rank:24.)
rewrite IH2 in goal at 1(rank:24.)
rewrite IH2 in goal at 2(rank:24.)
rewrite IH3 in goal at 0(rank:24.)
=================================================
Progress: 702


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
Case2 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
---------------------------------------
if lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) then tf1 (plus (SUCC (nat3)) (nat2)) (tree3) else tf1 (plus (SUCC (nat3)) (nat2)) (tree2) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH2 in goal at 3(rank : 15.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
Case2 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
---------------------------------------
if lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) then tf1 (plus (SUCC (nat3)) (nat2)) (tree3) else tf1 (plus (SUCC (nat3)) (nat2)) (tree2) = SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 8
case lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))(rank:8.)
rewrite IH1 in goal at 0(rank:23.)
rewrite IH1 in goal at 2(rank:23.)
rewrite IH2 in goal at 0(rank:23.)
rewrite IH2 in goal at 1(rank:23.)
rewrite IH2 in goal at 2(rank:23.)
rewrite IH1 in goal at 1(rank:23.)
rewrite IH2 in goal at 3(rank:15.)
=================================================
Progress: 703


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
Case2 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
---------------------------------------
if lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) then tf1 (plus (SUCC (nat3)) (nat2)) (tree3) else tf1 (plus (SUCC (nat3)) (nat2)) (tree2) = SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3)))

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))(rank : 8.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
Case2 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case3 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3)))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
rewrite IH2 in goal at 1(rank:16.)
rewrite IH2 in goal at 0(rank:24.)
rewrite <- IH2 in goal at 0(rank:16.)
rewrite IH2 in goal at 2(rank:24.)
=================================================
Progress: 704


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH2 in goal at 1(rank : 15.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
plus (SUCC (plus (nat3) (nat2))) (tf1 (ZERO) (tree3)) = SUCC (if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 705


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
plus (SUCC (plus (nat3) (nat2))) (tf1 (ZERO) (tree3)) = SUCC (if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3))) = SUCC (if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
rewrite IH2 in goal at 1(rank:15.)
rewrite IH3 in goal at 0(rank:15.)
rewrite IH1 in goal at 0(rank:23.)
rewrite IH1 in goal at 1(rank:23.)
rewrite IH1 in goal at 2(rank:23.)
rewrite IH2 in goal at 0(rank:23.)
rewrite IH2 in goal at 3(rank:23.)
rewrite IH2 in goal at 2(rank:23.)
rewrite <- IH2 in goal at 0(rank:23.)
=================================================
Progress: 706


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 15.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (plus (nat3) (tf1 (nat2) (tree3)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite IH2 in goal at 0(rank:23.)
rewrite IH2 in goal at 2(rank:23.)
=================================================
Progress: 707


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3)))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH2 in goal at 1(rank : 15.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
plus (SUCC (plus (nat3) (nat2))) (tf1 (ZERO) (tree3)) = SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:6.)
=================================================
Progress: 708


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
plus (SUCC (plus (nat3) (nat2))) (tf1 (ZERO) (tree3)) = SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3)))

2 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree2) = SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3)))

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 3
Tactic List : 3
rewrite IH1 in goal at 0(rank:14.)
rewrite IH2 in goal at 0(rank:22.)
rewrite <- IH2 in goal at 0(rank:14.)
=================================================
Progress: 709


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree2) = SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3)))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 14.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
plus (SUCC (plus (nat3) (nat2))) (tf1 (ZERO) (tree2)) = SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:6.)
=================================================
Progress: 710


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
plus (SUCC (plus (nat3) (nat2))) (tf1 (ZERO) (tree2)) = SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3)))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2))) = SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
rewrite IH1 in goal at 0(rank:22.)
rewrite IH2 in goal at 0(rank:22.)
rewrite <- IH1 in goal at 0(rank:22.)
rewrite <- IH2 in goal at 0(rank:22.)
=================================================
Progress: 711


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree2) = SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3)))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 14.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree2) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite IH3 in goal at 0(rank:6.)
=================================================
Progress: 712


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree2) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree2) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 8
case lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3))(rank:7.)
rewrite IH1 in goal at 1(rank:14.)
rewrite IH1 in goal at 2(rank:22.)
rewrite IH1 in goal at 3(rank:22.)
rewrite IH2 in goal at 0(rank:22.)
rewrite IH2 in goal at 1(rank:22.)
rewrite IH1 in goal at 0(rank:22.)
rewrite IH2 in goal at 2(rank:22.)
=================================================
Progress: 713


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree2) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> case lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3))(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
Case3 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree2) = SUCC (plus (nat3) (tf1 (nat2) (tree3)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite <- IH3 in goal at 0(rank:15.)
rewrite IH1 in goal at 0(rank:23.)
rewrite IH2 in goal at 0(rank:23.)
=================================================
Progress: 714


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree2) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 1(rank : 14.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
plus (SUCC (plus (nat3) (nat2))) (tf1 (ZERO) (tree2)) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:6.)
=================================================
Progress: 715


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
plus (SUCC (plus (nat3) (nat2))) (tf1 (ZERO) (tree2)) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2))) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 8
rewrite IH1 in goal at 1(rank:14.)
rewrite IH1 in goal at 2(rank:22.)
rewrite IH2 in goal at 0(rank:22.)
rewrite IH2 in goal at 1(rank:22.)
rewrite IH2 in goal at 2(rank:22.)
rewrite <- IH1 in goal at 0(rank:22.)
rewrite IH1 in goal at 3(rank:22.)
rewrite IH1 in goal at 0(rank:22.)
=================================================
Progress: 716


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2))) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 1(rank : 14.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (tf1 (ZERO) (tree2)))) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 7
rewrite <- IH3 in goal at 0(rank:14.)
rewrite IH1 in goal at 0(rank:22.)
rewrite IH1 in goal at 2(rank:22.)
rewrite IH1 in goal at 3(rank:22.)
rewrite IH2 in goal at 0(rank:22.)
rewrite IH2 in goal at 1(rank:22.)
rewrite IH2 in goal at 2(rank:22.)
=================================================
Progress: 717


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (tf1 (ZERO) (tree2)))) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH3 in goal at 0(rank : 14.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (tf1 (ZERO) (tree2)))) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH3 in goal at 0
case lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3))
rewrite IH2 in goal at 3
case lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))
rewrite IH2 in goal at 1
reflexivity
rewrite <- IH2 in goal at 0
rewrite IH3 in goal at 0
rewrite IH1 in goal at 1
simpl in goal
rewrite IH1 in goal at 1
rewrite <- IH3 in goal at 0
Prop: SUCC (plus (SUCC (SUCC (ZERO))) (plus (ZERO) (tf1 (ZERO) (Tnil)))) = SUCC (tf1 (SUCC (SUCC (ZERO))) (Tnil))
Prop: SUCC (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (Tnil)))) = SUCC (tf1 (ZERO) (Tnil))
Prop: SUCC (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil))))) = SUCC (tf1 (ZERO) (Tnil))
previous tactics
simpl in goal
rewrite IH1 in goal at 0
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH3 in goal at 0
case lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3))
rewrite IH2 in goal at 3
case lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))
rewrite IH2 in goal at 1
reflexivity
rewrite <- IH2 in goal at 0
rewrite IH3 in goal at 0
rewrite IH1 in goal at 1
simpl in goal
rewrite IH1 in goal at 1
validate generalize_common_subterm_goal
Prop: plus (plus (ZERO) (ZERO)) (plus (ZERO) (tf1 (ZERO) (Tnil))) = plus (ZERO) (if lq (tf1 (ZERO) (Tnil)) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (Tnil))
Prop: plus (plus (ZERO) (ZERO)) (plus (ZERO) (tf1 (ZERO) (Tnil))) = plus (ZERO) (if lq (tf1 (ZERO) (Tnil)) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (Tnil))
Prop: plus (plus (ZERO) (ZERO)) (plus (ZERO) (tf1 (ZERO) (Tnil))) = plus (ZERO) (if lq (tf1 (ZERO) (Tnil)) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (Tnil))
previous tactics
simpl in goal
rewrite IH1 in goal at 0
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH3 in goal at 0
case lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3))
rewrite IH2 in goal at 3
case lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))
rewrite IH2 in goal at 1
reflexivity
rewrite <- IH2 in goal at 0
rewrite IH3 in goal at 0
rewrite IH1 in goal at 1
simpl in goal
validate generalize_common_subterm_goal
Prop: plus (plus (SUCC (ZERO)) (SUCC (SUCC (SUCC (ZERO))))) (tf1 (ZERO) (Node (SUCC (SUCC (SUCC (SUCC (ZERO))))) (Tnil) (Tnil))) = plus (SUCC (ZERO)) (if lq (tf1 (SUCC (SUCC (SUCC (ZERO)))) (Node (SUCC (SUCC (SUCC (SUCC (ZERO))))) (Tnil) (Tnil))) (tf1 (SUCC (SUCC (SUCC (ZERO)))) (Tnil)) then tf1 (SUCC (SUCC (SUCC (ZERO)))) (Tnil) else tf1 (SUCC (SUCC (SUCC (ZERO)))) (Node (SUCC (SUCC (SUCC (SUCC (ZERO))))) (Tnil) (Tnil)))
Prop: plus (plus (SUCC (ZERO)) (SUCC (ZERO))) (tf1 (ZERO) (Tnil)) = plus (SUCC (ZERO)) (if lq (tf1 (SUCC (ZERO)) (Tnil)) (tf1 (SUCC (ZERO)) (Tnil)) then tf1 (SUCC (ZERO)) (Tnil) else tf1 (SUCC (ZERO)) (Tnil))
Prop: plus (plus (SUCC (SUCC (ZERO))) (ZERO)) (tf1 (ZERO) (Tnil)) = plus (SUCC (SUCC (ZERO))) (if lq (tf1 (ZERO) (Tnil)) (tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil))) then tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil)) else tf1 (ZERO) (Tnil))
Lemma List
forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (tf1 (nat1) (tree2))
End of Lemma List


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (tf1 (ZERO) (tree2)))) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

1 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 718


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (tf1 (ZERO) (tree2)))) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

1 goal(s) more...

1 conjecture(s) more...
>>> assert forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (tf1 (nat1) (tree2))(rank : 0.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (tf1 (nat1) (tree2))

---------------------------------------
forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (tf1 (nat1) (tree2))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 719


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (tf1 (nat1) (tree2))

---------------------------------------
forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (tf1 (nat1) (tree2))

0 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (tf1 (nat1) (tree2))

---------------------------------------
forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (plus (nat1) (tf1 (ZERO) (tree1))) = SUCC (tf1 (nat1) (tree2))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
induction nat1(rank:16.)
induction tree1(rank:16.)
induction tree2(rank:16.)
=================================================
Progress: 720


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
---------------------------------------
if lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) then tf1 (plus (SUCC (nat3)) (nat2)) (tree3) else tf1 (plus (SUCC (nat3)) (nat2)) (tree2) = SUCC (plus (nat3) (tf1 (nat2) (tree3)))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH2 in goal at 3(rank : 15.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
---------------------------------------
if lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) then tf1 (plus (SUCC (nat3)) (nat2)) (tree3) else tf1 (plus (SUCC (nat3)) (nat2)) (tree2) = SUCC (plus (nat3) (plus (nat2) (tf1 (ZERO) (tree3))))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 8
case lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))(rank:8.)
rewrite IH1 in goal at 0(rank:23.)
rewrite IH1 in goal at 2(rank:23.)
rewrite IH2 in goal at 0(rank:23.)
rewrite IH2 in goal at 1(rank:23.)
rewrite IH2 in goal at 2(rank:23.)
rewrite IH1 in goal at 1(rank:23.)
rewrite IH2 in goal at 3(rank:15.)
=================================================
Progress: 721


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
---------------------------------------
if lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) then tf1 (plus (SUCC (nat3)) (nat2)) (tree3) else tf1 (plus (SUCC (nat3)) (nat2)) (tree2) = SUCC (plus (nat3) (plus (nat2) (tf1 (ZERO) (tree3))))

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))(rank : 8.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
Case3 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (plus (nat3) (plus (nat2) (tf1 (ZERO) (tree3))))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
rewrite IH2 in goal at 1(rank:16.)
rewrite IH2 in goal at 0(rank:24.)
rewrite <- IH2 in goal at 0(rank:16.)
rewrite IH2 in goal at 2(rank:24.)
=================================================
Progress: 722


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH2 in goal at 1(rank : 15.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
plus (SUCC (plus (nat3) (nat2))) (tf1 (ZERO) (tree3)) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 723


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
plus (SUCC (plus (nat3) (nat2))) (tf1 (ZERO) (tree3)) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3))) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
rewrite IH2 in goal at 1(rank:15.)
rewrite IH1 in goal at 0(rank:23.)
rewrite IH1 in goal at 2(rank:23.)
rewrite IH2 in goal at 0(rank:23.)
rewrite IH2 in goal at 3(rank:23.)
rewrite <- IH2 in goal at 0(rank:23.)
rewrite IH1 in goal at 1(rank:23.)
rewrite <- IH3 in goal at 0(rank:15.)
rewrite IH2 in goal at 2(rank:23.)
=================================================
Progress: 724


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH3 in goal at 0(rank : 15.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite IH2 in goal at 0(rank:23.)
rewrite IH2 in goal at 2(rank:23.)
=================================================
Progress: 725


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
Case2 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3))) = SUCC (plus (nat3) (tf1 (nat2) (tree3)))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH2 in goal at 2(rank : 15.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
Case2 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3))) = SUCC (plus (nat3) (plus (nat2) (tf1 (ZERO) (tree3))))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite IH2 in goal at 0(rank:23.)
rewrite IH2 in goal at 2(rank:23.)
rewrite <- IH2 in goal at 1(rank:23.)
=================================================
Progress: 726


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
Case2 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3))) = SUCC (plus (nat3) (tf1 (nat2) (tree3)))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 15.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
Case2 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
---------------------------------------
SUCC (tf1 (plus (nat3) (nat2)) (tree3)) = SUCC (plus (nat3) (tf1 (nat2) (tree3)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- IH3 in goal at 0(rank:7.)
=================================================
Progress: 727


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
Case2 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
---------------------------------------
SUCC (tf1 (plus (nat3) (nat2)) (tree3)) = SUCC (plus (nat3) (tf1 (nat2) (tree3)))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH3 in goal at 0(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
Case2 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
---------------------------------------
SUCC (tf1 (plus (nat3) (nat2)) (tree3)) = SUCC (if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
case lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3))(rank:8.)
rewrite IH1 in goal at 2(rank:23.)
rewrite IH1 in goal at 0(rank:23.)
rewrite IH1 in goal at 1(rank:23.)
=================================================
Progress: 728


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
Case2 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
---------------------------------------
SUCC (tf1 (plus (nat3) (nat2)) (tree3)) = SUCC (if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2))

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3))(rank : 8.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
Case2 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
Case3 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
---------------------------------------
SUCC (tf1 (plus (nat3) (nat2)) (tree3)) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7.)
=================================================
Progress: 729


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
Case2 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
Case3 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
---------------------------------------
SUCC (tf1 (plus (nat3) (nat2)) (tree3)) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
Case2 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
Case3 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = false
---------------------------------------
SUCC (tf1 (plus (nat3) (nat2)) (tree3)) = SUCC (tf1 (plus (nat3) (nat2)) (tree2))

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 3
rewrite IH1 in goal at 0(rank:23.)
rewrite IH2 in goal at 0(rank:23.)
rewrite IH3 in goal at 0(rank:23.)
=================================================
Progress: 730


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
Case2 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3))) = SUCC (plus (nat3) (tf1 (nat2) (tree3)))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH2 in goal at 2(rank : 15.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
Case2 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3))) = SUCC (plus (nat3) (plus (nat2) (tf1 (ZERO) (tree3))))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite IH2 in goal at 0(rank:23.)
rewrite IH2 in goal at 2(rank:23.)
rewrite <- IH2 in goal at 1(rank:23.)
=================================================
Progress: 731


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
Case2 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3))) = SUCC (plus (nat3) (tf1 (nat2) (tree3)))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 15.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
Case2 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
---------------------------------------
SUCC (tf1 (plus (nat3) (nat2)) (tree3)) = SUCC (plus (nat3) (tf1 (nat2) (tree3)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- IH3 in goal at 0(rank:7.)
=================================================
Progress: 732


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
Case2 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
---------------------------------------
SUCC (tf1 (plus (nat3) (nat2)) (tree3)) = SUCC (plus (nat3) (tf1 (nat2) (tree3)))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH3 in goal at 0(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
Case2 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
---------------------------------------
SUCC (tf1 (plus (nat3) (nat2)) (tree3)) = SUCC (if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
case lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3))(rank:8.)
rewrite IH1 in goal at 2(rank:23.)
rewrite IH1 in goal at 0(rank:23.)
rewrite IH1 in goal at 1(rank:23.)
=================================================
Progress: 733


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
Case2 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
---------------------------------------
SUCC (tf1 (plus (nat3) (nat2)) (tree3)) = SUCC (if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2))

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3))(rank : 8.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
Case2 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
Case3 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
---------------------------------------
SUCC (tf1 (plus (nat3) (nat2)) (tree3)) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7.)
=================================================
Progress: 734


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
Case2 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
Case3 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
---------------------------------------
SUCC (tf1 (plus (nat3) (nat2)) (tree3)) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
Case2 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
Case3 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = false
---------------------------------------
SUCC (tf1 (plus (nat3) (nat2)) (tree3)) = SUCC (tf1 (plus (nat3) (nat2)) (tree2))

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 3
rewrite IH1 in goal at 0(rank:23.)
rewrite IH2 in goal at 0(rank:23.)
rewrite IH3 in goal at 0(rank:23.)
=================================================
Progress: 735


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
Case2 : lq (plus (nat2) (tf1 (ZERO) (tree2))) (tf1 (nat2) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3))) = SUCC (plus (nat3) (tf1 (nat2) (tree3)))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH2 in goal at 2(rank : 15.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
Case2 : lq (plus (nat2) (tf1 (ZERO) (tree2))) (tf1 (nat2) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3))) = SUCC (plus (nat3) (plus (nat2) (tf1 (ZERO) (tree3))))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite IH2 in goal at 0(rank:23.)
rewrite IH2 in goal at 2(rank:23.)
rewrite <- IH2 in goal at 1(rank:23.)
=================================================
Progress: 736


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
Case2 : lq (plus (nat2) (tf1 (ZERO) (tree2))) (tf1 (nat2) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3))) = SUCC (plus (nat3) (tf1 (nat2) (tree3)))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 15.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
Case2 : lq (plus (nat2) (tf1 (ZERO) (tree2))) (tf1 (nat2) (tree3)) = true
---------------------------------------
SUCC (tf1 (plus (nat3) (nat2)) (tree3)) = SUCC (plus (nat3) (tf1 (nat2) (tree3)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
simpl in goal
case lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))
rewrite IH2 in goal at 1
simpl in goal
rewrite <- IH1 in goal at 2
case lq (plus (nat2) (tf1 (ZERO) (tree2))) (tf1 (nat2) (tree3))
rewrite <- IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: tf1 (plus (SUCC (SUCC (ZERO))) (ZERO)) (Tnil) = plus (SUCC (SUCC (ZERO))) (tf1 (ZERO) (Tnil))
Prop: tf1 (plus (ZERO) (ZERO)) (Tnil) = plus (ZERO) (tf1 (ZERO) (Tnil))
Prop: tf1 (plus (ZERO) (ZERO)) (Tnil) = plus (ZERO) (tf1 (ZERO) (Tnil))
previous tactics
simpl in goal
rewrite IH1 in goal at 0
simpl in goal
case lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))
rewrite IH2 in goal at 1
simpl in goal
rewrite <- IH1 in goal at 2
case lq (plus (nat2) (tf1 (ZERO) (tree2))) (tf1 (nat2) (tree3))
validate generalize_common_subterm_goal
Prop: plus (plus (SUCC (ZERO)) (ZERO)) (tf1 (ZERO) (Tnil)) = plus (SUCC (ZERO)) (tf1 (ZERO) (Tnil))
Prop: plus (plus (SUCC (ZERO)) (ZERO)) (tf1 (ZERO) (Tnil)) = plus (SUCC (ZERO)) (tf1 (ZERO) (Tnil))
Prop: plus (plus (ZERO) (ZERO)) (tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil))) = plus (ZERO) (tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil)))
Lemma List
forall (nat1:nat) (nat2:nat) (tree1:tree), plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree1)) = plus (nat2) (tf1 (nat1) (tree1))
End of Lemma List


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
Case2 : lq (plus (nat2) (tf1 (ZERO) (tree2))) (tf1 (nat2) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3))) = SUCC (plus (nat3) (tf1 (nat2) (tree3)))

2 goal(s) more...

1 conjecture(s) more...
Lemma List
forall (nat1:nat) (nat2:nat) (tree1:tree), tf1 (plus (nat2) (nat1)) (tree1) = plus (nat2) (tf1 (nat1) (tree1))
End of Lemma List


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
Case2 : lq (plus (nat2) (tf1 (ZERO) (tree2))) (tf1 (nat2) (tree3)) = true
---------------------------------------
SUCC (tf1 (plus (nat3) (nat2)) (tree3)) = SUCC (plus (nat3) (tf1 (nat2) (tree3)))

2 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 737


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
Case2 : lq (plus (nat2) (tf1 (ZERO) (tree2))) (tf1 (nat2) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3))) = SUCC (plus (nat3) (tf1 (nat2) (tree3)))

2 goal(s) more...

1 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (tree1:tree), plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree1)) = plus (nat2) (tf1 (nat1) (tree1))(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree), plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree1)) = plus (nat2) (tf1 (nat1) (tree1))

---------------------------------------
forall (nat1:nat) (nat2:nat) (tree1:tree), plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree1)) = plus (nat2) (tf1 (nat1) (tree1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction nat2(rank:8.)
=================================================
Progress: 738


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
Case2 : lq (plus (nat2) (tf1 (ZERO) (tree2))) (tf1 (nat2) (tree3)) = true
---------------------------------------
SUCC (tf1 (plus (nat3) (nat2)) (tree3)) = SUCC (plus (nat3) (tf1 (nat2) (tree3)))

2 goal(s) more...

1 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (tree1:tree), tf1 (plus (nat2) (nat1)) (tree1) = plus (nat2) (tf1 (nat1) (tree1))(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree), tf1 (plus (nat2) (nat1)) (tree1) = plus (nat2) (tf1 (nat1) (tree1))

---------------------------------------
forall (nat1:nat) (nat2:nat) (tree1:tree), tf1 (plus (nat2) (nat1)) (tree1) = plus (nat2) (tf1 (nat1) (tree1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction nat2(rank:8.)
=================================================
Progress: 739


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree), plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree1)) = plus (nat2) (tf1 (nat1) (tree1))

---------------------------------------
forall (nat1:nat) (nat2:nat) (tree1:tree), plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree1)) = plus (nat2) (tf1 (nat1) (tree1))

0 goal(s) more...

2 conjecture(s) more...
>>> induction nat2(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree), plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree1)) = plus (nat2) (tf1 (nat1) (tree1))
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (nat1:nat) (tree1:tree), plus (plus (ZERO) (nat1)) (tf1 (ZERO) (tree1)) = plus (ZERO) (tf1 (nat1) (tree1))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 740


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree), tf1 (plus (nat2) (nat1)) (tree1) = plus (nat2) (tf1 (nat1) (tree1))

---------------------------------------
forall (nat1:nat) (nat2:nat) (tree1:tree), tf1 (plus (nat2) (nat1)) (tree1) = plus (nat2) (tf1 (nat1) (tree1))

0 goal(s) more...

2 conjecture(s) more...
>>> induction nat2(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree), tf1 (plus (nat2) (nat1)) (tree1) = plus (nat2) (tf1 (nat1) (tree1))
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (nat1:nat) (tree1:tree), tf1 (plus (ZERO) (nat1)) (tree1) = plus (ZERO) (tf1 (nat1) (tree1))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7.)
=================================================
Progress: 741


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree), tf1 (plus (nat2) (nat1)) (tree1) = plus (nat2) (tf1 (nat1) (tree1))
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (nat1:nat) (tree1:tree), tf1 (plus (ZERO) (nat1)) (tree1) = plus (ZERO) (tf1 (nat1) (tree1))

1 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree), tf1 (plus (nat2) (nat1)) (tree1) = plus (nat2) (tf1 (nat1) (tree1))
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat) (tree1:tree), tf1 (plus (nat3) (nat1)) (tree1) = plus (nat3) (tf1 (nat1) (tree1))
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
forall (nat1:nat) (tree1:tree), tf1 (plus (SUCC (nat3)) (nat1)) (tree1) = plus (SUCC (nat3)) (tf1 (nat1) (tree1))

0 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 742


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree), tf1 (plus (nat2) (nat1)) (tree1) = plus (nat2) (tf1 (nat1) (tree1))
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat) (tree1:tree), tf1 (plus (nat3) (nat1)) (tree1) = plus (nat3) (tf1 (nat1) (tree1))
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
forall (nat1:nat) (tree1:tree), tf1 (plus (SUCC (nat3)) (nat1)) (tree1) = plus (SUCC (nat3)) (tf1 (nat1) (tree1))

0 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree), tf1 (plus (nat2) (nat1)) (tree1) = plus (nat2) (tf1 (nat1) (tree1))
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat) (tree1:tree), tf1 (plus (nat3) (nat1)) (tree1) = plus (nat3) (tf1 (nat1) (tree1))
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
forall (nat1:nat) (tree1:tree), tf1 (SUCC (plus (nat3) (nat1))) (tree1) = SUCC (plus (nat3) (tf1 (nat1) (tree1)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction tree1(rank:8.)
=================================================
Progress: 743


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree), plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree1)) = plus (nat2) (tf1 (nat1) (tree1))
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (nat1:nat) (tree1:tree), plus (plus (ZERO) (nat1)) (tf1 (ZERO) (tree1)) = plus (ZERO) (tf1 (nat1) (tree1))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree), plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree1)) = plus (nat2) (tf1 (nat1) (tree1))
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (nat1:nat) (tree1:tree), plus (nat1) (tf1 (ZERO) (tree1)) = tf1 (nat1) (tree1)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
induction nat1(rank:17.)
induction tree1(rank:17.)
=================================================
Progress: 744


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree), tf1 (plus (nat2) (nat1)) (tree1) = plus (nat2) (tf1 (nat1) (tree1))
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat) (tree1:tree), tf1 (plus (nat3) (nat1)) (tree1) = plus (nat3) (tf1 (nat1) (tree1))
Inductive1 : nat2 = SUCC (nat3)
---------------------------------------
forall (nat1:nat) (tree1:tree), tf1 (SUCC (plus (nat3) (nat1))) (tree1) = SUCC (plus (nat3) (tf1 (nat1) (tree1)))

0 goal(s) more...

2 conjecture(s) more...
>>> induction tree1(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree), tf1 (plus (nat2) (nat1)) (tree1) = plus (nat2) (tf1 (nat1) (tree1))
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat) (tree1:tree), tf1 (plus (nat3) (nat1)) (tree1) = plus (nat3) (tf1 (nat1) (tree1))
Inductive1 : nat2 = SUCC (nat3)
tree1 : tree
Base1 : tree1 = Tnil
---------------------------------------
forall (nat1:nat), tf1 (SUCC (plus (nat3) (nat1))) (Tnil) = SUCC (plus (nat3) (tf1 (nat1) (Tnil)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7.)
=================================================
Progress: 745


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree), tf1 (plus (nat2) (nat1)) (tree1) = plus (nat2) (tf1 (nat1) (tree1))
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat) (tree1:tree), tf1 (plus (nat3) (nat1)) (tree1) = plus (nat3) (tf1 (nat1) (tree1))
Inductive1 : nat2 = SUCC (nat3)
tree1 : tree
Base1 : tree1 = Tnil
---------------------------------------
forall (nat1:nat), tf1 (SUCC (plus (nat3) (nat1))) (Tnil) = SUCC (plus (nat3) (tf1 (nat1) (Tnil)))

1 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree), tf1 (plus (nat2) (nat1)) (tree1) = plus (nat2) (tf1 (nat1) (tree1))
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat) (tree1:tree), tf1 (plus (nat3) (nat1)) (tree1) = plus (nat3) (tf1 (nat1) (tree1))
Inductive1 : nat2 = SUCC (nat3)
tree1 : tree
nat4 : nat
tree2 : tree
tree3 : tree
IH2 : forall (nat1:nat), tf1 (SUCC (plus (nat3) (nat1))) (tree2) = SUCC (plus (nat3) (tf1 (nat1) (tree2)))
IH3 : forall (nat1:nat), tf1 (SUCC (plus (nat3) (nat1))) (tree3) = SUCC (plus (nat3) (tf1 (nat1) (tree3)))
Inductive2 : tree1 = Node (nat4) (tree2) (tree3)
---------------------------------------
forall (nat1:nat), tf1 (SUCC (plus (nat3) (nat1))) (Node (nat4) (tree2) (tree3)) = SUCC (plus (nat3) (tf1 (nat1) (Node (nat4) (tree2) (tree3))))

0 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 746


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree), tf1 (plus (nat2) (nat1)) (tree1) = plus (nat2) (tf1 (nat1) (tree1))
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat) (tree1:tree), tf1 (plus (nat3) (nat1)) (tree1) = plus (nat3) (tf1 (nat1) (tree1))
Inductive1 : nat2 = SUCC (nat3)
tree1 : tree
nat4 : nat
tree2 : tree
tree3 : tree
IH2 : forall (nat1:nat), tf1 (SUCC (plus (nat3) (nat1))) (tree2) = SUCC (plus (nat3) (tf1 (nat1) (tree2)))
IH3 : forall (nat1:nat), tf1 (SUCC (plus (nat3) (nat1))) (tree3) = SUCC (plus (nat3) (tf1 (nat1) (tree3)))
Inductive2 : tree1 = Node (nat4) (tree2) (tree3)
---------------------------------------
forall (nat1:nat), tf1 (SUCC (plus (nat3) (nat1))) (Node (nat4) (tree2) (tree3)) = SUCC (plus (nat3) (tf1 (nat1) (Node (nat4) (tree2) (tree3))))

0 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree), tf1 (plus (nat2) (nat1)) (tree1) = plus (nat2) (tf1 (nat1) (tree1))
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat) (tree1:tree), tf1 (plus (nat3) (nat1)) (tree1) = plus (nat3) (tf1 (nat1) (tree1))
Inductive1 : nat2 = SUCC (nat3)
tree1 : tree
nat4 : nat
tree2 : tree
tree3 : tree
IH2 : forall (nat1:nat), tf1 (SUCC (plus (nat3) (nat1))) (tree2) = SUCC (plus (nat3) (tf1 (nat1) (tree2)))
IH3 : forall (nat1:nat), tf1 (SUCC (plus (nat3) (nat1))) (tree3) = SUCC (plus (nat3) (tf1 (nat1) (tree3)))
Inductive2 : tree1 = Node (nat4) (tree2) (tree3)
---------------------------------------
forall (nat1:nat), if lq (tf1 (SUCC (plus (plus (nat3) (nat1)) (nat4))) (tree2)) (tf1 (SUCC (plus (plus (nat3) (nat1)) (nat4))) (tree3)) then tf1 (SUCC (plus (plus (nat3) (nat1)) (nat4))) (tree3) else tf1 (SUCC (plus (plus (nat3) (nat1)) (nat4))) (tree2) = SUCC (plus (nat3) (if lq (tf1 (plus (nat1) (nat4)) (tree2)) (tf1 (plus (nat1) (nat4)) (tree3)) then tf1 (plus (nat1) (nat4)) (tree3) else tf1 (plus (nat1) (nat4)) (tree2)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction nat1(rank:8.)
=================================================
Progress: 747


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree), tf1 (plus (nat2) (nat1)) (tree1) = plus (nat2) (tf1 (nat1) (tree1))
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat) (tree1:tree), tf1 (plus (nat3) (nat1)) (tree1) = plus (nat3) (tf1 (nat1) (tree1))
Inductive1 : nat2 = SUCC (nat3)
tree1 : tree
nat4 : nat
tree2 : tree
tree3 : tree
IH2 : forall (nat1:nat), tf1 (SUCC (plus (nat3) (nat1))) (tree2) = SUCC (plus (nat3) (tf1 (nat1) (tree2)))
IH3 : forall (nat1:nat), tf1 (SUCC (plus (nat3) (nat1))) (tree3) = SUCC (plus (nat3) (tf1 (nat1) (tree3)))
Inductive2 : tree1 = Node (nat4) (tree2) (tree3)
---------------------------------------
forall (nat1:nat), if lq (tf1 (SUCC (plus (plus (nat3) (nat1)) (nat4))) (tree2)) (tf1 (SUCC (plus (plus (nat3) (nat1)) (nat4))) (tree3)) then tf1 (SUCC (plus (plus (nat3) (nat1)) (nat4))) (tree3) else tf1 (SUCC (plus (plus (nat3) (nat1)) (nat4))) (tree2) = SUCC (plus (nat3) (if lq (tf1 (plus (nat1) (nat4)) (tree2)) (tf1 (plus (nat1) (nat4)) (tree3)) then tf1 (plus (nat1) (nat4)) (tree3) else tf1 (plus (nat1) (nat4)) (tree2)))

0 goal(s) more...

2 conjecture(s) more...
>>> induction nat1(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree), tf1 (plus (nat2) (nat1)) (tree1) = plus (nat2) (tf1 (nat1) (tree1))
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat) (tree1:tree), tf1 (plus (nat3) (nat1)) (tree1) = plus (nat3) (tf1 (nat1) (tree1))
Inductive1 : nat2 = SUCC (nat3)
tree1 : tree
nat4 : nat
tree2 : tree
tree3 : tree
IH2 : forall (nat1:nat), tf1 (SUCC (plus (nat3) (nat1))) (tree2) = SUCC (plus (nat3) (tf1 (nat1) (tree2)))
IH3 : forall (nat1:nat), tf1 (SUCC (plus (nat3) (nat1))) (tree3) = SUCC (plus (nat3) (tf1 (nat1) (tree3)))
Inductive2 : tree1 = Node (nat4) (tree2) (tree3)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
if lq (tf1 (SUCC (plus (plus (nat3) (ZERO)) (nat4))) (tree2)) (tf1 (SUCC (plus (plus (nat3) (ZERO)) (nat4))) (tree3)) then tf1 (SUCC (plus (plus (nat3) (ZERO)) (nat4))) (tree3) else tf1 (SUCC (plus (plus (nat3) (ZERO)) (nat4))) (tree2) = SUCC (plus (nat3) (if lq (tf1 (plus (ZERO) (nat4)) (tree2)) (tf1 (plus (ZERO) (nat4)) (tree3)) then tf1 (plus (ZERO) (nat4)) (tree3) else tf1 (plus (ZERO) (nat4)) (tree2)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 748


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree), tf1 (plus (nat2) (nat1)) (tree1) = plus (nat2) (tf1 (nat1) (tree1))
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat) (tree1:tree), tf1 (plus (nat3) (nat1)) (tree1) = plus (nat3) (tf1 (nat1) (tree1))
Inductive1 : nat2 = SUCC (nat3)
tree1 : tree
nat4 : nat
tree2 : tree
tree3 : tree
IH2 : forall (nat1:nat), tf1 (SUCC (plus (nat3) (nat1))) (tree2) = SUCC (plus (nat3) (tf1 (nat1) (tree2)))
IH3 : forall (nat1:nat), tf1 (SUCC (plus (nat3) (nat1))) (tree3) = SUCC (plus (nat3) (tf1 (nat1) (tree3)))
Inductive2 : tree1 = Node (nat4) (tree2) (tree3)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
if lq (tf1 (SUCC (plus (plus (nat3) (ZERO)) (nat4))) (tree2)) (tf1 (SUCC (plus (plus (nat3) (ZERO)) (nat4))) (tree3)) then tf1 (SUCC (plus (plus (nat3) (ZERO)) (nat4))) (tree3) else tf1 (SUCC (plus (plus (nat3) (ZERO)) (nat4))) (tree2) = SUCC (plus (nat3) (if lq (tf1 (plus (ZERO) (nat4)) (tree2)) (tf1 (plus (ZERO) (nat4)) (tree3)) then tf1 (plus (ZERO) (nat4)) (tree3) else tf1 (plus (ZERO) (nat4)) (tree2)))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree), tf1 (plus (nat2) (nat1)) (tree1) = plus (nat2) (tf1 (nat1) (tree1))
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat) (tree1:tree), tf1 (plus (nat3) (nat1)) (tree1) = plus (nat3) (tf1 (nat1) (tree1))
Inductive1 : nat2 = SUCC (nat3)
tree1 : tree
nat4 : nat
tree2 : tree
tree3 : tree
IH2 : forall (nat1:nat), tf1 (SUCC (plus (nat3) (nat1))) (tree2) = SUCC (plus (nat3) (tf1 (nat1) (tree2)))
IH3 : forall (nat1:nat), tf1 (SUCC (plus (nat3) (nat1))) (tree3) = SUCC (plus (nat3) (tf1 (nat1) (tree3)))
Inductive2 : tree1 = Node (nat4) (tree2) (tree3)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
if lq (tf1 (SUCC (plus (plus (nat3) (ZERO)) (nat4))) (tree2)) (tf1 (SUCC (plus (plus (nat3) (ZERO)) (nat4))) (tree3)) then tf1 (SUCC (plus (plus (nat3) (ZERO)) (nat4))) (tree3) else tf1 (SUCC (plus (plus (nat3) (ZERO)) (nat4))) (tree2) = SUCC (plus (nat3) (if lq (tf1 (nat4) (tree2)) (tf1 (nat4) (tree3)) then tf1 (plus (ZERO) (nat4)) (tree3) else tf1 (plus (ZERO) (nat4)) (tree2)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case lq (tf1 (nat4) (tree2)) (tf1 (nat4) (tree3))(rank:9.)
=================================================
Progress: 749


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree), tf1 (plus (nat2) (nat1)) (tree1) = plus (nat2) (tf1 (nat1) (tree1))
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat) (tree1:tree), tf1 (plus (nat3) (nat1)) (tree1) = plus (nat3) (tf1 (nat1) (tree1))
Inductive1 : nat2 = SUCC (nat3)
tree1 : tree
nat4 : nat
tree2 : tree
tree3 : tree
IH2 : forall (nat1:nat), tf1 (SUCC (plus (nat3) (nat1))) (tree2) = SUCC (plus (nat3) (tf1 (nat1) (tree2)))
IH3 : forall (nat1:nat), tf1 (SUCC (plus (nat3) (nat1))) (tree3) = SUCC (plus (nat3) (tf1 (nat1) (tree3)))
Inductive2 : tree1 = Node (nat4) (tree2) (tree3)
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
if lq (tf1 (SUCC (plus (plus (nat3) (ZERO)) (nat4))) (tree2)) (tf1 (SUCC (plus (plus (nat3) (ZERO)) (nat4))) (tree3)) then tf1 (SUCC (plus (plus (nat3) (ZERO)) (nat4))) (tree3) else tf1 (SUCC (plus (plus (nat3) (ZERO)) (nat4))) (tree2) = SUCC (plus (nat3) (if lq (tf1 (nat4) (tree2)) (tf1 (nat4) (tree3)) then tf1 (plus (ZERO) (nat4)) (tree3) else tf1 (plus (ZERO) (nat4)) (tree2)))

1 goal(s) more...

2 conjecture(s) more...
>>> case lq (tf1 (nat4) (tree2)) (tf1 (nat4) (tree3))(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree), tf1 (plus (nat2) (nat1)) (tree1) = plus (nat2) (tf1 (nat1) (tree1))
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat) (tree1:tree), tf1 (plus (nat3) (nat1)) (tree1) = plus (nat3) (tf1 (nat1) (tree1))
Inductive1 : nat2 = SUCC (nat3)
tree1 : tree
nat4 : nat
tree2 : tree
tree3 : tree
IH2 : forall (nat1:nat), tf1 (SUCC (plus (nat3) (nat1))) (tree2) = SUCC (plus (nat3) (tf1 (nat1) (tree2)))
IH3 : forall (nat1:nat), tf1 (SUCC (plus (nat3) (nat1))) (tree3) = SUCC (plus (nat3) (tf1 (nat1) (tree3)))
Inductive2 : tree1 = Node (nat4) (tree2) (tree3)
nat1 : nat
Base1 : nat1 = ZERO
Case1 : lq (tf1 (nat4) (tree2)) (tf1 (nat4) (tree3)) = true
---------------------------------------
if lq (tf1 (SUCC (plus (plus (nat3) (ZERO)) (nat4))) (tree2)) (tf1 (SUCC (plus (plus (nat3) (ZERO)) (nat4))) (tree3)) then tf1 (SUCC (plus (plus (nat3) (ZERO)) (nat4))) (tree3) else tf1 (SUCC (plus (plus (nat3) (ZERO)) (nat4))) (tree2) = SUCC (plus (nat3) (tf1 (nat4) (tree3)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
case lq (tf1 (SUCC (plus (plus (nat3) (ZERO)) (nat4))) (tree2)) (tf1 (SUCC (plus (plus (nat3) (ZERO)) (nat4))) (tree3))(rank:10.)
rewrite <- IH1 in goal at 0(rank:25.)
rewrite <- IH3 in goal at 0(rank:25.)
=================================================
Progress: 750


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree), tf1 (plus (nat2) (nat1)) (tree1) = plus (nat2) (tf1 (nat1) (tree1))
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat) (tree1:tree), tf1 (plus (nat3) (nat1)) (tree1) = plus (nat3) (tf1 (nat1) (tree1))
Inductive1 : nat2 = SUCC (nat3)
tree1 : tree
nat4 : nat
tree2 : tree
tree3 : tree
IH2 : forall (nat1:nat), tf1 (SUCC (plus (nat3) (nat1))) (tree2) = SUCC (plus (nat3) (tf1 (nat1) (tree2)))
IH3 : forall (nat1:nat), tf1 (SUCC (plus (nat3) (nat1))) (tree3) = SUCC (plus (nat3) (tf1 (nat1) (tree3)))
Inductive2 : tree1 = Node (nat4) (tree2) (tree3)
nat1 : nat
Base1 : nat1 = ZERO
Case1 : lq (tf1 (nat4) (tree2)) (tf1 (nat4) (tree3)) = true
---------------------------------------
if lq (tf1 (SUCC (plus (plus (nat3) (ZERO)) (nat4))) (tree2)) (tf1 (SUCC (plus (plus (nat3) (ZERO)) (nat4))) (tree3)) then tf1 (SUCC (plus (plus (nat3) (ZERO)) (nat4))) (tree3) else tf1 (SUCC (plus (plus (nat3) (ZERO)) (nat4))) (tree2) = SUCC (plus (nat3) (tf1 (nat4) (tree3)))

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (tf1 (SUCC (plus (plus (nat3) (ZERO)) (nat4))) (tree2)) (tf1 (SUCC (plus (plus (nat3) (ZERO)) (nat4))) (tree3))(rank : 10.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree), tf1 (plus (nat2) (nat1)) (tree1) = plus (nat2) (tf1 (nat1) (tree1))
nat2 : nat
nat3 : nat
IH1 : forall (nat1:nat) (tree1:tree), tf1 (plus (nat3) (nat1)) (tree1) = plus (nat3) (tf1 (nat1) (tree1))
Inductive1 : nat2 = SUCC (nat3)
tree1 : tree
nat4 : nat
tree2 : tree
tree3 : tree
IH2 : forall (nat1:nat), tf1 (SUCC (plus (nat3) (nat1))) (tree2) = SUCC (plus (nat3) (tf1 (nat1) (tree2)))
IH3 : forall (nat1:nat), tf1 (SUCC (plus (nat3) (nat1))) (tree3) = SUCC (plus (nat3) (tf1 (nat1) (tree3)))
Inductive2 : tree1 = Node (nat4) (tree2) (tree3)
nat1 : nat
Base1 : nat1 = ZERO
Case1 : lq (tf1 (nat4) (tree2)) (tf1 (nat4) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (plus (nat3) (ZERO)) (nat4))) (tree2)) (tf1 (SUCC (plus (plus (nat3) (ZERO)) (nat4))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (plus (nat3) (ZERO)) (nat4))) (tree3) = SUCC (plus (nat3) (tf1 (nat4) (tree3)))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:18.)
rewrite <- IH3 in goal at 0(rank:18.)
=================================================
Progress: 751


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (plus (nat3) (if lq (plus (nat2) (tf1 (ZERO) (tree2))) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else plus (nat2) (tf1 (ZERO) (tree2))))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH2 in goal at 1(rank : 15.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
plus (SUCC (plus (nat3) (nat2))) (tf1 (ZERO) (tree3)) = SUCC (plus (nat3) (if lq (plus (nat2) (tf1 (ZERO) (tree2))) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else plus (nat2) (tf1 (ZERO) (tree2))))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 752


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
plus (SUCC (plus (nat3) (nat2))) (tf1 (ZERO) (tree3)) = SUCC (plus (nat3) (if lq (plus (nat2) (tf1 (ZERO) (tree2))) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else plus (nat2) (tf1 (ZERO) (tree2))))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3))) = SUCC (plus (nat3) (if lq (plus (nat2) (tf1 (ZERO) (tree2))) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else plus (nat2) (tf1 (ZERO) (tree2))))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 11
rewrite IH2 in goal at 1(rank:15.)
rewrite <- IH1 in goal at 0(rank:15.)
rewrite IH1 in goal at 0(rank:23.)
rewrite IH1 in goal at 1(rank:23.)
rewrite IH1 in goal at 2(rank:23.)
rewrite IH2 in goal at 0(rank:23.)
rewrite IH2 in goal at 3(rank:23.)
rewrite <- IH1 in goal at 1(rank:15.)
rewrite <- IH1 in goal at 2(rank:15.)
rewrite IH2 in goal at 2(rank:23.)
rewrite <- IH2 in goal at 0(rank:23.)
=================================================
Progress: 753


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (plus (nat3) (if lq (plus (nat2) (tf1 (ZERO) (tree2))) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else plus (nat2) (tf1 (ZERO) (tree2))))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 15.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
case lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3))(rank:8.)
rewrite <- IH3 in goal at 0(rank:15.)
rewrite IH2 in goal at 3(rank:23.)
rewrite IH2 in goal at 0(rank:23.)
rewrite IH2 in goal at 2(rank:23.)
=================================================
Progress: 754


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3))(rank : 8.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
Case3 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (plus (nat3) (tf1 (nat2) (tree3)))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
rewrite <- IH3 in goal at 0(rank:16.)
rewrite IH2 in goal at 2(rank:24.)
rewrite IH2 in goal at 0(rank:24.)
rewrite IH2 in goal at 1(rank:24.)
=================================================
Progress: 755


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (plus (nat3) (if lq (plus (nat2) (tf1 (ZERO) (tree2))) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else plus (nat2) (tf1 (ZERO) (tree2))))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 1(rank : 15.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else plus (nat2) (tf1 (ZERO) (tree2))))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
case lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3))(rank:8.)
rewrite IH1 in goal at 2(rank:23.)
rewrite IH2 in goal at 0(rank:23.)
rewrite IH2 in goal at 2(rank:23.)
rewrite IH2 in goal at 3(rank:23.)
=================================================
Progress: 756


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else plus (nat2) (tf1 (ZERO) (tree2))))

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3))(rank : 8.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
Case3 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (plus (nat3) (tf1 (nat2) (tree3)))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
rewrite <- IH3 in goal at 0(rank:16.)
rewrite IH2 in goal at 2(rank:24.)
rewrite IH2 in goal at 0(rank:24.)
rewrite IH2 in goal at 1(rank:24.)
=================================================
Progress: 757


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (plus (nat3) (if lq (plus (nat2) (tf1 (ZERO) (tree2))) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else plus (nat2) (tf1 (ZERO) (tree2))))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 2(rank : 15.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (plus (nat3) (if lq (plus (nat2) (tf1 (ZERO) (tree2))) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
case lq (plus (nat2) (tf1 (ZERO) (tree2))) (tf1 (nat2) (tree3))(rank:8.)
rewrite IH1 in goal at 1(rank:23.)
rewrite IH2 in goal at 0(rank:23.)
rewrite IH2 in goal at 2(rank:23.)
rewrite IH2 in goal at 3(rank:23.)
=================================================
Progress: 758


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (plus (nat3) (if lq (plus (nat2) (tf1 (ZERO) (tree2))) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (plus (nat2) (tf1 (ZERO) (tree2))) (tf1 (nat2) (tree3))(rank : 8.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
Case3 : lq (plus (nat2) (tf1 (ZERO) (tree2))) (tf1 (nat2) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (plus (nat3) (tf1 (nat2) (tree3)))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite IH2 in goal at 0(rank:24.)
rewrite IH2 in goal at 1(rank:24.)
rewrite IH2 in goal at 2(rank:24.)
=================================================
Progress: 759


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
Case2 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3))) = SUCC (plus (nat3) (tf1 (nat2) (tree3)))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH2 in goal at 2(rank : 15.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
Case2 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3))) = SUCC (plus (nat3) (plus (nat2) (tf1 (ZERO) (tree3))))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite IH2 in goal at 0(rank:23.)
rewrite IH2 in goal at 2(rank:23.)
rewrite <- IH2 in goal at 1(rank:23.)
=================================================
Progress: 760


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
Case2 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3))) = SUCC (plus (nat3) (tf1 (nat2) (tree3)))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 15.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
Case2 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
---------------------------------------
SUCC (tf1 (plus (nat3) (nat2)) (tree3)) = SUCC (plus (nat3) (tf1 (nat2) (tree3)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- IH3 in goal at 0(rank:7.)
=================================================
Progress: 761


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
Case2 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
---------------------------------------
SUCC (tf1 (plus (nat3) (nat2)) (tree3)) = SUCC (plus (nat3) (tf1 (nat2) (tree3)))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH3 in goal at 0(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
Case2 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
---------------------------------------
SUCC (tf1 (plus (nat3) (nat2)) (tree3)) = SUCC (if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
case lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3))(rank:8.)
rewrite IH1 in goal at 2(rank:23.)
rewrite IH1 in goal at 0(rank:23.)
rewrite IH1 in goal at 1(rank:23.)
=================================================
Progress: 762


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
Case2 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
---------------------------------------
SUCC (tf1 (plus (nat3) (nat2)) (tree3)) = SUCC (if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2))

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3))(rank : 8.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
Case2 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
Case3 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
---------------------------------------
SUCC (tf1 (plus (nat3) (nat2)) (tree3)) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7.)
=================================================
Progress: 763


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
Case2 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
Case3 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
---------------------------------------
SUCC (tf1 (plus (nat3) (nat2)) (tree3)) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
Case2 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
Case3 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = false
---------------------------------------
SUCC (tf1 (plus (nat3) (nat2)) (tree3)) = SUCC (tf1 (plus (nat3) (nat2)) (tree2))

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 3
rewrite IH1 in goal at 0(rank:23.)
rewrite IH2 in goal at 0(rank:23.)
rewrite IH3 in goal at 0(rank:23.)
=================================================
Progress: 764


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
Case2 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3))) = SUCC (plus (nat3) (tf1 (nat2) (tree3)))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH2 in goal at 2(rank : 15.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
Case2 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3))) = SUCC (plus (nat3) (plus (nat2) (tf1 (ZERO) (tree3))))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite IH2 in goal at 0(rank:23.)
rewrite IH2 in goal at 2(rank:23.)
rewrite <- IH2 in goal at 1(rank:23.)
=================================================
Progress: 765


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
Case2 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3))) = SUCC (plus (nat3) (tf1 (nat2) (tree3)))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 15.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
Case2 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
---------------------------------------
SUCC (tf1 (plus (nat3) (nat2)) (tree3)) = SUCC (plus (nat3) (tf1 (nat2) (tree3)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- IH3 in goal at 0(rank:7.)
=================================================
Progress: 766


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
Case2 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
---------------------------------------
SUCC (tf1 (plus (nat3) (nat2)) (tree3)) = SUCC (plus (nat3) (tf1 (nat2) (tree3)))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH3 in goal at 0(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
Case2 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
---------------------------------------
SUCC (tf1 (plus (nat3) (nat2)) (tree3)) = SUCC (if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
case lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3))(rank:8.)
rewrite IH1 in goal at 2(rank:23.)
rewrite IH1 in goal at 0(rank:23.)
rewrite IH1 in goal at 1(rank:23.)
=================================================
Progress: 767


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
Case2 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
---------------------------------------
SUCC (tf1 (plus (nat3) (nat2)) (tree3)) = SUCC (if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2))

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3))(rank : 8.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
Case2 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
Case3 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
---------------------------------------
SUCC (tf1 (plus (nat3) (nat2)) (tree3)) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7.)
=================================================
Progress: 768


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
Case2 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
Case3 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
---------------------------------------
SUCC (tf1 (plus (nat3) (nat2)) (tree3)) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
Case2 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
Case3 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = false
---------------------------------------
SUCC (tf1 (plus (nat3) (nat2)) (tree3)) = SUCC (tf1 (plus (nat3) (nat2)) (tree2))

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 3
rewrite IH1 in goal at 0(rank:23.)
rewrite IH2 in goal at 0(rank:23.)
rewrite IH3 in goal at 0(rank:23.)
=================================================
Progress: 769


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
---------------------------------------
if lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) then tf1 (plus (SUCC (nat3)) (nat2)) (tree3) else tf1 (plus (SUCC (nat3)) (nat2)) (tree2) = SUCC (plus (nat3) (tf1 (nat2) (tree3)))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH2 in goal at 3(rank : 15.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
---------------------------------------
if lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) then tf1 (plus (SUCC (nat3)) (nat2)) (tree3) else tf1 (plus (SUCC (nat3)) (nat2)) (tree2) = SUCC (plus (nat3) (plus (nat2) (tf1 (ZERO) (tree3))))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 8
case lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))(rank:8.)
rewrite IH1 in goal at 0(rank:23.)
rewrite IH1 in goal at 2(rank:23.)
rewrite IH2 in goal at 0(rank:23.)
rewrite IH2 in goal at 1(rank:23.)
rewrite IH2 in goal at 2(rank:23.)
rewrite IH1 in goal at 1(rank:23.)
rewrite IH2 in goal at 3(rank:15.)
=================================================
Progress: 770


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
---------------------------------------
if lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) then tf1 (plus (SUCC (nat3)) (nat2)) (tree3) else tf1 (plus (SUCC (nat3)) (nat2)) (tree2) = SUCC (plus (nat3) (plus (nat2) (tf1 (ZERO) (tree3))))

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))(rank : 8.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
Case3 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (plus (nat3) (plus (nat2) (tf1 (ZERO) (tree3))))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
rewrite IH2 in goal at 1(rank:16.)
rewrite IH2 in goal at 0(rank:24.)
rewrite <- IH2 in goal at 0(rank:16.)
rewrite IH2 in goal at 2(rank:24.)
=================================================
Progress: 771


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH2 in goal at 1(rank : 15.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
plus (SUCC (plus (nat3) (nat2))) (tf1 (ZERO) (tree3)) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 772


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
plus (SUCC (plus (nat3) (nat2))) (tf1 (ZERO) (tree3)) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3))) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
rewrite IH2 in goal at 1(rank:15.)
rewrite IH1 in goal at 0(rank:23.)
rewrite IH1 in goal at 2(rank:23.)
rewrite IH2 in goal at 0(rank:23.)
rewrite IH2 in goal at 3(rank:23.)
rewrite <- IH2 in goal at 0(rank:23.)
rewrite IH1 in goal at 1(rank:23.)
rewrite <- IH3 in goal at 0(rank:15.)
rewrite IH2 in goal at 2(rank:23.)
=================================================
Progress: 773


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH3 in goal at 0(rank : 15.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite IH2 in goal at 0(rank:23.)
rewrite IH2 in goal at 2(rank:23.)
=================================================
Progress: 774


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
Case3 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree2) = SUCC (plus (nat3) (tf1 (nat2) (tree3)))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH3 in goal at 0(rank : 15.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
Case3 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree2) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:23.)
rewrite IH2 in goal at 0(rank:23.)
=================================================
Progress: 775


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
---------------------------------------
if lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) then tf1 (plus (SUCC (nat3)) (nat2)) (tree3) else tf1 (plus (SUCC (nat3)) (nat2)) (tree2) = SUCC (plus (nat3) (plus (nat2) (tf1 (ZERO) (tree3))))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH2 in goal at 3(rank : 15.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
---------------------------------------
if lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) then tf1 (plus (SUCC (nat3)) (nat2)) (tree3) else tf1 (plus (SUCC (nat3)) (nat2)) (tree2) = SUCC (plus (nat3) (plus (nat2) (plus (ZERO) (tf1 (ZERO) (tree3)))))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
rewrite IH1 in goal at 0(rank:23.)
rewrite IH1 in goal at 2(rank:23.)
rewrite IH2 in goal at 1(rank:23.)
rewrite IH2 in goal at 2(rank:23.)
rewrite IH1 in goal at 1(rank:23.)
=================================================
Progress: 776


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3))) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH2 in goal at 1(rank : 15.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (tf1 (ZERO) (tree3)))) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 7
rewrite <- IH3 in goal at 0(rank:15.)
rewrite IH1 in goal at 0(rank:23.)
rewrite IH1 in goal at 1(rank:23.)
rewrite IH1 in goal at 2(rank:23.)
rewrite IH2 in goal at 0(rank:23.)
rewrite IH2 in goal at 2(rank:23.)
rewrite IH2 in goal at 3(rank:23.)
=================================================
Progress: 777


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3))) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH3 in goal at 0(rank : 15.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3))) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite IH2 in goal at 0(rank:15.)
rewrite IH2 in goal at 2(rank:15.)
rewrite <- IH2 in goal at 0(rank:15.)
=================================================
Progress: 778


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH2 in goal at 1(rank : 15.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
plus (SUCC (plus (nat3) (nat2))) (tf1 (ZERO) (tree3)) = SUCC (if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 779


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
plus (SUCC (plus (nat3) (nat2))) (tf1 (ZERO) (tree3)) = SUCC (if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3))) = SUCC (if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 8
rewrite IH2 in goal at 1(rank:15.)
rewrite IH1 in goal at 0(rank:23.)
rewrite IH1 in goal at 2(rank:23.)
rewrite IH2 in goal at 0(rank:23.)
rewrite IH2 in goal at 3(rank:23.)
rewrite <- IH2 in goal at 0(rank:23.)
rewrite IH1 in goal at 1(rank:23.)
rewrite IH2 in goal at 2(rank:23.)
=================================================
Progress: 780


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
Case2 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
---------------------------------------
if lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) then tf1 (plus (SUCC (nat3)) (nat2)) (tree3) else tf1 (plus (SUCC (nat3)) (nat2)) (tree2) = SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3)))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH2 in goal at 3(rank : 15.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
Case2 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
---------------------------------------
if lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) then tf1 (plus (SUCC (nat3)) (nat2)) (tree3) else tf1 (plus (SUCC (nat3)) (nat2)) (tree2) = SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (tf1 (ZERO) (tree3))))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
rewrite IH1 in goal at 0(rank:23.)
rewrite IH1 in goal at 2(rank:23.)
rewrite IH2 in goal at 1(rank:23.)
rewrite IH2 in goal at 2(rank:23.)
rewrite IH1 in goal at 1(rank:23.)
=================================================
Progress: 781


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3))) = SUCC (if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH2 in goal at 1(rank : 15.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (tf1 (ZERO) (tree3)))) = SUCC (if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 7
rewrite IH3 in goal at 0(rank:15.)
rewrite IH1 in goal at 0(rank:23.)
rewrite IH1 in goal at 1(rank:23.)
rewrite IH1 in goal at 2(rank:23.)
rewrite IH2 in goal at 0(rank:23.)
rewrite IH2 in goal at 2(rank:23.)
rewrite IH2 in goal at 3(rank:23.)
=================================================
Progress: 782


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3))) = SUCC (if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 15.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3))) = SUCC (plus (nat3) (tf1 (nat2) (tree3)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite IH2 in goal at 2(rank:15.)
rewrite IH2 in goal at 0(rank:23.)
rewrite <- IH2 in goal at 0(rank:15.)
=================================================
Progress: 783


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
Case3 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree2) = SUCC (plus (nat3) (tf1 (nat2) (tree3)))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH3 in goal at 0(rank : 15.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
Case3 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree2) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:23.)
rewrite IH2 in goal at 0(rank:23.)
=================================================
Progress: 784


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
---------------------------------------
if lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) then tf1 (plus (SUCC (nat3)) (nat2)) (tree3) else tf1 (plus (SUCC (nat3)) (nat2)) (tree2) = SUCC (plus (nat3) (plus (nat2) (tf1 (ZERO) (tree3))))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH2 in goal at 3(rank : 15.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
---------------------------------------
if lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) then tf1 (plus (SUCC (nat3)) (nat2)) (tree3) else tf1 (plus (SUCC (nat3)) (nat2)) (tree2) = SUCC (plus (nat3) (plus (nat2) (plus (ZERO) (tf1 (ZERO) (tree3)))))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
rewrite IH1 in goal at 0(rank:23.)
rewrite IH1 in goal at 2(rank:23.)
rewrite IH2 in goal at 1(rank:23.)
rewrite IH2 in goal at 2(rank:23.)
rewrite IH1 in goal at 1(rank:23.)
=================================================
Progress: 785


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3))) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH2 in goal at 1(rank : 15.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (tf1 (ZERO) (tree3)))) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 7
rewrite <- IH3 in goal at 0(rank:15.)
rewrite IH1 in goal at 0(rank:23.)
rewrite IH1 in goal at 1(rank:23.)
rewrite IH1 in goal at 2(rank:23.)
rewrite IH2 in goal at 0(rank:23.)
rewrite IH2 in goal at 2(rank:23.)
rewrite IH2 in goal at 3(rank:23.)
=================================================
Progress: 786


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3))) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH3 in goal at 0(rank : 15.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3))) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite IH2 in goal at 0(rank:15.)
rewrite IH2 in goal at 2(rank:15.)
rewrite <- IH2 in goal at 0(rank:15.)
=================================================
Progress: 787


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3))) = SUCC (plus (nat3) (if lq (plus (nat2) (tf1 (ZERO) (tree2))) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else plus (nat2) (tf1 (ZERO) (tree2))))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH2 in goal at 1(rank : 15.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (tf1 (ZERO) (tree3)))) = SUCC (plus (nat3) (if lq (plus (nat2) (tf1 (ZERO) (tree2))) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else plus (nat2) (tf1 (ZERO) (tree2))))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
rewrite <- IH1 in goal at 0(rank:15.)
rewrite IH1 in goal at 0(rank:23.)
rewrite IH1 in goal at 2(rank:23.)
rewrite IH2 in goal at 0(rank:23.)
rewrite IH2 in goal at 2(rank:23.)
rewrite IH2 in goal at 3(rank:23.)
rewrite IH1 in goal at 1(rank:23.)
rewrite <- IH1 in goal at 1(rank:15.)
rewrite <- IH1 in goal at 2(rank:15.)
=================================================
Progress: 788


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3))) = SUCC (plus (nat3) (if lq (plus (nat2) (tf1 (ZERO) (tree2))) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else plus (nat2) (tf1 (ZERO) (tree2))))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 15.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3))) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 6
case lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3))(rank:8.)
rewrite IH2 in goal at 0(rank:23.)
rewrite IH2 in goal at 2(rank:23.)
rewrite IH2 in goal at 3(rank:23.)
rewrite <- IH2 in goal at 0(rank:23.)
rewrite <- IH3 in goal at 0(rank:15.)
=================================================
Progress: 789


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3))) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3))(rank : 8.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
Case3 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3))) = SUCC (plus (nat3) (tf1 (nat2) (tree3)))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
rewrite IH2 in goal at 2(rank:16.)
rewrite <- IH2 in goal at 0(rank:16.)
rewrite <- IH3 in goal at 0(rank:16.)
rewrite IH2 in goal at 0(rank:24.)
rewrite IH2 in goal at 1(rank:24.)
=================================================
Progress: 790


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3))) = SUCC (plus (nat3) (if lq (plus (nat2) (tf1 (ZERO) (tree2))) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else plus (nat2) (tf1 (ZERO) (tree2))))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 1(rank : 15.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3))) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else plus (nat2) (tf1 (ZERO) (tree2))))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 6
case lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3))(rank:8.)
rewrite IH1 in goal at 2(rank:23.)
rewrite IH2 in goal at 0(rank:23.)
rewrite IH2 in goal at 2(rank:23.)
rewrite IH2 in goal at 3(rank:23.)
rewrite <- IH2 in goal at 0(rank:23.)
=================================================
Progress: 791


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3))) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else plus (nat2) (tf1 (ZERO) (tree2))))

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3))(rank : 8.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
Case3 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3))) = SUCC (plus (nat3) (tf1 (nat2) (tree3)))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
rewrite IH2 in goal at 2(rank:16.)
rewrite <- IH2 in goal at 0(rank:16.)
rewrite <- IH3 in goal at 0(rank:16.)
rewrite IH2 in goal at 0(rank:24.)
rewrite IH2 in goal at 1(rank:24.)
=================================================
Progress: 792


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3))) = SUCC (plus (nat3) (if lq (plus (nat2) (tf1 (ZERO) (tree2))) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else plus (nat2) (tf1 (ZERO) (tree2))))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 2(rank : 15.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3))) = SUCC (plus (nat3) (if lq (plus (nat2) (tf1 (ZERO) (tree2))) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 6
case lq (plus (nat2) (tf1 (ZERO) (tree2))) (tf1 (nat2) (tree3))(rank:8.)
rewrite IH1 in goal at 1(rank:23.)
rewrite IH2 in goal at 0(rank:23.)
rewrite IH2 in goal at 2(rank:23.)
rewrite IH2 in goal at 3(rank:23.)
rewrite <- IH2 in goal at 0(rank:23.)
=================================================
Progress: 793


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3))) = SUCC (plus (nat3) (if lq (plus (nat2) (tf1 (ZERO) (tree2))) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

2 goal(s) more...

1 conjecture(s) more...
>>> case lq (plus (nat2) (tf1 (ZERO) (tree2))) (tf1 (nat2) (tree3))(rank : 8.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
Case3 : lq (plus (nat2) (tf1 (ZERO) (tree2))) (tf1 (nat2) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3))) = SUCC (plus (nat3) (tf1 (nat2) (tree3)))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
rewrite IH2 in goal at 2(rank:16.)
rewrite <- IH2 in goal at 0(rank:16.)
rewrite IH2 in goal at 0(rank:24.)
rewrite IH2 in goal at 1(rank:24.)
=================================================
Progress: 794


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH3 in goal at 0(rank : 15.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2)))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree3) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite IH2 in goal at 0(rank:23.)
rewrite IH2 in goal at 1(rank:23.)
rewrite IH2 in goal at 2(rank:23.)
=================================================
Progress: 795


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
---------------------------------------
if lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) then tf1 (plus (SUCC (nat3)) (nat2)) (tree3) else tf1 (plus (SUCC (nat3)) (nat2)) (tree2) = SUCC (plus (nat3) (plus (nat2) (tf1 (ZERO) (tree3))))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH2 in goal at 3(rank : 15.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
---------------------------------------
if lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) then tf1 (plus (SUCC (nat3)) (nat2)) (tree3) else tf1 (plus (SUCC (nat3)) (nat2)) (tree2) = SUCC (plus (nat3) (plus (nat2) (plus (ZERO) (tf1 (ZERO) (tree3)))))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
rewrite IH1 in goal at 0(rank:23.)
rewrite IH1 in goal at 2(rank:23.)
rewrite IH2 in goal at 1(rank:23.)
rewrite IH2 in goal at 2(rank:23.)
rewrite IH1 in goal at 1(rank:23.)
=================================================
Progress: 796


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3))) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH2 in goal at 1(rank : 15.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (tf1 (ZERO) (tree3)))) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 7
rewrite <- IH3 in goal at 0(rank:15.)
rewrite IH1 in goal at 0(rank:23.)
rewrite IH1 in goal at 1(rank:23.)
rewrite IH1 in goal at 2(rank:23.)
rewrite IH2 in goal at 0(rank:23.)
rewrite IH2 in goal at 2(rank:23.)
rewrite IH2 in goal at 3(rank:23.)
=================================================
Progress: 797


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3))) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH3 in goal at 0(rank : 15.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3))) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite IH2 in goal at 0(rank:15.)
rewrite IH2 in goal at 2(rank:15.)
rewrite <- IH2 in goal at 0(rank:15.)
=================================================
Progress: 798


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (tf1 (ZERO) (tree3)))) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH3 in goal at 0(rank : 15.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (tf1 (ZERO) (tree3)))) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite IH2 in goal at 0(rank:7.)
=================================================
Progress: 799


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (tf1 (ZERO) (tree3)))) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (tree3))))) = SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH3 in goal at 0
case lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3))
rewrite IH3 in goal at 0
case lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))
rewrite IH2 in goal at 1
simpl in goal
rewrite IH2 in goal at 1
rewrite <- IH3 in goal at 0
rewrite IH2 in goal at 0
Prop: SUCC (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO)))) = SUCC (plus (ZERO) (ZERO))
Prop: SUCC (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO)))) = SUCC (plus (ZERO) (ZERO))
Prop: SUCC (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO)))) = SUCC (plus (ZERO) (ZERO))
previous tactics
simpl in goal
rewrite <- IH3 in goal at 0
case lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3))
rewrite IH3 in goal at 0
case lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))
rewrite IH2 in goal at 1
simpl in goal
rewrite IH2 in goal at 1
rewrite <- IH3 in goal at 0
Prop: SUCC (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil))))) = SUCC (tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil)))
Prop: SUCC (plus (SUCC (ZERO)) (plus (ZERO) (tf1 (ZERO) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Tnil)))))) = SUCC (tf1 (SUCC (ZERO)) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Tnil))))
Prop: SUCC (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (Tnil)))) = SUCC (tf1 (ZERO) (Tnil))
previous tactics
simpl in goal
rewrite <- IH3 in goal at 0
case lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3))
rewrite IH3 in goal at 0
case lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))
rewrite IH2 in goal at 1
simpl in goal
rewrite IH2 in goal at 1
validate generalize_common_subterm_goal
Prop: plus (plus (ZERO) (SUCC (ZERO))) (plus (ZERO) (tf1 (ZERO) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Tnil))) (Tnil)) (Node (SUCC (ZERO)) (Node (ZERO) (Tnil) (Node (SUCC (ZERO)) (Tnil) (Node (ZERO) (Tnil) (Tnil)))) (Tnil))))) = plus (ZERO) (if lq (tf1 (SUCC (ZERO)) (Node (ZERO) (Tnil) (Tnil))) (tf1 (SUCC (ZERO)) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Tnil))) (Tnil)) (Node (SUCC (ZERO)) (Node (ZERO) (Tnil) (Node (SUCC (ZERO)) (Tnil) (Node (ZERO) (Tnil) (Tnil)))) (Tnil)))) then tf1 (SUCC (ZERO)) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Tnil))) (Tnil)) (Node (SUCC (ZERO)) (Node (ZERO) (Tnil) (Node (SUCC (ZERO)) (Tnil) (Node (ZERO) (Tnil) (Tnil)))) (Tnil))) else tf1 (SUCC (ZERO)) (Node (ZERO) (Tnil) (Tnil)))
Prop: plus (plus (SUCC (ZERO)) (ZERO)) (plus (ZERO) (tf1 (ZERO) (Tnil))) = plus (SUCC (ZERO)) (if lq (tf1 (ZERO) (Tnil)) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (Tnil))
Prop: plus (plus (SUCC (ZERO)) (ZERO)) (plus (ZERO) (tf1 (ZERO) (Tnil))) = plus (SUCC (ZERO)) (if lq (tf1 (ZERO) (Tnil)) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (Tnil))
previous tactics
simpl in goal
rewrite <- IH3 in goal at 0
case lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3))
rewrite IH3 in goal at 0
case lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))
rewrite IH2 in goal at 1
simpl in goal
validate generalize_common_subterm_goal
Prop: plus (plus (SUCC (ZERO)) (ZERO)) (tf1 (ZERO) (Tnil)) = plus (SUCC (ZERO)) (if lq (tf1 (ZERO) (Node (ZERO) (Node (ZERO) (Tnil) (Node (SUCC (ZERO)) (Node (ZERO) (Tnil) (Tnil)) (Node (ZERO) (Tnil) (Tnil)))) (Tnil))) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (Node (ZERO) (Node (ZERO) (Tnil) (Node (SUCC (ZERO)) (Node (ZERO) (Tnil) (Tnil)) (Node (ZERO) (Tnil) (Tnil)))) (Tnil)))
Prop: plus (plus (SUCC (ZERO)) (SUCC (SUCC (SUCC (ZERO))))) (tf1 (ZERO) (Tnil)) = plus (SUCC (ZERO)) (if lq (tf1 (SUCC (SUCC (SUCC (ZERO)))) (Tnil)) (tf1 (SUCC (SUCC (SUCC (ZERO)))) (Tnil)) then tf1 (SUCC (SUCC (SUCC (ZERO)))) (Tnil) else tf1 (SUCC (SUCC (SUCC (ZERO)))) (Tnil))
Prop: plus (plus (SUCC (SUCC (SUCC (ZERO)))) (SUCC (ZERO))) (tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil))) = plus (SUCC (SUCC (SUCC (ZERO)))) (if lq (tf1 (SUCC (ZERO)) (Node (SUCC (ZERO)) (Tnil) (Tnil))) (tf1 (SUCC (ZERO)) (Node (ZERO) (Tnil) (Tnil))) then tf1 (SUCC (ZERO)) (Node (ZERO) (Tnil) (Tnil)) else tf1 (SUCC (ZERO)) (Node (SUCC (ZERO)) (Tnil) (Tnil)))
Lemma List
forall (nat1:nat) (tree1:tree), SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (tf1 (nat1) (tree1))
End of Lemma List


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (tf1 (ZERO) (tree3)))) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

2 goal(s) more...

1 conjecture(s) more...
Lemma List
forall (nat1:nat) (nat2:nat), SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (nat2)))) = SUCC (plus (nat1) (nat2))
End of Lemma List


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (tree3))))) = SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3)))

2 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 800


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (tf1 (ZERO) (tree3)))) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

2 goal(s) more...

1 conjecture(s) more...
>>> assert forall (nat1:nat) (tree1:tree), SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (tf1 (nat1) (tree1))(rank : 0.)


1st goal of : forall (nat1:nat) (tree1:tree), SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (tf1 (nat1) (tree1))

---------------------------------------
forall (nat1:nat) (tree1:tree), SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (tf1 (nat1) (tree1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 801


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (tree3))))) = SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3)))

2 goal(s) more...

1 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat), SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (nat2)))) = SUCC (plus (nat1) (nat2))(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat), SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (nat2)))) = SUCC (plus (nat1) (nat2))

---------------------------------------
forall (nat1:nat) (nat2:nat), SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (nat2)))) = SUCC (plus (nat1) (nat2))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7.)
=================================================
Progress: 802


1st goal of : forall (nat1:nat) (tree1:tree), SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (tf1 (nat1) (tree1))

---------------------------------------
forall (nat1:nat) (tree1:tree), SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (tf1 (nat1) (tree1))

0 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (nat1:nat) (tree1:tree), SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (tf1 (nat1) (tree1))

---------------------------------------
forall (nat1:nat) (tree1:tree), SUCC (plus (nat1) (tf1 (ZERO) (tree1))) = SUCC (tf1 (nat1) (tree1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
induction nat1(rank:16.)
induction tree1(rank:16.)
=================================================
Progress: 803


1st goal of : forall (nat1:nat) (nat2:nat), SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (nat2)))) = SUCC (plus (nat1) (nat2))

---------------------------------------
forall (nat1:nat) (nat2:nat), SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (nat2)))) = SUCC (plus (nat1) (nat2))

0 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (tree3))))) = SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3)))

2 goal(s) more...

1 conjecture(s) more...
original goal
forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
lemma
forall (nat1:nat) (nat2:nat), SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (nat2)))) = SUCC (plus (nat1) (nat2))
tactics
assert forall (nat1:nat) (nat2:nat), SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (nat2)))) = SUCC (plus (nat1) (nat2))
reflexivity
Deduplication: 0
Tactic List : 1
reflexivity(rank:6.)
=================================================
Progress: 804


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (tree3))))) = SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3)))

2 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree2) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 36
Tactic List : 12
case lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3))(rank:7.)
rewrite IH1 in goal at 1(rank:14.)
rewrite <- IH3 in goal at 0(rank:14.)
rewrite IH1 in goal at 2(rank:22.)
rewrite IH1 in goal at 3(rank:22.)
rewrite IH2 in goal at 0(rank:22.)
rewrite IH2 in goal at 1(rank:22.)
rewrite IH2 in goal at 2(rank:22.)
rewrite <- lemma3 in goal at 1(rank:14.)
rewrite <- lemma3 in goal at 0(rank:22.)
rewrite IH1 in goal at 0(rank:22.)
rewrite <- lemma3 in goal at 2(rank:22.)
=================================================
Progress: 805


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree2) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> case lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3))(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
Case3 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree2) = SUCC (plus (nat3) (tf1 (nat2) (tree3)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 6
rewrite <- IH3 in goal at 0(rank:15.)
rewrite IH1 in goal at 0(rank:23.)
rewrite IH2 in goal at 0(rank:23.)
rewrite <- lemma3 in goal at 1(rank:23.)
rewrite <- lemma3 in goal at 2(rank:23.)
rewrite <- lemma3 in goal at 0(rank:23.)
=================================================
Progress: 806


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree2) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 1(rank : 14.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
plus (SUCC (plus (nat3) (nat2))) (tf1 (ZERO) (tree2)) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:6.)
=================================================
Progress: 807


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
plus (SUCC (plus (nat3) (nat2))) (tf1 (ZERO) (tree2)) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2))) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 12
rewrite IH1 in goal at 1(rank:14.)
rewrite IH1 in goal at 2(rank:22.)
rewrite IH2 in goal at 0(rank:22.)
rewrite IH2 in goal at 1(rank:22.)
rewrite IH2 in goal at 2(rank:22.)
rewrite <- IH1 in goal at 0(rank:22.)
rewrite IH1 in goal at 3(rank:22.)
rewrite <- IH3 in goal at 0(rank:14.)
rewrite <- lemma3 in goal at 1(rank:14.)
rewrite <- lemma3 in goal at 2(rank:22.)
rewrite IH1 in goal at 0(rank:22.)
rewrite <- lemma3 in goal at 0(rank:22.)
=================================================
Progress: 808


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree2) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH3 in goal at 0(rank : 14.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree2) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite IH2 in goal at 0(rank:22.)
rewrite <- lemma3 in goal at 0(rank:22.)
=================================================
Progress: 809


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree2) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- lemma3 in goal at 1(rank : 14.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
tf1 (SUCC (plus (nat3) (plus (ZERO) (plus (ZERO) (nat2))))) (tree2) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 8
rewrite <- lemma3 in goal at 1(rank:14.)
rewrite IH1 in goal at 0(rank:22.)
rewrite IH1 in goal at 3(rank:22.)
rewrite IH2 in goal at 0(rank:22.)
rewrite IH2 in goal at 1(rank:22.)
rewrite IH2 in goal at 2(rank:22.)
rewrite IH1 in goal at 2(rank:22.)
rewrite <- lemma3 in goal at 0(rank:22.)
=================================================
Progress: 810


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2))) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 1(rank : 14.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (tf1 (ZERO) (tree2)))) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
rewrite <- IH3 in goal at 0(rank:14.)
rewrite IH1 in goal at 0(rank:22.)
rewrite IH1 in goal at 3(rank:22.)
rewrite IH2 in goal at 0(rank:22.)
rewrite IH2 in goal at 1(rank:22.)
rewrite IH2 in goal at 2(rank:22.)
rewrite IH1 in goal at 2(rank:22.)
rewrite <- lemma3 in goal at 0(rank:22.)
rewrite <- lemma3 in goal at 2(rank:22.)
=================================================
Progress: 811


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2))) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH3 in goal at 0(rank : 14.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2))) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite IH2 in goal at 0(rank:14.)
rewrite <- IH1 in goal at 0(rank:14.)
rewrite <- lemma3 in goal at 0(rank:22.)
=================================================
Progress: 812


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2))) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- lemma3 in goal at 1(rank : 14.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (tree2))))) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
rewrite IH1 in goal at 1(rank:14.)
rewrite IH1 in goal at 2(rank:22.)
rewrite IH2 in goal at 0(rank:22.)
rewrite IH2 in goal at 1(rank:22.)
rewrite IH2 in goal at 2(rank:22.)
rewrite <- lemma3 in goal at 0(rank:22.)
rewrite IH1 in goal at 3(rank:22.)
rewrite IH1 in goal at 0(rank:22.)
rewrite <- lemma3 in goal at 1(rank:22.)
=================================================
Progress: 813


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
tf1 (SUCC (plus (nat3) (plus (ZERO) (plus (ZERO) (nat2))))) (tree2) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- lemma3 in goal at 1(rank : 14.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
tf1 (SUCC (plus (nat3) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat2))))))) (tree2) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 10
rewrite IH1 in goal at 1(rank:14.)
rewrite <- IH3 in goal at 0(rank:14.)
rewrite IH1 in goal at 2(rank:22.)
rewrite IH1 in goal at 3(rank:22.)
rewrite IH2 in goal at 0(rank:22.)
rewrite IH2 in goal at 1(rank:22.)
rewrite IH2 in goal at 2(rank:22.)
rewrite IH1 in goal at 0(rank:22.)
rewrite <- lemma3 in goal at 0(rank:22.)
rewrite <- lemma3 in goal at 1(rank:22.)
=================================================
Progress: 814


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (tf1 (ZERO) (tree2)))) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH3 in goal at 0(rank : 14.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (tf1 (ZERO) (tree2)))) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite IH2 in goal at 0(rank:6.)
=================================================
Progress: 815


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (tf1 (ZERO) (tree2)))) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (tf1 (ZERO) (tree2)))) = SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite IH2 in goal at 0(rank:14.)
rewrite <- lemma3 in goal at 0(rank:22.)
rewrite <- lemma3 in goal at 2(rank:22.)
=================================================
Progress: 816


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2))) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 14.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2))) = SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
rewrite IH2 in goal at 0(rank:22.)
rewrite <- lemma3 in goal at 0(rank:22.)
rewrite <- lemma3 in goal at 1(rank:22.)
rewrite <- lemma3 in goal at 2(rank:22.)
rewrite <- IH1 in goal at 0(rank:22.)
=================================================
Progress: 817


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2))) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 14.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
SUCC (tf1 (plus (nat3) (nat2)) (tree2)) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH3 in goal at 0
case lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3))
rewrite IH3 in goal at 0
case lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))
rewrite IH2 in goal at 1
simpl in goal
rewrite IH2 in goal at 1
rewrite <- IH3 in goal at 0
rewrite IH2 in goal at 0
assert forall (nat1:nat) (nat2:nat), SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (nat2)))) = SUCC (plus (nat1) (nat2))
reflexivity
reflexivity
rewrite IH1 in goal at 1
simpl in goal
rewrite <- IH3 in goal at 0
rewrite <- IH1 in goal at 0
Prop: SUCC (tf1 (SUCC (ZERO)) (Tnil)) = SUCC (tf1 (SUCC (ZERO)) (Tnil))
Prop: SUCC (tf1 (ZERO) (Tnil)) = SUCC (tf1 (ZERO) (Tnil))
Prop: SUCC (tf1 (ZERO) (Tnil)) = SUCC (tf1 (ZERO) (Tnil))
previous tactics
simpl in goal
rewrite <- IH3 in goal at 0
case lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3))
rewrite IH3 in goal at 0
case lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))
rewrite IH2 in goal at 1
simpl in goal
rewrite IH2 in goal at 1
rewrite <- IH3 in goal at 0
rewrite IH2 in goal at 0
assert forall (nat1:nat) (nat2:nat), SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (nat2)))) = SUCC (plus (nat1) (nat2))
reflexivity
reflexivity
rewrite IH1 in goal at 1
simpl in goal
rewrite <- IH3 in goal at 0
Prop: SUCC (plus (ZERO) (tf1 (ZERO) (Tnil))) = SUCC (tf1 (ZERO) (Tnil))
Prop: SUCC (plus (ZERO) (tf1 (ZERO) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Tnil))))) = SUCC (tf1 (ZERO) (Tnil))
Prop: SUCC (plus (ZERO) (tf1 (ZERO) (Tnil))) = SUCC (tf1 (ZERO) (Tnil))
previous tactics
simpl in goal
rewrite <- IH3 in goal at 0
case lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3))
rewrite IH3 in goal at 0
case lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))
rewrite IH2 in goal at 1
simpl in goal
rewrite IH2 in goal at 1
rewrite <- IH3 in goal at 0
rewrite IH2 in goal at 0
assert forall (nat1:nat) (nat2:nat), SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (nat2)))) = SUCC (plus (nat1) (nat2))
reflexivity
reflexivity
rewrite IH1 in goal at 1
simpl in goal
validate generalize_common_subterm_goal
Prop: plus (plus (ZERO) (ZERO)) (tf1 (ZERO) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Tnil)))) = plus (ZERO) (if lq (tf1 (ZERO) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Tnil)))) (tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil))) then tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil)) else tf1 (ZERO) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Tnil))))
Prop: plus (plus (ZERO) (ZERO)) (tf1 (ZERO) (Tnil)) = plus (ZERO) (if lq (tf1 (ZERO) (Tnil)) (tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil))) then tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil)) else tf1 (ZERO) (Tnil))
Prop: plus (plus (ZERO) (ZERO)) (tf1 (ZERO) (Tnil)) = plus (ZERO) (if lq (tf1 (ZERO) (Tnil)) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (Tnil))
Lemma List
forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (plus (nat1) (tf1 (ZERO) (tree1))) = SUCC (tf1 (nat1) (tree2))
End of Lemma List


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2))) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

1 goal(s) more...

1 conjecture(s) more...
Lemma List
forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (tf1 (nat1) (tree1)) = SUCC (tf1 (nat1) (tree2))
End of Lemma List


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
SUCC (tf1 (plus (nat3) (nat2)) (tree2)) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

1 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 818


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2))) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

1 goal(s) more...

1 conjecture(s) more...
>>> assert forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (plus (nat1) (tf1 (ZERO) (tree1))) = SUCC (tf1 (nat1) (tree2))(rank : 0.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (plus (nat1) (tf1 (ZERO) (tree1))) = SUCC (tf1 (nat1) (tree2))

---------------------------------------
forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (plus (nat1) (tf1 (ZERO) (tree1))) = SUCC (tf1 (nat1) (tree2))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
induction nat1(rank:16.)
induction tree1(rank:16.)
induction tree2(rank:16.)
rewrite <- lemma3 in goal at 0(rank:23.)
=================================================
Progress: 819


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
SUCC (tf1 (plus (nat3) (nat2)) (tree2)) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

1 goal(s) more...

1 conjecture(s) more...
>>> assert forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (tf1 (nat1) (tree1)) = SUCC (tf1 (nat1) (tree2))(rank : 0.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (tf1 (nat1) (tree1)) = SUCC (tf1 (nat1) (tree2))

---------------------------------------
forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (tf1 (nat1) (tree1)) = SUCC (tf1 (nat1) (tree2))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction tree1(rank:8.)
=================================================
Progress: 820


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (tf1 (nat1) (tree1)) = SUCC (tf1 (nat1) (tree2))

---------------------------------------
forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (tf1 (nat1) (tree1)) = SUCC (tf1 (nat1) (tree2))

0 goal(s) more...

2 conjecture(s) more...
>>> induction tree1(rank : 8.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (tf1 (nat1) (tree1)) = SUCC (tf1 (nat1) (tree2))
tree1 : tree
Base1 : tree1 = Tnil
---------------------------------------
forall (nat1:nat) (tree2:tree), SUCC (tf1 (nat1) (Tnil)) = SUCC (tf1 (nat1) (tree2))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 821


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (tf1 (nat1) (tree1)) = SUCC (tf1 (nat1) (tree2))
tree1 : tree
Base1 : tree1 = Tnil
---------------------------------------
forall (nat1:nat) (tree2:tree), SUCC (tf1 (nat1) (Tnil)) = SUCC (tf1 (nat1) (tree2))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (tf1 (nat1) (tree1)) = SUCC (tf1 (nat1) (tree2))
tree1 : tree
Base1 : tree1 = Tnil
---------------------------------------
forall (nat1:nat) (tree2:tree), SUCC (nat1) = SUCC (tf1 (nat1) (tree2))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction tree2(rank:9.)
=================================================
Progress: 822


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (tf1 (nat1) (tree1)) = SUCC (tf1 (nat1) (tree2))
tree1 : tree
Base1 : tree1 = Tnil
---------------------------------------
forall (nat1:nat) (tree2:tree), SUCC (nat1) = SUCC (tf1 (nat1) (tree2))

1 goal(s) more...

2 conjecture(s) more...
>>> induction tree2(rank : 9.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (tf1 (nat1) (tree1)) = SUCC (tf1 (nat1) (tree2))
tree1 : tree
Base1 : tree1 = Tnil
tree2 : tree
Base2 : tree2 = Tnil
---------------------------------------
forall (nat1:nat), SUCC (nat1) = SUCC (tf1 (nat1) (Tnil))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:8.)
=================================================
Progress: 823


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (tf1 (nat1) (tree1)) = SUCC (tf1 (nat1) (tree2))
tree1 : tree
Base1 : tree1 = Tnil
tree2 : tree
Base2 : tree2 = Tnil
---------------------------------------
forall (nat1:nat), SUCC (nat1) = SUCC (tf1 (nat1) (Tnil))

2 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 8.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (tf1 (nat1) (tree1)) = SUCC (tf1 (nat1) (tree2))
tree1 : tree
Base1 : tree1 = Tnil
tree2 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (nat1:nat), SUCC (nat1) = SUCC (tf1 (nat1) (tree3))
IH2 : forall (nat1:nat), SUCC (nat1) = SUCC (tf1 (nat1) (tree4))
Inductive1 : tree2 = Node (nat2) (tree3) (tree4)
---------------------------------------
forall (nat1:nat), SUCC (nat1) = SUCC (tf1 (nat1) (Node (nat2) (tree3) (tree4)))

1 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 824


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (tf1 (nat1) (tree1)) = SUCC (tf1 (nat1) (tree2))
tree1 : tree
Base1 : tree1 = Tnil
tree2 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (nat1:nat), SUCC (nat1) = SUCC (tf1 (nat1) (tree3))
IH2 : forall (nat1:nat), SUCC (nat1) = SUCC (tf1 (nat1) (tree4))
Inductive1 : tree2 = Node (nat2) (tree3) (tree4)
---------------------------------------
forall (nat1:nat), SUCC (nat1) = SUCC (tf1 (nat1) (Node (nat2) (tree3) (tree4)))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (tf1 (nat1) (tree1)) = SUCC (tf1 (nat1) (tree2))
tree1 : tree
Base1 : tree1 = Tnil
tree2 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (nat1:nat), SUCC (nat1) = SUCC (tf1 (nat1) (tree3))
IH2 : forall (nat1:nat), SUCC (nat1) = SUCC (tf1 (nat1) (tree4))
Inductive1 : tree2 = Node (nat2) (tree3) (tree4)
---------------------------------------
forall (nat1:nat), SUCC (nat1) = SUCC (if lq (tf1 (plus (nat1) (nat2)) (tree3)) (tf1 (plus (nat1) (nat2)) (tree4)) then tf1 (plus (nat1) (nat2)) (tree4) else tf1 (plus (nat1) (nat2)) (tree3))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction nat1(rank:9.)
=================================================
Progress: 825


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (tf1 (nat1) (tree1)) = SUCC (tf1 (nat1) (tree2))
tree1 : tree
Base1 : tree1 = Tnil
tree2 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (nat1:nat), SUCC (nat1) = SUCC (tf1 (nat1) (tree3))
IH2 : forall (nat1:nat), SUCC (nat1) = SUCC (tf1 (nat1) (tree4))
Inductive1 : tree2 = Node (nat2) (tree3) (tree4)
---------------------------------------
forall (nat1:nat), SUCC (nat1) = SUCC (if lq (tf1 (plus (nat1) (nat2)) (tree3)) (tf1 (plus (nat1) (nat2)) (tree4)) then tf1 (plus (nat1) (nat2)) (tree4) else tf1 (plus (nat1) (nat2)) (tree3))

1 goal(s) more...

2 conjecture(s) more...
>>> induction nat1(rank : 9.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (tf1 (nat1) (tree1)) = SUCC (tf1 (nat1) (tree2))
tree1 : tree
Base1 : tree1 = Tnil
tree2 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (nat1:nat), SUCC (nat1) = SUCC (tf1 (nat1) (tree3))
IH2 : forall (nat1:nat), SUCC (nat1) = SUCC (tf1 (nat1) (tree4))
Inductive1 : tree2 = Node (nat2) (tree3) (tree4)
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
SUCC (ZERO) = SUCC (if lq (tf1 (plus (ZERO) (nat2)) (tree3)) (tf1 (plus (ZERO) (nat2)) (tree4)) then tf1 (plus (ZERO) (nat2)) (tree4) else tf1 (plus (ZERO) (nat2)) (tree3))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 826


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (tf1 (nat1) (tree1)) = SUCC (tf1 (nat1) (tree2))
tree1 : tree
Base1 : tree1 = Tnil
tree2 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (nat1:nat), SUCC (nat1) = SUCC (tf1 (nat1) (tree3))
IH2 : forall (nat1:nat), SUCC (nat1) = SUCC (tf1 (nat1) (tree4))
Inductive1 : tree2 = Node (nat2) (tree3) (tree4)
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
SUCC (ZERO) = SUCC (if lq (tf1 (plus (ZERO) (nat2)) (tree3)) (tf1 (plus (ZERO) (nat2)) (tree4)) then tf1 (plus (ZERO) (nat2)) (tree4) else tf1 (plus (ZERO) (nat2)) (tree3))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (tf1 (nat1) (tree1)) = SUCC (tf1 (nat1) (tree2))
tree1 : tree
Base1 : tree1 = Tnil
tree2 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (nat1:nat), SUCC (nat1) = SUCC (tf1 (nat1) (tree3))
IH2 : forall (nat1:nat), SUCC (nat1) = SUCC (tf1 (nat1) (tree4))
Inductive1 : tree2 = Node (nat2) (tree3) (tree4)
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
SUCC (ZERO) = SUCC (if lq (tf1 (nat2) (tree3)) (tf1 (nat2) (tree4)) then tf1 (plus (ZERO) (nat2)) (tree4) else tf1 (plus (ZERO) (nat2)) (tree3))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 7
case lq (tf1 (nat2) (tree3)) (tf1 (nat2) (tree4))(rank:10.)
rewrite IH1 in goal at 1(rank:17.)
rewrite IH1 in goal at 0(rank:25.)
rewrite IH1 in goal at 2(rank:25.)
rewrite IH2 in goal at 0(rank:25.)
rewrite IH2 in goal at 1(rank:17.)
rewrite IH2 in goal at 2(rank:25.)
=================================================
Progress: 827


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (tf1 (nat1) (tree1)) = SUCC (tf1 (nat1) (tree2))
tree1 : tree
Base1 : tree1 = Tnil
tree2 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (nat1:nat), SUCC (nat1) = SUCC (tf1 (nat1) (tree3))
IH2 : forall (nat1:nat), SUCC (nat1) = SUCC (tf1 (nat1) (tree4))
Inductive1 : tree2 = Node (nat2) (tree3) (tree4)
nat1 : nat
Base2 : nat1 = ZERO
---------------------------------------
SUCC (ZERO) = SUCC (if lq (tf1 (nat2) (tree3)) (tf1 (nat2) (tree4)) then tf1 (plus (ZERO) (nat2)) (tree4) else tf1 (plus (ZERO) (nat2)) (tree3))

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (tf1 (nat2) (tree3)) (tf1 (nat2) (tree4))(rank : 10.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (tf1 (nat1) (tree1)) = SUCC (tf1 (nat1) (tree2))
tree1 : tree
Base1 : tree1 = Tnil
tree2 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : forall (nat1:nat), SUCC (nat1) = SUCC (tf1 (nat1) (tree3))
IH2 : forall (nat1:nat), SUCC (nat1) = SUCC (tf1 (nat1) (tree4))
Inductive1 : tree2 = Node (nat2) (tree3) (tree4)
nat1 : nat
Base2 : nat1 = ZERO
Case1 : lq (tf1 (nat2) (tree3)) (tf1 (nat2) (tree4)) = true
---------------------------------------
SUCC (ZERO) = SUCC (tf1 (nat2) (tree4))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 7
rewrite IH1 in goal at 1(rank:18.)
rewrite IH2 in goal at 1(rank:18.)
rewrite IH2 in goal at 2(rank:26.)
rewrite <- IH2 in goal at 0(rank:18.)
rewrite IH1 in goal at 2(rank:26.)
rewrite IH2 in goal at 0(rank:26.)
rewrite IH1 in goal at 0(rank:26.)
=================================================
Progress: 828


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (tree2))))) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 1(rank : 14.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (tree2)))))) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 8
rewrite <- IH3 in goal at 0(rank:14.)
rewrite IH1 in goal at 0(rank:22.)
rewrite IH1 in goal at 3(rank:22.)
rewrite IH2 in goal at 0(rank:22.)
rewrite IH2 in goal at 1(rank:22.)
rewrite IH2 in goal at 2(rank:22.)
rewrite IH1 in goal at 2(rank:22.)
rewrite <- lemma3 in goal at 0(rank:22.)
=================================================
Progress: 829


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
tf1 (SUCC (plus (nat3) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat2))))))) (tree2) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 1(rank : 14.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
plus (SUCC (plus (nat3) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat2))))))) (tf1 (ZERO) (tree2)) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 11
rewrite IH1 in goal at 0(rank:22.)
rewrite IH1 in goal at 2(rank:22.)
rewrite IH2 in goal at 0(rank:22.)
rewrite IH2 in goal at 1(rank:22.)
rewrite IH2 in goal at 2(rank:22.)
rewrite <- IH3 in goal at 0(rank:22.)
rewrite IH1 in goal at 3(rank:22.)
rewrite IH1 in goal at 1(rank:22.)
rewrite <- lemma3 in goal at 0(rank:22.)
rewrite <- lemma3 in goal at 1(rank:22.)
rewrite <- lemma3 in goal at 2(rank:22.)
=================================================
Progress: 830


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
tf1 (SUCC (plus (nat3) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat2))))))) (tree2) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH3 in goal at 0(rank : 14.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
tf1 (SUCC (plus (nat3) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat2))))))) (tree2) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite IH2 in goal at 0(rank:14.)
rewrite <- lemma3 in goal at 0(rank:22.)
=================================================
Progress: 831


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (tf1 (ZERO) (tree2)))) = SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3)))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 14.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (tf1 (ZERO) (tree2)))) = SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (tf1 (ZERO) (tree3))))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH3 in goal at 0
case lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3))
rewrite IH3 in goal at 0
case lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))
rewrite IH2 in goal at 1
simpl in goal
rewrite IH2 in goal at 1
rewrite <- IH3 in goal at 0
rewrite IH2 in goal at 0
assert forall (nat1:nat) (nat2:nat), SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (nat2)))) = SUCC (plus (nat1) (nat2))
reflexivity
reflexivity
rewrite IH1 in goal at 1
simpl in goal
rewrite IH1 in goal at 1
rewrite <- IH3 in goal at 0
rewrite IH2 in goal at 0
rewrite IH2 in goal at 0
Prop: SUCC (plus (SUCC (ZERO)) (plus (ZERO) (tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil))))) = SUCC (plus (SUCC (ZERO)) (plus (ZERO) (tf1 (ZERO) (Node (SUCC (SUCC (ZERO))) (Tnil) (Tnil)))))
Prop: SUCC (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (Tnil)))) = SUCC (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (Tnil))))
Prop: SUCC (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (Tnil)))) = SUCC (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil)))))
validate generalize_common_subterm_goal
Prop: SUCC (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (Node (ZERO) (Tnil) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Node (SUCC (ZERO)) (Tnil) (Tnil)))))))) = SUCC (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (Tnil))))
Prop: SUCC (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (Tnil)))) = SUCC (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (Tnil))))
Prop: SUCC (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (Node (SUCC (ZERO)) (Tnil) (Node (ZERO) (Tnil) (Node (SUCC (ZERO)) (Tnil) (Node (ZERO) (Tnil) (Tnil)))))))) = SUCC (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (Tnil))))
previous tactics
simpl in goal
rewrite <- IH3 in goal at 0
case lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3))
rewrite IH3 in goal at 0
case lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))
rewrite IH2 in goal at 1
simpl in goal
rewrite IH2 in goal at 1
rewrite <- IH3 in goal at 0
rewrite IH2 in goal at 0
assert forall (nat1:nat) (nat2:nat), SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (nat2)))) = SUCC (plus (nat1) (nat2))
reflexivity
reflexivity
rewrite IH1 in goal at 1
simpl in goal
rewrite IH1 in goal at 1
rewrite <- IH3 in goal at 0
rewrite IH2 in goal at 0
Prop: SUCC (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (Tnil)))) = SUCC (plus (ZERO) (tf1 (ZERO) (Tnil)))
Prop: SUCC (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (Tnil)))) = SUCC (plus (ZERO) (tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil))))
Prop: SUCC (plus (SUCC (ZERO)) (plus (ZERO) (tf1 (ZERO) (Tnil)))) = SUCC (plus (SUCC (ZERO)) (tf1 (ZERO) (Tnil)))
previous tactics
simpl in goal
rewrite <- IH3 in goal at 0
case lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3))
rewrite IH3 in goal at 0
case lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))
rewrite IH2 in goal at 1
simpl in goal
rewrite IH2 in goal at 1
rewrite <- IH3 in goal at 0
rewrite IH2 in goal at 0
assert forall (nat1:nat) (nat2:nat), SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (nat2)))) = SUCC (plus (nat1) (nat2))
reflexivity
reflexivity
rewrite IH1 in goal at 1
simpl in goal
rewrite IH1 in goal at 1
rewrite <- IH3 in goal at 0
Prop: SUCC (plus (SUCC (ZERO)) (plus (ZERO) (tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil))))) = SUCC (tf1 (SUCC (ZERO)) (Tnil))
Prop: SUCC (plus (SUCC (ZERO)) (plus (ZERO) (tf1 (ZERO) (Tnil)))) = SUCC (tf1 (SUCC (ZERO)) (Tnil))
Prop: SUCC (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (Tnil)))) = SUCC (tf1 (ZERO) (Tnil))
previous tactics
simpl in goal
rewrite <- IH3 in goal at 0
case lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3))
rewrite IH3 in goal at 0
case lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))
rewrite IH2 in goal at 1
simpl in goal
rewrite IH2 in goal at 1
rewrite <- IH3 in goal at 0
rewrite IH2 in goal at 0
assert forall (nat1:nat) (nat2:nat), SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (nat2)))) = SUCC (plus (nat1) (nat2))
reflexivity
reflexivity
rewrite IH1 in goal at 1
simpl in goal
rewrite IH1 in goal at 1
validate generalize_common_subterm_goal
Prop: plus (plus (ZERO) (ZERO)) (plus (ZERO) (tf1 (ZERO) (Tnil))) = plus (ZERO) (if lq (tf1 (ZERO) (Tnil)) (tf1 (ZERO) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Tnil)))) then tf1 (ZERO) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Tnil))) else tf1 (ZERO) (Tnil))
Prop: plus (plus (ZERO) (ZERO)) (plus (ZERO) (tf1 (ZERO) (Node (SUCC (ZERO)) (Tnil) (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Tnil) (Tnil)) (Tnil)) (Node (ZERO) (Tnil) (Tnil)))))) = plus (ZERO) (if lq (tf1 (ZERO) (Node (SUCC (ZERO)) (Tnil) (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Tnil) (Tnil)) (Tnil)) (Node (ZERO) (Tnil) (Tnil))))) (tf1 (ZERO) (Node (SUCC (ZERO)) (Node (ZERO) (Tnil) (Tnil)) (Node (ZERO) (Tnil) (Tnil)))) then tf1 (ZERO) (Node (SUCC (ZERO)) (Node (ZERO) (Tnil) (Tnil)) (Node (ZERO) (Tnil) (Tnil))) else tf1 (ZERO) (Node (SUCC (ZERO)) (Tnil) (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Node (ZERO) (Tnil) (Tnil)) (Tnil)) (Node (ZERO) (Tnil) (Tnil)))))
Prop: plus (plus (SUCC (ZERO)) (SUCC (ZERO))) (plus (ZERO) (tf1 (ZERO) (Tnil))) = plus (SUCC (ZERO)) (if lq (tf1 (SUCC (ZERO)) (Tnil)) (tf1 (SUCC (ZERO)) (Tnil)) then tf1 (SUCC (ZERO)) (Tnil) else tf1 (SUCC (ZERO)) (Tnil))
previous tactics
simpl in goal
rewrite <- IH3 in goal at 0
case lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3))
rewrite IH3 in goal at 0
case lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))
rewrite IH2 in goal at 1
simpl in goal
rewrite IH2 in goal at 1
rewrite <- IH3 in goal at 0
rewrite IH2 in goal at 0
assert forall (nat1:nat) (nat2:nat), SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (nat2)))) = SUCC (plus (nat1) (nat2))
reflexivity
reflexivity
rewrite IH1 in goal at 1
simpl in goal
validate generalize_common_subterm_goal
Prop: plus (plus (ZERO) (ZERO)) (tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil))) = plus (ZERO) (if lq (tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil))) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil)))
Prop: plus (plus (ZERO) (SUCC (ZERO))) (tf1 (ZERO) (Tnil)) = plus (ZERO) (if lq (tf1 (SUCC (ZERO)) (Tnil)) (tf1 (SUCC (ZERO)) (Tnil)) then tf1 (SUCC (ZERO)) (Tnil) else tf1 (SUCC (ZERO)) (Tnil))
Prop: plus (plus (SUCC (ZERO)) (SUCC (ZERO))) (tf1 (ZERO) (Tnil)) = plus (SUCC (ZERO)) (if lq (tf1 (SUCC (ZERO)) (Tnil)) (tf1 (SUCC (ZERO)) (Tnil)) then tf1 (SUCC (ZERO)) (Tnil) else tf1 (SUCC (ZERO)) (Tnil))
Lemma List
forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (plus (nat1) (tf1 (ZERO) (tree2)))
End of Lemma List


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (tf1 (ZERO) (tree2)))) = SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3)))

1 goal(s) more...

1 conjecture(s) more...
Lemma List
forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2))))
End of Lemma List


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (tf1 (ZERO) (tree2)))) = SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (tf1 (ZERO) (tree3))))

1 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 832


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (tf1 (ZERO) (tree2)))) = SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3)))

1 goal(s) more...

1 conjecture(s) more...
>>> assert forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (plus (nat1) (tf1 (ZERO) (tree2)))(rank : 0.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (plus (nat1) (tf1 (ZERO) (tree2)))

---------------------------------------
forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (plus (nat1) (tf1 (ZERO) (tree2)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 833


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (tf1 (ZERO) (tree2)))) = SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (tf1 (ZERO) (tree3))))

1 goal(s) more...

1 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2))))(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2))))

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2))))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 834


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (plus (nat1) (tf1 (ZERO) (tree2)))

---------------------------------------
forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (plus (nat1) (tf1 (ZERO) (tree2)))

0 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (plus (nat1) (tf1 (ZERO) (tree2)))

---------------------------------------
forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (plus (nat1) (tf1 (ZERO) (tree1))) = SUCC (plus (nat1) (tf1 (ZERO) (tree2)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
induction nat1(rank:16.)
induction tree2(rank:16.)
rewrite <- lemma3 in goal at 0(rank:23.)
rewrite <- lemma3 in goal at 1(rank:23.)
rewrite <- lemma3 in goal at 2(rank:23.)
induction tree1(rank:16.)
=================================================
Progress: 835


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2))))

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2))))

0 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2))))

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (tf1 (ZERO) (tree1))) = SUCC (plus (nat1) (tf1 (ZERO) (tree2)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat2(rank:11.)
=================================================
Progress: 836


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2))))

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (tf1 (ZERO) (tree1))) = SUCC (plus (nat1) (tf1 (ZERO) (tree2)))

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat2(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat2 : nat
---------------------------------------
forall (nat1:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (tf1 (ZERO) (tree1))) = SUCC (plus (nat1) (tf1 (ZERO) (tree2)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat3(rank:11.)
=================================================
Progress: 837


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat2 : nat
---------------------------------------
forall (nat1:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (tf1 (ZERO) (tree1))) = SUCC (plus (nat1) (tf1 (ZERO) (tree2)))

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat3(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat2 : nat
nat3 : nat
---------------------------------------
forall (nat1:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (tf1 (ZERO) (tree1))) = SUCC (plus (nat1) (tf1 (ZERO) (tree2)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction tree1(rank:12.)
=================================================
Progress: 838


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat2 : nat
nat3 : nat
---------------------------------------
forall (nat1:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (tf1 (ZERO) (tree1))) = SUCC (plus (nat1) (tf1 (ZERO) (tree2)))

0 goal(s) more...

2 conjecture(s) more...
>>> induction tree1(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat2 : nat
nat3 : nat
tree1 : tree
Base1 : tree1 = Tnil
---------------------------------------
forall (nat1:nat) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (Tnil)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (Tnil)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (tf1 (ZERO) (Tnil))) = SUCC (plus (nat1) (tf1 (ZERO) (tree2)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:12.)
=================================================
Progress: 839


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat2 : nat
nat3 : nat
tree1 : tree
Base1 : tree1 = Tnil
---------------------------------------
forall (nat1:nat) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (Tnil)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (Tnil)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (tf1 (ZERO) (Tnil))) = SUCC (plus (nat1) (tf1 (ZERO) (tree2)))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat2 : nat
nat3 : nat
tree1 : tree
Base1 : tree1 = Tnil
---------------------------------------
forall (nat1:nat) (tree2:tree), lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree2)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction tree2(rank:13.)
=================================================
Progress: 840


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat2 : nat
nat3 : nat
tree1 : tree
Base1 : tree1 = Tnil
---------------------------------------
forall (nat1:nat) (tree2:tree), lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree2)))

1 goal(s) more...

2 conjecture(s) more...
>>> induction tree2(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat2 : nat
nat3 : nat
tree1 : tree
Base1 : tree1 = Tnil
tree2 : tree
Base2 : tree2 = Tnil
---------------------------------------
forall (nat1:nat), lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (Tnil)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (Tnil)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (Tnil)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12.)
=================================================
Progress: 841


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat2 : nat
nat3 : nat
tree1 : tree
Base1 : tree1 = Tnil
tree2 : tree
Base2 : tree2 = Tnil
---------------------------------------
forall (nat1:nat), lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (Tnil)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (Tnil)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (Tnil)))

2 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat2 : nat
nat3 : nat
tree1 : tree
Base1 : tree1 = Tnil
tree2 : tree
nat4 : nat
tree3 : tree
tree4 : tree
IH1 : forall (nat1:nat), lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree3)))
IH2 : forall (nat1:nat), lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (tree4)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree4)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree4)))
Inductive1 : tree2 = Node (nat4) (tree3) (tree4)
---------------------------------------
forall (nat1:nat), lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (Node (nat4) (tree3) (tree4))) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (Node (nat4) (tree3) (tree4))) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (Node (nat4) (tree3) (tree4))))

1 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:12.)
=================================================
Progress: 842


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat2 : nat
nat3 : nat
tree1 : tree
Base1 : tree1 = Tnil
tree2 : tree
nat4 : nat
tree3 : tree
tree4 : tree
IH1 : forall (nat1:nat), lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree3)))
IH2 : forall (nat1:nat), lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (tree4)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree4)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree4)))
Inductive1 : tree2 = Node (nat4) (tree3) (tree4)
---------------------------------------
forall (nat1:nat), lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (Node (nat4) (tree3) (tree4))) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (Node (nat4) (tree3) (tree4))) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (Node (nat4) (tree3) (tree4))))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat2 : nat
nat3 : nat
tree1 : tree
Base1 : tree1 = Tnil
tree2 : tree
nat4 : nat
tree3 : tree
tree4 : tree
IH1 : forall (nat1:nat), lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree3)))
IH2 : forall (nat1:nat), lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (tree4)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree4)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree4)))
Inductive1 : tree2 = Node (nat4) (tree3) (tree4)
---------------------------------------
forall (nat1:nat), lq (plus (nat3) (nat2)) (if lq (tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree3)) (tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree4)) then tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree4) else tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree3)) = true->lq (SUCC (plus (nat3) (nat2))) (if lq (tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree3)) (tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree4)) then tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree4) else tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree3)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (if lq (tf1 (nat4) (tree3)) (tf1 (nat4) (tree4)) then tf1 (nat4) (tree4) else tf1 (nat4) (tree3)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:12.)
=================================================
Progress: 843


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat2 : nat
nat3 : nat
tree1 : tree
Base1 : tree1 = Tnil
tree2 : tree
nat4 : nat
tree3 : tree
tree4 : tree
IH1 : forall (nat1:nat), lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree3)))
IH2 : forall (nat1:nat), lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (tree4)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree4)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree4)))
Inductive1 : tree2 = Node (nat4) (tree3) (tree4)
---------------------------------------
forall (nat1:nat), lq (plus (nat3) (nat2)) (if lq (tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree3)) (tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree4)) then tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree4) else tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree3)) = true->lq (SUCC (plus (nat3) (nat2))) (if lq (tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree3)) (tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree4)) then tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree4) else tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree3)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (if lq (tf1 (nat4) (tree3)) (tf1 (nat4) (tree4)) then tf1 (nat4) (tree4) else tf1 (nat4) (tree3)))

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat2 : nat
nat3 : nat
tree1 : tree
Base1 : tree1 = Tnil
tree2 : tree
nat4 : nat
tree3 : tree
tree4 : tree
IH1 : forall (nat1:nat), lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree3)))
IH2 : forall (nat1:nat), lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (tree4)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree4)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree4)))
Inductive1 : tree2 = Node (nat4) (tree3) (tree4)
Cond1 : lq (plus (nat3) (nat2)) (if lq (tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree3)) (tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree4)) then tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree4) else tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree3)) = true
---------------------------------------
forall (nat1:nat), lq (SUCC (plus (nat3) (nat2))) (if lq (tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree3)) (tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree4)) then tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree4) else tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree3)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (if lq (tf1 (nat4) (tree3)) (tf1 (nat4) (tree4)) then tf1 (nat4) (tree4) else tf1 (nat4) (tree3)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:12.)
=================================================
Progress: 844


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat2 : nat
nat3 : nat
tree1 : tree
Base1 : tree1 = Tnil
tree2 : tree
nat4 : nat
tree3 : tree
tree4 : tree
IH1 : forall (nat1:nat), lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree3)))
IH2 : forall (nat1:nat), lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (tree4)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree4)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree4)))
Inductive1 : tree2 = Node (nat4) (tree3) (tree4)
Cond1 : lq (plus (nat3) (nat2)) (if lq (tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree3)) (tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree4)) then tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree4) else tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree3)) = true
---------------------------------------
forall (nat1:nat), lq (SUCC (plus (nat3) (nat2))) (if lq (tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree3)) (tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree4)) then tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree4) else tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree3)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (if lq (tf1 (nat4) (tree3)) (tf1 (nat4) (tree4)) then tf1 (nat4) (tree4) else tf1 (nat4) (tree3)))

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat2 : nat
nat3 : nat
tree1 : tree
Base1 : tree1 = Tnil
tree2 : tree
nat4 : nat
tree3 : tree
tree4 : tree
IH1 : forall (nat1:nat), lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree3)))
IH2 : forall (nat1:nat), lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (tree4)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree4)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree4)))
Inductive1 : tree2 = Node (nat4) (tree3) (tree4)
Cond1 : lq (plus (nat3) (nat2)) (if lq (tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree3)) (tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree4)) then tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree4) else tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree3)) = true
Cond2 : lq (SUCC (plus (nat3) (nat2))) (if lq (tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree3)) (tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree4)) then tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree4) else tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree3)) = false
---------------------------------------
forall (nat1:nat), SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (if lq (tf1 (nat4) (tree3)) (tf1 (nat4) (tree4)) then tf1 (nat4) (tree4) else tf1 (nat4) (tree3)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
case lq (tf1 (nat4) (tree3)) (tf1 (nat4) (tree4))(rank:13.)
rewrite <- lemma3 in goal at 1(rank:20.)
rewrite <- lemma3 in goal at 0(rank:28.)
rewrite IH1 in goal at 0(rank:22.)
rewrite IH2 in goal at 0(rank:22.)
rewrite <- lemma3 in goal at 2(rank:28.)
=================================================
Progress: 845


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat2 : nat
nat3 : nat
tree1 : tree
Base1 : tree1 = Tnil
tree2 : tree
nat4 : nat
tree3 : tree
tree4 : tree
IH1 : forall (nat1:nat), lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree3)))
IH2 : forall (nat1:nat), lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (tree4)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree4)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree4)))
Inductive1 : tree2 = Node (nat4) (tree3) (tree4)
Cond1 : lq (plus (nat3) (nat2)) (if lq (tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree3)) (tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree4)) then tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree4) else tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree3)) = true
Cond2 : lq (SUCC (plus (nat3) (nat2))) (if lq (tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree3)) (tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree4)) then tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree4) else tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree3)) = false
---------------------------------------
forall (nat1:nat), SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (if lq (tf1 (nat4) (tree3)) (tf1 (nat4) (tree4)) then tf1 (nat4) (tree4) else tf1 (nat4) (tree3)))

1 goal(s) more...

2 conjecture(s) more...
>>> case lq (tf1 (nat4) (tree3)) (tf1 (nat4) (tree4))(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat2 : nat
nat3 : nat
tree1 : tree
Base1 : tree1 = Tnil
tree2 : tree
nat4 : nat
tree3 : tree
tree4 : tree
IH1 : forall (nat1:nat), lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree3)))
IH2 : forall (nat1:nat), lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (tree4)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree4)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree4)))
Inductive1 : tree2 = Node (nat4) (tree3) (tree4)
Cond1 : lq (plus (nat3) (nat2)) (if lq (tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree3)) (tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree4)) then tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree4) else tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree3)) = true
Cond2 : lq (SUCC (plus (nat3) (nat2))) (if lq (tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree3)) (tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree4)) then tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree4) else tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree3)) = false
Case1 : lq (tf1 (nat4) (tree3)) (tf1 (nat4) (tree4)) = true
---------------------------------------
forall (nat1:nat), SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (nat4) (tree4)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
induction nat1(rank:22.)
rewrite IH2 in goal at 0(rank:23.)
rewrite <- lemma3 in goal at 0(rank:29.)
rewrite <- lemma3 in goal at 1(rank:29.)
rewrite <- lemma3 in goal at 2(rank:29.)
rewrite IH1 in goal at 0(rank:23.)
=================================================
Progress: 846


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (tree2)))))) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH3 in goal at 0(rank : 14.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (tree2)))))) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite IH2 in goal at 0(rank:6.)
=================================================
Progress: 847


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (tree2)))))) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (tree2)))))) = SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite IH2 in goal at 0(rank:14.)
rewrite <- lemma3 in goal at 0(rank:22.)
=================================================
Progress: 848


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
tf1 (SUCC (plus (nat3) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat2))))))) (tree2) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 14.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
tf1 (SUCC (plus (nat3) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat2))))))) (tree2) = SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
rewrite IH2 in goal at 0(rank:14.)
rewrite IH1 in goal at 0(rank:22.)
rewrite <- lemma3 in goal at 2(rank:14.)
rewrite <- lemma3 in goal at 0(rank:22.)
rewrite <- lemma3 in goal at 1(rank:22.)
=================================================
Progress: 849


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (tree2)))))) = SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3)))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 14.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (tree2)))))) = SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (tf1 (ZERO) (tree3))))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite <- IH3 in goal at 0
case lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3))
rewrite IH3 in goal at 0
case lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))
rewrite IH2 in goal at 1
simpl in goal
rewrite IH2 in goal at 1
rewrite <- IH3 in goal at 0
rewrite IH2 in goal at 0
assert forall (nat1:nat) (nat2:nat), SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (nat2)))) = SUCC (plus (nat1) (nat2))
reflexivity
reflexivity
rewrite IH1 in goal at 1
simpl in goal
rewrite <- lemma3 in goal at 1
rewrite IH1 in goal at 1
rewrite <- IH3 in goal at 0
rewrite IH2 in goal at 0
rewrite IH2 in goal at 0
Prop: SUCC (plus (SUCC (ZERO)) (plus (ZERO) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (Tnil)))))) = SUCC (plus (SUCC (ZERO)) (plus (ZERO) (tf1 (ZERO) (Tnil))))
Prop: SUCC (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (Node (ZERO) (Tnil) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil)))))))) = SUCC (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (Tnil))))
Prop: SUCC (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (Node (SUCC (SUCC (ZERO))) (Tnil) (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Node (ZERO) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Tnil))) (Tnil)) (Node (ZERO) (Node (ZERO) (Tnil) (Node (SUCC (ZERO)) (Tnil) (Node (ZERO) (Tnil) (Tnil)))) (Tnil))) (Tnil)))))))) = SUCC (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (Tnil))))
validate generalize_common_subterm_goal
Prop: SUCC (plus (SUCC (ZERO)) (plus (ZERO) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (Tnil)))))) = SUCC (plus (SUCC (ZERO)) (plus (ZERO) (tf1 (ZERO) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Tnil))))))
Prop: SUCC (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (Tnil)))))) = SUCC (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (Tnil))))
Prop: SUCC (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (Node (SUCC (SUCC (ZERO))) (Tnil) (Tnil))))))) = SUCC (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (Tnil))))
previous tactics
simpl in goal
rewrite <- IH3 in goal at 0
case lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3))
rewrite IH3 in goal at 0
case lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))
rewrite IH2 in goal at 1
simpl in goal
rewrite IH2 in goal at 1
rewrite <- IH3 in goal at 0
rewrite IH2 in goal at 0
assert forall (nat1:nat) (nat2:nat), SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (nat2)))) = SUCC (plus (nat1) (nat2))
reflexivity
reflexivity
rewrite IH1 in goal at 1
simpl in goal
rewrite <- lemma3 in goal at 1
rewrite IH1 in goal at 1
rewrite <- IH3 in goal at 0
rewrite IH2 in goal at 0
Prop: SUCC (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (Tnil)))))) = SUCC (plus (ZERO) (tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil))))
Prop: SUCC (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (Tnil)))))) = SUCC (plus (ZERO) (tf1 (ZERO) (Tnil)))
Prop: SUCC (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (Tnil)))))) = SUCC (plus (ZERO) (tf1 (ZERO) (Tnil)))
previous tactics
simpl in goal
rewrite <- IH3 in goal at 0
case lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3))
rewrite IH3 in goal at 0
case lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))
rewrite IH2 in goal at 1
simpl in goal
rewrite IH2 in goal at 1
rewrite <- IH3 in goal at 0
rewrite IH2 in goal at 0
assert forall (nat1:nat) (nat2:nat), SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (nat2)))) = SUCC (plus (nat1) (nat2))
reflexivity
reflexivity
rewrite IH1 in goal at 1
simpl in goal
rewrite <- lemma3 in goal at 1
rewrite IH1 in goal at 1
rewrite <- IH3 in goal at 0
Prop: SUCC (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Tnil) (Tnil)) (Tnil))))))) = SUCC (tf1 (ZERO) (Tnil))
Prop: SUCC (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (Tnil)))))) = SUCC (tf1 (ZERO) (Node (SUCC (ZERO)) (Node (ZERO) (Tnil) (Node (SUCC (ZERO)) (Tnil) (Tnil))) (Node (SUCC (ZERO)) (Tnil) (Tnil))))
Prop: SUCC (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (Tnil)))))) = SUCC (tf1 (ZERO) (Tnil))
validate generalize_common_subterm_goal
Prop: SUCC (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (Node (SUCC (ZERO)) (Tnil) (Node (ZERO) (Tnil) (Tnil)))))))) = SUCC (tf1 (ZERO) (Tnil))
Prop: SUCC (plus (SUCC (ZERO)) (plus (ZERO) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (Tnil)))))) = SUCC (tf1 (SUCC (ZERO)) (Tnil))
Prop: SUCC (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (Tnil)))))) = SUCC (tf1 (ZERO) (Tnil))
previous tactics
simpl in goal
rewrite <- IH3 in goal at 0
case lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3))
rewrite IH3 in goal at 0
case lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))
rewrite IH2 in goal at 1
simpl in goal
rewrite IH2 in goal at 1
rewrite <- IH3 in goal at 0
rewrite IH2 in goal at 0
assert forall (nat1:nat) (nat2:nat), SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (nat2)))) = SUCC (plus (nat1) (nat2))
reflexivity
reflexivity
rewrite IH1 in goal at 1
simpl in goal
rewrite <- lemma3 in goal at 1
rewrite IH1 in goal at 1
validate generalize_common_subterm_goal
Prop: plus (plus (ZERO) (SUCC (SUCC (ZERO)))) (plus (ZERO) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (Tnil))))) = plus (ZERO) (if lq (tf1 (SUCC (SUCC (ZERO))) (Tnil)) (tf1 (SUCC (SUCC (ZERO))) (Tnil)) then tf1 (SUCC (SUCC (ZERO))) (Tnil) else tf1 (SUCC (SUCC (ZERO))) (Tnil))
Prop: plus (plus (ZERO) (ZERO)) (plus (ZERO) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (Tnil))))) = plus (ZERO) (if lq (tf1 (ZERO) (Tnil)) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (Tnil))
Prop: plus (plus (SUCC (ZERO)) (ZERO)) (plus (ZERO) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (Tnil))))) = plus (SUCC (ZERO)) (if lq (tf1 (ZERO) (Tnil)) (tf1 (ZERO) (Node (SUCC (SUCC (SUCC (ZERO)))) (Node (SUCC (ZERO)) (Tnil) (Node (ZERO) (Tnil) (Tnil))) (Node (SUCC (ZERO)) (Tnil) (Tnil)))) then tf1 (ZERO) (Node (SUCC (SUCC (SUCC (ZERO)))) (Node (SUCC (ZERO)) (Tnil) (Node (ZERO) (Tnil) (Tnil))) (Node (SUCC (ZERO)) (Tnil) (Tnil))) else tf1 (ZERO) (Tnil))
previous tactics
simpl in goal
rewrite <- IH3 in goal at 0
case lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3))
rewrite IH3 in goal at 0
case lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))
rewrite IH2 in goal at 1
simpl in goal
rewrite IH2 in goal at 1
rewrite <- IH3 in goal at 0
rewrite IH2 in goal at 0
assert forall (nat1:nat) (nat2:nat), SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (nat2)))) = SUCC (plus (nat1) (nat2))
reflexivity
reflexivity
rewrite IH1 in goal at 1
simpl in goal
rewrite <- lemma3 in goal at 1
validate generalize_common_subterm_goal
Prop: plus (plus (ZERO) (ZERO)) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (Tnil)))) = plus (ZERO) (if lq (tf1 (ZERO) (Tnil)) (tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil))) then tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil)) else tf1 (ZERO) (Tnil))
Prop: plus (plus (ZERO) (SUCC (ZERO))) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (Tnil)))) = plus (ZERO) (if lq (tf1 (SUCC (ZERO)) (Tnil)) (tf1 (SUCC (ZERO)) (Tnil)) then tf1 (SUCC (ZERO)) (Tnil) else tf1 (SUCC (ZERO)) (Tnil))
Prop: plus (plus (SUCC (ZERO)) (ZERO)) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (Tnil)))) = plus (SUCC (ZERO)) (if lq (tf1 (ZERO) (Tnil)) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (Tnil))
previous tactics
simpl in goal
rewrite <- IH3 in goal at 0
case lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3))
rewrite IH3 in goal at 0
case lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))
rewrite IH2 in goal at 1
simpl in goal
rewrite IH2 in goal at 1
rewrite <- IH3 in goal at 0
rewrite IH2 in goal at 0
assert forall (nat1:nat) (nat2:nat), SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (nat2)))) = SUCC (plus (nat1) (nat2))
reflexivity
reflexivity
rewrite IH1 in goal at 1
simpl in goal
validate generalize_common_subterm_goal
Prop: plus (plus (ZERO) (ZERO)) (tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil))) = plus (ZERO) (if lq (tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil))) (tf1 (ZERO) (Node (SUCC (ZERO)) (Tnil) (Node (ZERO) (Tnil) (Tnil)))) then tf1 (ZERO) (Node (SUCC (ZERO)) (Tnil) (Node (ZERO) (Tnil) (Tnil))) else tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil)))
Prop: plus (plus (ZERO) (ZERO)) (tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil))) = plus (ZERO) (if lq (tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil))) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil)))
Prop: plus (plus (SUCC (SUCC (SUCC (ZERO)))) (ZERO)) (tf1 (ZERO) (Tnil)) = plus (SUCC (SUCC (SUCC (ZERO)))) (if lq (tf1 (ZERO) (Tnil)) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (Tnil))
Lemma List
forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (tree1)))))) = SUCC (tf1 (nat1) (tree2))
End of Lemma List


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (tree2)))))) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

1 goal(s) more...

1 conjecture(s) more...
Lemma List
forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (tree1)))))) = SUCC (plus (nat1) (tf1 (ZERO) (tree2)))
End of Lemma List


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (tree2)))))) = SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3)))

1 goal(s) more...

1 conjecture(s) more...
Lemma List
forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (tree1)))))) = SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2))))
End of Lemma List


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (tree2)))))) = SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (tf1 (ZERO) (tree3))))

1 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 850


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (tree2)))))) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

1 goal(s) more...

1 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (tree1)))))) = SUCC (tf1 (nat1) (tree2))(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (tree1)))))) = SUCC (tf1 (nat1) (tree2))

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (tree1)))))) = SUCC (tf1 (nat1) (tree2))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 851


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (tree2)))))) = SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3)))

1 goal(s) more...

1 conjecture(s) more...
>>> assert forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (tree1)))))) = SUCC (plus (nat1) (tf1 (ZERO) (tree2)))(rank : 0.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (tree1)))))) = SUCC (plus (nat1) (tf1 (ZERO) (tree2)))

---------------------------------------
forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (tree1)))))) = SUCC (plus (nat1) (tf1 (ZERO) (tree2)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 852


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (tree2)))))) = SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (tf1 (ZERO) (tree3))))

1 goal(s) more...

1 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (tree1)))))) = SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2))))(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (tree1)))))) = SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2))))

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (tree1)))))) = SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2))))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 853


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (tree1)))))) = SUCC (plus (nat1) (tf1 (ZERO) (tree2)))

---------------------------------------
forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (tree1)))))) = SUCC (plus (nat1) (tf1 (ZERO) (tree2)))

0 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (tree1)))))) = SUCC (plus (nat1) (tf1 (ZERO) (tree2)))

---------------------------------------
forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (plus (nat1) (tf1 (ZERO) (tree1))) = SUCC (plus (nat1) (tf1 (ZERO) (tree2)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
induction nat1(rank:16.)
induction tree2(rank:16.)
rewrite <- lemma3 in goal at 0(rank:23.)
rewrite <- lemma3 in goal at 1(rank:23.)
rewrite <- lemma3 in goal at 2(rank:23.)
induction tree1(rank:16.)
=================================================
Progress: 854


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (tree1)))))) = SUCC (tf1 (nat1) (tree2))

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (tree1)))))) = SUCC (tf1 (nat1) (tree2))

0 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (tree1)))))) = SUCC (tf1 (nat1) (tree2))

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (tf1 (ZERO) (tree1))) = SUCC (tf1 (nat1) (tree2))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat2(rank:11.)
=================================================
Progress: 855


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (tree1)))))) = SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2))))

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (tree1)))))) = SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2))))

0 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (tree1)))))) = SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2))))

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (tf1 (ZERO) (tree1))) = SUCC (plus (nat1) (tf1 (ZERO) (tree2)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat2(rank:11.)
=================================================
Progress: 856


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (tree1)))))) = SUCC (tf1 (nat1) (tree2))

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (tf1 (ZERO) (tree1))) = SUCC (tf1 (nat1) (tree2))

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat2(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (tree1)))))) = SUCC (tf1 (nat1) (tree2))
nat2 : nat
---------------------------------------
forall (nat1:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (tf1 (ZERO) (tree1))) = SUCC (tf1 (nat1) (tree2))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat3(rank:11.)
=================================================
Progress: 857


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (tree1)))))) = SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2))))

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (tf1 (ZERO) (tree1))) = SUCC (plus (nat1) (tf1 (ZERO) (tree2)))

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat2(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (tree1)))))) = SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat2 : nat
---------------------------------------
forall (nat1:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (tf1 (ZERO) (tree1))) = SUCC (plus (nat1) (tf1 (ZERO) (tree2)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat3(rank:11.)
=================================================
Progress: 858


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (tree1)))))) = SUCC (tf1 (nat1) (tree2))
nat2 : nat
---------------------------------------
forall (nat1:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (tf1 (ZERO) (tree1))) = SUCC (tf1 (nat1) (tree2))

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat3(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (tree1)))))) = SUCC (tf1 (nat1) (tree2))
nat2 : nat
nat3 : nat
---------------------------------------
forall (nat1:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (tf1 (ZERO) (tree1))) = SUCC (tf1 (nat1) (tree2))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction tree1(rank:12.)
=================================================
Progress: 859


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (tree1)))))) = SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat2 : nat
---------------------------------------
forall (nat1:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (tf1 (ZERO) (tree1))) = SUCC (plus (nat1) (tf1 (ZERO) (tree2)))

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat3(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (tree1)))))) = SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat2 : nat
nat3 : nat
---------------------------------------
forall (nat1:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (tf1 (ZERO) (tree1))) = SUCC (plus (nat1) (tf1 (ZERO) (tree2)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction tree1(rank:12.)
=================================================
Progress: 860


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (tree1)))))) = SUCC (tf1 (nat1) (tree2))
nat2 : nat
nat3 : nat
---------------------------------------
forall (nat1:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (tf1 (ZERO) (tree1))) = SUCC (tf1 (nat1) (tree2))

0 goal(s) more...

2 conjecture(s) more...
>>> induction tree1(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (tree1)))))) = SUCC (tf1 (nat1) (tree2))
nat2 : nat
nat3 : nat
tree1 : tree
Base1 : tree1 = Tnil
---------------------------------------
forall (nat1:nat) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (Tnil)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (Tnil)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (tf1 (ZERO) (Tnil))) = SUCC (tf1 (nat1) (tree2))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:12.)
=================================================
Progress: 861


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (tree1)))))) = SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat2 : nat
nat3 : nat
---------------------------------------
forall (nat1:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (tf1 (ZERO) (tree1))) = SUCC (plus (nat1) (tf1 (ZERO) (tree2)))

0 goal(s) more...

2 conjecture(s) more...
>>> induction tree1(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (tree1)))))) = SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat2 : nat
nat3 : nat
tree1 : tree
Base1 : tree1 = Tnil
---------------------------------------
forall (nat1:nat) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (Tnil)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (Tnil)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (tf1 (ZERO) (Tnil))) = SUCC (plus (nat1) (tf1 (ZERO) (tree2)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:12.)
=================================================
Progress: 862


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (tree1)))))) = SUCC (tf1 (nat1) (tree2))
nat2 : nat
nat3 : nat
tree1 : tree
Base1 : tree1 = Tnil
---------------------------------------
forall (nat1:nat) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (Tnil)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (Tnil)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (tf1 (ZERO) (Tnil))) = SUCC (tf1 (nat1) (tree2))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (tree1)))))) = SUCC (tf1 (nat1) (tree2))
nat2 : nat
nat3 : nat
tree1 : tree
Base1 : tree1 = Tnil
---------------------------------------
forall (nat1:nat) (tree2:tree), lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (tf1 (nat1) (tree2))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction tree2(rank:13.)
=================================================
Progress: 863


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (tree1)))))) = SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat2 : nat
nat3 : nat
tree1 : tree
Base1 : tree1 = Tnil
---------------------------------------
forall (nat1:nat) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (Tnil)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (Tnil)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (tf1 (ZERO) (Tnil))) = SUCC (plus (nat1) (tf1 (ZERO) (tree2)))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (tree1)))))) = SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat2 : nat
nat3 : nat
tree1 : tree
Base1 : tree1 = Tnil
---------------------------------------
forall (nat1:nat) (tree2:tree), lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree2)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction tree2(rank:13.)
=================================================
Progress: 864


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (tree1)))))) = SUCC (tf1 (nat1) (tree2))
nat2 : nat
nat3 : nat
tree1 : tree
Base1 : tree1 = Tnil
---------------------------------------
forall (nat1:nat) (tree2:tree), lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (tf1 (nat1) (tree2))

1 goal(s) more...

2 conjecture(s) more...
>>> induction tree2(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (tree1)))))) = SUCC (tf1 (nat1) (tree2))
nat2 : nat
nat3 : nat
tree1 : tree
Base1 : tree1 = Tnil
tree2 : tree
Base2 : tree2 = Tnil
---------------------------------------
forall (nat1:nat), lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (Tnil)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (Tnil)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (tf1 (nat1) (Tnil))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 865


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (tree1)))))) = SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat2 : nat
nat3 : nat
tree1 : tree
Base1 : tree1 = Tnil
---------------------------------------
forall (nat1:nat) (tree2:tree), lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree2)))

1 goal(s) more...

2 conjecture(s) more...
>>> induction tree2(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (tree1)))))) = SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat2 : nat
nat3 : nat
tree1 : tree
Base1 : tree1 = Tnil
tree2 : tree
Base2 : tree2 = Tnil
---------------------------------------
forall (nat1:nat), lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (Tnil)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (Tnil)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (Tnil)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12.)
=================================================
Progress: 866


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (tree1)))))) = SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat2 : nat
nat3 : nat
tree1 : tree
Base1 : tree1 = Tnil
tree2 : tree
Base2 : tree2 = Tnil
---------------------------------------
forall (nat1:nat), lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (Tnil)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (Tnil)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (Tnil)))

2 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (tree1)))))) = SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat2 : nat
nat3 : nat
tree1 : tree
Base1 : tree1 = Tnil
tree2 : tree
nat4 : nat
tree3 : tree
tree4 : tree
IH1 : forall (nat1:nat), lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree3)))
IH2 : forall (nat1:nat), lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (tree4)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree4)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree4)))
Inductive1 : tree2 = Node (nat4) (tree3) (tree4)
---------------------------------------
forall (nat1:nat), lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (Node (nat4) (tree3) (tree4))) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (Node (nat4) (tree3) (tree4))) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (Node (nat4) (tree3) (tree4))))

1 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:12.)
=================================================
Progress: 867


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (tree1)))))) = SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat2 : nat
nat3 : nat
tree1 : tree
Base1 : tree1 = Tnil
tree2 : tree
nat4 : nat
tree3 : tree
tree4 : tree
IH1 : forall (nat1:nat), lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree3)))
IH2 : forall (nat1:nat), lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (tree4)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree4)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree4)))
Inductive1 : tree2 = Node (nat4) (tree3) (tree4)
---------------------------------------
forall (nat1:nat), lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (Node (nat4) (tree3) (tree4))) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (Node (nat4) (tree3) (tree4))) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (Node (nat4) (tree3) (tree4))))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (tree1)))))) = SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat2 : nat
nat3 : nat
tree1 : tree
Base1 : tree1 = Tnil
tree2 : tree
nat4 : nat
tree3 : tree
tree4 : tree
IH1 : forall (nat1:nat), lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree3)))
IH2 : forall (nat1:nat), lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (tree4)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree4)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree4)))
Inductive1 : tree2 = Node (nat4) (tree3) (tree4)
---------------------------------------
forall (nat1:nat), lq (plus (nat3) (nat2)) (if lq (tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree3)) (tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree4)) then tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree4) else tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree3)) = true->lq (SUCC (plus (nat3) (nat2))) (if lq (tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree3)) (tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree4)) then tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree4) else tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree3)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (if lq (tf1 (nat4) (tree3)) (tf1 (nat4) (tree4)) then tf1 (nat4) (tree4) else tf1 (nat4) (tree3)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:12.)
=================================================
Progress: 868


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (tree1)))))) = SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat2 : nat
nat3 : nat
tree1 : tree
Base1 : tree1 = Tnil
tree2 : tree
nat4 : nat
tree3 : tree
tree4 : tree
IH1 : forall (nat1:nat), lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree3)))
IH2 : forall (nat1:nat), lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (tree4)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree4)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree4)))
Inductive1 : tree2 = Node (nat4) (tree3) (tree4)
---------------------------------------
forall (nat1:nat), lq (plus (nat3) (nat2)) (if lq (tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree3)) (tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree4)) then tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree4) else tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree3)) = true->lq (SUCC (plus (nat3) (nat2))) (if lq (tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree3)) (tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree4)) then tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree4) else tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree3)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (if lq (tf1 (nat4) (tree3)) (tf1 (nat4) (tree4)) then tf1 (nat4) (tree4) else tf1 (nat4) (tree3)))

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (tree1)))))) = SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat2 : nat
nat3 : nat
tree1 : tree
Base1 : tree1 = Tnil
tree2 : tree
nat4 : nat
tree3 : tree
tree4 : tree
IH1 : forall (nat1:nat), lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree3)))
IH2 : forall (nat1:nat), lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (tree4)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree4)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree4)))
Inductive1 : tree2 = Node (nat4) (tree3) (tree4)
Cond1 : lq (plus (nat3) (nat2)) (if lq (tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree3)) (tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree4)) then tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree4) else tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree3)) = true
---------------------------------------
forall (nat1:nat), lq (SUCC (plus (nat3) (nat2))) (if lq (tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree3)) (tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree4)) then tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree4) else tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree3)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (if lq (tf1 (nat4) (tree3)) (tf1 (nat4) (tree4)) then tf1 (nat4) (tree4) else tf1 (nat4) (tree3)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:12.)
=================================================
Progress: 869


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (tree1)))))) = SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat2 : nat
nat3 : nat
tree1 : tree
Base1 : tree1 = Tnil
tree2 : tree
nat4 : nat
tree3 : tree
tree4 : tree
IH1 : forall (nat1:nat), lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree3)))
IH2 : forall (nat1:nat), lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (tree4)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree4)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree4)))
Inductive1 : tree2 = Node (nat4) (tree3) (tree4)
Cond1 : lq (plus (nat3) (nat2)) (if lq (tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree3)) (tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree4)) then tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree4) else tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree3)) = true
---------------------------------------
forall (nat1:nat), lq (SUCC (plus (nat3) (nat2))) (if lq (tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree3)) (tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree4)) then tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree4) else tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree3)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (if lq (tf1 (nat4) (tree3)) (tf1 (nat4) (tree4)) then tf1 (nat4) (tree4) else tf1 (nat4) (tree3)))

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (tree1)))))) = SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat2 : nat
nat3 : nat
tree1 : tree
Base1 : tree1 = Tnil
tree2 : tree
nat4 : nat
tree3 : tree
tree4 : tree
IH1 : forall (nat1:nat), lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree3)))
IH2 : forall (nat1:nat), lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (tree4)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree4)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree4)))
Inductive1 : tree2 = Node (nat4) (tree3) (tree4)
Cond1 : lq (plus (nat3) (nat2)) (if lq (tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree3)) (tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree4)) then tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree4) else tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree3)) = true
Cond2 : lq (SUCC (plus (nat3) (nat2))) (if lq (tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree3)) (tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree4)) then tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree4) else tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree3)) = false
---------------------------------------
forall (nat1:nat), SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (if lq (tf1 (nat4) (tree3)) (tf1 (nat4) (tree4)) then tf1 (nat4) (tree4) else tf1 (nat4) (tree3)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
case lq (tf1 (nat4) (tree3)) (tf1 (nat4) (tree4))(rank:13.)
rewrite <- lemma3 in goal at 1(rank:20.)
rewrite <- lemma3 in goal at 0(rank:28.)
rewrite IH1 in goal at 0(rank:22.)
rewrite IH2 in goal at 0(rank:22.)
rewrite <- lemma3 in goal at 2(rank:28.)
=================================================
Progress: 870


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (tree1)))))) = SUCC (tf1 (nat1) (tree2))
nat2 : nat
nat3 : nat
tree1 : tree
Base1 : tree1 = Tnil
tree2 : tree
Base2 : tree2 = Tnil
---------------------------------------
forall (nat1:nat), lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (Tnil)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (Tnil)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (tf1 (nat1) (Tnil))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (tree1)))))) = SUCC (tf1 (nat1) (tree2))
nat2 : nat
nat3 : nat
tree1 : tree
Base1 : tree1 = Tnil
tree2 : tree
Base2 : tree2 = Tnil
---------------------------------------
forall (nat1:nat), lq (plus (nat3) (nat2)) (plus (nat3) (nat2)) = true->lq (plus (nat3) (nat2)) (plus (nat3) (nat2)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (nat1)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:13.)
=================================================
Progress: 871


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (tree1)))))) = SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat2 : nat
nat3 : nat
tree1 : tree
Base1 : tree1 = Tnil
tree2 : tree
nat4 : nat
tree3 : tree
tree4 : tree
IH1 : forall (nat1:nat), lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree3)))
IH2 : forall (nat1:nat), lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (tree4)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree4)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree4)))
Inductive1 : tree2 = Node (nat4) (tree3) (tree4)
Cond1 : lq (plus (nat3) (nat2)) (if lq (tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree3)) (tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree4)) then tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree4) else tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree3)) = true
Cond2 : lq (SUCC (plus (nat3) (nat2))) (if lq (tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree3)) (tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree4)) then tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree4) else tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree3)) = false
---------------------------------------
forall (nat1:nat), SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (if lq (tf1 (nat4) (tree3)) (tf1 (nat4) (tree4)) then tf1 (nat4) (tree4) else tf1 (nat4) (tree3)))

1 goal(s) more...

2 conjecture(s) more...
>>> case lq (tf1 (nat4) (tree3)) (tf1 (nat4) (tree4))(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (tree1)))))) = SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat2 : nat
nat3 : nat
tree1 : tree
Base1 : tree1 = Tnil
tree2 : tree
nat4 : nat
tree3 : tree
tree4 : tree
IH1 : forall (nat1:nat), lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree3)))
IH2 : forall (nat1:nat), lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (tree4)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree4)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree4)))
Inductive1 : tree2 = Node (nat4) (tree3) (tree4)
Cond1 : lq (plus (nat3) (nat2)) (if lq (tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree3)) (tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree4)) then tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree4) else tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree3)) = true
Cond2 : lq (SUCC (plus (nat3) (nat2))) (if lq (tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree3)) (tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree4)) then tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree4) else tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree3)) = false
Case1 : lq (tf1 (nat4) (tree3)) (tf1 (nat4) (tree4)) = true
---------------------------------------
forall (nat1:nat), SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (nat4) (tree4)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
induction nat1(rank:22.)
rewrite IH2 in goal at 0(rank:23.)
rewrite <- lemma3 in goal at 0(rank:29.)
rewrite <- lemma3 in goal at 1(rank:29.)
rewrite <- lemma3 in goal at 2(rank:29.)
rewrite IH1 in goal at 0(rank:23.)
=================================================
Progress: 872


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (tree1)))))) = SUCC (tf1 (nat1) (tree2))
nat2 : nat
nat3 : nat
tree1 : tree
Base1 : tree1 = Tnil
tree2 : tree
Base2 : tree2 = Tnil
---------------------------------------
forall (nat1:nat), lq (plus (nat3) (nat2)) (plus (nat3) (nat2)) = true->lq (plus (nat3) (nat2)) (plus (nat3) (nat2)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (nat1)

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (tree1)))))) = SUCC (tf1 (nat1) (tree2))
nat2 : nat
nat3 : nat
tree1 : tree
Base1 : tree1 = Tnil
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (plus (nat3) (nat2)) (plus (nat3) (nat2)) = true
---------------------------------------
forall (nat1:nat), lq (plus (nat3) (nat2)) (plus (nat3) (nat2)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (nat1)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:13.)
=================================================
Progress: 873


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (tree1)))))) = SUCC (tf1 (nat1) (tree2))
nat2 : nat
nat3 : nat
tree1 : tree
Base1 : tree1 = Tnil
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (plus (nat3) (nat2)) (plus (nat3) (nat2)) = true
---------------------------------------
forall (nat1:nat), lq (plus (nat3) (nat2)) (plus (nat3) (nat2)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (nat1)

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (tf1 (SUCC (plus (nat3) (nat2))) (tree1)) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (tree1)))))) = SUCC (tf1 (nat1) (tree2))
nat2 : nat
nat3 : nat
tree1 : tree
Base1 : tree1 = Tnil
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (plus (nat3) (nat2)) (plus (nat3) (nat2)) = true
Cond2 : lq (plus (nat3) (nat2)) (plus (nat3) (nat2)) = false
---------------------------------------
forall (nat1:nat), SUCC (plus (nat1) (ZERO)) = SUCC (nat1)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
induction nat1(rank:22.)
rewrite <- lemma3 in goal at 0(rank:29.)
=================================================
Progress: 874


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
tf1 (SUCC (plus (nat3) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat2))))))) (tree2) = SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3)))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 14.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
tf1 (SUCC (plus (nat3) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat2))))))) (tree2) = SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (tf1 (ZERO) (tree3))))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:22.)
rewrite <- lemma3 in goal at 1(rank:22.)
=================================================
Progress: 875


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
tf1 (SUCC (plus (nat3) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat2))))))) (tree2) = SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3)))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- lemma3 in goal at 2(rank : 14.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
tf1 (SUCC (plus (nat3) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat2))))))) (tree2) = SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (tree3)))))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
rewrite IH2 in goal at 0(rank:14.)
rewrite IH1 in goal at 0(rank:22.)
rewrite <- lemma3 in goal at 2(rank:14.)
rewrite <- lemma3 in goal at 0(rank:22.)
=================================================
Progress: 876


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
tf1 (SUCC (plus (nat3) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat2))))))) (tree2) = SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (tree3)))))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 14.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
tf1 (SUCC (plus (nat3) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat2))))))) (tree2) = SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (tree3))))))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:22.)
rewrite <- lemma3 in goal at 1(rank:22.)
=================================================
Progress: 877


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
tf1 (SUCC (plus (nat3) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat2))))))) (tree2) = SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (tree3)))))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- lemma3 in goal at 2(rank : 14.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
tf1 (SUCC (plus (nat3) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat2))))))) (tree2) = SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (tree3)))))))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
rewrite IH1 in goal at 0(rank:22.)
rewrite IH2 in goal at 0(rank:22.)
rewrite <- lemma3 in goal at 0(rank:22.)
rewrite <- lemma3 in goal at 2(rank:22.)
=================================================
Progress: 878


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3))) = SUCC (if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH2 in goal at 1(rank : 15.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (tf1 (ZERO) (tree3)))) = SUCC (if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 7
rewrite IH3 in goal at 0(rank:15.)
rewrite IH1 in goal at 0(rank:23.)
rewrite IH1 in goal at 1(rank:23.)
rewrite IH1 in goal at 2(rank:23.)
rewrite IH2 in goal at 0(rank:23.)
rewrite IH2 in goal at 2(rank:23.)
rewrite IH2 in goal at 3(rank:23.)
=================================================
Progress: 879


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (tf1 (ZERO) (tree3)))) = SUCC (if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH3 in goal at 0(rank : 15.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (tf1 (ZERO) (tree3)))) = SUCC (plus (nat3) (tf1 (nat2) (tree3)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite IH2 in goal at 0(rank:7.)
=================================================
Progress: 880


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (tf1 (ZERO) (tree3)))) = SUCC (plus (nat3) (tf1 (nat2) (tree3)))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (tree3))))) = SUCC (plus (nat3) (plus (nat2) (tf1 (ZERO) (tree3))))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
simpl in goal
rewrite <- IH1 in goal at 0
case lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3))
rewrite <- IH3 in goal at 0
case lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))
rewrite IH2 in goal at 1
simpl in goal
rewrite IH2 in goal at 1
rewrite IH3 in goal at 0
rewrite IH2 in goal at 0
Prop: SUCC (plus (plus (ZERO) (ZERO)) (plus (ZERO) (plus (ZERO) (ZERO)))) = SUCC (plus (ZERO) (plus (ZERO) (ZERO)))
Prop: SUCC (plus (plus (ZERO) (ZERO)) (plus (ZERO) (plus (ZERO) (SUCC (SUCC (ZERO)))))) = SUCC (plus (ZERO) (plus (ZERO) (SUCC (SUCC (ZERO)))))
Prop: SUCC (plus (plus (ZERO) (ZERO)) (plus (ZERO) (plus (ZERO) (ZERO)))) = SUCC (plus (ZERO) (plus (ZERO) (ZERO)))
previous tactics
simpl in goal
rewrite IH1 in goal at 0
simpl in goal
rewrite <- IH1 in goal at 0
case lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3))
rewrite <- IH3 in goal at 0
case lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))
rewrite IH2 in goal at 1
simpl in goal
rewrite IH2 in goal at 1
rewrite IH3 in goal at 0
validate generalize_common_subterm_goal
Prop: plus (plus (ZERO) (ZERO)) (plus (ZERO) (tf1 (ZERO) (Tnil))) = plus (ZERO) (tf1 (ZERO) (Tnil))
Prop: plus (plus (ZERO) (SUCC (SUCC (SUCC (ZERO))))) (plus (ZERO) (tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil)))) = plus (ZERO) (tf1 (SUCC (SUCC (SUCC (ZERO)))) (Node (ZERO) (Tnil) (Tnil)))
Prop: plus (plus (ZERO) (ZERO)) (plus (ZERO) (tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil)))) = plus (ZERO) (tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil)))
previous tactics
simpl in goal
rewrite IH1 in goal at 0
simpl in goal
rewrite <- IH1 in goal at 0
case lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3))
rewrite <- IH3 in goal at 0
case lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))
rewrite IH2 in goal at 1
simpl in goal
rewrite IH2 in goal at 1
Prop: SUCC (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (Tnil)))) = SUCC (if lq (tf1 (ZERO) (Tnil)) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (Tnil))
Prop: SUCC (plus (SUCC (ZERO)) (plus (ZERO) (tf1 (ZERO) (Tnil)))) = SUCC (if lq (tf1 (SUCC (ZERO)) (Tnil)) (tf1 (SUCC (ZERO)) (Tnil)) then tf1 (SUCC (ZERO)) (Tnil) else tf1 (SUCC (ZERO)) (Tnil))
Prop: SUCC (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (Tnil)))) = SUCC (if lq (tf1 (ZERO) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil)) (Tnil))) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil)) (Tnil)))
previous tactics
simpl in goal
rewrite IH1 in goal at 0
simpl in goal
rewrite <- IH1 in goal at 0
case lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3))
rewrite <- IH3 in goal at 0
case lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))
rewrite IH2 in goal at 1
simpl in goal
Prop: SUCC (plus (ZERO) (tf1 (ZERO) (Tnil))) = SUCC (if lq (tf1 (ZERO) (Tnil)) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (Tnil))
Prop: SUCC (plus (ZERO) (tf1 (ZERO) (Tnil))) = SUCC (if lq (tf1 (ZERO) (Tnil)) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (Tnil))
Prop: SUCC (plus (SUCC (ZERO)) (tf1 (ZERO) (Node (ZERO) (Node (SUCC (SUCC (SUCC (ZERO)))) (Tnil) (Tnil)) (Tnil)))) = SUCC (if lq (tf1 (SUCC (ZERO)) (Tnil)) (tf1 (SUCC (ZERO)) (Node (ZERO) (Node (SUCC (SUCC (SUCC (ZERO)))) (Tnil) (Tnil)) (Tnil))) then tf1 (SUCC (ZERO)) (Node (ZERO) (Node (SUCC (SUCC (SUCC (ZERO)))) (Tnil) (Tnil)) (Tnil)) else tf1 (SUCC (ZERO)) (Tnil))
Lemma List
forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (plus (nat1) (tf1 (ZERO) (tree2))) = SUCC (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1))
End of Lemma List


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3))) = SUCC (if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2))

2 goal(s) more...

1 conjecture(s) more...
Lemma List
forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2)))) = SUCC (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1))
End of Lemma List


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (tf1 (ZERO) (tree3)))) = SUCC (if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2))

2 goal(s) more...

1 conjecture(s) more...
Lemma List
forall (nat1:nat) (nat2:nat) (nat3:nat), SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (plus (ZERO) (nat1)))) = SUCC (plus (nat3) (plus (nat2) (nat1)))
End of Lemma List


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (tree3))))) = SUCC (plus (nat3) (plus (nat2) (tf1 (ZERO) (tree3))))

2 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 881


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3))) = SUCC (if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2))

2 goal(s) more...

1 conjecture(s) more...
>>> assert forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (plus (nat1) (tf1 (ZERO) (tree2))) = SUCC (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1))(rank : 0.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (plus (nat1) (tf1 (ZERO) (tree2))) = SUCC (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1))

---------------------------------------
forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (plus (nat1) (tf1 (ZERO) (tree2))) = SUCC (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction nat1(rank:8.)
=================================================
Progress: 882


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (tf1 (ZERO) (tree3)))) = SUCC (if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2))

2 goal(s) more...

1 conjecture(s) more...
>>> assert forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2)))) = SUCC (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1))(rank : 0.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2)))) = SUCC (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1))

---------------------------------------
forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2)))) = SUCC (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 883


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (tree3))))) = SUCC (plus (nat3) (plus (nat2) (tf1 (ZERO) (tree3))))

2 goal(s) more...

1 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (nat3:nat), SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (plus (ZERO) (nat1)))) = SUCC (plus (nat3) (plus (nat2) (nat1)))(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (plus (ZERO) (nat1)))) = SUCC (plus (nat3) (plus (nat2) (nat1)))

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (plus (ZERO) (nat1)))) = SUCC (plus (nat3) (plus (nat2) (nat1)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:7.)
=================================================
Progress: 884


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2)))) = SUCC (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1))

---------------------------------------
forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2)))) = SUCC (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1))

0 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2)))) = SUCC (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1))

---------------------------------------
forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (plus (nat1) (tf1 (ZERO) (tree2))) = SUCC (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction nat1(rank:8.)
=================================================
Progress: 885


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (plus (ZERO) (nat1)))) = SUCC (plus (nat3) (plus (nat2) (nat1)))

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (plus (ZERO) (nat1)))) = SUCC (plus (nat3) (plus (nat2) (nat1)))

0 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 7.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (plus (ZERO) (nat1)))) = SUCC (plus (nat3) (plus (nat2) (nat1)))

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), SUCC (plus (plus (nat3) (nat2)) (nat1)) = SUCC (plus (nat3) (plus (nat2) (nat1)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction nat2(rank:8.)
=================================================
Progress: 886


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (plus (nat1) (tf1 (ZERO) (tree2))) = SUCC (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1))

---------------------------------------
forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (plus (nat1) (tf1 (ZERO) (tree2))) = SUCC (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1))

0 goal(s) more...

2 conjecture(s) more...
>>> induction nat1(rank : 8.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (plus (nat1) (tf1 (ZERO) (tree2))) = SUCC (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1))
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), SUCC (plus (ZERO) (tf1 (ZERO) (tree2))) = SUCC (if lq (tf1 (ZERO) (tree1)) (tf1 (ZERO) (tree2)) then tf1 (ZERO) (tree2) else tf1 (ZERO) (tree1))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 887


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2)))) = SUCC (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1))

---------------------------------------
forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (plus (nat1) (tf1 (ZERO) (tree2))) = SUCC (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1))

0 goal(s) more...

2 conjecture(s) more...
>>> induction nat1(rank : 8.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2)))) = SUCC (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1))
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), SUCC (plus (ZERO) (tf1 (ZERO) (tree2))) = SUCC (if lq (tf1 (ZERO) (tree1)) (tf1 (ZERO) (tree2)) then tf1 (ZERO) (tree2) else tf1 (ZERO) (tree1))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 888


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (plus (ZERO) (nat1)))) = SUCC (plus (nat3) (plus (nat2) (nat1)))

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat), SUCC (plus (plus (nat3) (nat2)) (nat1)) = SUCC (plus (nat3) (plus (nat2) (nat1)))

0 goal(s) more...

2 conjecture(s) more...
>>> induction nat2(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (plus (ZERO) (nat1)))) = SUCC (plus (nat3) (plus (nat2) (nat1)))
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (nat1:nat) (nat3:nat), SUCC (plus (plus (nat3) (ZERO)) (nat1)) = SUCC (plus (nat3) (plus (ZERO) (nat1)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 889


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (plus (nat1) (tf1 (ZERO) (tree2))) = SUCC (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1))
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), SUCC (plus (ZERO) (tf1 (ZERO) (tree2))) = SUCC (if lq (tf1 (ZERO) (tree1)) (tf1 (ZERO) (tree2)) then tf1 (ZERO) (tree2) else tf1 (ZERO) (tree1))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (plus (nat1) (tf1 (ZERO) (tree2))) = SUCC (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1))
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), SUCC (tf1 (ZERO) (tree2)) = SUCC (if lq (tf1 (ZERO) (tree1)) (tf1 (ZERO) (tree2)) then tf1 (ZERO) (tree2) else tf1 (ZERO) (tree1))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction tree1(rank:9.)
=================================================
Progress: 890


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2)))) = SUCC (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1))
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), SUCC (plus (ZERO) (tf1 (ZERO) (tree2))) = SUCC (if lq (tf1 (ZERO) (tree1)) (tf1 (ZERO) (tree2)) then tf1 (ZERO) (tree2) else tf1 (ZERO) (tree1))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2)))) = SUCC (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1))
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), SUCC (tf1 (ZERO) (tree2)) = SUCC (if lq (tf1 (ZERO) (tree1)) (tf1 (ZERO) (tree2)) then tf1 (ZERO) (tree2) else tf1 (ZERO) (tree1))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction tree1(rank:9.)
=================================================
Progress: 891


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (plus (ZERO) (nat1)))) = SUCC (plus (nat3) (plus (nat2) (nat1)))
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (nat1:nat) (nat3:nat), SUCC (plus (plus (nat3) (ZERO)) (nat1)) = SUCC (plus (nat3) (plus (ZERO) (nat1)))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (plus (ZERO) (nat1)))) = SUCC (plus (nat3) (plus (nat2) (nat1)))
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (nat1:nat) (nat3:nat), SUCC (plus (plus (nat3) (ZERO)) (nat1)) = SUCC (plus (nat3) (nat1))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction nat3(rank:9.)
=================================================
Progress: 892


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (plus (nat1) (tf1 (ZERO) (tree2))) = SUCC (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1))
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), SUCC (tf1 (ZERO) (tree2)) = SUCC (if lq (tf1 (ZERO) (tree1)) (tf1 (ZERO) (tree2)) then tf1 (ZERO) (tree2) else tf1 (ZERO) (tree1))

1 goal(s) more...

2 conjecture(s) more...
>>> induction tree1(rank : 9.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (plus (nat1) (tf1 (ZERO) (tree2))) = SUCC (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1))
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (tree2:tree), SUCC (tf1 (ZERO) (tree2)) = SUCC (if lq (tf1 (ZERO) (Tnil)) (tf1 (ZERO) (tree2)) then tf1 (ZERO) (tree2) else tf1 (ZERO) (Tnil))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 893


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2)))) = SUCC (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1))
nat1 : nat
Base1 : nat1 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), SUCC (tf1 (ZERO) (tree2)) = SUCC (if lq (tf1 (ZERO) (tree1)) (tf1 (ZERO) (tree2)) then tf1 (ZERO) (tree2) else tf1 (ZERO) (tree1))

1 goal(s) more...

2 conjecture(s) more...
>>> induction tree1(rank : 9.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2)))) = SUCC (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1))
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (tree2:tree), SUCC (tf1 (ZERO) (tree2)) = SUCC (if lq (tf1 (ZERO) (Tnil)) (tf1 (ZERO) (tree2)) then tf1 (ZERO) (tree2) else tf1 (ZERO) (Tnil))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 894


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (plus (ZERO) (nat1)))) = SUCC (plus (nat3) (plus (nat2) (nat1)))
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (nat1:nat) (nat3:nat), SUCC (plus (plus (nat3) (ZERO)) (nat1)) = SUCC (plus (nat3) (nat1))

1 goal(s) more...

2 conjecture(s) more...
>>> induction nat3(rank : 9.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (plus (ZERO) (nat1)))) = SUCC (plus (nat3) (plus (nat2) (nat1)))
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
Base2 : nat3 = ZERO
---------------------------------------
forall (nat1:nat), SUCC (plus (plus (ZERO) (ZERO)) (nat1)) = SUCC (plus (ZERO) (nat1))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:8.)
=================================================
Progress: 895


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (plus (ZERO) (nat1)))) = SUCC (plus (nat3) (plus (nat2) (nat1)))
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
Base2 : nat3 = ZERO
---------------------------------------
forall (nat1:nat), SUCC (plus (plus (ZERO) (ZERO)) (nat1)) = SUCC (plus (ZERO) (nat1))

2 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (plus (ZERO) (nat1)))) = SUCC (plus (nat3) (plus (nat2) (nat1)))
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
nat4 : nat
IH1 : forall (nat1:nat), SUCC (plus (plus (nat4) (ZERO)) (nat1)) = SUCC (plus (nat4) (nat1))
Inductive1 : nat3 = SUCC (nat4)
---------------------------------------
forall (nat1:nat), SUCC (plus (plus (SUCC (nat4)) (ZERO)) (nat1)) = SUCC (plus (SUCC (nat4)) (nat1))

1 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:8.)
=================================================
Progress: 896


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (plus (ZERO) (nat1)))) = SUCC (plus (nat3) (plus (nat2) (nat1)))
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
nat4 : nat
IH1 : forall (nat1:nat), SUCC (plus (plus (nat4) (ZERO)) (nat1)) = SUCC (plus (nat4) (nat1))
Inductive1 : nat3 = SUCC (nat4)
---------------------------------------
forall (nat1:nat), SUCC (plus (plus (SUCC (nat4)) (ZERO)) (nat1)) = SUCC (plus (SUCC (nat4)) (nat1))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (plus (ZERO) (nat1)))) = SUCC (plus (nat3) (plus (nat2) (nat1)))
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
nat4 : nat
IH1 : forall (nat1:nat), SUCC (plus (plus (nat4) (ZERO)) (nat1)) = SUCC (plus (nat4) (nat1))
Inductive1 : nat3 = SUCC (nat4)
---------------------------------------
forall (nat1:nat), SUCC (SUCC (plus (plus (nat4) (ZERO)) (nat1))) = SUCC (SUCC (plus (nat4) (nat1)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
intro nat1(rank:8.)
rewrite IH1 in goal at 0(rank:16.)
rewrite <- IH1 in goal at 0(rank:16.)
=================================================
Progress: 897


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (plus (ZERO) (nat1)))) = SUCC (plus (nat3) (plus (nat2) (nat1)))
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
nat4 : nat
IH1 : forall (nat1:nat), SUCC (plus (plus (nat4) (ZERO)) (nat1)) = SUCC (plus (nat4) (nat1))
Inductive1 : nat3 = SUCC (nat4)
---------------------------------------
forall (nat1:nat), SUCC (SUCC (plus (plus (nat4) (ZERO)) (nat1))) = SUCC (SUCC (plus (nat4) (nat1)))

1 goal(s) more...

2 conjecture(s) more...
>>> intro nat1(rank : 8.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat), SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (plus (ZERO) (nat1)))) = SUCC (plus (nat3) (plus (nat2) (nat1)))
nat2 : nat
Base1 : nat2 = ZERO
nat3 : nat
nat4 : nat
IH1 : forall (nat1:nat), SUCC (plus (plus (nat4) (ZERO)) (nat1)) = SUCC (plus (nat4) (nat1))
Inductive1 : nat3 = SUCC (nat4)
nat1 : nat
---------------------------------------
SUCC (SUCC (plus (plus (nat4) (ZERO)) (nat1))) = SUCC (SUCC (plus (nat4) (nat1)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:16.)
rewrite <- IH1 in goal at 0(rank:16.)
=================================================
Progress: 898


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (plus (nat1) (tf1 (ZERO) (tree2))) = SUCC (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1))
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (tree2:tree), SUCC (tf1 (ZERO) (tree2)) = SUCC (if lq (tf1 (ZERO) (Tnil)) (tf1 (ZERO) (tree2)) then tf1 (ZERO) (tree2) else tf1 (ZERO) (Tnil))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (plus (nat1) (tf1 (ZERO) (tree2))) = SUCC (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1))
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (tree2:tree), SUCC (tf1 (ZERO) (tree2)) = SUCC (if lq (ZERO) (tf1 (ZERO) (tree2)) then tf1 (ZERO) (tree2) else tf1 (ZERO) (Tnil))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction tree2(rank:10.)
=================================================
Progress: 899


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2)))) = SUCC (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1))
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (tree2:tree), SUCC (tf1 (ZERO) (tree2)) = SUCC (if lq (tf1 (ZERO) (Tnil)) (tf1 (ZERO) (tree2)) then tf1 (ZERO) (tree2) else tf1 (ZERO) (Tnil))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2)))) = SUCC (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1))
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (tree2:tree), SUCC (tf1 (ZERO) (tree2)) = SUCC (if lq (ZERO) (tf1 (ZERO) (tree2)) then tf1 (ZERO) (tree2) else tf1 (ZERO) (Tnil))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction tree2(rank:10.)
=================================================
Progress: 900


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (plus (nat1) (tf1 (ZERO) (tree2))) = SUCC (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1))
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (tree2:tree), SUCC (tf1 (ZERO) (tree2)) = SUCC (if lq (ZERO) (tf1 (ZERO) (tree2)) then tf1 (ZERO) (tree2) else tf1 (ZERO) (Tnil))

2 goal(s) more...

2 conjecture(s) more...
>>> induction tree2(rank : 10.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (plus (nat1) (tf1 (ZERO) (tree2))) = SUCC (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1))
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
---------------------------------------
SUCC (tf1 (ZERO) (Tnil)) = SUCC (if lq (ZERO) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (Tnil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 901


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (plus (nat1) (tf1 (ZERO) (tree2))) = SUCC (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1))
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
---------------------------------------
SUCC (tf1 (ZERO) (Tnil)) = SUCC (if lq (ZERO) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (Tnil))

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (plus (nat1) (tf1 (ZERO) (tree2))) = SUCC (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1))
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : SUCC (tf1 (ZERO) (tree3)) = SUCC (if lq (ZERO) (tf1 (ZERO) (tree3)) then tf1 (ZERO) (tree3) else tf1 (ZERO) (Tnil))
IH2 : SUCC (tf1 (ZERO) (tree4)) = SUCC (if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else tf1 (ZERO) (Tnil))
Inductive1 : tree2 = Node (nat2) (tree3) (tree4)
---------------------------------------
SUCC (tf1 (ZERO) (Node (nat2) (tree3) (tree4))) = SUCC (if lq (ZERO) (tf1 (ZERO) (Node (nat2) (tree3) (tree4))) then tf1 (ZERO) (Node (nat2) (tree3) (tree4)) else tf1 (ZERO) (Tnil))

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 902


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (plus (nat1) (tf1 (ZERO) (tree2))) = SUCC (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1))
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : SUCC (tf1 (ZERO) (tree3)) = SUCC (if lq (ZERO) (tf1 (ZERO) (tree3)) then tf1 (ZERO) (tree3) else tf1 (ZERO) (Tnil))
IH2 : SUCC (tf1 (ZERO) (tree4)) = SUCC (if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else tf1 (ZERO) (Tnil))
Inductive1 : tree2 = Node (nat2) (tree3) (tree4)
---------------------------------------
SUCC (tf1 (ZERO) (Node (nat2) (tree3) (tree4))) = SUCC (if lq (ZERO) (tf1 (ZERO) (Node (nat2) (tree3) (tree4))) then tf1 (ZERO) (Node (nat2) (tree3) (tree4)) else tf1 (ZERO) (Tnil))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (plus (nat1) (tf1 (ZERO) (tree2))) = SUCC (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1))
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : SUCC (tf1 (ZERO) (tree3)) = SUCC (if lq (ZERO) (tf1 (ZERO) (tree3)) then tf1 (ZERO) (tree3) else tf1 (ZERO) (Tnil))
IH2 : SUCC (tf1 (ZERO) (tree4)) = SUCC (if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else tf1 (ZERO) (Tnil))
Inductive1 : tree2 = Node (nat2) (tree3) (tree4)
---------------------------------------
SUCC (if lq (tf1 (nat2) (tree3)) (tf1 (nat2) (tree4)) then tf1 (nat2) (tree4) else tf1 (nat2) (tree3)) = SUCC (if lq (ZERO) (if lq (tf1 (nat2) (tree3)) (tf1 (nat2) (tree4)) then tf1 (nat2) (tree4) else tf1 (nat2) (tree3)) then tf1 (ZERO) (Node (nat2) (tree3) (tree4)) else tf1 (ZERO) (Tnil))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case lq (tf1 (nat2) (tree3)) (tf1 (nat2) (tree4))(rank:10.)
=================================================
Progress: 903


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2)))) = SUCC (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1))
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (tree2:tree), SUCC (tf1 (ZERO) (tree2)) = SUCC (if lq (ZERO) (tf1 (ZERO) (tree2)) then tf1 (ZERO) (tree2) else tf1 (ZERO) (Tnil))

2 goal(s) more...

2 conjecture(s) more...
>>> induction tree2(rank : 10.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2)))) = SUCC (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1))
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
---------------------------------------
SUCC (tf1 (ZERO) (Tnil)) = SUCC (if lq (ZERO) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (Tnil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:9.)
=================================================
Progress: 904


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2)))) = SUCC (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1))
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
---------------------------------------
SUCC (tf1 (ZERO) (Tnil)) = SUCC (if lq (ZERO) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (Tnil))

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 9.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2)))) = SUCC (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1))
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : SUCC (tf1 (ZERO) (tree3)) = SUCC (if lq (ZERO) (tf1 (ZERO) (tree3)) then tf1 (ZERO) (tree3) else tf1 (ZERO) (Tnil))
IH2 : SUCC (tf1 (ZERO) (tree4)) = SUCC (if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else tf1 (ZERO) (Tnil))
Inductive1 : tree2 = Node (nat2) (tree3) (tree4)
---------------------------------------
SUCC (tf1 (ZERO) (Node (nat2) (tree3) (tree4))) = SUCC (if lq (ZERO) (tf1 (ZERO) (Node (nat2) (tree3) (tree4))) then tf1 (ZERO) (Node (nat2) (tree3) (tree4)) else tf1 (ZERO) (Tnil))

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:9.)
=================================================
Progress: 905


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2)))) = SUCC (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1))
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : SUCC (tf1 (ZERO) (tree3)) = SUCC (if lq (ZERO) (tf1 (ZERO) (tree3)) then tf1 (ZERO) (tree3) else tf1 (ZERO) (Tnil))
IH2 : SUCC (tf1 (ZERO) (tree4)) = SUCC (if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else tf1 (ZERO) (Tnil))
Inductive1 : tree2 = Node (nat2) (tree3) (tree4)
---------------------------------------
SUCC (tf1 (ZERO) (Node (nat2) (tree3) (tree4))) = SUCC (if lq (ZERO) (tf1 (ZERO) (Node (nat2) (tree3) (tree4))) then tf1 (ZERO) (Node (nat2) (tree3) (tree4)) else tf1 (ZERO) (Tnil))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 9.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2)))) = SUCC (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1))
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : SUCC (tf1 (ZERO) (tree3)) = SUCC (if lq (ZERO) (tf1 (ZERO) (tree3)) then tf1 (ZERO) (tree3) else tf1 (ZERO) (Tnil))
IH2 : SUCC (tf1 (ZERO) (tree4)) = SUCC (if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else tf1 (ZERO) (Tnil))
Inductive1 : tree2 = Node (nat2) (tree3) (tree4)
---------------------------------------
SUCC (if lq (tf1 (nat2) (tree3)) (tf1 (nat2) (tree4)) then tf1 (nat2) (tree4) else tf1 (nat2) (tree3)) = SUCC (if lq (ZERO) (if lq (tf1 (nat2) (tree3)) (tf1 (nat2) (tree4)) then tf1 (nat2) (tree4) else tf1 (nat2) (tree3)) then tf1 (ZERO) (Node (nat2) (tree3) (tree4)) else tf1 (ZERO) (Tnil))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case lq (tf1 (nat2) (tree3)) (tf1 (nat2) (tree4))(rank:10.)
=================================================
Progress: 906


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (plus (nat1) (tf1 (ZERO) (tree2))) = SUCC (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1))
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : SUCC (tf1 (ZERO) (tree3)) = SUCC (if lq (ZERO) (tf1 (ZERO) (tree3)) then tf1 (ZERO) (tree3) else tf1 (ZERO) (Tnil))
IH2 : SUCC (tf1 (ZERO) (tree4)) = SUCC (if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else tf1 (ZERO) (Tnil))
Inductive1 : tree2 = Node (nat2) (tree3) (tree4)
---------------------------------------
SUCC (if lq (tf1 (nat2) (tree3)) (tf1 (nat2) (tree4)) then tf1 (nat2) (tree4) else tf1 (nat2) (tree3)) = SUCC (if lq (ZERO) (if lq (tf1 (nat2) (tree3)) (tf1 (nat2) (tree4)) then tf1 (nat2) (tree4) else tf1 (nat2) (tree3)) then tf1 (ZERO) (Node (nat2) (tree3) (tree4)) else tf1 (ZERO) (Tnil))

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (tf1 (nat2) (tree3)) (tf1 (nat2) (tree4))(rank : 10.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (plus (nat1) (tf1 (ZERO) (tree2))) = SUCC (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1))
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : SUCC (tf1 (ZERO) (tree3)) = SUCC (if lq (ZERO) (tf1 (ZERO) (tree3)) then tf1 (ZERO) (tree3) else tf1 (ZERO) (Tnil))
IH2 : SUCC (tf1 (ZERO) (tree4)) = SUCC (if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else tf1 (ZERO) (Tnil))
Inductive1 : tree2 = Node (nat2) (tree3) (tree4)
Case1 : lq (tf1 (nat2) (tree3)) (tf1 (nat2) (tree4)) = true
---------------------------------------
SUCC (tf1 (nat2) (tree4)) = SUCC (if lq (ZERO) (tf1 (nat2) (tree4)) then tf1 (ZERO) (Node (nat2) (tree3) (tree4)) else tf1 (ZERO) (Tnil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case lq (ZERO) (tf1 (nat2) (tree4))(rank:11.)
=================================================
Progress: 907


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2)))) = SUCC (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1))
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : SUCC (tf1 (ZERO) (tree3)) = SUCC (if lq (ZERO) (tf1 (ZERO) (tree3)) then tf1 (ZERO) (tree3) else tf1 (ZERO) (Tnil))
IH2 : SUCC (tf1 (ZERO) (tree4)) = SUCC (if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else tf1 (ZERO) (Tnil))
Inductive1 : tree2 = Node (nat2) (tree3) (tree4)
---------------------------------------
SUCC (if lq (tf1 (nat2) (tree3)) (tf1 (nat2) (tree4)) then tf1 (nat2) (tree4) else tf1 (nat2) (tree3)) = SUCC (if lq (ZERO) (if lq (tf1 (nat2) (tree3)) (tf1 (nat2) (tree4)) then tf1 (nat2) (tree4) else tf1 (nat2) (tree3)) then tf1 (ZERO) (Node (nat2) (tree3) (tree4)) else tf1 (ZERO) (Tnil))

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (tf1 (nat2) (tree3)) (tf1 (nat2) (tree4))(rank : 10.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2)))) = SUCC (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1))
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : SUCC (tf1 (ZERO) (tree3)) = SUCC (if lq (ZERO) (tf1 (ZERO) (tree3)) then tf1 (ZERO) (tree3) else tf1 (ZERO) (Tnil))
IH2 : SUCC (tf1 (ZERO) (tree4)) = SUCC (if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else tf1 (ZERO) (Tnil))
Inductive1 : tree2 = Node (nat2) (tree3) (tree4)
Case1 : lq (tf1 (nat2) (tree3)) (tf1 (nat2) (tree4)) = true
---------------------------------------
SUCC (tf1 (nat2) (tree4)) = SUCC (if lq (ZERO) (tf1 (nat2) (tree4)) then tf1 (ZERO) (Node (nat2) (tree3) (tree4)) else tf1 (ZERO) (Tnil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case lq (ZERO) (tf1 (nat2) (tree4))(rank:11.)
=================================================
Progress: 908


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (plus (nat1) (tf1 (ZERO) (tree2))) = SUCC (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1))
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : SUCC (tf1 (ZERO) (tree3)) = SUCC (if lq (ZERO) (tf1 (ZERO) (tree3)) then tf1 (ZERO) (tree3) else tf1 (ZERO) (Tnil))
IH2 : SUCC (tf1 (ZERO) (tree4)) = SUCC (if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else tf1 (ZERO) (Tnil))
Inductive1 : tree2 = Node (nat2) (tree3) (tree4)
Case1 : lq (tf1 (nat2) (tree3)) (tf1 (nat2) (tree4)) = true
---------------------------------------
SUCC (tf1 (nat2) (tree4)) = SUCC (if lq (ZERO) (tf1 (nat2) (tree4)) then tf1 (ZERO) (Node (nat2) (tree3) (tree4)) else tf1 (ZERO) (Tnil))

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (ZERO) (tf1 (nat2) (tree4))(rank : 11.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (plus (nat1) (tf1 (ZERO) (tree2))) = SUCC (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1))
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : SUCC (tf1 (ZERO) (tree3)) = SUCC (if lq (ZERO) (tf1 (ZERO) (tree3)) then tf1 (ZERO) (tree3) else tf1 (ZERO) (Tnil))
IH2 : SUCC (tf1 (ZERO) (tree4)) = SUCC (if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else tf1 (ZERO) (Tnil))
Inductive1 : tree2 = Node (nat2) (tree3) (tree4)
Case1 : lq (tf1 (nat2) (tree3)) (tf1 (nat2) (tree4)) = true
Case2 : lq (ZERO) (tf1 (nat2) (tree4)) = true
---------------------------------------
SUCC (tf1 (nat2) (tree4)) = SUCC (if lq (tf1 (nat2) (tree3)) (tf1 (nat2) (tree4)) then tf1 (nat2) (tree4) else tf1 (nat2) (tree3))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:11.)
=================================================
Progress: 909


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2)))) = SUCC (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1))
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : SUCC (tf1 (ZERO) (tree3)) = SUCC (if lq (ZERO) (tf1 (ZERO) (tree3)) then tf1 (ZERO) (tree3) else tf1 (ZERO) (Tnil))
IH2 : SUCC (tf1 (ZERO) (tree4)) = SUCC (if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else tf1 (ZERO) (Tnil))
Inductive1 : tree2 = Node (nat2) (tree3) (tree4)
Case1 : lq (tf1 (nat2) (tree3)) (tf1 (nat2) (tree4)) = true
---------------------------------------
SUCC (tf1 (nat2) (tree4)) = SUCC (if lq (ZERO) (tf1 (nat2) (tree4)) then tf1 (ZERO) (Node (nat2) (tree3) (tree4)) else tf1 (ZERO) (Tnil))

3 goal(s) more...

2 conjecture(s) more...
>>> case lq (ZERO) (tf1 (nat2) (tree4))(rank : 11.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2)))) = SUCC (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1))
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : SUCC (tf1 (ZERO) (tree3)) = SUCC (if lq (ZERO) (tf1 (ZERO) (tree3)) then tf1 (ZERO) (tree3) else tf1 (ZERO) (Tnil))
IH2 : SUCC (tf1 (ZERO) (tree4)) = SUCC (if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else tf1 (ZERO) (Tnil))
Inductive1 : tree2 = Node (nat2) (tree3) (tree4)
Case1 : lq (tf1 (nat2) (tree3)) (tf1 (nat2) (tree4)) = true
Case2 : lq (ZERO) (tf1 (nat2) (tree4)) = true
---------------------------------------
SUCC (tf1 (nat2) (tree4)) = SUCC (if lq (tf1 (nat2) (tree3)) (tf1 (nat2) (tree4)) then tf1 (nat2) (tree4) else tf1 (nat2) (tree3))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:11.)
=================================================
Progress: 910


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (plus (nat1) (tf1 (ZERO) (tree2))) = SUCC (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1))
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : SUCC (tf1 (ZERO) (tree3)) = SUCC (if lq (ZERO) (tf1 (ZERO) (tree3)) then tf1 (ZERO) (tree3) else tf1 (ZERO) (Tnil))
IH2 : SUCC (tf1 (ZERO) (tree4)) = SUCC (if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else tf1 (ZERO) (Tnil))
Inductive1 : tree2 = Node (nat2) (tree3) (tree4)
Case1 : lq (tf1 (nat2) (tree3)) (tf1 (nat2) (tree4)) = true
Case2 : lq (ZERO) (tf1 (nat2) (tree4)) = true
---------------------------------------
SUCC (tf1 (nat2) (tree4)) = SUCC (if lq (tf1 (nat2) (tree3)) (tf1 (nat2) (tree4)) then tf1 (nat2) (tree4) else tf1 (nat2) (tree3))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 11.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (plus (nat1) (tf1 (ZERO) (tree2))) = SUCC (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1))
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : SUCC (tf1 (ZERO) (tree3)) = SUCC (if lq (ZERO) (tf1 (ZERO) (tree3)) then tf1 (ZERO) (tree3) else tf1 (ZERO) (Tnil))
IH2 : SUCC (tf1 (ZERO) (tree4)) = SUCC (if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else tf1 (ZERO) (Tnil))
Inductive1 : tree2 = Node (nat2) (tree3) (tree4)
Case1 : lq (tf1 (nat2) (tree3)) (tf1 (nat2) (tree4)) = true
Case2 : lq (ZERO) (tf1 (nat2) (tree4)) = true
---------------------------------------
SUCC (tf1 (nat2) (tree4)) = SUCC (if true then tf1 (nat2) (tree4) else tf1 (nat2) (tree3))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 911


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (plus (nat1) (tf1 (ZERO) (tree2))) = SUCC (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1))
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : SUCC (tf1 (ZERO) (tree3)) = SUCC (if lq (ZERO) (tf1 (ZERO) (tree3)) then tf1 (ZERO) (tree3) else tf1 (ZERO) (Tnil))
IH2 : SUCC (tf1 (ZERO) (tree4)) = SUCC (if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else tf1 (ZERO) (Tnil))
Inductive1 : tree2 = Node (nat2) (tree3) (tree4)
Case1 : lq (tf1 (nat2) (tree3)) (tf1 (nat2) (tree4)) = true
Case2 : lq (ZERO) (tf1 (nat2) (tree4)) = true
---------------------------------------
SUCC (tf1 (nat2) (tree4)) = SUCC (if true then tf1 (nat2) (tree4) else tf1 (nat2) (tree3))

4 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (plus (nat1) (tf1 (ZERO) (tree2))) = SUCC (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1))
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : SUCC (tf1 (ZERO) (tree3)) = SUCC (if lq (ZERO) (tf1 (ZERO) (tree3)) then tf1 (ZERO) (tree3) else tf1 (ZERO) (Tnil))
IH2 : SUCC (tf1 (ZERO) (tree4)) = SUCC (if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else tf1 (ZERO) (Tnil))
Inductive1 : tree2 = Node (nat2) (tree3) (tree4)
Case1 : lq (tf1 (nat2) (tree3)) (tf1 (nat2) (tree4)) = true
Case2 : lq (ZERO) (tf1 (nat2) (tree4)) = false
---------------------------------------
SUCC (tf1 (nat2) (tree4)) = SUCC (ZERO)

3 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 0
previous tactics
simpl in goal
case lq (tf1 (nat2) (tree3)) (tf1 (nat2) (tree4))
case lq (ZERO) (tf1 (nat2) (tree4))
rewrite Case1 in goal at 0
reflexivity
validate generalize_common_subterm_goal
Prop: tf1 (ZERO) (Node (SUCC (ZERO)) (Tnil) (Node (ZERO) (Tnil) (Tnil))) = ZERO
Prop: tf1 (ZERO) (Tnil) = ZERO
Prop: tf1 (SUCC (ZERO)) (Tnil) = ZERO
Lemma List
forall (nat1:nat) (tree1:tree), lq (ZERO) (tf1 (nat1) (tree1)) = false -> tf1 (nat1) (tree1) = ZERO
End of Lemma List


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (plus (nat1) (tf1 (ZERO) (tree2))) = SUCC (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1))
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : SUCC (tf1 (ZERO) (tree3)) = SUCC (if lq (ZERO) (tf1 (ZERO) (tree3)) then tf1 (ZERO) (tree3) else tf1 (ZERO) (Tnil))
IH2 : SUCC (tf1 (ZERO) (tree4)) = SUCC (if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else tf1 (ZERO) (Tnil))
Inductive1 : tree2 = Node (nat2) (tree3) (tree4)
Case1 : lq (tf1 (nat2) (tree3)) (tf1 (nat2) (tree4)) = true
Case2 : lq (ZERO) (tf1 (nat2) (tree4)) = false
---------------------------------------
SUCC (tf1 (nat2) (tree4)) = SUCC (ZERO)

3 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 912


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (plus (nat1) (tf1 (ZERO) (tree2))) = SUCC (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1))
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : SUCC (tf1 (ZERO) (tree3)) = SUCC (if lq (ZERO) (tf1 (ZERO) (tree3)) then tf1 (ZERO) (tree3) else tf1 (ZERO) (Tnil))
IH2 : SUCC (tf1 (ZERO) (tree4)) = SUCC (if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else tf1 (ZERO) (Tnil))
Inductive1 : tree2 = Node (nat2) (tree3) (tree4)
Case1 : lq (tf1 (nat2) (tree3)) (tf1 (nat2) (tree4)) = true
Case2 : lq (ZERO) (tf1 (nat2) (tree4)) = false
---------------------------------------
SUCC (tf1 (nat2) (tree4)) = SUCC (ZERO)

3 goal(s) more...

2 conjecture(s) more...
>>> assert forall (nat1:nat) (tree1:tree), lq (ZERO) (tf1 (nat1) (tree1)) = false -> tf1 (nat1) (tree1) = ZERO(rank : 0.)


1st goal of : forall (nat1:nat) (tree1:tree), lq (ZERO) (tf1 (nat1) (tree1)) = false -> tf1 (nat1) (tree1) = ZERO

---------------------------------------
forall (nat1:nat) (tree1:tree), lq (ZERO) (tf1 (nat1) (tree1)) = false -> tf1 (nat1) (tree1) = ZERO

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat1(rank:9.)
=================================================
Progress: 913


1st goal of : forall (nat1:nat) (tree1:tree), lq (ZERO) (tf1 (nat1) (tree1)) = false -> tf1 (nat1) (tree1) = ZERO

---------------------------------------
forall (nat1:nat) (tree1:tree), lq (ZERO) (tf1 (nat1) (tree1)) = false -> tf1 (nat1) (tree1) = ZERO

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9.)


1st goal of : forall (nat1:nat) (tree1:tree), lq (ZERO) (tf1 (nat1) (tree1)) = false -> tf1 (nat1) (tree1) = ZERO
nat1 : nat
---------------------------------------
forall (tree1:tree), lq (ZERO) (tf1 (nat1) (tree1)) = false -> tf1 (nat1) (tree1) = ZERO

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction tree1(rank:10.)
=================================================
Progress: 914


1st goal of : forall (nat1:nat) (tree1:tree), lq (ZERO) (tf1 (nat1) (tree1)) = false -> tf1 (nat1) (tree1) = ZERO
nat1 : nat
---------------------------------------
forall (tree1:tree), lq (ZERO) (tf1 (nat1) (tree1)) = false -> tf1 (nat1) (tree1) = ZERO

0 goal(s) more...

3 conjecture(s) more...
>>> induction tree1(rank : 10.)


1st goal of : forall (nat1:nat) (tree1:tree), lq (ZERO) (tf1 (nat1) (tree1)) = false -> tf1 (nat1) (tree1) = ZERO
nat1 : nat
tree1 : tree
Base1 : tree1 = Tnil
---------------------------------------
lq (ZERO) (tf1 (nat1) (Tnil)) = false -> tf1 (nat1) (Tnil) = ZERO

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 915


1st goal of : forall (nat1:nat) (tree1:tree), lq (ZERO) (tf1 (nat1) (tree1)) = false -> tf1 (nat1) (tree1) = ZERO
nat1 : nat
tree1 : tree
Base1 : tree1 = Tnil
---------------------------------------
lq (ZERO) (tf1 (nat1) (Tnil)) = false -> tf1 (nat1) (Tnil) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (nat1:nat) (tree1:tree), lq (ZERO) (tf1 (nat1) (tree1)) = false -> tf1 (nat1) (tree1) = ZERO
nat1 : nat
tree1 : tree
Base1 : tree1 = Tnil
---------------------------------------
lq (ZERO) (nat1) = false -> nat1 = ZERO

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:10.)
=================================================
Progress: 916


1st goal of : forall (nat1:nat) (tree1:tree), lq (ZERO) (tf1 (nat1) (tree1)) = false -> tf1 (nat1) (tree1) = ZERO
nat1 : nat
tree1 : tree
Base1 : tree1 = Tnil
---------------------------------------
lq (ZERO) (nat1) = false -> nat1 = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 10.)


1st goal of : forall (nat1:nat) (tree1:tree), lq (ZERO) (tf1 (nat1) (tree1)) = false -> tf1 (nat1) (tree1) = ZERO
nat1 : nat
tree1 : tree
Base1 : tree1 = Tnil
Cond1 : lq (ZERO) (nat1) = false
---------------------------------------
nat1 = ZERO

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
validate generalize_common_subterm_goal
Prop: ZERO = ZERO
Prop: ZERO = ZERO
Prop: ZERO = ZERO
=================================================
Progress: 917


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2)))) = SUCC (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1))
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : SUCC (tf1 (ZERO) (tree3)) = SUCC (if lq (ZERO) (tf1 (ZERO) (tree3)) then tf1 (ZERO) (tree3) else tf1 (ZERO) (Tnil))
IH2 : SUCC (tf1 (ZERO) (tree4)) = SUCC (if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else tf1 (ZERO) (Tnil))
Inductive1 : tree2 = Node (nat2) (tree3) (tree4)
Case1 : lq (tf1 (nat2) (tree3)) (tf1 (nat2) (tree4)) = true
Case2 : lq (ZERO) (tf1 (nat2) (tree4)) = true
---------------------------------------
SUCC (tf1 (nat2) (tree4)) = SUCC (if lq (tf1 (nat2) (tree3)) (tf1 (nat2) (tree4)) then tf1 (nat2) (tree4) else tf1 (nat2) (tree3))

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 11.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2)))) = SUCC (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1))
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : SUCC (tf1 (ZERO) (tree3)) = SUCC (if lq (ZERO) (tf1 (ZERO) (tree3)) then tf1 (ZERO) (tree3) else tf1 (ZERO) (Tnil))
IH2 : SUCC (tf1 (ZERO) (tree4)) = SUCC (if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else tf1 (ZERO) (Tnil))
Inductive1 : tree2 = Node (nat2) (tree3) (tree4)
Case1 : lq (tf1 (nat2) (tree3)) (tf1 (nat2) (tree4)) = true
Case2 : lq (ZERO) (tf1 (nat2) (tree4)) = true
---------------------------------------
SUCC (tf1 (nat2) (tree4)) = SUCC (if true then tf1 (nat2) (tree4) else tf1 (nat2) (tree3))

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:10.)
=================================================
Progress: 918


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2)))) = SUCC (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1))
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : SUCC (tf1 (ZERO) (tree3)) = SUCC (if lq (ZERO) (tf1 (ZERO) (tree3)) then tf1 (ZERO) (tree3) else tf1 (ZERO) (Tnil))
IH2 : SUCC (tf1 (ZERO) (tree4)) = SUCC (if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else tf1 (ZERO) (Tnil))
Inductive1 : tree2 = Node (nat2) (tree3) (tree4)
Case1 : lq (tf1 (nat2) (tree3)) (tf1 (nat2) (tree4)) = true
Case2 : lq (ZERO) (tf1 (nat2) (tree4)) = true
---------------------------------------
SUCC (tf1 (nat2) (tree4)) = SUCC (if true then tf1 (nat2) (tree4) else tf1 (nat2) (tree3))

4 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 10.)


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2)))) = SUCC (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1))
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : SUCC (tf1 (ZERO) (tree3)) = SUCC (if lq (ZERO) (tf1 (ZERO) (tree3)) then tf1 (ZERO) (tree3) else tf1 (ZERO) (Tnil))
IH2 : SUCC (tf1 (ZERO) (tree4)) = SUCC (if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else tf1 (ZERO) (Tnil))
Inductive1 : tree2 = Node (nat2) (tree3) (tree4)
Case1 : lq (tf1 (nat2) (tree3)) (tf1 (nat2) (tree4)) = true
Case2 : lq (ZERO) (tf1 (nat2) (tree4)) = false
---------------------------------------
SUCC (tf1 (nat2) (tree4)) = SUCC (ZERO)

3 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 0
previous tactics
simpl in goal
case lq (tf1 (nat2) (tree3)) (tf1 (nat2) (tree4))
case lq (ZERO) (tf1 (nat2) (tree4))
rewrite Case1 in goal at 0
reflexivity
validate generalize_common_subterm_goal
Prop: tf1 (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Tnil) (Tnil)) (Tnil)) = ZERO
Prop: tf1 (ZERO) (Tnil) = ZERO
Prop: tf1 (ZERO) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Node (SUCC (ZERO)) (Node (ZERO) (Tnil) (Tnil)) (Tnil))) = ZERO
Lemma List
forall (nat1:nat) (tree1:tree), lq (ZERO) (tf1 (nat1) (tree1)) = false -> tf1 (nat1) (tree1) = ZERO
End of Lemma List


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2)))) = SUCC (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1))
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : SUCC (tf1 (ZERO) (tree3)) = SUCC (if lq (ZERO) (tf1 (ZERO) (tree3)) then tf1 (ZERO) (tree3) else tf1 (ZERO) (Tnil))
IH2 : SUCC (tf1 (ZERO) (tree4)) = SUCC (if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else tf1 (ZERO) (Tnil))
Inductive1 : tree2 = Node (nat2) (tree3) (tree4)
Case1 : lq (tf1 (nat2) (tree3)) (tf1 (nat2) (tree4)) = true
Case2 : lq (ZERO) (tf1 (nat2) (tree4)) = false
---------------------------------------
SUCC (tf1 (nat2) (tree4)) = SUCC (ZERO)

3 goal(s) more...

2 conjecture(s) more...
=================================================
Progress: 919


1st goal of : forall (nat1:nat) (tree1:tree) (tree2:tree), SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2)))) = SUCC (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1))
nat1 : nat
Base1 : nat1 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
nat2 : nat
tree3 : tree
tree4 : tree
IH1 : SUCC (tf1 (ZERO) (tree3)) = SUCC (if lq (ZERO) (tf1 (ZERO) (tree3)) then tf1 (ZERO) (tree3) else tf1 (ZERO) (Tnil))
IH2 : SUCC (tf1 (ZERO) (tree4)) = SUCC (if lq (ZERO) (tf1 (ZERO) (tree4)) then tf1 (ZERO) (tree4) else tf1 (ZERO) (Tnil))
Inductive1 : tree2 = Node (nat2) (tree3) (tree4)
Case1 : lq (tf1 (nat2) (tree3)) (tf1 (nat2) (tree4)) = true
Case2 : lq (ZERO) (tf1 (nat2) (tree4)) = false
---------------------------------------
SUCC (tf1 (nat2) (tree4)) = SUCC (ZERO)

3 goal(s) more...

2 conjecture(s) more...
>>> assert forall (nat1:nat) (tree1:tree), lq (ZERO) (tf1 (nat1) (tree1)) = false -> tf1 (nat1) (tree1) = ZERO(rank : 0.)


1st goal of : forall (nat1:nat) (tree1:tree), lq (ZERO) (tf1 (nat1) (tree1)) = false -> tf1 (nat1) (tree1) = ZERO

---------------------------------------
forall (nat1:nat) (tree1:tree), lq (ZERO) (tf1 (nat1) (tree1)) = false -> tf1 (nat1) (tree1) = ZERO

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro nat1(rank:9.)
=================================================
Progress: 920


1st goal of : forall (nat1:nat) (tree1:tree), lq (ZERO) (tf1 (nat1) (tree1)) = false -> tf1 (nat1) (tree1) = ZERO

---------------------------------------
forall (nat1:nat) (tree1:tree), lq (ZERO) (tf1 (nat1) (tree1)) = false -> tf1 (nat1) (tree1) = ZERO

0 goal(s) more...

3 conjecture(s) more...
>>> intro nat1(rank : 9.)


1st goal of : forall (nat1:nat) (tree1:tree), lq (ZERO) (tf1 (nat1) (tree1)) = false -> tf1 (nat1) (tree1) = ZERO
nat1 : nat
---------------------------------------
forall (tree1:tree), lq (ZERO) (tf1 (nat1) (tree1)) = false -> tf1 (nat1) (tree1) = ZERO

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction tree1(rank:10.)
=================================================
Progress: 921


1st goal of : forall (nat1:nat) (tree1:tree), lq (ZERO) (tf1 (nat1) (tree1)) = false -> tf1 (nat1) (tree1) = ZERO
nat1 : nat
---------------------------------------
forall (tree1:tree), lq (ZERO) (tf1 (nat1) (tree1)) = false -> tf1 (nat1) (tree1) = ZERO

0 goal(s) more...

3 conjecture(s) more...
>>> induction tree1(rank : 10.)


1st goal of : forall (nat1:nat) (tree1:tree), lq (ZERO) (tf1 (nat1) (tree1)) = false -> tf1 (nat1) (tree1) = ZERO
nat1 : nat
tree1 : tree
Base1 : tree1 = Tnil
---------------------------------------
lq (ZERO) (tf1 (nat1) (Tnil)) = false -> tf1 (nat1) (Tnil) = ZERO

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:10.)
=================================================
Progress: 922


1st goal of : forall (nat1:nat) (tree1:tree), lq (ZERO) (tf1 (nat1) (tree1)) = false -> tf1 (nat1) (tree1) = ZERO
nat1 : nat
tree1 : tree
Base1 : tree1 = Tnil
---------------------------------------
lq (ZERO) (tf1 (nat1) (Tnil)) = false -> tf1 (nat1) (Tnil) = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 10.)


1st goal of : forall (nat1:nat) (tree1:tree), lq (ZERO) (tf1 (nat1) (tree1)) = false -> tf1 (nat1) (tree1) = ZERO
nat1 : nat
tree1 : tree
Base1 : tree1 = Tnil
---------------------------------------
lq (ZERO) (nat1) = false -> nat1 = ZERO

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:10.)
=================================================
Progress: 923


1st goal of : forall (nat1:nat) (tree1:tree), lq (ZERO) (tf1 (nat1) (tree1)) = false -> tf1 (nat1) (tree1) = ZERO
nat1 : nat
tree1 : tree
Base1 : tree1 = Tnil
---------------------------------------
lq (ZERO) (nat1) = false -> nat1 = ZERO

1 goal(s) more...

3 conjecture(s) more...
>>> intro Cond1(rank : 10.)


1st goal of : forall (nat1:nat) (tree1:tree), lq (ZERO) (tf1 (nat1) (tree1)) = false -> tf1 (nat1) (tree1) = ZERO
nat1 : nat
tree1 : tree
Base1 : tree1 = Tnil
Cond1 : lq (ZERO) (nat1) = false
---------------------------------------
nat1 = ZERO

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro Cond1
validate generalize_common_subterm_goal
Prop: ZERO = ZERO
Prop: SUCC (ZERO) = ZERO
Prop: ZERO = ZERO
=================================================
Progress: 924


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3))) = SUCC (plus (nat3) (tf1 (nat2) (tree3)))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH2 in goal at 2(rank : 15.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3))) = SUCC (plus (nat3) (plus (nat2) (tf1 (ZERO) (tree3))))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite IH2 in goal at 0(rank:23.)
rewrite IH2 in goal at 2(rank:23.)
rewrite <- IH2 in goal at 1(rank:23.)
=================================================
Progress: 925


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3))) = SUCC (plus (nat3) (tf1 (nat2) (tree3)))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 15.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : if lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) then tf1 (plus (nat3) (nat2)) (tree3) else tf1 (plus (nat3) (nat2)) (tree2) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (tf1 (plus (nat3) (nat2)) (tree3)) = SUCC (plus (nat3) (tf1 (nat2) (tree3)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
simpl in goal
rewrite <- IH1 in goal at 0
case lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3))
rewrite <- IH3 in goal at 0
case lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))
rewrite IH2 in goal at 1
simpl in goal
rewrite IH3 in goal at 0
rewrite <- IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: tf1 (plus (ZERO) (SUCC (ZERO))) (Tnil) = plus (ZERO) (tf1 (SUCC (ZERO)) (Tnil))
Prop: tf1 (plus (ZERO) (ZERO)) (Tnil) = plus (ZERO) (tf1 (ZERO) (Tnil))
Prop: tf1 (plus (ZERO) (ZERO)) (Tnil) = plus (ZERO) (tf1 (ZERO) (Tnil))
previous tactics
simpl in goal
rewrite IH1 in goal at 0
simpl in goal
rewrite <- IH1 in goal at 0
case lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3))
rewrite <- IH3 in goal at 0
case lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))
rewrite IH2 in goal at 1
simpl in goal
rewrite IH3 in goal at 0
validate generalize_common_subterm_goal
Prop: plus (plus (ZERO) (SUCC (SUCC (ZERO)))) (tf1 (ZERO) (Tnil)) = plus (ZERO) (tf1 (SUCC (SUCC (ZERO))) (Tnil))
Prop: plus (plus (SUCC (SUCC (ZERO))) (ZERO)) (tf1 (ZERO) (Node (SUCC (ZERO)) (Tnil) (Tnil))) = plus (SUCC (SUCC (ZERO))) (tf1 (ZERO) (Node (SUCC (ZERO)) (Tnil) (Tnil)))
Prop: plus (plus (ZERO) (ZERO)) (tf1 (ZERO) (Tnil)) = plus (ZERO) (tf1 (ZERO) (Tnil))
previous tactics
simpl in goal
rewrite IH1 in goal at 0
simpl in goal
rewrite <- IH1 in goal at 0
case lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3))
rewrite <- IH3 in goal at 0
case lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))
rewrite IH2 in goal at 1
simpl in goal
Prop: SUCC (plus (ZERO) (tf1 (ZERO) (Tnil))) = SUCC (if lq (tf1 (ZERO) (Tnil)) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (Tnil))
Prop: SUCC (plus (ZERO) (tf1 (ZERO) (Tnil))) = SUCC (if lq (tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil))) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil)))
Prop: SUCC (plus (ZERO) (tf1 (ZERO) (Tnil))) = SUCC (if lq (tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil))) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil)))
=================================================
Progress: 926


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (tf1 (ZERO) (tree3)))) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH3 in goal at 0(rank : 15.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (tf1 (ZERO) (tree3)))) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite IH2 in goal at 0(rank:7.)
=================================================
Progress: 927


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (tf1 (ZERO) (tree3)))) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (tree3))))) = SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH3 in goal at 0
case lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3))
rewrite IH3 in goal at 0
case lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))
rewrite IH2 in goal at 1
simpl in goal
rewrite IH2 in goal at 1
rewrite <- IH3 in goal at 0
rewrite IH2 in goal at 0
Prop: SUCC (plus (ZERO) (plus (ZERO) (plus (ZERO) (SUCC (ZERO))))) = SUCC (plus (ZERO) (SUCC (ZERO)))
Prop: SUCC (plus (SUCC (ZERO)) (plus (ZERO) (plus (ZERO) (ZERO)))) = SUCC (plus (SUCC (ZERO)) (ZERO))
Prop: SUCC (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO)))) = SUCC (plus (ZERO) (ZERO))
previous tactics
simpl in goal
rewrite IH1 in goal at 0
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH3 in goal at 0
case lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3))
rewrite IH3 in goal at 0
case lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))
rewrite IH2 in goal at 1
simpl in goal
rewrite IH2 in goal at 1
rewrite <- IH3 in goal at 0
Prop: SUCC (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (Tnil)))) = SUCC (tf1 (ZERO) (Tnil))
Prop: SUCC (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (Tnil)))) = SUCC (tf1 (ZERO) (Tnil))
Prop: SUCC (plus (SUCC (ZERO)) (plus (ZERO) (tf1 (ZERO) (Tnil)))) = SUCC (tf1 (SUCC (ZERO)) (Tnil))
previous tactics
simpl in goal
rewrite IH1 in goal at 0
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH3 in goal at 0
case lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3))
rewrite IH3 in goal at 0
case lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))
rewrite IH2 in goal at 1
simpl in goal
rewrite IH2 in goal at 1
validate generalize_common_subterm_goal
Prop: plus (plus (ZERO) (ZERO)) (plus (ZERO) (tf1 (ZERO) (Node (SUCC (ZERO)) (Tnil) (Tnil)))) = plus (ZERO) (if lq (tf1 (ZERO) (Tnil)) (tf1 (ZERO) (Node (SUCC (ZERO)) (Tnil) (Tnil))) then tf1 (ZERO) (Node (SUCC (ZERO)) (Tnil) (Tnil)) else tf1 (ZERO) (Tnil))
Prop: plus (plus (ZERO) (ZERO)) (plus (ZERO) (tf1 (ZERO) (Tnil))) = plus (ZERO) (if lq (tf1 (ZERO) (Tnil)) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (Tnil))
Prop: plus (plus (ZERO) (ZERO)) (plus (ZERO) (tf1 (ZERO) (Tnil))) = plus (ZERO) (if lq (tf1 (ZERO) (Tnil)) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (Tnil))
previous tactics
simpl in goal
rewrite IH1 in goal at 0
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH3 in goal at 0
case lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3))
rewrite IH3 in goal at 0
case lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))
rewrite IH2 in goal at 1
simpl in goal
validate generalize_common_subterm_goal
Prop: plus (plus (SUCC (ZERO)) (SUCC (ZERO))) (tf1 (ZERO) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil))) = plus (SUCC (ZERO)) (if lq (tf1 (SUCC (ZERO)) (Tnil)) (tf1 (SUCC (ZERO)) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil))) then tf1 (SUCC (ZERO)) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil)) else tf1 (SUCC (ZERO)) (Tnil))
Prop: plus (plus (ZERO) (ZERO)) (tf1 (ZERO) (Tnil)) = plus (ZERO) (if lq (tf1 (ZERO) (Tnil)) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (Tnil))
Prop: plus (plus (ZERO) (ZERO)) (tf1 (ZERO) (Tnil)) = plus (ZERO) (if lq (tf1 (ZERO) (Node (SUCC (ZERO)) (Node (ZERO) (Tnil) (Tnil)) (Tnil))) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (Node (SUCC (ZERO)) (Node (ZERO) (Tnil) (Tnil)) (Tnil)))
=================================================
Progress: 928


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3))) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 15.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (tf1 (ZERO) (tree3)))) = SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite IH2 in goal at 2(rank:15.)
rewrite IH2 in goal at 0(rank:23.)
=================================================
Progress: 929


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3))) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH2 in goal at 2(rank : 15.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3))) = SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite IH2 in goal at 2(rank:7.)
=================================================
Progress: 930


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3))) = SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3)))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH2 in goal at 2(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3))) = SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (tf1 (ZERO) (tree3))))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH3 in goal at 0
case lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3))
rewrite IH3 in goal at 0
case lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))
rewrite IH2 in goal at 1
simpl in goal
rewrite <- IH3 in goal at 0
rewrite IH2 in goal at 2
rewrite IH2 in goal at 2
Prop: SUCC (plus (SUCC (ZERO)) (ZERO)) = SUCC (plus (SUCC (ZERO)) (plus (ZERO) (ZERO)))
Prop: SUCC (plus (ZERO) (SUCC (ZERO))) = SUCC (plus (ZERO) (plus (ZERO) (SUCC (ZERO))))
Prop: SUCC (plus (ZERO) (ZERO)) = SUCC (plus (ZERO) (plus (ZERO) (ZERO)))
previous tactics
simpl in goal
rewrite IH1 in goal at 0
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH3 in goal at 0
case lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3))
rewrite IH3 in goal at 0
case lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))
rewrite IH2 in goal at 1
simpl in goal
rewrite <- IH3 in goal at 0
Prop: SUCC (plus (SUCC (ZERO)) (tf1 (ZERO) (Tnil))) = SUCC (tf1 (SUCC (ZERO)) (Tnil))
Prop: SUCC (plus (SUCC (SUCC (ZERO))) (tf1 (ZERO) (Tnil))) = SUCC (tf1 (SUCC (SUCC (ZERO))) (Tnil))
Prop: SUCC (plus (ZERO) (tf1 (ZERO) (Tnil))) = SUCC (tf1 (ZERO) (Tnil))
previous tactics
simpl in goal
rewrite IH1 in goal at 0
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH3 in goal at 0
case lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3))
rewrite IH3 in goal at 0
case lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))
rewrite IH2 in goal at 1
simpl in goal
validate generalize_common_subterm_goal
Prop: plus (plus (ZERO) (ZERO)) (tf1 (ZERO) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Node (SUCC (SUCC (ZERO))) (Tnil) (Tnil)))) = plus (ZERO) (if lq (tf1 (ZERO) (Tnil)) (tf1 (ZERO) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Node (SUCC (SUCC (ZERO))) (Tnil) (Tnil)))) then tf1 (ZERO) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Node (SUCC (SUCC (ZERO))) (Tnil) (Tnil))) else tf1 (ZERO) (Tnil))
Prop: plus (plus (SUCC (ZERO)) (ZERO)) (tf1 (ZERO) (Tnil)) = plus (SUCC (ZERO)) (if lq (tf1 (ZERO) (Tnil)) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (Tnil))
Prop: plus (plus (SUCC (ZERO)) (ZERO)) (tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil))) = plus (SUCC (ZERO)) (if lq (tf1 (ZERO) (Tnil)) (tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil))) then tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil)) else tf1 (ZERO) (Tnil))
Lemma List
forall (nat1:nat) (tree1:tree), SUCC (plus (nat1) (tf1 (ZERO) (tree1))) = SUCC (tf1 (nat1) (tree1))
End of Lemma List


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3))) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

2 goal(s) more...

1 conjecture(s) more...
Lemma List
forall (nat1:nat) (nat2:nat), SUCC (plus (nat1) (nat2)) = SUCC (plus (nat1) (plus (ZERO) (nat2)))
End of Lemma List


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3))) = SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (tf1 (ZERO) (tree3))))

2 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 931


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3))) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

2 goal(s) more...

1 conjecture(s) more...
>>> assert forall (nat1:nat) (tree1:tree), SUCC (plus (nat1) (tf1 (ZERO) (tree1))) = SUCC (tf1 (nat1) (tree1))(rank : 0.)


1st goal of : forall (nat1:nat) (tree1:tree), SUCC (plus (nat1) (tf1 (ZERO) (tree1))) = SUCC (tf1 (nat1) (tree1))

---------------------------------------
forall (nat1:nat) (tree1:tree), SUCC (plus (nat1) (tf1 (ZERO) (tree1))) = SUCC (tf1 (nat1) (tree1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
induction nat1(rank:16.)
induction tree1(rank:16.)
=================================================
Progress: 932


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3))) = SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (tf1 (ZERO) (tree3))))

2 goal(s) more...

1 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat), SUCC (plus (nat1) (nat2)) = SUCC (plus (nat1) (plus (ZERO) (nat2)))(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat), SUCC (plus (nat1) (nat2)) = SUCC (plus (nat1) (plus (ZERO) (nat2)))

---------------------------------------
forall (nat1:nat) (nat2:nat), SUCC (plus (nat1) (nat2)) = SUCC (plus (nat1) (plus (ZERO) (nat2)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:7.)
=================================================
Progress: 933


1st goal of : forall (nat1:nat) (nat2:nat), SUCC (plus (nat1) (nat2)) = SUCC (plus (nat1) (plus (ZERO) (nat2)))

---------------------------------------
forall (nat1:nat) (nat2:nat), SUCC (plus (nat1) (nat2)) = SUCC (plus (nat1) (plus (ZERO) (nat2)))

0 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3))) = SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (tf1 (ZERO) (tree3))))

2 goal(s) more...

1 conjecture(s) more...
original goal
forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
lemma
forall (nat1:nat) (nat2:nat), SUCC (plus (nat1) (nat2)) = SUCC (plus (nat1) (plus (ZERO) (nat2)))
tactics
assert forall (nat1:nat) (nat2:nat), SUCC (plus (nat1) (nat2)) = SUCC (plus (nat1) (plus (ZERO) (nat2)))
reflexivity
Deduplication: 0
Tactic List : 1
reflexivity(rank:6.)
=================================================
Progress: 934


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = true
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3))) = SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (tf1 (ZERO) (tree3))))

2 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree2) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 36
Tactic List : 12
case lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3))(rank:7.)
rewrite IH1 in goal at 1(rank:14.)
rewrite IH1 in goal at 2(rank:22.)
rewrite IH2 in goal at 0(rank:22.)
rewrite IH2 in goal at 1(rank:22.)
rewrite IH2 in goal at 2(rank:22.)
rewrite lemma3 in goal at 0(rank:22.)
rewrite IH1 in goal at 3(rank:22.)
rewrite lemma3 in goal at 1(rank:14.)
rewrite lemma3 in goal at 2(rank:22.)
rewrite IH1 in goal at 0(rank:22.)
rewrite <- IH3 in goal at 0(rank:14.)
=================================================
Progress: 935


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree2) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> case lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3))(rank : 7.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (tf1 (nat2) (tree3))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
Case3 : lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) = true
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree2) = SUCC (plus (nat3) (tf1 (nat2) (tree3)))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 6
rewrite <- IH3 in goal at 0(rank:15.)
rewrite IH1 in goal at 0(rank:23.)
rewrite IH2 in goal at 0(rank:23.)
rewrite lemma3 in goal at 0(rank:23.)
rewrite lemma3 in goal at 1(rank:23.)
rewrite lemma3 in goal at 2(rank:23.)
=================================================
Progress: 936


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree2) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 1(rank : 14.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
plus (SUCC (plus (nat3) (nat2))) (tf1 (ZERO) (tree2)) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:6.)
=================================================
Progress: 937


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
plus (SUCC (plus (nat3) (nat2))) (tf1 (ZERO) (tree2)) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2))) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 11
rewrite IH1 in goal at 1(rank:14.)
rewrite IH1 in goal at 2(rank:22.)
rewrite IH2 in goal at 0(rank:22.)
rewrite IH2 in goal at 1(rank:22.)
rewrite IH2 in goal at 2(rank:22.)
rewrite lemma3 in goal at 0(rank:22.)
rewrite IH1 in goal at 3(rank:22.)
rewrite <- IH3 in goal at 0(rank:14.)
rewrite lemma3 in goal at 2(rank:22.)
rewrite <- IH1 in goal at 0(rank:22.)
rewrite IH1 in goal at 0(rank:22.)
=================================================
Progress: 938


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree2) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite lemma3 in goal at 1(rank : 14.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
tf1 (SUCC (plus (nat3) (plus (ZERO) (nat2)))) (tree2) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
rewrite lemma3 in goal at 1(rank:14.)
rewrite IH1 in goal at 0(rank:22.)
rewrite IH1 in goal at 3(rank:22.)
rewrite IH2 in goal at 0(rank:22.)
rewrite IH2 in goal at 1(rank:22.)
rewrite IH2 in goal at 2(rank:22.)
rewrite IH1 in goal at 2(rank:22.)
rewrite <- IH3 in goal at 0(rank:14.)
rewrite lemma3 in goal at 0(rank:22.)
=================================================
Progress: 939


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree2) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH3 in goal at 0(rank : 14.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree2) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite IH2 in goal at 0(rank:6.)
=================================================
Progress: 940


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree2) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree2) = SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
rewrite IH1 in goal at 0(rank:14.)
rewrite IH2 in goal at 0(rank:22.)
rewrite lemma3 in goal at 0(rank:22.)
rewrite lemma3 in goal at 1(rank:22.)
=================================================
Progress: 941


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2))) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 1(rank : 14.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (tf1 (ZERO) (tree2)))) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 8
rewrite <- IH3 in goal at 0(rank:14.)
rewrite IH1 in goal at 0(rank:22.)
rewrite IH1 in goal at 3(rank:22.)
rewrite IH2 in goal at 0(rank:22.)
rewrite IH2 in goal at 1(rank:22.)
rewrite IH2 in goal at 2(rank:22.)
rewrite IH1 in goal at 2(rank:22.)
rewrite lemma3 in goal at 0(rank:22.)
=================================================
Progress: 942


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2))) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH3 in goal at 0(rank : 14.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2))) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite IH2 in goal at 0(rank:14.)
rewrite <- IH1 in goal at 0(rank:14.)
=================================================
Progress: 943


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
tf1 (SUCC (plus (nat3) (plus (ZERO) (nat2)))) (tree2) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite lemma3 in goal at 1(rank : 14.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
tf1 (SUCC (plus (nat3) (plus (ZERO) (plus (ZERO) (nat2))))) (tree2) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 10
rewrite IH1 in goal at 1(rank:14.)
rewrite IH1 in goal at 2(rank:22.)
rewrite IH2 in goal at 0(rank:22.)
rewrite IH2 in goal at 1(rank:22.)
rewrite IH2 in goal at 2(rank:22.)
rewrite lemma3 in goal at 0(rank:22.)
rewrite IH1 in goal at 3(rank:22.)
rewrite lemma3 in goal at 1(rank:14.)
rewrite <- IH3 in goal at 0(rank:14.)
rewrite IH1 in goal at 0(rank:22.)
=================================================
Progress: 944


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
tf1 (SUCC (plus (nat3) (plus (ZERO) (nat2)))) (tree2) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH3 in goal at 0(rank : 14.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
tf1 (SUCC (plus (nat3) (plus (ZERO) (nat2)))) (tree2) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:6.)
=================================================
Progress: 945


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
tf1 (SUCC (plus (nat3) (plus (ZERO) (nat2)))) (tree2) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
plus (SUCC (plus (nat3) (plus (ZERO) (nat2)))) (tf1 (ZERO) (tree2)) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite IH2 in goal at 0(rank:14.)
rewrite IH1 in goal at 0(rank:22.)
rewrite lemma3 in goal at 0(rank:22.)
=================================================
Progress: 946


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree2) = SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3)))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 14.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
plus (SUCC (plus (nat3) (nat2))) (tf1 (ZERO) (tree2)) = SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:22.)
rewrite IH2 in goal at 0(rank:22.)
rewrite lemma3 in goal at 0(rank:22.)
=================================================
Progress: 947


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (tf1 (ZERO) (tree2)))) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH3 in goal at 0(rank : 14.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (tf1 (ZERO) (tree2)))) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite IH2 in goal at 0(rank:6.)
=================================================
Progress: 948


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (tf1 (ZERO) (tree2)))) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (tf1 (ZERO) (tree2)))) = SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite IH2 in goal at 0(rank:14.)
rewrite lemma3 in goal at 0(rank:22.)
=================================================
Progress: 949


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2))) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 14.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2))) = SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite IH2 in goal at 0(rank:22.)
rewrite <- IH1 in goal at 0(rank:22.)
=================================================
Progress: 950


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree2))) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 14.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
SUCC (tf1 (plus (nat3) (nat2)) (tree2)) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH3 in goal at 0
case lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3))
rewrite IH3 in goal at 0
case lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))
rewrite IH2 in goal at 1
simpl in goal
rewrite <- IH3 in goal at 0
rewrite IH2 in goal at 2
rewrite IH2 in goal at 2
assert forall (nat1:nat) (nat2:nat), SUCC (plus (nat1) (nat2)) = SUCC (plus (nat1) (plus (ZERO) (nat2)))
reflexivity
reflexivity
rewrite IH1 in goal at 1
simpl in goal
rewrite <- IH3 in goal at 0
rewrite <- IH1 in goal at 0
Prop: SUCC (tf1 (ZERO) (Tnil)) = SUCC (tf1 (ZERO) (Tnil))
Prop: SUCC (tf1 (ZERO) (Tnil)) = SUCC (tf1 (ZERO) (Tnil))
Prop: SUCC (tf1 (SUCC (ZERO)) (Node (SUCC (SUCC (ZERO))) (Tnil) (Tnil))) = SUCC (tf1 (SUCC (ZERO)) (Tnil))
validate generalize_common_subterm_goal
Prop: SUCC (tf1 (SUCC (ZERO)) (Tnil)) = SUCC (tf1 (SUCC (ZERO)) (Tnil))
Prop: SUCC (tf1 (ZERO) (Tnil)) = SUCC (tf1 (ZERO) (Node (ZERO) (Tnil) (Node (SUCC (ZERO)) (Tnil) (Tnil))))
Prop: SUCC (tf1 (ZERO) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Tnil)))) = SUCC (tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil)))
previous tactics
simpl in goal
rewrite IH1 in goal at 0
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH3 in goal at 0
case lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3))
rewrite IH3 in goal at 0
case lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))
rewrite IH2 in goal at 1
simpl in goal
rewrite <- IH3 in goal at 0
rewrite IH2 in goal at 2
rewrite IH2 in goal at 2
assert forall (nat1:nat) (nat2:nat), SUCC (plus (nat1) (nat2)) = SUCC (plus (nat1) (plus (ZERO) (nat2)))
reflexivity
reflexivity
rewrite IH1 in goal at 1
simpl in goal
rewrite <- IH3 in goal at 0
Prop: SUCC (plus (ZERO) (tf1 (ZERO) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil)))) = SUCC (tf1 (ZERO) (Tnil))
Prop: SUCC (plus (ZERO) (tf1 (ZERO) (Tnil))) = SUCC (tf1 (ZERO) (Tnil))
Prop: SUCC (plus (SUCC (SUCC (ZERO))) (tf1 (ZERO) (Tnil))) = SUCC (tf1 (SUCC (SUCC (ZERO))) (Node (ZERO) (Tnil) (Tnil)))
previous tactics
simpl in goal
rewrite IH1 in goal at 0
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH3 in goal at 0
case lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3))
rewrite IH3 in goal at 0
case lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))
rewrite IH2 in goal at 1
simpl in goal
rewrite <- IH3 in goal at 0
rewrite IH2 in goal at 2
rewrite IH2 in goal at 2
assert forall (nat1:nat) (nat2:nat), SUCC (plus (nat1) (nat2)) = SUCC (plus (nat1) (plus (ZERO) (nat2)))
reflexivity
reflexivity
rewrite IH1 in goal at 1
simpl in goal
validate generalize_common_subterm_goal
Prop: plus (plus (ZERO) (SUCC (ZERO))) (tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil))) = plus (ZERO) (if lq (tf1 (SUCC (ZERO)) (Node (ZERO) (Tnil) (Tnil))) (tf1 (SUCC (ZERO)) (Node (ZERO) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Tnil))) (Node (ZERO) (Tnil) (Node (ZERO) (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Node (ZERO) (Node (SUCC (ZERO)) (Tnil) (Tnil)) (Tnil)) (Tnil)) (Tnil)) (Node (SUCC (ZERO)) (Node (ZERO) (Tnil) (Node (SUCC (ZERO)) (Tnil) (Tnil))) (Tnil)))))) then tf1 (SUCC (ZERO)) (Node (ZERO) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Tnil))) (Node (ZERO) (Tnil) (Node (ZERO) (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Node (ZERO) (Node (SUCC (ZERO)) (Tnil) (Tnil)) (Tnil)) (Tnil)) (Tnil)) (Node (SUCC (ZERO)) (Node (ZERO) (Tnil) (Node (SUCC (ZERO)) (Tnil) (Tnil))) (Tnil))))) else tf1 (SUCC (ZERO)) (Node (ZERO) (Tnil) (Tnil)))
Prop: plus (plus (ZERO) (ZERO)) (tf1 (ZERO) (Tnil)) = plus (ZERO) (if lq (tf1 (ZERO) (Tnil)) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (Tnil))
Prop: plus (plus (SUCC (ZERO)) (ZERO)) (tf1 (ZERO) (Tnil)) = plus (SUCC (ZERO)) (if lq (tf1 (ZERO) (Tnil)) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (Tnil))
Lemma List
forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (tf1 (nat1) (tree1)) = SUCC (tf1 (nat1) (tree2))
End of Lemma List


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
SUCC (tf1 (plus (nat3) (nat2)) (tree2)) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

1 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 951


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
SUCC (tf1 (plus (nat3) (nat2)) (tree2)) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

1 goal(s) more...

1 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (tf1 (nat1) (tree1)) = SUCC (tf1 (nat1) (tree2))(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (tf1 (nat1) (tree1)) = SUCC (tf1 (nat1) (tree2))

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (tf1 (nat1) (tree1)) = SUCC (tf1 (nat1) (tree2))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat2(rank:11.)
=================================================
Progress: 952


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (tf1 (nat1) (tree1)) = SUCC (tf1 (nat1) (tree2))

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (tf1 (nat1) (tree1)) = SUCC (tf1 (nat1) (tree2))

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat2(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (tf1 (nat1) (tree1)) = SUCC (tf1 (nat1) (tree2))
nat2 : nat
---------------------------------------
forall (nat1:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (tf1 (nat1) (tree1)) = SUCC (tf1 (nat1) (tree2))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat3(rank:11.)
=================================================
Progress: 953


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (tf1 (nat1) (tree1)) = SUCC (tf1 (nat1) (tree2))
nat2 : nat
---------------------------------------
forall (nat1:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (tf1 (nat1) (tree1)) = SUCC (tf1 (nat1) (tree2))

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat3(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (tf1 (nat1) (tree1)) = SUCC (tf1 (nat1) (tree2))
nat2 : nat
nat3 : nat
---------------------------------------
forall (nat1:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (tf1 (nat1) (tree1)) = SUCC (tf1 (nat1) (tree2))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
intro nat1(rank:11.)
intro tree2(rank:11.)
induction tree1(rank:20.)
induction tree2(rank:20.)
rewrite lemma3 in goal at 0(rank:27.)
intro tree1(rank:11.)
=================================================
Progress: 954


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (tf1 (nat1) (tree1)) = SUCC (tf1 (nat1) (tree2))
nat2 : nat
nat3 : nat
---------------------------------------
forall (nat1:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (tf1 (nat1) (tree1)) = SUCC (tf1 (nat1) (tree2))

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat1(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (tf1 (nat1) (tree1)) = SUCC (tf1 (nat1) (tree2))
nat2 : nat
nat3 : nat
nat1 : nat
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (tf1 (nat1) (tree1)) = SUCC (tf1 (nat1) (tree2))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction tree1(rank:12.)
=================================================
Progress: 955


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (tf1 (nat1) (tree1)) = SUCC (tf1 (nat1) (tree2))
nat2 : nat
nat3 : nat
---------------------------------------
forall (nat1:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (tf1 (nat1) (tree1)) = SUCC (tf1 (nat1) (tree2))

0 goal(s) more...

2 conjecture(s) more...
>>> intro tree1(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (tf1 (nat1) (tree1)) = SUCC (tf1 (nat1) (tree2))
nat2 : nat
nat3 : nat
tree1 : tree
---------------------------------------
forall (nat1:nat) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (tf1 (nat1) (tree1)) = SUCC (tf1 (nat1) (tree2))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
intro tree2(rank:11.)
induction tree2(rank:20.)
rewrite lemma3 in goal at 0(rank:27.)
=================================================
Progress: 956


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (tf1 (nat1) (tree1)) = SUCC (tf1 (nat1) (tree2))
nat2 : nat
nat3 : nat
---------------------------------------
forall (nat1:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (tf1 (nat1) (tree1)) = SUCC (tf1 (nat1) (tree2))

0 goal(s) more...

2 conjecture(s) more...
>>> intro tree2(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (tf1 (nat1) (tree1)) = SUCC (tf1 (nat1) (tree2))
nat2 : nat
nat3 : nat
tree2 : tree
---------------------------------------
forall (nat1:nat) (tree1:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (tf1 (nat1) (tree1)) = SUCC (tf1 (nat1) (tree2))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
induction tree1(rank:20.)
rewrite lemma3 in goal at 0(rank:27.)
=================================================
Progress: 957


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (tf1 (nat1) (tree1)) = SUCC (tf1 (nat1) (tree2))
nat2 : nat
nat3 : nat
tree1 : tree
---------------------------------------
forall (nat1:nat) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (tf1 (nat1) (tree1)) = SUCC (tf1 (nat1) (tree2))

0 goal(s) more...

2 conjecture(s) more...
>>> intro tree2(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (tf1 (nat1) (tree1)) = SUCC (tf1 (nat1) (tree2))
nat2 : nat
nat3 : nat
tree1 : tree
tree2 : tree
---------------------------------------
forall (nat1:nat), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (tf1 (nat1) (tree1)) = SUCC (tf1 (nat1) (tree2))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:11.)
=================================================
Progress: 958


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (tf1 (nat1) (tree1)) = SUCC (tf1 (nat1) (tree2))
nat2 : nat
nat3 : nat
tree1 : tree
tree2 : tree
---------------------------------------
forall (nat1:nat), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (tf1 (nat1) (tree1)) = SUCC (tf1 (nat1) (tree2))

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (tf1 (nat1) (tree1)) = SUCC (tf1 (nat1) (tree2))
nat2 : nat
nat3 : nat
tree1 : tree
tree2 : tree
Cond1 : lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true
---------------------------------------
forall (nat1:nat), lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (tf1 (nat1) (tree1)) = SUCC (tf1 (nat1) (tree2))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:11.)
=================================================
Progress: 959


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (tf1 (nat1) (tree1)) = SUCC (tf1 (nat1) (tree2))
nat2 : nat
nat3 : nat
tree1 : tree
tree2 : tree
Cond1 : lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true
---------------------------------------
forall (nat1:nat), lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (tf1 (nat1) (tree1)) = SUCC (tf1 (nat1) (tree2))

0 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (tf1 (nat1) (tree1)) = SUCC (tf1 (nat1) (tree2))
nat2 : nat
nat3 : nat
tree1 : tree
tree2 : tree
Cond1 : lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true
Cond2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false
---------------------------------------
forall (nat1:nat), SUCC (tf1 (nat1) (tree1)) = SUCC (tf1 (nat1) (tree2))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat1(rank:11.)
=================================================
Progress: 960


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (tf1 (nat1) (tree1)) = SUCC (tf1 (nat1) (tree2))
nat2 : nat
nat3 : nat
tree1 : tree
tree2 : tree
Cond1 : lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true
Cond2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false
---------------------------------------
forall (nat1:nat), SUCC (tf1 (nat1) (tree1)) = SUCC (tf1 (nat1) (tree2))

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat1(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (tf1 (nat1) (tree1)) = SUCC (tf1 (nat1) (tree2))
nat2 : nat
nat3 : nat
tree1 : tree
tree2 : tree
Cond1 : lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true
Cond2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false
nat1 : nat
---------------------------------------
SUCC (tf1 (nat1) (tree1)) = SUCC (tf1 (nat1) (tree2))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
validate generalize_common_subterm_goal
Prop: tf1 (ZERO) (Node (SUCC (ZERO)) (Tnil) (Tnil)) = tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil))
Prop: tf1 (ZERO) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Tnil) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Tnil)))) (Tnil)) (Tnil)) (Tnil)) = tf1 (ZERO) (Tnil)
Prop: tf1 (SUCC (SUCC (ZERO))) (Tnil) = tf1 (SUCC (SUCC (ZERO))) (Node (SUCC (ZERO)) (Tnil) (Node (ZERO) (Tnil) (Tnil)))
Prop: SUCC (tf1 (ZERO) (Node (SUCC (ZERO)) (Node (ZERO) (Tnil) (Node (SUCC (SUCC (SUCC (ZERO)))) (Tnil) (Tnil))) (Tnil))) = SUCC (tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil)))
Prop: SUCC (tf1 (ZERO) (Tnil)) = SUCC (tf1 (ZERO) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil)) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Tnil)))))
Prop: SUCC (tf1 (ZERO) (Tnil)) = SUCC (tf1 (ZERO) (Tnil))
asdf
=================================================
Progress: 961


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (tf1 (nat1) (tree1)) = SUCC (tf1 (nat1) (tree2))
nat2 : nat
nat3 : nat
nat1 : nat
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (tf1 (nat1) (tree1)) = SUCC (tf1 (nat1) (tree2))

0 goal(s) more...

2 conjecture(s) more...
>>> induction tree1(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (tf1 (nat1) (tree1)) = SUCC (tf1 (nat1) (tree2))
nat2 : nat
nat3 : nat
nat1 : nat
tree1 : tree
Base1 : tree1 = Tnil
---------------------------------------
forall (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (Tnil)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (Tnil))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (tf1 (nat1) (Tnil)) = SUCC (tf1 (nat1) (tree2))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:12.)
=================================================
Progress: 962


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (tf1 (nat1) (tree1)) = SUCC (tf1 (nat1) (tree2))
nat2 : nat
nat3 : nat
nat1 : nat
tree1 : tree
Base1 : tree1 = Tnil
---------------------------------------
forall (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (Tnil)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (Tnil))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (tf1 (nat1) (Tnil)) = SUCC (tf1 (nat1) (tree2))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (tf1 (nat1) (tree1)) = SUCC (tf1 (nat1) (tree2))
nat2 : nat
nat3 : nat
nat1 : nat
tree1 : tree
Base1 : tree1 = Tnil
---------------------------------------
forall (tree2:tree), lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (nat1) = SUCC (tf1 (nat1) (tree2))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction tree2(rank:13.)
=================================================
Progress: 963


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (tf1 (nat1) (tree1)) = SUCC (tf1 (nat1) (tree2))
nat2 : nat
nat3 : nat
nat1 : nat
tree1 : tree
Base1 : tree1 = Tnil
---------------------------------------
forall (tree2:tree), lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (nat1) = SUCC (tf1 (nat1) (tree2))

1 goal(s) more...

2 conjecture(s) more...
>>> induction tree2(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (tf1 (nat1) (tree1)) = SUCC (tf1 (nat1) (tree2))
nat2 : nat
nat3 : nat
nat1 : nat
tree1 : tree
Base1 : tree1 = Tnil
tree2 : tree
Base2 : tree2 = Tnil
---------------------------------------
lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (Tnil)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (Tnil)) = false -> SUCC (nat1) = SUCC (tf1 (nat1) (Tnil))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12.)
=================================================
Progress: 964


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (tf1 (nat1) (tree1)) = SUCC (tf1 (nat1) (tree2))
nat2 : nat
nat3 : nat
nat1 : nat
tree1 : tree
Base1 : tree1 = Tnil
tree2 : tree
Base2 : tree2 = Tnil
---------------------------------------
lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (Tnil)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (Tnil)) = false -> SUCC (nat1) = SUCC (tf1 (nat1) (Tnil))

2 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (tf1 (nat1) (tree1)) = SUCC (tf1 (nat1) (tree2))
nat2 : nat
nat3 : nat
nat1 : nat
tree1 : tree
Base1 : tree1 = Tnil
tree2 : tree
nat4 : nat
tree3 : tree
tree4 : tree
IH1 : lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false -> SUCC (nat1) = SUCC (tf1 (nat1) (tree3))
IH2 : lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (tree4)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree4)) = false -> SUCC (nat1) = SUCC (tf1 (nat1) (tree4))
Inductive1 : tree2 = Node (nat4) (tree3) (tree4)
---------------------------------------
lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (Node (nat4) (tree3) (tree4))) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (Node (nat4) (tree3) (tree4))) = false -> SUCC (nat1) = SUCC (tf1 (nat1) (Node (nat4) (tree3) (tree4)))

1 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:12.)
=================================================
Progress: 965


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (tf1 (nat1) (tree1)) = SUCC (tf1 (nat1) (tree2))
nat2 : nat
nat3 : nat
nat1 : nat
tree1 : tree
Base1 : tree1 = Tnil
tree2 : tree
nat4 : nat
tree3 : tree
tree4 : tree
IH1 : lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false -> SUCC (nat1) = SUCC (tf1 (nat1) (tree3))
IH2 : lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (tree4)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree4)) = false -> SUCC (nat1) = SUCC (tf1 (nat1) (tree4))
Inductive1 : tree2 = Node (nat4) (tree3) (tree4)
---------------------------------------
lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (Node (nat4) (tree3) (tree4))) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (Node (nat4) (tree3) (tree4))) = false -> SUCC (nat1) = SUCC (tf1 (nat1) (Node (nat4) (tree3) (tree4)))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (tf1 (nat1) (tree1)) = SUCC (tf1 (nat1) (tree2))
nat2 : nat
nat3 : nat
nat1 : nat
tree1 : tree
Base1 : tree1 = Tnil
tree2 : tree
nat4 : nat
tree3 : tree
tree4 : tree
IH1 : lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false -> SUCC (nat1) = SUCC (tf1 (nat1) (tree3))
IH2 : lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (tree4)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree4)) = false -> SUCC (nat1) = SUCC (tf1 (nat1) (tree4))
Inductive1 : tree2 = Node (nat4) (tree3) (tree4)
---------------------------------------
lq (plus (nat3) (nat2)) (if lq (tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree3)) (tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree4)) then tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree4) else tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree3)) = true->lq (SUCC (plus (nat3) (nat2))) (if lq (tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree3)) (tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree4)) then tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree4) else tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree3)) = false -> SUCC (nat1) = SUCC (if lq (tf1 (plus (nat1) (nat4)) (tree3)) (tf1 (plus (nat1) (nat4)) (tree4)) then tf1 (plus (nat1) (nat4)) (tree4) else tf1 (plus (nat1) (nat4)) (tree3))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:12.)
=================================================
Progress: 966


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (tf1 (nat1) (tree1)) = SUCC (tf1 (nat1) (tree2))
nat2 : nat
nat3 : nat
nat1 : nat
tree1 : tree
Base1 : tree1 = Tnil
tree2 : tree
nat4 : nat
tree3 : tree
tree4 : tree
IH1 : lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false -> SUCC (nat1) = SUCC (tf1 (nat1) (tree3))
IH2 : lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (tree4)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree4)) = false -> SUCC (nat1) = SUCC (tf1 (nat1) (tree4))
Inductive1 : tree2 = Node (nat4) (tree3) (tree4)
---------------------------------------
lq (plus (nat3) (nat2)) (if lq (tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree3)) (tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree4)) then tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree4) else tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree3)) = true->lq (SUCC (plus (nat3) (nat2))) (if lq (tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree3)) (tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree4)) then tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree4) else tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree3)) = false -> SUCC (nat1) = SUCC (if lq (tf1 (plus (nat1) (nat4)) (tree3)) (tf1 (plus (nat1) (nat4)) (tree4)) then tf1 (plus (nat1) (nat4)) (tree4) else tf1 (plus (nat1) (nat4)) (tree3))

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (tf1 (nat1) (tree1)) = SUCC (tf1 (nat1) (tree2))
nat2 : nat
nat3 : nat
nat1 : nat
tree1 : tree
Base1 : tree1 = Tnil
tree2 : tree
nat4 : nat
tree3 : tree
tree4 : tree
IH1 : lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false -> SUCC (nat1) = SUCC (tf1 (nat1) (tree3))
IH2 : lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (tree4)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree4)) = false -> SUCC (nat1) = SUCC (tf1 (nat1) (tree4))
Inductive1 : tree2 = Node (nat4) (tree3) (tree4)
Cond1 : lq (plus (nat3) (nat2)) (if lq (tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree3)) (tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree4)) then tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree4) else tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree3)) = true
---------------------------------------
lq (SUCC (plus (nat3) (nat2))) (if lq (tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree3)) (tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree4)) then tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree4) else tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree3)) = false -> SUCC (nat1) = SUCC (if lq (tf1 (plus (nat1) (nat4)) (tree3)) (tf1 (plus (nat1) (nat4)) (tree4)) then tf1 (plus (nat1) (nat4)) (tree4) else tf1 (plus (nat1) (nat4)) (tree3))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:12.)
=================================================
Progress: 967


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (tf1 (nat1) (tree1)) = SUCC (tf1 (nat1) (tree2))
nat2 : nat
nat3 : nat
nat1 : nat
tree1 : tree
Base1 : tree1 = Tnil
tree2 : tree
nat4 : nat
tree3 : tree
tree4 : tree
IH1 : lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false -> SUCC (nat1) = SUCC (tf1 (nat1) (tree3))
IH2 : lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (tree4)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree4)) = false -> SUCC (nat1) = SUCC (tf1 (nat1) (tree4))
Inductive1 : tree2 = Node (nat4) (tree3) (tree4)
Cond1 : lq (plus (nat3) (nat2)) (if lq (tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree3)) (tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree4)) then tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree4) else tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree3)) = true
---------------------------------------
lq (SUCC (plus (nat3) (nat2))) (if lq (tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree3)) (tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree4)) then tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree4) else tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree3)) = false -> SUCC (nat1) = SUCC (if lq (tf1 (plus (nat1) (nat4)) (tree3)) (tf1 (plus (nat1) (nat4)) (tree4)) then tf1 (plus (nat1) (nat4)) (tree4) else tf1 (plus (nat1) (nat4)) (tree3))

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (tf1 (nat1) (tree1)) = SUCC (tf1 (nat1) (tree2))
nat2 : nat
nat3 : nat
nat1 : nat
tree1 : tree
Base1 : tree1 = Tnil
tree2 : tree
nat4 : nat
tree3 : tree
tree4 : tree
IH1 : lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false -> SUCC (nat1) = SUCC (tf1 (nat1) (tree3))
IH2 : lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (tree4)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree4)) = false -> SUCC (nat1) = SUCC (tf1 (nat1) (tree4))
Inductive1 : tree2 = Node (nat4) (tree3) (tree4)
Cond1 : lq (plus (nat3) (nat2)) (if lq (tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree3)) (tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree4)) then tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree4) else tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree3)) = true
Cond2 : lq (SUCC (plus (nat3) (nat2))) (if lq (tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree3)) (tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree4)) then tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree4) else tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree3)) = false
---------------------------------------
SUCC (nat1) = SUCC (if lq (tf1 (plus (nat1) (nat4)) (tree3)) (tf1 (plus (nat1) (nat4)) (tree4)) then tf1 (plus (nat1) (nat4)) (tree4) else tf1 (plus (nat1) (nat4)) (tree3))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
case lq (tf1 (plus (nat1) (nat4)) (tree3)) (tf1 (plus (nat1) (nat4)) (tree4))(rank:13.)
rewrite IH1 in goal at 0(rank:22.)
rewrite IH2 in goal at 0(rank:22.)
=================================================
Progress: 968


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (tf1 (nat1) (tree1)) = SUCC (tf1 (nat1) (tree2))
nat2 : nat
nat3 : nat
nat1 : nat
tree1 : tree
Base1 : tree1 = Tnil
tree2 : tree
nat4 : nat
tree3 : tree
tree4 : tree
IH1 : lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false -> SUCC (nat1) = SUCC (tf1 (nat1) (tree3))
IH2 : lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (tree4)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree4)) = false -> SUCC (nat1) = SUCC (tf1 (nat1) (tree4))
Inductive1 : tree2 = Node (nat4) (tree3) (tree4)
Cond1 : lq (plus (nat3) (nat2)) (if lq (tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree3)) (tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree4)) then tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree4) else tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree3)) = true
Cond2 : lq (SUCC (plus (nat3) (nat2))) (if lq (tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree3)) (tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree4)) then tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree4) else tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree3)) = false
---------------------------------------
SUCC (nat1) = SUCC (if lq (tf1 (plus (nat1) (nat4)) (tree3)) (tf1 (plus (nat1) (nat4)) (tree4)) then tf1 (plus (nat1) (nat4)) (tree4) else tf1 (plus (nat1) (nat4)) (tree3))

1 goal(s) more...

2 conjecture(s) more...
>>> case lq (tf1 (plus (nat1) (nat4)) (tree3)) (tf1 (plus (nat1) (nat4)) (tree4))(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (tf1 (nat1) (tree1)) = SUCC (tf1 (nat1) (tree2))
nat2 : nat
nat3 : nat
nat1 : nat
tree1 : tree
Base1 : tree1 = Tnil
tree2 : tree
nat4 : nat
tree3 : tree
tree4 : tree
IH1 : lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false -> SUCC (nat1) = SUCC (tf1 (nat1) (tree3))
IH2 : lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (tree4)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree4)) = false -> SUCC (nat1) = SUCC (tf1 (nat1) (tree4))
Inductive1 : tree2 = Node (nat4) (tree3) (tree4)
Cond1 : lq (plus (nat3) (nat2)) (if lq (tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree3)) (tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree4)) then tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree4) else tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree3)) = true
Cond2 : lq (SUCC (plus (nat3) (nat2))) (if lq (tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree3)) (tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree4)) then tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree4) else tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree3)) = false
Case1 : lq (tf1 (plus (nat1) (nat4)) (tree3)) (tf1 (plus (nat1) (nat4)) (tree4)) = true
---------------------------------------
SUCC (nat1) = SUCC (tf1 (plus (nat1) (nat4)) (tree4))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:23.)
rewrite IH2 in goal at 0(rank:23.)
=================================================
Progress: 969


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
tf1 (SUCC (plus (nat3) (plus (ZERO) (plus (ZERO) (nat2))))) (tree2) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 1(rank : 14.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
plus (SUCC (plus (nat3) (plus (ZERO) (plus (ZERO) (nat2))))) (tf1 (ZERO) (tree2)) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 10
rewrite IH1 in goal at 1(rank:14.)
rewrite IH1 in goal at 2(rank:22.)
rewrite IH2 in goal at 0(rank:22.)
rewrite IH2 in goal at 1(rank:22.)
rewrite IH2 in goal at 2(rank:22.)
rewrite lemma3 in goal at 0(rank:22.)
rewrite IH1 in goal at 3(rank:22.)
rewrite lemma3 in goal at 1(rank:14.)
rewrite lemma3 in goal at 2(rank:22.)
rewrite IH1 in goal at 0(rank:22.)
=================================================
Progress: 970


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
tf1 (SUCC (plus (nat3) (plus (ZERO) (plus (ZERO) (nat2))))) (tree2) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite lemma3 in goal at 1(rank : 14.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
tf1 (SUCC (plus (nat3) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat2)))))) (tree2) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
rewrite <- IH3 in goal at 0(rank:14.)
rewrite IH1 in goal at 0(rank:22.)
rewrite IH1 in goal at 3(rank:22.)
rewrite IH2 in goal at 1(rank:22.)
rewrite IH2 in goal at 2(rank:22.)
rewrite lemma3 in goal at 0(rank:22.)
rewrite lemma3 in goal at 1(rank:22.)
rewrite IH2 in goal at 0(rank:22.)
rewrite IH1 in goal at 2(rank:22.)
=================================================
Progress: 971


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
tf1 (SUCC (plus (nat3) (plus (ZERO) (plus (ZERO) (nat2))))) (tree2) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH3 in goal at 0(rank : 14.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
tf1 (SUCC (plus (nat3) (plus (ZERO) (plus (ZERO) (nat2))))) (tree2) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite IH2 in goal at 0(rank:6.)
=================================================
Progress: 972


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
tf1 (SUCC (plus (nat3) (plus (ZERO) (plus (ZERO) (nat2))))) (tree2) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
tf1 (SUCC (plus (nat3) (plus (ZERO) (plus (ZERO) (nat2))))) (tree2) = SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
rewrite IH2 in goal at 0(rank:14.)
rewrite IH1 in goal at 0(rank:22.)
rewrite lemma3 in goal at 0(rank:22.)
rewrite lemma3 in goal at 1(rank:22.)
=================================================
Progress: 973


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
plus (SUCC (plus (nat3) (plus (ZERO) (nat2)))) (tf1 (ZERO) (tree2)) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 14.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
plus (SUCC (plus (nat3) (plus (ZERO) (nat2)))) (tf1 (ZERO) (tree2)) = SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:22.)
rewrite lemma3 in goal at 0(rank:22.)
=================================================
Progress: 974


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (tf1 (ZERO) (tree2)))) = SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3)))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 14.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (tf1 (ZERO) (tree2)))) = SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (tf1 (ZERO) (tree3))))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH3 in goal at 0
case lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3))
rewrite IH3 in goal at 0
case lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))
rewrite IH2 in goal at 1
simpl in goal
rewrite <- IH3 in goal at 0
rewrite IH2 in goal at 2
rewrite IH2 in goal at 2
assert forall (nat1:nat) (nat2:nat), SUCC (plus (nat1) (nat2)) = SUCC (plus (nat1) (plus (ZERO) (nat2)))
reflexivity
reflexivity
rewrite IH1 in goal at 1
simpl in goal
rewrite IH1 in goal at 1
rewrite <- IH3 in goal at 0
rewrite IH2 in goal at 0
rewrite IH2 in goal at 0
Prop: SUCC (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (Tnil)))) = SUCC (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (Node (SUCC (ZERO)) (Tnil) (Node (ZERO) (Node (SUCC (ZERO)) (Node (ZERO) (Node (SUCC (ZERO)) (Tnil) (Tnil)) (Tnil)) (Tnil)) (Node (SUCC (ZERO)) (Tnil) (Tnil)))))))
Prop: SUCC (plus (SUCC (SUCC (SUCC (SUCC (ZERO))))) (plus (ZERO) (tf1 (ZERO) (Tnil)))) = SUCC (plus (SUCC (SUCC (SUCC (SUCC (ZERO))))) (plus (ZERO) (tf1 (ZERO) (Tnil))))
Prop: SUCC (plus (SUCC (ZERO)) (plus (ZERO) (tf1 (ZERO) (Tnil)))) = SUCC (plus (SUCC (ZERO)) (plus (ZERO) (tf1 (ZERO) (Tnil))))
validate generalize_common_subterm_goal
Prop: SUCC (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (Tnil)))) = SUCC (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil)))))))
Prop: SUCC (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (Tnil)))) = SUCC (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (Tnil))))
Prop: SUCC (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Tnil)))))) = SUCC (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (Tnil))))
previous tactics
simpl in goal
rewrite IH1 in goal at 0
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH3 in goal at 0
case lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3))
rewrite IH3 in goal at 0
case lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))
rewrite IH2 in goal at 1
simpl in goal
rewrite <- IH3 in goal at 0
rewrite IH2 in goal at 2
rewrite IH2 in goal at 2
assert forall (nat1:nat) (nat2:nat), SUCC (plus (nat1) (nat2)) = SUCC (plus (nat1) (plus (ZERO) (nat2)))
reflexivity
reflexivity
rewrite IH1 in goal at 1
simpl in goal
rewrite IH1 in goal at 1
rewrite <- IH3 in goal at 0
rewrite IH2 in goal at 0
Prop: SUCC (plus (SUCC (ZERO)) (plus (ZERO) (tf1 (ZERO) (Tnil)))) = SUCC (plus (SUCC (ZERO)) (tf1 (ZERO) (Tnil)))
Prop: SUCC (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (Tnil)))) = SUCC (plus (ZERO) (tf1 (ZERO) (Tnil)))
Prop: SUCC (plus (SUCC (SUCC (ZERO))) (plus (ZERO) (tf1 (ZERO) (Tnil)))) = SUCC (plus (SUCC (SUCC (ZERO))) (tf1 (ZERO) (Tnil)))
previous tactics
simpl in goal
rewrite IH1 in goal at 0
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH3 in goal at 0
case lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3))
rewrite IH3 in goal at 0
case lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))
rewrite IH2 in goal at 1
simpl in goal
rewrite <- IH3 in goal at 0
rewrite IH2 in goal at 2
rewrite IH2 in goal at 2
assert forall (nat1:nat) (nat2:nat), SUCC (plus (nat1) (nat2)) = SUCC (plus (nat1) (plus (ZERO) (nat2)))
reflexivity
reflexivity
rewrite IH1 in goal at 1
simpl in goal
rewrite IH1 in goal at 1
rewrite <- IH3 in goal at 0
Prop: SUCC (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Tnil) (Tnil)) (Tnil)) (Tnil))))) = SUCC (tf1 (ZERO) (Tnil))
Prop: SUCC (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil))))) = SUCC (tf1 (ZERO) (Tnil))
Prop: SUCC (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (Node (ZERO) (Tnil) (Node (SUCC (ZERO)) (Tnil) (Tnil)))))) = SUCC (tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil)))
validate generalize_common_subterm_goal
Prop: SUCC (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil))))) = SUCC (tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil)))
Prop: SUCC (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (Tnil)))) = SUCC (tf1 (ZERO) (Tnil))
Prop: SUCC (plus (ZERO) (plus (ZERO) (tf1 (ZERO) (Tnil)))) = SUCC (tf1 (ZERO) (Node (ZERO) (Tnil) (Node (ZERO) (Node (SUCC (ZERO)) (Tnil) (Tnil)) (Tnil))))
previous tactics
simpl in goal
rewrite IH1 in goal at 0
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH3 in goal at 0
case lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3))
rewrite IH3 in goal at 0
case lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))
rewrite IH2 in goal at 1
simpl in goal
rewrite <- IH3 in goal at 0
rewrite IH2 in goal at 2
rewrite IH2 in goal at 2
assert forall (nat1:nat) (nat2:nat), SUCC (plus (nat1) (nat2)) = SUCC (plus (nat1) (plus (ZERO) (nat2)))
reflexivity
reflexivity
rewrite IH1 in goal at 1
simpl in goal
rewrite IH1 in goal at 1
validate generalize_common_subterm_goal
Prop: plus (plus (ZERO) (ZERO)) (plus (ZERO) (tf1 (ZERO) (Tnil))) = plus (ZERO) (if lq (tf1 (ZERO) (Tnil)) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (Tnil))
Prop: plus (plus (ZERO) (SUCC (SUCC (SUCC (ZERO))))) (plus (ZERO) (tf1 (ZERO) (Tnil))) = plus (ZERO) (if lq (tf1 (SUCC (SUCC (SUCC (ZERO)))) (Tnil)) (tf1 (SUCC (SUCC (SUCC (ZERO)))) (Tnil)) then tf1 (SUCC (SUCC (SUCC (ZERO)))) (Tnil) else tf1 (SUCC (SUCC (SUCC (ZERO)))) (Tnil))
Prop: plus (plus (ZERO) (ZERO)) (plus (ZERO) (tf1 (ZERO) (Tnil))) = plus (ZERO) (if lq (tf1 (ZERO) (Tnil)) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (Tnil))
previous tactics
simpl in goal
rewrite IH1 in goal at 0
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH3 in goal at 0
case lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3))
rewrite IH3 in goal at 0
case lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))
rewrite IH2 in goal at 1
simpl in goal
rewrite <- IH3 in goal at 0
rewrite IH2 in goal at 2
rewrite IH2 in goal at 2
assert forall (nat1:nat) (nat2:nat), SUCC (plus (nat1) (nat2)) = SUCC (plus (nat1) (plus (ZERO) (nat2)))
reflexivity
reflexivity
rewrite IH1 in goal at 1
simpl in goal
validate generalize_common_subterm_goal
Prop: plus (plus (ZERO) (ZERO)) (tf1 (ZERO) (Tnil)) = plus (ZERO) (if lq (tf1 (ZERO) (Tnil)) (tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil))) then tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil)) else tf1 (ZERO) (Tnil))
Prop: plus (plus (ZERO) (ZERO)) (tf1 (ZERO) (Tnil)) = plus (ZERO) (if lq (tf1 (ZERO) (Tnil)) (tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil))) then tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil)) else tf1 (ZERO) (Tnil))
Prop: plus (plus (ZERO) (ZERO)) (tf1 (ZERO) (Tnil)) = plus (ZERO) (if lq (tf1 (ZERO) (Tnil)) (tf1 (ZERO) (Node (ZERO) (Tnil) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Node (ZERO) (Tnil) (Tnil))) (Tnil)) (Tnil)))) then tf1 (ZERO) (Node (ZERO) (Tnil) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Node (ZERO) (Tnil) (Tnil))) (Tnil)) (Tnil))) else tf1 (ZERO) (Tnil))
Lemma List
forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (tf1 (nat1) (tree2))
End of Lemma List


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (tf1 (ZERO) (tree2)))) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

1 goal(s) more...

1 conjecture(s) more...
Lemma List
forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2))))
End of Lemma List


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (tf1 (ZERO) (tree2)))) = SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (tf1 (ZERO) (tree3))))

1 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 975


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (tf1 (ZERO) (tree2)))) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

1 goal(s) more...

1 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (tf1 (nat1) (tree2))(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (tf1 (nat1) (tree2))

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (tf1 (nat1) (tree2))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 976


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (tf1 (ZERO) (tree2)))) = SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (tf1 (ZERO) (tree3))))

1 goal(s) more...

1 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2))))(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2))))

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2))))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 977


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (tf1 (nat1) (tree2))

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (tf1 (nat1) (tree2))

0 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (tf1 (nat1) (tree2))

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (tf1 (ZERO) (tree1))) = SUCC (tf1 (nat1) (tree2))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat2(rank:11.)
=================================================
Progress: 978


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2))))

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2))))

0 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2))))

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (tf1 (ZERO) (tree1))) = SUCC (plus (nat1) (tf1 (ZERO) (tree2)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat2(rank:11.)
=================================================
Progress: 979


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (tf1 (nat1) (tree2))

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (tf1 (ZERO) (tree1))) = SUCC (tf1 (nat1) (tree2))

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat2(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (tf1 (nat1) (tree2))
nat2 : nat
---------------------------------------
forall (nat1:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (tf1 (ZERO) (tree1))) = SUCC (tf1 (nat1) (tree2))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat3(rank:11.)
=================================================
Progress: 980


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2))))

---------------------------------------
forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (tf1 (ZERO) (tree1))) = SUCC (plus (nat1) (tf1 (ZERO) (tree2)))

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat2(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat2 : nat
---------------------------------------
forall (nat1:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (tf1 (ZERO) (tree1))) = SUCC (plus (nat1) (tf1 (ZERO) (tree2)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat3(rank:11.)
=================================================
Progress: 981


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (tf1 (nat1) (tree2))
nat2 : nat
---------------------------------------
forall (nat1:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (tf1 (ZERO) (tree1))) = SUCC (tf1 (nat1) (tree2))

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat3(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (tf1 (nat1) (tree2))
nat2 : nat
nat3 : nat
---------------------------------------
forall (nat1:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (tf1 (ZERO) (tree1))) = SUCC (tf1 (nat1) (tree2))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction tree1(rank:12.)
=================================================
Progress: 982


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat2 : nat
---------------------------------------
forall (nat1:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (tf1 (ZERO) (tree1))) = SUCC (plus (nat1) (tf1 (ZERO) (tree2)))

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat3(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat2 : nat
nat3 : nat
---------------------------------------
forall (nat1:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (tf1 (ZERO) (tree1))) = SUCC (plus (nat1) (tf1 (ZERO) (tree2)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction tree1(rank:12.)
=================================================
Progress: 983


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (tf1 (nat1) (tree2))
nat2 : nat
nat3 : nat
---------------------------------------
forall (nat1:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (tf1 (ZERO) (tree1))) = SUCC (tf1 (nat1) (tree2))

0 goal(s) more...

2 conjecture(s) more...
>>> induction tree1(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (tf1 (nat1) (tree2))
nat2 : nat
nat3 : nat
tree1 : tree
Base1 : tree1 = Tnil
---------------------------------------
forall (nat1:nat) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (Tnil)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (Tnil))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (tf1 (ZERO) (Tnil))) = SUCC (tf1 (nat1) (tree2))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:12.)
=================================================
Progress: 984


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat2 : nat
nat3 : nat
---------------------------------------
forall (nat1:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (tf1 (ZERO) (tree1))) = SUCC (plus (nat1) (tf1 (ZERO) (tree2)))

0 goal(s) more...

2 conjecture(s) more...
>>> induction tree1(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat2 : nat
nat3 : nat
tree1 : tree
Base1 : tree1 = Tnil
---------------------------------------
forall (nat1:nat) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (Tnil)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (Tnil))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (tf1 (ZERO) (Tnil))) = SUCC (plus (nat1) (tf1 (ZERO) (tree2)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:12.)
=================================================
Progress: 985


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (tf1 (nat1) (tree2))
nat2 : nat
nat3 : nat
tree1 : tree
Base1 : tree1 = Tnil
---------------------------------------
forall (nat1:nat) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (Tnil)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (Tnil))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (tf1 (ZERO) (Tnil))) = SUCC (tf1 (nat1) (tree2))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (tf1 (nat1) (tree2))
nat2 : nat
nat3 : nat
tree1 : tree
Base1 : tree1 = Tnil
---------------------------------------
forall (nat1:nat) (tree2:tree), lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (tf1 (nat1) (tree2))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction tree2(rank:13.)
=================================================
Progress: 986


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat2 : nat
nat3 : nat
tree1 : tree
Base1 : tree1 = Tnil
---------------------------------------
forall (nat1:nat) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (Tnil)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (Tnil))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (tf1 (ZERO) (Tnil))) = SUCC (plus (nat1) (tf1 (ZERO) (tree2)))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat2 : nat
nat3 : nat
tree1 : tree
Base1 : tree1 = Tnil
---------------------------------------
forall (nat1:nat) (tree2:tree), lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree2)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction tree2(rank:13.)
=================================================
Progress: 987


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (tf1 (nat1) (tree2))
nat2 : nat
nat3 : nat
tree1 : tree
Base1 : tree1 = Tnil
---------------------------------------
forall (nat1:nat) (tree2:tree), lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (tf1 (nat1) (tree2))

1 goal(s) more...

2 conjecture(s) more...
>>> induction tree2(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (tf1 (nat1) (tree2))
nat2 : nat
nat3 : nat
tree1 : tree
Base1 : tree1 = Tnil
tree2 : tree
Base2 : tree2 = Tnil
---------------------------------------
forall (nat1:nat), lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (Tnil)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (Tnil)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (tf1 (nat1) (Tnil))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 988


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat2 : nat
nat3 : nat
tree1 : tree
Base1 : tree1 = Tnil
---------------------------------------
forall (nat1:nat) (tree2:tree), lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree2)))

1 goal(s) more...

2 conjecture(s) more...
>>> induction tree2(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat2 : nat
nat3 : nat
tree1 : tree
Base1 : tree1 = Tnil
tree2 : tree
Base2 : tree2 = Tnil
---------------------------------------
forall (nat1:nat), lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (Tnil)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (Tnil)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (Tnil)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:12.)
=================================================
Progress: 989


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat2 : nat
nat3 : nat
tree1 : tree
Base1 : tree1 = Tnil
tree2 : tree
Base2 : tree2 = Tnil
---------------------------------------
forall (nat1:nat), lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (Tnil)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (Tnil)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (Tnil)))

2 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat2 : nat
nat3 : nat
tree1 : tree
Base1 : tree1 = Tnil
tree2 : tree
nat4 : nat
tree3 : tree
tree4 : tree
IH1 : forall (nat1:nat), lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree3)))
IH2 : forall (nat1:nat), lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (tree4)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree4)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree4)))
Inductive1 : tree2 = Node (nat4) (tree3) (tree4)
---------------------------------------
forall (nat1:nat), lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (Node (nat4) (tree3) (tree4))) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (Node (nat4) (tree3) (tree4))) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (Node (nat4) (tree3) (tree4))))

1 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:12.)
=================================================
Progress: 990


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat2 : nat
nat3 : nat
tree1 : tree
Base1 : tree1 = Tnil
tree2 : tree
nat4 : nat
tree3 : tree
tree4 : tree
IH1 : forall (nat1:nat), lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree3)))
IH2 : forall (nat1:nat), lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (tree4)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree4)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree4)))
Inductive1 : tree2 = Node (nat4) (tree3) (tree4)
---------------------------------------
forall (nat1:nat), lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (Node (nat4) (tree3) (tree4))) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (Node (nat4) (tree3) (tree4))) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (Node (nat4) (tree3) (tree4))))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat2 : nat
nat3 : nat
tree1 : tree
Base1 : tree1 = Tnil
tree2 : tree
nat4 : nat
tree3 : tree
tree4 : tree
IH1 : forall (nat1:nat), lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree3)))
IH2 : forall (nat1:nat), lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (tree4)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree4)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree4)))
Inductive1 : tree2 = Node (nat4) (tree3) (tree4)
---------------------------------------
forall (nat1:nat), lq (plus (nat3) (nat2)) (if lq (tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree3)) (tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree4)) then tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree4) else tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree3)) = true->lq (SUCC (plus (nat3) (nat2))) (if lq (tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree3)) (tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree4)) then tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree4) else tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree3)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (if lq (tf1 (nat4) (tree3)) (tf1 (nat4) (tree4)) then tf1 (nat4) (tree4) else tf1 (nat4) (tree3)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:12.)
=================================================
Progress: 991


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat2 : nat
nat3 : nat
tree1 : tree
Base1 : tree1 = Tnil
tree2 : tree
nat4 : nat
tree3 : tree
tree4 : tree
IH1 : forall (nat1:nat), lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree3)))
IH2 : forall (nat1:nat), lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (tree4)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree4)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree4)))
Inductive1 : tree2 = Node (nat4) (tree3) (tree4)
---------------------------------------
forall (nat1:nat), lq (plus (nat3) (nat2)) (if lq (tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree3)) (tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree4)) then tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree4) else tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree3)) = true->lq (SUCC (plus (nat3) (nat2))) (if lq (tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree3)) (tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree4)) then tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree4) else tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree3)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (if lq (tf1 (nat4) (tree3)) (tf1 (nat4) (tree4)) then tf1 (nat4) (tree4) else tf1 (nat4) (tree3)))

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat2 : nat
nat3 : nat
tree1 : tree
Base1 : tree1 = Tnil
tree2 : tree
nat4 : nat
tree3 : tree
tree4 : tree
IH1 : forall (nat1:nat), lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree3)))
IH2 : forall (nat1:nat), lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (tree4)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree4)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree4)))
Inductive1 : tree2 = Node (nat4) (tree3) (tree4)
Cond1 : lq (plus (nat3) (nat2)) (if lq (tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree3)) (tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree4)) then tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree4) else tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree3)) = true
---------------------------------------
forall (nat1:nat), lq (SUCC (plus (nat3) (nat2))) (if lq (tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree3)) (tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree4)) then tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree4) else tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree3)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (if lq (tf1 (nat4) (tree3)) (tf1 (nat4) (tree4)) then tf1 (nat4) (tree4) else tf1 (nat4) (tree3)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:12.)
=================================================
Progress: 992


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat2 : nat
nat3 : nat
tree1 : tree
Base1 : tree1 = Tnil
tree2 : tree
nat4 : nat
tree3 : tree
tree4 : tree
IH1 : forall (nat1:nat), lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree3)))
IH2 : forall (nat1:nat), lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (tree4)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree4)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree4)))
Inductive1 : tree2 = Node (nat4) (tree3) (tree4)
Cond1 : lq (plus (nat3) (nat2)) (if lq (tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree3)) (tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree4)) then tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree4) else tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree3)) = true
---------------------------------------
forall (nat1:nat), lq (SUCC (plus (nat3) (nat2))) (if lq (tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree3)) (tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree4)) then tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree4) else tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree3)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (if lq (tf1 (nat4) (tree3)) (tf1 (nat4) (tree4)) then tf1 (nat4) (tree4) else tf1 (nat4) (tree3)))

1 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat2 : nat
nat3 : nat
tree1 : tree
Base1 : tree1 = Tnil
tree2 : tree
nat4 : nat
tree3 : tree
tree4 : tree
IH1 : forall (nat1:nat), lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree3)))
IH2 : forall (nat1:nat), lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (tree4)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree4)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree4)))
Inductive1 : tree2 = Node (nat4) (tree3) (tree4)
Cond1 : lq (plus (nat3) (nat2)) (if lq (tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree3)) (tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree4)) then tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree4) else tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree3)) = true
Cond2 : lq (SUCC (plus (nat3) (nat2))) (if lq (tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree3)) (tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree4)) then tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree4) else tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree3)) = false
---------------------------------------
forall (nat1:nat), SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (if lq (tf1 (nat4) (tree3)) (tf1 (nat4) (tree4)) then tf1 (nat4) (tree4) else tf1 (nat4) (tree3)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
case lq (tf1 (nat4) (tree3)) (tf1 (nat4) (tree4))(rank:13.)
rewrite lemma3 in goal at 1(rank:20.)
rewrite lemma3 in goal at 0(rank:28.)
rewrite IH1 in goal at 0(rank:22.)
rewrite IH2 in goal at 0(rank:22.)
rewrite lemma3 in goal at 2(rank:28.)
=================================================
Progress: 993


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (tf1 (nat1) (tree2))
nat2 : nat
nat3 : nat
tree1 : tree
Base1 : tree1 = Tnil
tree2 : tree
Base2 : tree2 = Tnil
---------------------------------------
forall (nat1:nat), lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (Tnil)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (Tnil)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (tf1 (nat1) (Tnil))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (tf1 (nat1) (tree2))
nat2 : nat
nat3 : nat
tree1 : tree
Base1 : tree1 = Tnil
tree2 : tree
Base2 : tree2 = Tnil
---------------------------------------
forall (nat1:nat), lq (plus (nat3) (nat2)) (plus (nat3) (nat2)) = true->lq (plus (nat3) (nat2)) (plus (nat3) (nat2)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (nat1)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:13.)
=================================================
Progress: 994


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat2 : nat
nat3 : nat
tree1 : tree
Base1 : tree1 = Tnil
tree2 : tree
nat4 : nat
tree3 : tree
tree4 : tree
IH1 : forall (nat1:nat), lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree3)))
IH2 : forall (nat1:nat), lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (tree4)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree4)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree4)))
Inductive1 : tree2 = Node (nat4) (tree3) (tree4)
Cond1 : lq (plus (nat3) (nat2)) (if lq (tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree3)) (tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree4)) then tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree4) else tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree3)) = true
Cond2 : lq (SUCC (plus (nat3) (nat2))) (if lq (tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree3)) (tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree4)) then tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree4) else tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree3)) = false
---------------------------------------
forall (nat1:nat), SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (if lq (tf1 (nat4) (tree3)) (tf1 (nat4) (tree4)) then tf1 (nat4) (tree4) else tf1 (nat4) (tree3)))

1 goal(s) more...

2 conjecture(s) more...
>>> case lq (tf1 (nat4) (tree3)) (tf1 (nat4) (tree4))(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat2 : nat
nat3 : nat
tree1 : tree
Base1 : tree1 = Tnil
tree2 : tree
nat4 : nat
tree3 : tree
tree4 : tree
IH1 : forall (nat1:nat), lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree3)))
IH2 : forall (nat1:nat), lq (plus (nat3) (nat2)) (tf1 (plus (nat3) (nat2)) (tree4)) = true->lq (SUCC (plus (nat3) (nat2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree4)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree4)))
Inductive1 : tree2 = Node (nat4) (tree3) (tree4)
Cond1 : lq (plus (nat3) (nat2)) (if lq (tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree3)) (tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree4)) then tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree4) else tf1 (plus (plus (nat3) (nat2)) (nat4)) (tree3)) = true
Cond2 : lq (SUCC (plus (nat3) (nat2))) (if lq (tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree3)) (tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree4)) then tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree4) else tf1 (SUCC (plus (plus (nat3) (nat2)) (nat4))) (tree3)) = false
Case1 : lq (tf1 (nat4) (tree3)) (tf1 (nat4) (tree4)) = true
---------------------------------------
forall (nat1:nat), SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (nat4) (tree4)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
rewrite lemma3 in goal at 1(rank:21.)
induction nat1(rank:22.)
rewrite IH1 in goal at 0(rank:23.)
rewrite IH2 in goal at 0(rank:23.)
rewrite lemma3 in goal at 0(rank:29.)
rewrite lemma3 in goal at 2(rank:29.)
=================================================
Progress: 995


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (tf1 (nat1) (tree2))
nat2 : nat
nat3 : nat
tree1 : tree
Base1 : tree1 = Tnil
tree2 : tree
Base2 : tree2 = Tnil
---------------------------------------
forall (nat1:nat), lq (plus (nat3) (nat2)) (plus (nat3) (nat2)) = true->lq (plus (nat3) (nat2)) (plus (nat3) (nat2)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (nat1)

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (tf1 (nat1) (tree2))
nat2 : nat
nat3 : nat
tree1 : tree
Base1 : tree1 = Tnil
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (plus (nat3) (nat2)) (plus (nat3) (nat2)) = true
---------------------------------------
forall (nat1:nat), lq (plus (nat3) (nat2)) (plus (nat3) (nat2)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (nat1)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:13.)
=================================================
Progress: 996


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (tf1 (nat1) (tree2))
nat2 : nat
nat3 : nat
tree1 : tree
Base1 : tree1 = Tnil
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (plus (nat3) (nat2)) (plus (nat3) (nat2)) = true
---------------------------------------
forall (nat1:nat), lq (plus (nat3) (nat2)) (plus (nat3) (nat2)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (nat1)

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (nat3:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat3) (nat2)) (tree1)) (tf1 (plus (nat3) (nat2)) (tree2)) = true->lq (SUCC (tf1 (plus (nat3) (nat2)) (tree1))) (tf1 (SUCC (plus (nat3) (nat2))) (tree2)) = false -> SUCC (plus (nat1) (plus (ZERO) (tf1 (ZERO) (tree1)))) = SUCC (tf1 (nat1) (tree2))
nat2 : nat
nat3 : nat
tree1 : tree
Base1 : tree1 = Tnil
tree2 : tree
Base2 : tree2 = Tnil
Cond1 : lq (plus (nat3) (nat2)) (plus (nat3) (nat2)) = true
Cond2 : lq (plus (nat3) (nat2)) (plus (nat3) (nat2)) = false
---------------------------------------
forall (nat1:nat), SUCC (plus (nat1) (ZERO)) = SUCC (nat1)

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
induction nat1(rank:22.)
rewrite lemma3 in goal at 0(rank:29.)
=================================================
Progress: 997


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
plus (SUCC (plus (nat3) (plus (ZERO) (plus (ZERO) (nat2))))) (tf1 (ZERO) (tree2)) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 1(rank : 14.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
plus (SUCC (plus (nat3) (plus (ZERO) (plus (ZERO) (nat2))))) (plus (ZERO) (tf1 (ZERO) (tree2))) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 10
rewrite <- IH3 in goal at 0(rank:14.)
rewrite IH1 in goal at 0(rank:22.)
rewrite IH1 in goal at 3(rank:22.)
rewrite IH2 in goal at 1(rank:22.)
rewrite IH2 in goal at 2(rank:22.)
rewrite lemma3 in goal at 0(rank:22.)
rewrite lemma3 in goal at 1(rank:22.)
rewrite IH2 in goal at 0(rank:22.)
rewrite IH1 in goal at 2(rank:22.)
rewrite lemma3 in goal at 2(rank:22.)
=================================================
Progress: 998


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
plus (SUCC (plus (nat3) (plus (ZERO) (plus (ZERO) (nat2))))) (tf1 (ZERO) (tree2)) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite lemma3 in goal at 1(rank : 14.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
plus (SUCC (plus (nat3) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat2)))))) (tf1 (ZERO) (tree2)) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
rewrite <- IH3 in goal at 0(rank:14.)
rewrite IH1 in goal at 0(rank:22.)
rewrite IH1 in goal at 3(rank:22.)
rewrite IH2 in goal at 1(rank:22.)
rewrite IH2 in goal at 2(rank:22.)
rewrite lemma3 in goal at 0(rank:22.)
rewrite lemma3 in goal at 1(rank:22.)
rewrite IH2 in goal at 0(rank:22.)
rewrite IH1 in goal at 2(rank:22.)
=================================================
Progress: 999


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
tf1 (SUCC (plus (nat3) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat2)))))) (tree2) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH3 in goal at 0(rank : 14.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
tf1 (SUCC (plus (nat3) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat2)))))) (tree2) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:6.)
=================================================
Progress: 1000


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
tf1 (SUCC (plus (nat3) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat2)))))) (tree2) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
tf1 (SUCC (plus (nat3) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat2))))))) (tree2) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite IH2 in goal at 0(rank:14.)
rewrite IH1 in goal at 0(rank:22.)
rewrite lemma3 in goal at 0(rank:22.)
=================================================
Progress: 1001


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
tf1 (SUCC (plus (nat3) (plus (ZERO) (plus (ZERO) (nat2))))) (tree2) = SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3)))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 14.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
tf1 (SUCC (plus (nat3) (plus (ZERO) (plus (ZERO) (nat2))))) (tree2) = SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (tf1 (ZERO) (tree3))))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH3 in goal at 0
case lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3))
rewrite IH3 in goal at 0
case lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))
rewrite IH2 in goal at 1
simpl in goal
rewrite <- IH3 in goal at 0
rewrite IH2 in goal at 2
rewrite IH2 in goal at 2
assert forall (nat1:nat) (nat2:nat), SUCC (plus (nat1) (nat2)) = SUCC (plus (nat1) (plus (ZERO) (nat2)))
reflexivity
reflexivity
rewrite lemma3 in goal at 1
rewrite lemma3 in goal at 1
rewrite <- IH3 in goal at 0
rewrite IH2 in goal at 0
rewrite IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: tf1 (SUCC (plus (SUCC (ZERO)) (plus (ZERO) (plus (ZERO) (ZERO))))) (Tnil) = SUCC (plus (plus (SUCC (ZERO)) (ZERO)) (plus (ZERO) (tf1 (ZERO) (Tnil))))
Prop: tf1 (SUCC (plus (SUCC (ZERO)) (plus (ZERO) (plus (ZERO) (SUCC (ZERO)))))) (Tnil) = SUCC (plus (plus (SUCC (ZERO)) (SUCC (ZERO))) (plus (ZERO) (tf1 (ZERO) (Tnil))))
Prop: tf1 (SUCC (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO))))) (Node (ZERO) (Tnil) (Tnil)) = SUCC (plus (plus (ZERO) (ZERO)) (plus (ZERO) (tf1 (ZERO) (Tnil))))
previous tactics
simpl in goal
rewrite IH1 in goal at 0
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH3 in goal at 0
case lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3))
rewrite IH3 in goal at 0
case lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))
rewrite IH2 in goal at 1
simpl in goal
rewrite <- IH3 in goal at 0
rewrite IH2 in goal at 2
rewrite IH2 in goal at 2
assert forall (nat1:nat) (nat2:nat), SUCC (plus (nat1) (nat2)) = SUCC (plus (nat1) (plus (ZERO) (nat2)))
reflexivity
reflexivity
rewrite lemma3 in goal at 1
rewrite lemma3 in goal at 1
rewrite <- IH3 in goal at 0
rewrite IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: tf1 (SUCC (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO))))) (Tnil) = SUCC (plus (plus (ZERO) (ZERO)) (tf1 (ZERO) (Tnil)))
Prop: tf1 (SUCC (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO))))) (Tnil) = SUCC (plus (plus (ZERO) (ZERO)) (tf1 (ZERO) (Tnil)))
Prop: tf1 (SUCC (plus (SUCC (ZERO)) (plus (ZERO) (plus (ZERO) (ZERO))))) (Node (ZERO) (Tnil) (Tnil)) = SUCC (plus (plus (SUCC (ZERO)) (ZERO)) (tf1 (ZERO) (Tnil)))
previous tactics
simpl in goal
rewrite IH1 in goal at 0
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH3 in goal at 0
case lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3))
rewrite IH3 in goal at 0
case lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))
rewrite IH2 in goal at 1
simpl in goal
rewrite <- IH3 in goal at 0
rewrite IH2 in goal at 2
rewrite IH2 in goal at 2
assert forall (nat1:nat) (nat2:nat), SUCC (plus (nat1) (nat2)) = SUCC (plus (nat1) (plus (ZERO) (nat2)))
reflexivity
reflexivity
rewrite lemma3 in goal at 1
rewrite lemma3 in goal at 1
rewrite <- IH3 in goal at 0
validate generalize_common_subterm_goal
Prop: tf1 (SUCC (plus (SUCC (SUCC (SUCC (ZERO)))) (plus (ZERO) (plus (ZERO) (SUCC (ZERO)))))) (Tnil) = SUCC (tf1 (plus (SUCC (SUCC (SUCC (ZERO)))) (SUCC (ZERO))) (Tnil))
Prop: tf1 (SUCC (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO))))) (Tnil) = SUCC (tf1 (plus (ZERO) (ZERO)) (Tnil))
Prop: tf1 (SUCC (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO))))) (Tnil) = SUCC (tf1 (plus (ZERO) (ZERO)) (Tnil))
previous tactics
simpl in goal
rewrite IH1 in goal at 0
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH3 in goal at 0
case lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3))
rewrite IH3 in goal at 0
case lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))
rewrite IH2 in goal at 1
simpl in goal
rewrite <- IH3 in goal at 0
rewrite IH2 in goal at 2
rewrite IH2 in goal at 2
assert forall (nat1:nat) (nat2:nat), SUCC (plus (nat1) (nat2)) = SUCC (plus (nat1) (plus (ZERO) (nat2)))
reflexivity
reflexivity
rewrite lemma3 in goal at 1
rewrite lemma3 in goal at 1
validate generalize_common_subterm_goal
Prop: tf1 (SUCC (plus (SUCC (SUCC (ZERO))) (plus (ZERO) (plus (ZERO) (ZERO))))) (Tnil) = SUCC (plus (SUCC (SUCC (ZERO))) (if lq (tf1 (ZERO) (Tnil)) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (Tnil)))
Prop: tf1 (SUCC (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO))))) (Tnil) = SUCC (plus (ZERO) (if lq (tf1 (ZERO) (Tnil)) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (Tnil)))
Prop: tf1 (SUCC (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO))))) (Node (ZERO) (Tnil) (Node (SUCC (ZERO)) (Node (ZERO) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Tnil))) (Tnil)) (Tnil))) = SUCC (plus (ZERO) (if lq (tf1 (ZERO) (Node (ZERO) (Tnil) (Node (SUCC (ZERO)) (Node (ZERO) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Tnil))) (Tnil)) (Tnil)))) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (Node (ZERO) (Tnil) (Node (SUCC (ZERO)) (Node (ZERO) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Tnil))) (Tnil)) (Tnil)))))
previous tactics
simpl in goal
rewrite IH1 in goal at 0
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH3 in goal at 0
case lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3))
rewrite IH3 in goal at 0
case lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))
rewrite IH2 in goal at 1
simpl in goal
rewrite <- IH3 in goal at 0
rewrite IH2 in goal at 2
rewrite IH2 in goal at 2
assert forall (nat1:nat) (nat2:nat), SUCC (plus (nat1) (nat2)) = SUCC (plus (nat1) (plus (ZERO) (nat2)))
reflexivity
reflexivity
rewrite lemma3 in goal at 1
validate generalize_common_subterm_goal
Prop: tf1 (SUCC (plus (ZERO) (plus (ZERO) (ZERO)))) (Tnil) = SUCC (plus (ZERO) (if lq (tf1 (ZERO) (Tnil)) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (Tnil)))
Prop: tf1 (SUCC (plus (SUCC (ZERO)) (plus (ZERO) (ZERO)))) (Tnil) = SUCC (plus (SUCC (ZERO)) (if lq (tf1 (ZERO) (Tnil)) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (Tnil)))
Prop: tf1 (SUCC (plus (ZERO) (plus (ZERO) (SUCC (ZERO))))) (Tnil) = SUCC (plus (ZERO) (if lq (tf1 (SUCC (ZERO)) (Tnil)) (tf1 (SUCC (ZERO)) (Tnil)) then tf1 (SUCC (ZERO)) (Tnil) else tf1 (SUCC (ZERO)) (Tnil)))
previous tactics
simpl in goal
rewrite IH1 in goal at 0
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH3 in goal at 0
case lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3))
rewrite IH3 in goal at 0
case lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))
rewrite IH2 in goal at 1
simpl in goal
rewrite <- IH3 in goal at 0
rewrite IH2 in goal at 2
rewrite IH2 in goal at 2
assert forall (nat1:nat) (nat2:nat), SUCC (plus (nat1) (nat2)) = SUCC (plus (nat1) (plus (ZERO) (nat2)))
reflexivity
reflexivity
validate generalize_common_subterm_goal
Prop: tf1 (SUCC (plus (ZERO) (SUCC (SUCC (SUCC (ZERO)))))) (Tnil) = SUCC (plus (ZERO) (if lq (tf1 (SUCC (SUCC (SUCC (ZERO)))) (Tnil)) (tf1 (SUCC (SUCC (SUCC (ZERO)))) (Tnil)) then tf1 (SUCC (SUCC (SUCC (ZERO)))) (Tnil) else tf1 (SUCC (SUCC (SUCC (ZERO)))) (Tnil)))
Prop: tf1 (SUCC (plus (ZERO) (ZERO))) (Tnil) = SUCC (plus (ZERO) (if lq (tf1 (ZERO) (Tnil)) (tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil))) then tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil)) else tf1 (ZERO) (Tnil)))
Prop: tf1 (SUCC (plus (SUCC (ZERO)) (SUCC (ZERO)))) (Tnil) = SUCC (plus (SUCC (ZERO)) (if lq (tf1 (SUCC (ZERO)) (Tnil)) (tf1 (SUCC (ZERO)) (Tnil)) then tf1 (SUCC (ZERO)) (Tnil) else tf1 (SUCC (ZERO)) (Tnil)))
Lemma List
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (nat1))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
End of Lemma List


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree2) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
Lemma List
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (nat1)))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
End of Lemma List


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
tf1 (SUCC (plus (nat3) (plus (ZERO) (nat2)))) (tree2) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
Lemma List
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
End of Lemma List


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
tf1 (SUCC (plus (nat3) (plus (ZERO) (plus (ZERO) (nat2))))) (tree2) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
Lemma List
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
End of Lemma List


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
tf1 (SUCC (plus (nat3) (plus (ZERO) (plus (ZERO) (nat2))))) (tree2) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

1 goal(s) more...

1 conjecture(s) more...
Lemma List
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
End of Lemma List


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
tf1 (SUCC (plus (nat3) (plus (ZERO) (plus (ZERO) (nat2))))) (tree2) = SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3)))

1 goal(s) more...

1 conjecture(s) more...
Lemma List
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
End of Lemma List


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
tf1 (SUCC (plus (nat3) (plus (ZERO) (plus (ZERO) (nat2))))) (tree2) = SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (tf1 (ZERO) (tree3))))

1 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 1002


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
tf1 (SUCC (plus (nat3) (nat2))) (tree2) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (nat1))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (nat1))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))

---------------------------------------
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (nat1))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat1(rank:11.)
=================================================
Progress: 1003


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
tf1 (SUCC (plus (nat3) (plus (ZERO) (nat2)))) (tree2) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (nat1)))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (nat1)))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))

---------------------------------------
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (nat1)))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 1004


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
tf1 (SUCC (plus (nat3) (plus (ZERO) (plus (ZERO) (nat2))))) (tree2) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))

---------------------------------------
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 1005


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
tf1 (SUCC (plus (nat3) (plus (ZERO) (plus (ZERO) (nat2))))) (tree2) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

1 goal(s) more...

1 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))

---------------------------------------
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 1006


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
tf1 (SUCC (plus (nat3) (plus (ZERO) (plus (ZERO) (nat2))))) (tree2) = SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3)))

1 goal(s) more...

1 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))

---------------------------------------
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 1007


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
tf1 (SUCC (plus (nat3) (plus (ZERO) (plus (ZERO) (nat2))))) (tree2) = SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (tf1 (ZERO) (tree3))))

1 goal(s) more...

1 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))

---------------------------------------
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 1008


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (nat1))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))

---------------------------------------
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (nat1))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat1(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (nat1))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
---------------------------------------
forall (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (nat1))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction nat2(rank:12.)
=================================================
Progress: 1009


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (nat1)))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))

---------------------------------------
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (nat1)))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))

0 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (nat1)))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))

---------------------------------------
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (nat1))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat1(rank:11.)
=================================================
Progress: 1010


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))

---------------------------------------
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))

0 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))

---------------------------------------
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (nat1))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat1(rank:11.)
=================================================
Progress: 1011


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))

---------------------------------------
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))

0 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))

---------------------------------------
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (nat1))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat1(rank:11.)
=================================================
Progress: 1012


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))

---------------------------------------
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))

0 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))

---------------------------------------
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (nat1))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat1(rank:11.)
=================================================
Progress: 1013


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))

---------------------------------------
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))

0 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))

---------------------------------------
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (nat1))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat1(rank:11.)
=================================================
Progress: 1014


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (nat1)))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))

---------------------------------------
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (nat1))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat1(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (nat1)))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
---------------------------------------
forall (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (nat1))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction nat2(rank:12.)
=================================================
Progress: 1015


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))

---------------------------------------
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (nat1))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat1(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
---------------------------------------
forall (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (nat1))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction nat2(rank:12.)
=================================================
Progress: 1016


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))

---------------------------------------
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (nat1))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat1(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
---------------------------------------
forall (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (nat1))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction nat2(rank:12.)
=================================================
Progress: 1017


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))

---------------------------------------
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (nat1))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat1(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
---------------------------------------
forall (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (nat1))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction nat2(rank:12.)
=================================================
Progress: 1018


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))

---------------------------------------
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (nat1))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat1(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
---------------------------------------
forall (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (nat1))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction nat2(rank:12.)
=================================================
Progress: 1019


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (nat1))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
---------------------------------------
forall (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (nat1))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))

0 goal(s) more...

2 conjecture(s) more...
>>> induction nat2(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (nat1))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (plus (ZERO) (nat1)) (tree1)) (tf1 (plus (ZERO) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (ZERO) (nat1)) (tree1))) (tf1 (SUCC (plus (ZERO) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (ZERO) (nat1))) (tree1) = SUCC (plus (ZERO) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:12.)
=================================================
Progress: 1020


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (nat1)))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
---------------------------------------
forall (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (nat1))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))

0 goal(s) more...

2 conjecture(s) more...
>>> induction nat2(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (nat1)))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (plus (ZERO) (nat1)) (tree1)) (tf1 (plus (ZERO) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (ZERO) (nat1)) (tree1))) (tf1 (SUCC (plus (ZERO) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (ZERO) (nat1))) (tree1) = SUCC (plus (ZERO) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:12.)
=================================================
Progress: 1021


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
---------------------------------------
forall (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (nat1))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))

0 goal(s) more...

2 conjecture(s) more...
>>> induction nat2(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (plus (ZERO) (nat1)) (tree1)) (tf1 (plus (ZERO) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (ZERO) (nat1)) (tree1))) (tf1 (SUCC (plus (ZERO) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (ZERO) (nat1))) (tree1) = SUCC (plus (ZERO) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:12.)
=================================================
Progress: 1022


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
---------------------------------------
forall (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (nat1))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))

0 goal(s) more...

2 conjecture(s) more...
>>> induction nat2(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (plus (ZERO) (nat1)) (tree1)) (tf1 (plus (ZERO) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (ZERO) (nat1)) (tree1))) (tf1 (SUCC (plus (ZERO) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (ZERO) (nat1))) (tree1) = SUCC (tf1 (plus (ZERO) (nat1)) (tree2))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:12.)
=================================================
Progress: 1023


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
---------------------------------------
forall (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (nat1))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))

0 goal(s) more...

2 conjecture(s) more...
>>> induction nat2(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (plus (ZERO) (nat1)) (tree1)) (tf1 (plus (ZERO) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (ZERO) (nat1)) (tree1))) (tf1 (SUCC (plus (ZERO) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (ZERO) (nat1))) (tree1) = SUCC (plus (plus (ZERO) (nat1)) (tf1 (ZERO) (tree2)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:12.)
=================================================
Progress: 1024


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
---------------------------------------
forall (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (nat1))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))

0 goal(s) more...

2 conjecture(s) more...
>>> induction nat2(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (plus (ZERO) (nat1)) (tree1)) (tf1 (plus (ZERO) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (ZERO) (nat1)) (tree1))) (tf1 (SUCC (plus (ZERO) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (ZERO) (nat1))) (tree1) = SUCC (plus (plus (ZERO) (nat1)) (tf1 (ZERO) (tree2)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:12.)
=================================================
Progress: 1025


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (nat1))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (plus (ZERO) (nat1)) (tree1)) (tf1 (plus (ZERO) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (ZERO) (nat1)) (tree1))) (tf1 (SUCC (plus (ZERO) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (ZERO) (nat1))) (tree1) = SUCC (plus (ZERO) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (nat1))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) = true->lq (SUCC (tf1 (nat1) (tree1))) (tf1 (SUCC (nat1)) (tree2)) = false -> tf1 (SUCC (nat1)) (tree1) = SUCC (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction tree1(rank:13.)
=================================================
Progress: 1026


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (nat1)))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (plus (ZERO) (nat1)) (tree1)) (tf1 (plus (ZERO) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (ZERO) (nat1)) (tree1))) (tf1 (SUCC (plus (ZERO) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (ZERO) (nat1))) (tree1) = SUCC (plus (ZERO) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (nat1)))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) = true->lq (SUCC (tf1 (nat1) (tree1))) (tf1 (SUCC (nat1)) (tree2)) = false -> tf1 (SUCC (nat1)) (tree1) = SUCC (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction tree1(rank:13.)
=================================================
Progress: 1027


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (plus (ZERO) (nat1)) (tree1)) (tf1 (plus (ZERO) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (ZERO) (nat1)) (tree1))) (tf1 (SUCC (plus (ZERO) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (ZERO) (nat1))) (tree1) = SUCC (plus (ZERO) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) = true->lq (SUCC (tf1 (nat1) (tree1))) (tf1 (SUCC (nat1)) (tree2)) = false -> tf1 (SUCC (nat1)) (tree1) = SUCC (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction tree1(rank:13.)
=================================================
Progress: 1028


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (plus (ZERO) (nat1)) (tree1)) (tf1 (plus (ZERO) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (ZERO) (nat1)) (tree1))) (tf1 (SUCC (plus (ZERO) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (ZERO) (nat1))) (tree1) = SUCC (tf1 (plus (ZERO) (nat1)) (tree2))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) = true->lq (SUCC (tf1 (nat1) (tree1))) (tf1 (SUCC (nat1)) (tree2)) = false -> tf1 (SUCC (nat1)) (tree1) = SUCC (tf1 (nat1) (tree2))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction tree1(rank:13.)
=================================================
Progress: 1029


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (plus (ZERO) (nat1)) (tree1)) (tf1 (plus (ZERO) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (ZERO) (nat1)) (tree1))) (tf1 (SUCC (plus (ZERO) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (ZERO) (nat1))) (tree1) = SUCC (plus (plus (ZERO) (nat1)) (tf1 (ZERO) (tree2)))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) = true->lq (SUCC (tf1 (nat1) (tree1))) (tf1 (SUCC (nat1)) (tree2)) = false -> tf1 (SUCC (nat1)) (tree1) = SUCC (plus (nat1) (tf1 (ZERO) (tree2)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction tree1(rank:13.)
=================================================
Progress: 1030


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (plus (ZERO) (nat1)) (tree1)) (tf1 (plus (ZERO) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (ZERO) (nat1)) (tree1))) (tf1 (SUCC (plus (ZERO) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (ZERO) (nat1))) (tree1) = SUCC (plus (plus (ZERO) (nat1)) (tf1 (ZERO) (tree2)))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) = true->lq (SUCC (tf1 (nat1) (tree1))) (tf1 (SUCC (nat1)) (tree2)) = false -> tf1 (SUCC (nat1)) (tree1) = SUCC (plus (nat1) (tf1 (ZERO) (tree2)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction tree1(rank:13.)
=================================================
Progress: 1031


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (nat1))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) = true->lq (SUCC (tf1 (nat1) (tree1))) (tf1 (SUCC (nat1)) (tree2)) = false -> tf1 (SUCC (nat1)) (tree1) = SUCC (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1))

1 goal(s) more...

2 conjecture(s) more...
>>> induction tree1(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (nat1))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (tree2:tree), lq (tf1 (nat1) (Tnil)) (tf1 (nat1) (tree2)) = true->lq (SUCC (tf1 (nat1) (Tnil))) (tf1 (SUCC (nat1)) (tree2)) = false -> tf1 (SUCC (nat1)) (Tnil) = SUCC (if lq (tf1 (nat1) (Tnil)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (Tnil))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 1032


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (nat1)))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) = true->lq (SUCC (tf1 (nat1) (tree1))) (tf1 (SUCC (nat1)) (tree2)) = false -> tf1 (SUCC (nat1)) (tree1) = SUCC (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1))

1 goal(s) more...

2 conjecture(s) more...
>>> induction tree1(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (nat1)))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (tree2:tree), lq (tf1 (nat1) (Tnil)) (tf1 (nat1) (tree2)) = true->lq (SUCC (tf1 (nat1) (Tnil))) (tf1 (SUCC (nat1)) (tree2)) = false -> tf1 (SUCC (nat1)) (Tnil) = SUCC (if lq (tf1 (nat1) (Tnil)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (Tnil))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 1033


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) = true->lq (SUCC (tf1 (nat1) (tree1))) (tf1 (SUCC (nat1)) (tree2)) = false -> tf1 (SUCC (nat1)) (tree1) = SUCC (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1))

1 goal(s) more...

2 conjecture(s) more...
>>> induction tree1(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (tree2:tree), lq (tf1 (nat1) (Tnil)) (tf1 (nat1) (tree2)) = true->lq (SUCC (tf1 (nat1) (Tnil))) (tf1 (SUCC (nat1)) (tree2)) = false -> tf1 (SUCC (nat1)) (Tnil) = SUCC (if lq (tf1 (nat1) (Tnil)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (Tnil))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 1034


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) = true->lq (SUCC (tf1 (nat1) (tree1))) (tf1 (SUCC (nat1)) (tree2)) = false -> tf1 (SUCC (nat1)) (tree1) = SUCC (tf1 (nat1) (tree2))

1 goal(s) more...

2 conjecture(s) more...
>>> induction tree1(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (tree2:tree), lq (tf1 (nat1) (Tnil)) (tf1 (nat1) (tree2)) = true->lq (SUCC (tf1 (nat1) (Tnil))) (tf1 (SUCC (nat1)) (tree2)) = false -> tf1 (SUCC (nat1)) (Tnil) = SUCC (tf1 (nat1) (tree2))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 1035


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) = true->lq (SUCC (tf1 (nat1) (tree1))) (tf1 (SUCC (nat1)) (tree2)) = false -> tf1 (SUCC (nat1)) (tree1) = SUCC (plus (nat1) (tf1 (ZERO) (tree2)))

1 goal(s) more...

2 conjecture(s) more...
>>> induction tree1(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (tree2:tree), lq (tf1 (nat1) (Tnil)) (tf1 (nat1) (tree2)) = true->lq (SUCC (tf1 (nat1) (Tnil))) (tf1 (SUCC (nat1)) (tree2)) = false -> tf1 (SUCC (nat1)) (Tnil) = SUCC (plus (nat1) (tf1 (ZERO) (tree2)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 1036


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) = true->lq (SUCC (tf1 (nat1) (tree1))) (tf1 (SUCC (nat1)) (tree2)) = false -> tf1 (SUCC (nat1)) (tree1) = SUCC (plus (nat1) (tf1 (ZERO) (tree2)))

1 goal(s) more...

2 conjecture(s) more...
>>> induction tree1(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (tree2:tree), lq (tf1 (nat1) (Tnil)) (tf1 (nat1) (tree2)) = true->lq (SUCC (tf1 (nat1) (Tnil))) (tf1 (SUCC (nat1)) (tree2)) = false -> tf1 (SUCC (nat1)) (Tnil) = SUCC (plus (nat1) (tf1 (ZERO) (tree2)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 1037


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (nat1))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (tree2:tree), lq (tf1 (nat1) (Tnil)) (tf1 (nat1) (tree2)) = true->lq (SUCC (tf1 (nat1) (Tnil))) (tf1 (SUCC (nat1)) (tree2)) = false -> tf1 (SUCC (nat1)) (Tnil) = SUCC (if lq (tf1 (nat1) (Tnil)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (Tnil))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (nat1))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (tree2:tree), lq (nat1) (tf1 (nat1) (tree2)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree2)) = false -> SUCC (nat1) = SUCC (if lq (nat1) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (Tnil))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction tree2(rank:14.)
=================================================
Progress: 1038


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (nat1)))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (tree2:tree), lq (tf1 (nat1) (Tnil)) (tf1 (nat1) (tree2)) = true->lq (SUCC (tf1 (nat1) (Tnil))) (tf1 (SUCC (nat1)) (tree2)) = false -> tf1 (SUCC (nat1)) (Tnil) = SUCC (if lq (tf1 (nat1) (Tnil)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (Tnil))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (nat1)))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (tree2:tree), lq (nat1) (tf1 (nat1) (tree2)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree2)) = false -> SUCC (nat1) = SUCC (if lq (nat1) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (Tnil))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction tree2(rank:14.)
=================================================
Progress: 1039


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (tree2:tree), lq (tf1 (nat1) (Tnil)) (tf1 (nat1) (tree2)) = true->lq (SUCC (tf1 (nat1) (Tnil))) (tf1 (SUCC (nat1)) (tree2)) = false -> tf1 (SUCC (nat1)) (Tnil) = SUCC (if lq (tf1 (nat1) (Tnil)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (Tnil))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (tree2:tree), lq (nat1) (tf1 (nat1) (tree2)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree2)) = false -> SUCC (nat1) = SUCC (if lq (nat1) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (Tnil))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction tree2(rank:14.)
=================================================
Progress: 1040


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (tree2:tree), lq (tf1 (nat1) (Tnil)) (tf1 (nat1) (tree2)) = true->lq (SUCC (tf1 (nat1) (Tnil))) (tf1 (SUCC (nat1)) (tree2)) = false -> tf1 (SUCC (nat1)) (Tnil) = SUCC (tf1 (nat1) (tree2))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (tree2:tree), lq (nat1) (tf1 (nat1) (tree2)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree2)) = false -> SUCC (nat1) = SUCC (tf1 (nat1) (tree2))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction tree2(rank:14.)
=================================================
Progress: 1041


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (tree2:tree), lq (tf1 (nat1) (Tnil)) (tf1 (nat1) (tree2)) = true->lq (SUCC (tf1 (nat1) (Tnil))) (tf1 (SUCC (nat1)) (tree2)) = false -> tf1 (SUCC (nat1)) (Tnil) = SUCC (plus (nat1) (tf1 (ZERO) (tree2)))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (tree2:tree), lq (nat1) (tf1 (nat1) (tree2)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree2)) = false -> SUCC (nat1) = SUCC (plus (nat1) (tf1 (ZERO) (tree2)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction tree2(rank:14.)
=================================================
Progress: 1042


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (tree2:tree), lq (tf1 (nat1) (Tnil)) (tf1 (nat1) (tree2)) = true->lq (SUCC (tf1 (nat1) (Tnil))) (tf1 (SUCC (nat1)) (tree2)) = false -> tf1 (SUCC (nat1)) (Tnil) = SUCC (plus (nat1) (tf1 (ZERO) (tree2)))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (tree2:tree), lq (nat1) (tf1 (nat1) (tree2)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree2)) = false -> SUCC (nat1) = SUCC (plus (nat1) (tf1 (ZERO) (tree2)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction tree2(rank:14.)
=================================================
Progress: 1043


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
plus (SUCC (plus (nat3) (plus (ZERO) (plus (ZERO) (nat2))))) (plus (ZERO) (tf1 (ZERO) (tree2))) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH3 in goal at 0(rank : 14.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
plus (SUCC (plus (nat3) (plus (ZERO) (plus (ZERO) (nat2))))) (plus (ZERO) (tf1 (ZERO) (tree2))) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite IH2 in goal at 0(rank:14.)
rewrite lemma3 in goal at 0(rank:22.)
=================================================
Progress: 1044


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
plus (SUCC (plus (nat3) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat2)))))) (tf1 (ZERO) (tree2)) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH3 in goal at 0(rank : 14.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
plus (SUCC (plus (nat3) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat2)))))) (tf1 (ZERO) (tree2)) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite IH2 in goal at 0(rank:6.)
=================================================
Progress: 1045


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
plus (SUCC (plus (nat3) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat2)))))) (tf1 (ZERO) (tree2)) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 6.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
plus (SUCC (plus (nat3) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat2)))))) (tf1 (ZERO) (tree2)) = SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
rewrite IH2 in goal at 0(rank:14.)
rewrite IH1 in goal at 0(rank:22.)
rewrite lemma3 in goal at 0(rank:22.)
rewrite lemma3 in goal at 1(rank:22.)
=================================================
Progress: 1046


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
tf1 (SUCC (plus (nat3) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat2))))))) (tree2) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 14.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
tf1 (SUCC (plus (nat3) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat2))))))) (tree2) = SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite IH2 in goal at 0(rank:14.)
rewrite lemma3 in goal at 0(rank:22.)
rewrite lemma3 in goal at 1(rank:22.)
=================================================
Progress: 1047


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (nat1))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (tree2:tree), lq (nat1) (tf1 (nat1) (tree2)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree2)) = false -> SUCC (nat1) = SUCC (if lq (nat1) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (Tnil))

2 goal(s) more...

2 conjecture(s) more...
>>> induction tree2(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (nat1))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
---------------------------------------
lq (nat1) (tf1 (nat1) (Tnil)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (Tnil)) = false -> SUCC (nat1) = SUCC (if lq (nat1) (tf1 (nat1) (Tnil)) then tf1 (nat1) (Tnil) else tf1 (nat1) (Tnil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:14.)
=================================================
Progress: 1048


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (nat1)))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (tree2:tree), lq (nat1) (tf1 (nat1) (tree2)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree2)) = false -> SUCC (nat1) = SUCC (if lq (nat1) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (Tnil))

2 goal(s) more...

2 conjecture(s) more...
>>> induction tree2(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (nat1)))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
---------------------------------------
lq (nat1) (tf1 (nat1) (Tnil)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (Tnil)) = false -> SUCC (nat1) = SUCC (if lq (nat1) (tf1 (nat1) (Tnil)) then tf1 (nat1) (Tnil) else tf1 (nat1) (Tnil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:14.)
=================================================
Progress: 1049


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (tree2:tree), lq (nat1) (tf1 (nat1) (tree2)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree2)) = false -> SUCC (nat1) = SUCC (if lq (nat1) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (Tnil))

2 goal(s) more...

2 conjecture(s) more...
>>> induction tree2(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
---------------------------------------
lq (nat1) (tf1 (nat1) (Tnil)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (Tnil)) = false -> SUCC (nat1) = SUCC (if lq (nat1) (tf1 (nat1) (Tnil)) then tf1 (nat1) (Tnil) else tf1 (nat1) (Tnil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:14.)
=================================================
Progress: 1050


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (tree2:tree), lq (nat1) (tf1 (nat1) (tree2)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree2)) = false -> SUCC (nat1) = SUCC (tf1 (nat1) (tree2))

2 goal(s) more...

2 conjecture(s) more...
>>> induction tree2(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
---------------------------------------
lq (nat1) (tf1 (nat1) (Tnil)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (Tnil)) = false -> SUCC (nat1) = SUCC (tf1 (nat1) (Tnil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:13.)
=================================================
Progress: 1051


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
---------------------------------------
lq (nat1) (tf1 (nat1) (Tnil)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (Tnil)) = false -> SUCC (nat1) = SUCC (tf1 (nat1) (Tnil))

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : lq (nat1) (tf1 (nat1) (tree3)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree3)) = false -> SUCC (nat1) = SUCC (tf1 (nat1) (tree3))
IH2 : lq (nat1) (tf1 (nat1) (tree4)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree4)) = false -> SUCC (nat1) = SUCC (tf1 (nat1) (tree4))
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
---------------------------------------
lq (nat1) (tf1 (nat1) (Node (nat3) (tree3) (tree4))) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (Node (nat3) (tree3) (tree4))) = false -> SUCC (nat1) = SUCC (tf1 (nat1) (Node (nat3) (tree3) (tree4)))

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 1052


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : lq (nat1) (tf1 (nat1) (tree3)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree3)) = false -> SUCC (nat1) = SUCC (tf1 (nat1) (tree3))
IH2 : lq (nat1) (tf1 (nat1) (tree4)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree4)) = false -> SUCC (nat1) = SUCC (tf1 (nat1) (tree4))
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
---------------------------------------
lq (nat1) (tf1 (nat1) (Node (nat3) (tree3) (tree4))) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (Node (nat3) (tree3) (tree4))) = false -> SUCC (nat1) = SUCC (tf1 (nat1) (Node (nat3) (tree3) (tree4)))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : lq (nat1) (tf1 (nat1) (tree3)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree3)) = false -> SUCC (nat1) = SUCC (tf1 (nat1) (tree3))
IH2 : lq (nat1) (tf1 (nat1) (tree4)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree4)) = false -> SUCC (nat1) = SUCC (tf1 (nat1) (tree4))
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
---------------------------------------
lq (nat1) (if lq (tf1 (plus (nat1) (nat3)) (tree3)) (tf1 (plus (nat1) (nat3)) (tree4)) then tf1 (plus (nat1) (nat3)) (tree4) else tf1 (plus (nat1) (nat3)) (tree3)) = true->lq (SUCC (nat1)) (if lq (tf1 (SUCC (plus (nat1) (nat3))) (tree3)) (tf1 (SUCC (plus (nat1) (nat3))) (tree4)) then tf1 (SUCC (plus (nat1) (nat3))) (tree4) else tf1 (SUCC (plus (nat1) (nat3))) (tree3)) = false -> SUCC (nat1) = SUCC (if lq (tf1 (plus (nat1) (nat3)) (tree3)) (tf1 (plus (nat1) (nat3)) (tree4)) then tf1 (plus (nat1) (nat3)) (tree4) else tf1 (plus (nat1) (nat3)) (tree3))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:13.)
=================================================
Progress: 1053


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : lq (nat1) (tf1 (nat1) (tree3)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree3)) = false -> SUCC (nat1) = SUCC (tf1 (nat1) (tree3))
IH2 : lq (nat1) (tf1 (nat1) (tree4)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree4)) = false -> SUCC (nat1) = SUCC (tf1 (nat1) (tree4))
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
---------------------------------------
lq (nat1) (if lq (tf1 (plus (nat1) (nat3)) (tree3)) (tf1 (plus (nat1) (nat3)) (tree4)) then tf1 (plus (nat1) (nat3)) (tree4) else tf1 (plus (nat1) (nat3)) (tree3)) = true->lq (SUCC (nat1)) (if lq (tf1 (SUCC (plus (nat1) (nat3))) (tree3)) (tf1 (SUCC (plus (nat1) (nat3))) (tree4)) then tf1 (SUCC (plus (nat1) (nat3))) (tree4) else tf1 (SUCC (plus (nat1) (nat3))) (tree3)) = false -> SUCC (nat1) = SUCC (if lq (tf1 (plus (nat1) (nat3)) (tree3)) (tf1 (plus (nat1) (nat3)) (tree4)) then tf1 (plus (nat1) (nat3)) (tree4) else tf1 (plus (nat1) (nat3)) (tree3))

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : lq (nat1) (tf1 (nat1) (tree3)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree3)) = false -> SUCC (nat1) = SUCC (tf1 (nat1) (tree3))
IH2 : lq (nat1) (tf1 (nat1) (tree4)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree4)) = false -> SUCC (nat1) = SUCC (tf1 (nat1) (tree4))
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
Cond1 : lq (nat1) (if lq (tf1 (plus (nat1) (nat3)) (tree3)) (tf1 (plus (nat1) (nat3)) (tree4)) then tf1 (plus (nat1) (nat3)) (tree4) else tf1 (plus (nat1) (nat3)) (tree3)) = true
---------------------------------------
lq (SUCC (nat1)) (if lq (tf1 (SUCC (plus (nat1) (nat3))) (tree3)) (tf1 (SUCC (plus (nat1) (nat3))) (tree4)) then tf1 (SUCC (plus (nat1) (nat3))) (tree4) else tf1 (SUCC (plus (nat1) (nat3))) (tree3)) = false -> SUCC (nat1) = SUCC (if lq (tf1 (plus (nat1) (nat3)) (tree3)) (tf1 (plus (nat1) (nat3)) (tree4)) then tf1 (plus (nat1) (nat3)) (tree4) else tf1 (plus (nat1) (nat3)) (tree3))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:13.)
=================================================
Progress: 1054


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : lq (nat1) (tf1 (nat1) (tree3)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree3)) = false -> SUCC (nat1) = SUCC (tf1 (nat1) (tree3))
IH2 : lq (nat1) (tf1 (nat1) (tree4)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree4)) = false -> SUCC (nat1) = SUCC (tf1 (nat1) (tree4))
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
Cond1 : lq (nat1) (if lq (tf1 (plus (nat1) (nat3)) (tree3)) (tf1 (plus (nat1) (nat3)) (tree4)) then tf1 (plus (nat1) (nat3)) (tree4) else tf1 (plus (nat1) (nat3)) (tree3)) = true
---------------------------------------
lq (SUCC (nat1)) (if lq (tf1 (SUCC (plus (nat1) (nat3))) (tree3)) (tf1 (SUCC (plus (nat1) (nat3))) (tree4)) then tf1 (SUCC (plus (nat1) (nat3))) (tree4) else tf1 (SUCC (plus (nat1) (nat3))) (tree3)) = false -> SUCC (nat1) = SUCC (if lq (tf1 (plus (nat1) (nat3)) (tree3)) (tf1 (plus (nat1) (nat3)) (tree4)) then tf1 (plus (nat1) (nat3)) (tree4) else tf1 (plus (nat1) (nat3)) (tree3))

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : lq (nat1) (tf1 (nat1) (tree3)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree3)) = false -> SUCC (nat1) = SUCC (tf1 (nat1) (tree3))
IH2 : lq (nat1) (tf1 (nat1) (tree4)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree4)) = false -> SUCC (nat1) = SUCC (tf1 (nat1) (tree4))
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
Cond1 : lq (nat1) (if lq (tf1 (plus (nat1) (nat3)) (tree3)) (tf1 (plus (nat1) (nat3)) (tree4)) then tf1 (plus (nat1) (nat3)) (tree4) else tf1 (plus (nat1) (nat3)) (tree3)) = true
Cond2 : lq (SUCC (nat1)) (if lq (tf1 (SUCC (plus (nat1) (nat3))) (tree3)) (tf1 (SUCC (plus (nat1) (nat3))) (tree4)) then tf1 (SUCC (plus (nat1) (nat3))) (tree4) else tf1 (SUCC (plus (nat1) (nat3))) (tree3)) = false
---------------------------------------
SUCC (nat1) = SUCC (if lq (tf1 (plus (nat1) (nat3)) (tree3)) (tf1 (plus (nat1) (nat3)) (tree4)) then tf1 (plus (nat1) (nat3)) (tree4) else tf1 (plus (nat1) (nat3)) (tree3))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
case lq (tf1 (plus (nat1) (nat3)) (tree3)) (tf1 (plus (nat1) (nat3)) (tree4))(rank:14.)
rewrite IH1 in goal at 0(rank:23.)
rewrite IH2 in goal at 0(rank:23.)
=================================================
Progress: 1055


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (tree2:tree), lq (nat1) (tf1 (nat1) (tree2)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree2)) = false -> SUCC (nat1) = SUCC (plus (nat1) (tf1 (ZERO) (tree2)))

2 goal(s) more...

2 conjecture(s) more...
>>> induction tree2(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
---------------------------------------
lq (nat1) (tf1 (nat1) (Tnil)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (Tnil)) = false -> SUCC (nat1) = SUCC (plus (nat1) (tf1 (ZERO) (Tnil)))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:14.)
=================================================
Progress: 1056


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (tree2:tree), lq (nat1) (tf1 (nat1) (tree2)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree2)) = false -> SUCC (nat1) = SUCC (plus (nat1) (tf1 (ZERO) (tree2)))

2 goal(s) more...

2 conjecture(s) more...
>>> induction tree2(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
---------------------------------------
lq (nat1) (tf1 (nat1) (Tnil)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (Tnil)) = false -> SUCC (nat1) = SUCC (plus (nat1) (tf1 (ZERO) (Tnil)))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:14.)
=================================================
Progress: 1057


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
plus (SUCC (plus (nat3) (plus (ZERO) (plus (ZERO) (nat2))))) (plus (ZERO) (tf1 (ZERO) (tree2))) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 14.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
plus (SUCC (plus (nat3) (plus (ZERO) (plus (ZERO) (nat2))))) (plus (ZERO) (tf1 (ZERO) (tree2))) = SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite IH2 in goal at 0(rank:14.)
rewrite lemma3 in goal at 0(rank:22.)
=================================================
Progress: 1058


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
plus (SUCC (plus (nat3) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat2)))))) (tf1 (ZERO) (tree2)) = SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3)))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 14.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
plus (SUCC (plus (nat3) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat2)))))) (tf1 (ZERO) (tree2)) = SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (tf1 (ZERO) (tree3))))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH3 in goal at 0
case lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3))
rewrite IH3 in goal at 0
case lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))
rewrite IH2 in goal at 1
simpl in goal
rewrite <- IH3 in goal at 0
rewrite IH2 in goal at 2
rewrite IH2 in goal at 2
assert forall (nat1:nat) (nat2:nat), SUCC (plus (nat1) (nat2)) = SUCC (plus (nat1) (plus (ZERO) (nat2)))
reflexivity
reflexivity
rewrite lemma3 in goal at 1
rewrite lemma3 in goal at 1
rewrite IH1 in goal at 1
rewrite lemma3 in goal at 1
rewrite <- IH3 in goal at 0
rewrite IH2 in goal at 0
rewrite IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: plus (SUCC (plus (SUCC (ZERO)) (plus (ZERO) (plus (ZERO) (plus (ZERO) (SUCC (SUCC (ZERO)))))))) (tf1 (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Tnil) (Node (SUCC (ZERO)) (Node (SUCC (SUCC (ZERO))) (Tnil) (Tnil)) (Node (SUCC (ZERO)) (Tnil) (Tnil)))) (Tnil))) = SUCC (plus (plus (SUCC (ZERO)) (SUCC (SUCC (ZERO)))) (plus (ZERO) (tf1 (ZERO) (Tnil))))
Prop: plus (SUCC (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (SUCC (SUCC (SUCC (ZERO))))))))) (tf1 (ZERO) (Tnil)) = SUCC (plus (plus (ZERO) (SUCC (SUCC (SUCC (ZERO))))) (plus (ZERO) (tf1 (ZERO) (Tnil))))
Prop: plus (SUCC (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (SUCC (ZERO))))))) (tf1 (ZERO) (Tnil)) = SUCC (plus (plus (ZERO) (SUCC (ZERO))) (plus (ZERO) (tf1 (ZERO) (Tnil))))
previous tactics
simpl in goal
rewrite IH1 in goal at 0
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH3 in goal at 0
case lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3))
rewrite IH3 in goal at 0
case lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))
rewrite IH2 in goal at 1
simpl in goal
rewrite <- IH3 in goal at 0
rewrite IH2 in goal at 2
rewrite IH2 in goal at 2
assert forall (nat1:nat) (nat2:nat), SUCC (plus (nat1) (nat2)) = SUCC (plus (nat1) (plus (ZERO) (nat2)))
reflexivity
reflexivity
rewrite lemma3 in goal at 1
rewrite lemma3 in goal at 1
rewrite IH1 in goal at 1
rewrite lemma3 in goal at 1
rewrite <- IH3 in goal at 0
rewrite IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: plus (SUCC (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO)))))) (tf1 (ZERO) (Node (SUCC (ZERO)) (Tnil) (Node (ZERO) (Tnil) (Tnil)))) = SUCC (plus (plus (ZERO) (ZERO)) (tf1 (ZERO) (Tnil)))
Prop: plus (SUCC (plus (SUCC (SUCC (SUCC (ZERO)))) (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO)))))) (tf1 (ZERO) (Node (SUCC (SUCC (ZERO))) (Tnil) (Tnil))) = SUCC (plus (plus (SUCC (SUCC (SUCC (ZERO)))) (ZERO)) (tf1 (ZERO) (Tnil)))
Prop: plus (SUCC (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (SUCC (ZERO))))))) (tf1 (ZERO) (Node (SUCC (ZERO)) (Tnil) (Tnil))) = SUCC (plus (plus (ZERO) (SUCC (ZERO))) (tf1 (ZERO) (Node (SUCC (SUCC (ZERO))) (Tnil) (Node (ZERO) (Tnil) (Tnil)))))
previous tactics
simpl in goal
rewrite IH1 in goal at 0
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH3 in goal at 0
case lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3))
rewrite IH3 in goal at 0
case lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))
rewrite IH2 in goal at 1
simpl in goal
rewrite <- IH3 in goal at 0
rewrite IH2 in goal at 2
rewrite IH2 in goal at 2
assert forall (nat1:nat) (nat2:nat), SUCC (plus (nat1) (nat2)) = SUCC (plus (nat1) (plus (ZERO) (nat2)))
reflexivity
reflexivity
rewrite lemma3 in goal at 1
rewrite lemma3 in goal at 1
rewrite IH1 in goal at 1
rewrite lemma3 in goal at 1
rewrite <- IH3 in goal at 0
validate generalize_common_subterm_goal
Prop: plus (SUCC (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (SUCC (ZERO))))))) (tf1 (ZERO) (Tnil)) = SUCC (tf1 (plus (ZERO) (SUCC (ZERO))) (Node (ZERO) (Tnil) (Tnil)))
Prop: plus (SUCC (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO)))))) (tf1 (ZERO) (Node (SUCC (SUCC (ZERO))) (Tnil) (Tnil))) = SUCC (tf1 (plus (ZERO) (ZERO)) (Tnil))
Prop: plus (SUCC (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (SUCC (ZERO))))))) (tf1 (ZERO) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Node (ZERO) (Tnil) (Tnil)) (Tnil)) (Node (ZERO) (Tnil) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil)))) (Tnil)) (Node (SUCC (ZERO)) (Tnil) (Tnil))) (Tnil))) = SUCC (tf1 (plus (ZERO) (SUCC (ZERO))) (Tnil))
previous tactics
simpl in goal
rewrite IH1 in goal at 0
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH3 in goal at 0
case lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3))
rewrite IH3 in goal at 0
case lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))
rewrite IH2 in goal at 1
simpl in goal
rewrite <- IH3 in goal at 0
rewrite IH2 in goal at 2
rewrite IH2 in goal at 2
assert forall (nat1:nat) (nat2:nat), SUCC (plus (nat1) (nat2)) = SUCC (plus (nat1) (plus (ZERO) (nat2)))
reflexivity
reflexivity
rewrite lemma3 in goal at 1
rewrite lemma3 in goal at 1
rewrite IH1 in goal at 1
rewrite lemma3 in goal at 1
validate generalize_common_subterm_goal
Prop: plus (SUCC (plus (SUCC (ZERO)) (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO)))))) (tf1 (ZERO) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil))) = SUCC (plus (SUCC (ZERO)) (if lq (tf1 (ZERO) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil))) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil))))
Prop: plus (SUCC (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO)))))) (tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil))) = SUCC (plus (ZERO) (if lq (tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil))) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil))))
Prop: plus (SUCC (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO)))))) (tf1 (ZERO) (Tnil)) = SUCC (plus (ZERO) (if lq (tf1 (ZERO) (Tnil)) (tf1 (ZERO) (Node (SUCC (ZERO)) (Tnil) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil)) (Tnil)) (Node (SUCC (ZERO)) (Tnil) (Node (SUCC (SUCC (ZERO))) (Node (SUCC (ZERO)) (Tnil) (Tnil)) (Node (SUCC (ZERO)) (Tnil) (Tnil))))))) then tf1 (ZERO) (Node (SUCC (ZERO)) (Tnil) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil)) (Tnil)) (Node (SUCC (ZERO)) (Tnil) (Node (SUCC (SUCC (ZERO))) (Node (SUCC (ZERO)) (Tnil) (Tnil)) (Node (SUCC (ZERO)) (Tnil) (Tnil)))))) else tf1 (ZERO) (Tnil)))
previous tactics
simpl in goal
rewrite IH1 in goal at 0
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH3 in goal at 0
case lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3))
rewrite IH3 in goal at 0
case lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))
rewrite IH2 in goal at 1
simpl in goal
rewrite <- IH3 in goal at 0
rewrite IH2 in goal at 2
rewrite IH2 in goal at 2
assert forall (nat1:nat) (nat2:nat), SUCC (plus (nat1) (nat2)) = SUCC (plus (nat1) (plus (ZERO) (nat2)))
reflexivity
reflexivity
rewrite lemma3 in goal at 1
rewrite lemma3 in goal at 1
rewrite IH1 in goal at 1
validate generalize_common_subterm_goal
Prop: plus (SUCC (plus (SUCC (SUCC (ZERO))) (plus (ZERO) (plus (ZERO) (SUCC (ZERO)))))) (tf1 (ZERO) (Node (SUCC (SUCC (ZERO))) (Tnil) (Tnil))) = SUCC (plus (SUCC (SUCC (ZERO))) (if lq (tf1 (SUCC (ZERO)) (Node (SUCC (SUCC (ZERO))) (Tnil) (Tnil))) (tf1 (SUCC (ZERO)) (Node (SUCC (ZERO)) (Tnil) (Tnil))) then tf1 (SUCC (ZERO)) (Node (SUCC (ZERO)) (Tnil) (Tnil)) else tf1 (SUCC (ZERO)) (Node (SUCC (SUCC (ZERO))) (Tnil) (Tnil))))
Prop: plus (SUCC (plus (ZERO) (plus (ZERO) (plus (ZERO) (SUCC (SUCC (ZERO))))))) (tf1 (ZERO) (Tnil)) = SUCC (plus (ZERO) (if lq (tf1 (SUCC (SUCC (ZERO))) (Tnil)) (tf1 (SUCC (SUCC (ZERO))) (Tnil)) then tf1 (SUCC (SUCC (ZERO))) (Tnil) else tf1 (SUCC (SUCC (ZERO))) (Tnil)))
Prop: plus (SUCC (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO))))) (tf1 (ZERO) (Tnil)) = SUCC (plus (ZERO) (if lq (tf1 (ZERO) (Tnil)) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (Tnil)))
previous tactics
simpl in goal
rewrite IH1 in goal at 0
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH3 in goal at 0
case lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3))
rewrite IH3 in goal at 0
case lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))
rewrite IH2 in goal at 1
simpl in goal
rewrite <- IH3 in goal at 0
rewrite IH2 in goal at 2
rewrite IH2 in goal at 2
assert forall (nat1:nat) (nat2:nat), SUCC (plus (nat1) (nat2)) = SUCC (plus (nat1) (plus (ZERO) (nat2)))
reflexivity
reflexivity
rewrite lemma3 in goal at 1
rewrite lemma3 in goal at 1
validate generalize_common_subterm_goal
Prop: tf1 (SUCC (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO))))) (Tnil) = SUCC (plus (ZERO) (if lq (tf1 (ZERO) (Tnil)) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (Tnil)))
Prop: tf1 (SUCC (plus (SUCC (SUCC (SUCC (ZERO)))) (plus (ZERO) (plus (ZERO) (ZERO))))) (Tnil) = SUCC (plus (SUCC (SUCC (SUCC (ZERO)))) (if lq (tf1 (ZERO) (Tnil)) (tf1 (ZERO) (Node (ZERO) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil)))) (Node (ZERO) (Tnil) (Tnil)))) then tf1 (ZERO) (Node (ZERO) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil)))) (Node (ZERO) (Tnil) (Tnil))) else tf1 (ZERO) (Tnil)))
Prop: tf1 (SUCC (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO))))) (Tnil) = SUCC (plus (ZERO) (if lq (tf1 (ZERO) (Tnil)) (tf1 (ZERO) (Node (SUCC (ZERO)) (Tnil) (Tnil))) then tf1 (ZERO) (Node (SUCC (ZERO)) (Tnil) (Tnil)) else tf1 (ZERO) (Tnil)))
previous tactics
simpl in goal
rewrite IH1 in goal at 0
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH3 in goal at 0
case lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3))
rewrite IH3 in goal at 0
case lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))
rewrite IH2 in goal at 1
simpl in goal
rewrite <- IH3 in goal at 0
rewrite IH2 in goal at 2
rewrite IH2 in goal at 2
assert forall (nat1:nat) (nat2:nat), SUCC (plus (nat1) (nat2)) = SUCC (plus (nat1) (plus (ZERO) (nat2)))
reflexivity
reflexivity
rewrite lemma3 in goal at 1
validate generalize_common_subterm_goal
Prop: tf1 (SUCC (plus (SUCC (ZERO)) (plus (ZERO) (ZERO)))) (Tnil) = SUCC (plus (SUCC (ZERO)) (if lq (tf1 (ZERO) (Tnil)) (tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil))) then tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil)) else tf1 (ZERO) (Tnil)))
Prop: tf1 (SUCC (plus (ZERO) (plus (ZERO) (SUCC (ZERO))))) (Node (ZERO) (Node (SUCC (ZERO)) (Tnil) (Tnil)) (Tnil)) = SUCC (plus (ZERO) (if lq (tf1 (SUCC (ZERO)) (Node (ZERO) (Node (SUCC (ZERO)) (Tnil) (Tnil)) (Tnil))) (tf1 (SUCC (ZERO)) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Tnil)))) then tf1 (SUCC (ZERO)) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Tnil))) else tf1 (SUCC (ZERO)) (Node (ZERO) (Node (SUCC (ZERO)) (Tnil) (Tnil)) (Tnil))))
Prop: tf1 (SUCC (plus (ZERO) (plus (ZERO) (ZERO)))) (Tnil) = SUCC (plus (ZERO) (if lq (tf1 (ZERO) (Tnil)) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (Tnil)))
previous tactics
simpl in goal
rewrite IH1 in goal at 0
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH3 in goal at 0
case lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3))
rewrite IH3 in goal at 0
case lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))
rewrite IH2 in goal at 1
simpl in goal
rewrite <- IH3 in goal at 0
rewrite IH2 in goal at 2
rewrite IH2 in goal at 2
assert forall (nat1:nat) (nat2:nat), SUCC (plus (nat1) (nat2)) = SUCC (plus (nat1) (plus (ZERO) (nat2)))
reflexivity
reflexivity
validate generalize_common_subterm_goal
Prop: tf1 (SUCC (plus (ZERO) (ZERO))) (Tnil) = SUCC (plus (ZERO) (if lq (tf1 (ZERO) (Tnil)) (tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil))) then tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil)) else tf1 (ZERO) (Tnil)))
Prop: tf1 (SUCC (plus (ZERO) (SUCC (ZERO)))) (Tnil) = SUCC (plus (ZERO) (if lq (tf1 (SUCC (ZERO)) (Tnil)) (tf1 (SUCC (ZERO)) (Tnil)) then tf1 (SUCC (ZERO)) (Tnil) else tf1 (SUCC (ZERO)) (Tnil)))
Prop: tf1 (SUCC (plus (SUCC (ZERO)) (SUCC (SUCC (ZERO))))) (Tnil) = SUCC (plus (SUCC (ZERO)) (if lq (tf1 (SUCC (SUCC (ZERO))) (Tnil)) (tf1 (SUCC (SUCC (ZERO))) (Tnil)) then tf1 (SUCC (SUCC (ZERO))) (Tnil) else tf1 (SUCC (SUCC (ZERO))) (Tnil)))
Lemma List
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tf1 (ZERO) (tree1)) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
End of Lemma List


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
plus (SUCC (plus (nat3) (plus (ZERO) (plus (ZERO) (nat2))))) (tf1 (ZERO) (tree2)) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
Lemma List
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
End of Lemma List


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
plus (SUCC (plus (nat3) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat2)))))) (tf1 (ZERO) (tree2)) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
Lemma List
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
End of Lemma List


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
plus (SUCC (plus (nat3) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat2)))))) (tf1 (ZERO) (tree2)) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

1 goal(s) more...

1 conjecture(s) more...
Lemma List
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
End of Lemma List


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
plus (SUCC (plus (nat3) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat2)))))) (tf1 (ZERO) (tree2)) = SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3)))

1 goal(s) more...

1 conjecture(s) more...
Lemma List
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
End of Lemma List


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
plus (SUCC (plus (nat3) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat2)))))) (tf1 (ZERO) (tree2)) = SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (tf1 (ZERO) (tree3))))

1 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 1059


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
plus (SUCC (plus (nat3) (plus (ZERO) (plus (ZERO) (nat2))))) (tf1 (ZERO) (tree2)) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tf1 (ZERO) (tree1)) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tf1 (ZERO) (tree1)) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))

---------------------------------------
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tf1 (ZERO) (tree1)) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 1060


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
plus (SUCC (plus (nat3) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat2)))))) (tf1 (ZERO) (tree2)) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))

---------------------------------------
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 1061


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
plus (SUCC (plus (nat3) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat2)))))) (tf1 (ZERO) (tree2)) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

1 goal(s) more...

1 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))

---------------------------------------
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 1062


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
plus (SUCC (plus (nat3) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat2)))))) (tf1 (ZERO) (tree2)) = SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3)))

1 goal(s) more...

1 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))

---------------------------------------
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 1063


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
plus (SUCC (plus (nat3) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat2)))))) (tf1 (ZERO) (tree2)) = SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (tf1 (ZERO) (tree3))))

1 goal(s) more...

1 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))

---------------------------------------
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 1064


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tf1 (ZERO) (tree1)) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))

---------------------------------------
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tf1 (ZERO) (tree1)) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))

0 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tf1 (ZERO) (tree1)) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))

---------------------------------------
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree1))) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat1(rank:11.)
=================================================
Progress: 1065


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))

---------------------------------------
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))

0 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))

---------------------------------------
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree1))) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat1(rank:11.)
=================================================
Progress: 1066


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))

---------------------------------------
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))

0 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))

---------------------------------------
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree1))) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat1(rank:11.)
=================================================
Progress: 1067


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))

---------------------------------------
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))

0 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))

---------------------------------------
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree1))) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat1(rank:11.)
=================================================
Progress: 1068


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))

---------------------------------------
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))

0 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))

---------------------------------------
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree1))) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat1(rank:11.)
=================================================
Progress: 1069


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tf1 (ZERO) (tree1)) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))

---------------------------------------
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree1))) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat1(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tf1 (ZERO) (tree1)) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
---------------------------------------
forall (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree1))) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction nat2(rank:12.)
=================================================
Progress: 1070


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))

---------------------------------------
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree1))) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat1(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
---------------------------------------
forall (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree1))) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction nat2(rank:12.)
=================================================
Progress: 1071


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))

---------------------------------------
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree1))) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat1(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
---------------------------------------
forall (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree1))) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction nat2(rank:12.)
=================================================
Progress: 1072


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))

---------------------------------------
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree1))) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat1(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
---------------------------------------
forall (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree1))) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction nat2(rank:12.)
=================================================
Progress: 1073


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))

---------------------------------------
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree1))) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat1(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
---------------------------------------
forall (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree1))) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction nat2(rank:12.)
=================================================
Progress: 1074


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tf1 (ZERO) (tree1)) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
---------------------------------------
forall (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree1))) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))

0 goal(s) more...

2 conjecture(s) more...
>>> induction nat2(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tf1 (ZERO) (tree1)) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (plus (ZERO) (nat1)) (tree1)) (tf1 (plus (ZERO) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (ZERO) (nat1)) (tree1))) (tf1 (SUCC (plus (ZERO) (nat1))) (tree2)) = false -> SUCC (plus (plus (ZERO) (nat1)) (tf1 (ZERO) (tree1))) = SUCC (plus (ZERO) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:12.)
=================================================
Progress: 1075


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
---------------------------------------
forall (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree1))) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))

0 goal(s) more...

2 conjecture(s) more...
>>> induction nat2(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (plus (ZERO) (nat1)) (tree1)) (tf1 (plus (ZERO) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (ZERO) (nat1)) (tree1))) (tf1 (SUCC (plus (ZERO) (nat1))) (tree2)) = false -> SUCC (plus (plus (ZERO) (nat1)) (tf1 (ZERO) (tree1))) = SUCC (plus (ZERO) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:12.)
=================================================
Progress: 1076


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
---------------------------------------
forall (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree1))) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))

0 goal(s) more...

2 conjecture(s) more...
>>> induction nat2(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (plus (ZERO) (nat1)) (tree1)) (tf1 (plus (ZERO) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (ZERO) (nat1)) (tree1))) (tf1 (SUCC (plus (ZERO) (nat1))) (tree2)) = false -> SUCC (plus (plus (ZERO) (nat1)) (tf1 (ZERO) (tree1))) = SUCC (tf1 (plus (ZERO) (nat1)) (tree2))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:12.)
=================================================
Progress: 1077


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
---------------------------------------
forall (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree1))) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))

0 goal(s) more...

2 conjecture(s) more...
>>> induction nat2(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (plus (ZERO) (nat1)) (tree1)) (tf1 (plus (ZERO) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (ZERO) (nat1)) (tree1))) (tf1 (SUCC (plus (ZERO) (nat1))) (tree2)) = false -> SUCC (plus (plus (ZERO) (nat1)) (tf1 (ZERO) (tree1))) = SUCC (plus (plus (ZERO) (nat1)) (tf1 (ZERO) (tree2)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:12.)
=================================================
Progress: 1078


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
---------------------------------------
forall (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree1))) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))

0 goal(s) more...

2 conjecture(s) more...
>>> induction nat2(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (plus (ZERO) (nat1)) (tree1)) (tf1 (plus (ZERO) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (ZERO) (nat1)) (tree1))) (tf1 (SUCC (plus (ZERO) (nat1))) (tree2)) = false -> SUCC (plus (plus (ZERO) (nat1)) (tf1 (ZERO) (tree1))) = SUCC (plus (plus (ZERO) (nat1)) (tf1 (ZERO) (tree2)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:12.)
=================================================
Progress: 1079


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tf1 (ZERO) (tree1)) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (plus (ZERO) (nat1)) (tree1)) (tf1 (plus (ZERO) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (ZERO) (nat1)) (tree1))) (tf1 (SUCC (plus (ZERO) (nat1))) (tree2)) = false -> SUCC (plus (plus (ZERO) (nat1)) (tf1 (ZERO) (tree1))) = SUCC (plus (ZERO) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tf1 (ZERO) (tree1)) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) = true->lq (SUCC (tf1 (nat1) (tree1))) (tf1 (SUCC (nat1)) (tree2)) = false -> SUCC (plus (nat1) (tf1 (ZERO) (tree1))) = SUCC (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction tree1(rank:13.)
=================================================
Progress: 1080


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (plus (ZERO) (nat1)) (tree1)) (tf1 (plus (ZERO) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (ZERO) (nat1)) (tree1))) (tf1 (SUCC (plus (ZERO) (nat1))) (tree2)) = false -> SUCC (plus (plus (ZERO) (nat1)) (tf1 (ZERO) (tree1))) = SUCC (plus (ZERO) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) = true->lq (SUCC (tf1 (nat1) (tree1))) (tf1 (SUCC (nat1)) (tree2)) = false -> SUCC (plus (nat1) (tf1 (ZERO) (tree1))) = SUCC (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction tree1(rank:13.)
=================================================
Progress: 1081


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (plus (ZERO) (nat1)) (tree1)) (tf1 (plus (ZERO) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (ZERO) (nat1)) (tree1))) (tf1 (SUCC (plus (ZERO) (nat1))) (tree2)) = false -> SUCC (plus (plus (ZERO) (nat1)) (tf1 (ZERO) (tree1))) = SUCC (tf1 (plus (ZERO) (nat1)) (tree2))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) = true->lq (SUCC (tf1 (nat1) (tree1))) (tf1 (SUCC (nat1)) (tree2)) = false -> SUCC (plus (nat1) (tf1 (ZERO) (tree1))) = SUCC (tf1 (nat1) (tree2))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction tree1(rank:13.)
=================================================
Progress: 1082


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (plus (ZERO) (nat1)) (tree1)) (tf1 (plus (ZERO) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (ZERO) (nat1)) (tree1))) (tf1 (SUCC (plus (ZERO) (nat1))) (tree2)) = false -> SUCC (plus (plus (ZERO) (nat1)) (tf1 (ZERO) (tree1))) = SUCC (plus (plus (ZERO) (nat1)) (tf1 (ZERO) (tree2)))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) = true->lq (SUCC (tf1 (nat1) (tree1))) (tf1 (SUCC (nat1)) (tree2)) = false -> SUCC (plus (nat1) (tf1 (ZERO) (tree1))) = SUCC (plus (nat1) (tf1 (ZERO) (tree2)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction tree1(rank:13.)
=================================================
Progress: 1083


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (plus (ZERO) (nat1)) (tree1)) (tf1 (plus (ZERO) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (ZERO) (nat1)) (tree1))) (tf1 (SUCC (plus (ZERO) (nat1))) (tree2)) = false -> SUCC (plus (plus (ZERO) (nat1)) (tf1 (ZERO) (tree1))) = SUCC (plus (plus (ZERO) (nat1)) (tf1 (ZERO) (tree2)))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) = true->lq (SUCC (tf1 (nat1) (tree1))) (tf1 (SUCC (nat1)) (tree2)) = false -> SUCC (plus (nat1) (tf1 (ZERO) (tree1))) = SUCC (plus (nat1) (tf1 (ZERO) (tree2)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction tree1(rank:13.)
=================================================
Progress: 1084


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tf1 (ZERO) (tree1)) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) = true->lq (SUCC (tf1 (nat1) (tree1))) (tf1 (SUCC (nat1)) (tree2)) = false -> SUCC (plus (nat1) (tf1 (ZERO) (tree1))) = SUCC (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1))

1 goal(s) more...

2 conjecture(s) more...
>>> induction tree1(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tf1 (ZERO) (tree1)) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (tree2:tree), lq (tf1 (nat1) (Tnil)) (tf1 (nat1) (tree2)) = true->lq (SUCC (tf1 (nat1) (Tnil))) (tf1 (SUCC (nat1)) (tree2)) = false -> SUCC (plus (nat1) (tf1 (ZERO) (Tnil))) = SUCC (if lq (tf1 (nat1) (Tnil)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (Tnil))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 1085


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) = true->lq (SUCC (tf1 (nat1) (tree1))) (tf1 (SUCC (nat1)) (tree2)) = false -> SUCC (plus (nat1) (tf1 (ZERO) (tree1))) = SUCC (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1))

1 goal(s) more...

2 conjecture(s) more...
>>> induction tree1(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (tree2:tree), lq (tf1 (nat1) (Tnil)) (tf1 (nat1) (tree2)) = true->lq (SUCC (tf1 (nat1) (Tnil))) (tf1 (SUCC (nat1)) (tree2)) = false -> SUCC (plus (nat1) (tf1 (ZERO) (Tnil))) = SUCC (if lq (tf1 (nat1) (Tnil)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (Tnil))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 1086


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) = true->lq (SUCC (tf1 (nat1) (tree1))) (tf1 (SUCC (nat1)) (tree2)) = false -> SUCC (plus (nat1) (tf1 (ZERO) (tree1))) = SUCC (tf1 (nat1) (tree2))

1 goal(s) more...

2 conjecture(s) more...
>>> induction tree1(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (tree2:tree), lq (tf1 (nat1) (Tnil)) (tf1 (nat1) (tree2)) = true->lq (SUCC (tf1 (nat1) (Tnil))) (tf1 (SUCC (nat1)) (tree2)) = false -> SUCC (plus (nat1) (tf1 (ZERO) (Tnil))) = SUCC (tf1 (nat1) (tree2))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 1087


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) = true->lq (SUCC (tf1 (nat1) (tree1))) (tf1 (SUCC (nat1)) (tree2)) = false -> SUCC (plus (nat1) (tf1 (ZERO) (tree1))) = SUCC (plus (nat1) (tf1 (ZERO) (tree2)))

1 goal(s) more...

2 conjecture(s) more...
>>> induction tree1(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (tree2:tree), lq (tf1 (nat1) (Tnil)) (tf1 (nat1) (tree2)) = true->lq (SUCC (tf1 (nat1) (Tnil))) (tf1 (SUCC (nat1)) (tree2)) = false -> SUCC (plus (nat1) (tf1 (ZERO) (Tnil))) = SUCC (plus (nat1) (tf1 (ZERO) (tree2)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 1088


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) = true->lq (SUCC (tf1 (nat1) (tree1))) (tf1 (SUCC (nat1)) (tree2)) = false -> SUCC (plus (nat1) (tf1 (ZERO) (tree1))) = SUCC (plus (nat1) (tf1 (ZERO) (tree2)))

1 goal(s) more...

2 conjecture(s) more...
>>> induction tree1(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (tree2:tree), lq (tf1 (nat1) (Tnil)) (tf1 (nat1) (tree2)) = true->lq (SUCC (tf1 (nat1) (Tnil))) (tf1 (SUCC (nat1)) (tree2)) = false -> SUCC (plus (nat1) (tf1 (ZERO) (Tnil))) = SUCC (plus (nat1) (tf1 (ZERO) (tree2)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 1089


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tf1 (ZERO) (tree1)) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (tree2:tree), lq (tf1 (nat1) (Tnil)) (tf1 (nat1) (tree2)) = true->lq (SUCC (tf1 (nat1) (Tnil))) (tf1 (SUCC (nat1)) (tree2)) = false -> SUCC (plus (nat1) (tf1 (ZERO) (Tnil))) = SUCC (if lq (tf1 (nat1) (Tnil)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (Tnil))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tf1 (ZERO) (tree1)) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (tree2:tree), lq (nat1) (tf1 (nat1) (tree2)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree2)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (if lq (nat1) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (Tnil))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction tree2(rank:14.)
=================================================
Progress: 1090


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (tree2:tree), lq (tf1 (nat1) (Tnil)) (tf1 (nat1) (tree2)) = true->lq (SUCC (tf1 (nat1) (Tnil))) (tf1 (SUCC (nat1)) (tree2)) = false -> SUCC (plus (nat1) (tf1 (ZERO) (Tnil))) = SUCC (if lq (tf1 (nat1) (Tnil)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (Tnil))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (tree2:tree), lq (nat1) (tf1 (nat1) (tree2)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree2)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (if lq (nat1) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (Tnil))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction tree2(rank:14.)
=================================================
Progress: 1091


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (tree2:tree), lq (tf1 (nat1) (Tnil)) (tf1 (nat1) (tree2)) = true->lq (SUCC (tf1 (nat1) (Tnil))) (tf1 (SUCC (nat1)) (tree2)) = false -> SUCC (plus (nat1) (tf1 (ZERO) (Tnil))) = SUCC (tf1 (nat1) (tree2))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (tree2:tree), lq (nat1) (tf1 (nat1) (tree2)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree2)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (tf1 (nat1) (tree2))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction tree2(rank:14.)
=================================================
Progress: 1092


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (tree2:tree), lq (tf1 (nat1) (Tnil)) (tf1 (nat1) (tree2)) = true->lq (SUCC (tf1 (nat1) (Tnil))) (tf1 (SUCC (nat1)) (tree2)) = false -> SUCC (plus (nat1) (tf1 (ZERO) (Tnil))) = SUCC (plus (nat1) (tf1 (ZERO) (tree2)))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (tree2:tree), lq (nat1) (tf1 (nat1) (tree2)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree2)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree2)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction tree2(rank:14.)
=================================================
Progress: 1093


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (tree2:tree), lq (tf1 (nat1) (Tnil)) (tf1 (nat1) (tree2)) = true->lq (SUCC (tf1 (nat1) (Tnil))) (tf1 (SUCC (nat1)) (tree2)) = false -> SUCC (plus (nat1) (tf1 (ZERO) (Tnil))) = SUCC (plus (nat1) (tf1 (ZERO) (tree2)))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (tree2:tree), lq (nat1) (tf1 (nat1) (tree2)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree2)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree2)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction tree2(rank:14.)
=================================================
Progress: 1094


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
tf1 (SUCC (plus (nat3) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat2))))))) (tree2) = SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3)))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 14.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
tf1 (SUCC (plus (nat3) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat2))))))) (tree2) = SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (tf1 (ZERO) (tree3))))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH3 in goal at 0
case lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3))
rewrite IH3 in goal at 0
case lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))
rewrite IH2 in goal at 1
simpl in goal
rewrite <- IH3 in goal at 0
rewrite IH2 in goal at 2
rewrite IH2 in goal at 2
assert forall (nat1:nat) (nat2:nat), SUCC (plus (nat1) (nat2)) = SUCC (plus (nat1) (plus (ZERO) (nat2)))
reflexivity
reflexivity
rewrite lemma3 in goal at 1
rewrite lemma3 in goal at 1
rewrite lemma3 in goal at 1
rewrite <- IH3 in goal at 0
rewrite lemma3 in goal at 0
rewrite IH2 in goal at 0
rewrite IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: tf1 (SUCC (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO))))))) (Tnil) = SUCC (plus (plus (ZERO) (ZERO)) (plus (ZERO) (tf1 (ZERO) (Tnil))))
Prop: tf1 (SUCC (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO))))))) (Tnil) = SUCC (plus (plus (ZERO) (ZERO)) (plus (ZERO) (tf1 (ZERO) (Tnil))))
Prop: tf1 (SUCC (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO))))))) (Tnil) = SUCC (plus (plus (ZERO) (ZERO)) (plus (ZERO) (tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil)))))
previous tactics
simpl in goal
rewrite IH1 in goal at 0
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH3 in goal at 0
case lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3))
rewrite IH3 in goal at 0
case lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))
rewrite IH2 in goal at 1
simpl in goal
rewrite <- IH3 in goal at 0
rewrite IH2 in goal at 2
rewrite IH2 in goal at 2
assert forall (nat1:nat) (nat2:nat), SUCC (plus (nat1) (nat2)) = SUCC (plus (nat1) (plus (ZERO) (nat2)))
reflexivity
reflexivity
rewrite lemma3 in goal at 1
rewrite lemma3 in goal at 1
rewrite lemma3 in goal at 1
rewrite <- IH3 in goal at 0
rewrite lemma3 in goal at 0
rewrite IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: tf1 (SUCC (plus (SUCC (ZERO)) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (SUCC (ZERO)))))))) (Tnil) = SUCC (plus (plus (SUCC (ZERO)) (SUCC (ZERO))) (tf1 (ZERO) (Tnil)))
Prop: tf1 (SUCC (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (SUCC (ZERO)))))))) (Node (SUCC (SUCC (ZERO))) (Tnil) (Tnil)) = SUCC (plus (plus (ZERO) (SUCC (ZERO))) (tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil))))
Prop: tf1 (SUCC (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (SUCC (SUCC (ZERO))))))))) (Tnil) = SUCC (plus (plus (ZERO) (SUCC (SUCC (ZERO)))) (tf1 (ZERO) (Node (ZERO) (Node (ZERO) (Tnil) (Node (ZERO) (Tnil) (Tnil))) (Tnil))))
previous tactics
simpl in goal
rewrite IH1 in goal at 0
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH3 in goal at 0
case lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3))
rewrite IH3 in goal at 0
case lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))
rewrite IH2 in goal at 1
simpl in goal
rewrite <- IH3 in goal at 0
rewrite IH2 in goal at 2
rewrite IH2 in goal at 2
assert forall (nat1:nat) (nat2:nat), SUCC (plus (nat1) (nat2)) = SUCC (plus (nat1) (plus (ZERO) (nat2)))
reflexivity
reflexivity
rewrite lemma3 in goal at 1
rewrite lemma3 in goal at 1
rewrite lemma3 in goal at 1
rewrite <- IH3 in goal at 0
rewrite lemma3 in goal at 0
validate generalize_common_subterm_goal
Prop: tf1 (SUCC (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO))))))) (Node (ZERO) (Tnil) (Tnil)) = SUCC (tf1 (plus (ZERO) (ZERO)) (Tnil))
Prop: tf1 (SUCC (plus (SUCC (ZERO)) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO))))))) (Node (ZERO) (Tnil) (Node (SUCC (SUCC (ZERO))) (Node (SUCC (ZERO)) (Tnil) (Tnil)) (Node (ZERO) (Tnil) (Tnil)))) = SUCC (tf1 (plus (SUCC (ZERO)) (ZERO)) (Tnil))
Prop: tf1 (SUCC (plus (SUCC (ZERO)) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO))))))) (Tnil) = SUCC (tf1 (plus (SUCC (ZERO)) (ZERO)) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil)))
previous tactics
simpl in goal
rewrite IH1 in goal at 0
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH3 in goal at 0
case lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3))
rewrite IH3 in goal at 0
case lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))
rewrite IH2 in goal at 1
simpl in goal
rewrite <- IH3 in goal at 0
rewrite IH2 in goal at 2
rewrite IH2 in goal at 2
assert forall (nat1:nat) (nat2:nat), SUCC (plus (nat1) (nat2)) = SUCC (plus (nat1) (plus (ZERO) (nat2)))
reflexivity
reflexivity
rewrite lemma3 in goal at 1
rewrite lemma3 in goal at 1
rewrite lemma3 in goal at 1
rewrite <- IH3 in goal at 0
validate generalize_common_subterm_goal
Prop: tf1 (SUCC (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO)))))) (Tnil) = SUCC (tf1 (plus (ZERO) (ZERO)) (Tnil))
Prop: tf1 (SUCC (plus (SUCC (SUCC (ZERO))) (plus (ZERO) (plus (ZERO) (plus (ZERO) (SUCC (SUCC (ZERO)))))))) (Tnil) = SUCC (tf1 (plus (SUCC (SUCC (ZERO))) (SUCC (SUCC (ZERO)))) (Tnil))
Prop: tf1 (SUCC (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO)))))) (Node (ZERO) (Tnil) (Node (SUCC (ZERO)) (Node (ZERO) (Tnil) (Tnil)) (Tnil))) = SUCC (tf1 (plus (ZERO) (ZERO)) (Tnil))
previous tactics
simpl in goal
rewrite IH1 in goal at 0
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH3 in goal at 0
case lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3))
rewrite IH3 in goal at 0
case lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))
rewrite IH2 in goal at 1
simpl in goal
rewrite <- IH3 in goal at 0
rewrite IH2 in goal at 2
rewrite IH2 in goal at 2
assert forall (nat1:nat) (nat2:nat), SUCC (plus (nat1) (nat2)) = SUCC (plus (nat1) (plus (ZERO) (nat2)))
reflexivity
reflexivity
rewrite lemma3 in goal at 1
rewrite lemma3 in goal at 1
rewrite lemma3 in goal at 1
validate generalize_common_subterm_goal
Prop: tf1 (SUCC (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO)))))) (Node (ZERO) (Tnil) (Tnil)) = SUCC (plus (ZERO) (if lq (tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil))) (tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil))) then tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil)) else tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil))))
Prop: tf1 (SUCC (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO)))))) (Node (ZERO) (Tnil) (Tnil)) = SUCC (plus (ZERO) (if lq (tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil))) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil))))
Prop: tf1 (SUCC (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO)))))) (Tnil) = SUCC (plus (ZERO) (if lq (tf1 (ZERO) (Tnil)) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (Tnil)))
previous tactics
simpl in goal
rewrite IH1 in goal at 0
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH3 in goal at 0
case lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3))
rewrite IH3 in goal at 0
case lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))
rewrite IH2 in goal at 1
simpl in goal
rewrite <- IH3 in goal at 0
rewrite IH2 in goal at 2
rewrite IH2 in goal at 2
assert forall (nat1:nat) (nat2:nat), SUCC (plus (nat1) (nat2)) = SUCC (plus (nat1) (plus (ZERO) (nat2)))
reflexivity
reflexivity
rewrite lemma3 in goal at 1
rewrite lemma3 in goal at 1
validate generalize_common_subterm_goal
Prop: tf1 (SUCC (plus (SUCC (ZERO)) (plus (ZERO) (plus (ZERO) (ZERO))))) (Tnil) = SUCC (plus (SUCC (ZERO)) (if lq (tf1 (ZERO) (Tnil)) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (Tnil)))
Prop: tf1 (SUCC (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO))))) (Node (ZERO) (Tnil) (Tnil)) = SUCC (plus (ZERO) (if lq (tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil))) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil))))
Prop: tf1 (SUCC (plus (SUCC (ZERO)) (plus (ZERO) (plus (ZERO) (ZERO))))) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Tnil) (Node (SUCC (ZERO)) (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Tnil) (Tnil)) (Tnil)) (Tnil))) (Tnil)) (Tnil)) = SUCC (plus (SUCC (ZERO)) (if lq (tf1 (ZERO) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Tnil) (Node (SUCC (ZERO)) (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Tnil) (Tnil)) (Tnil)) (Tnil))) (Tnil)) (Tnil))) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Tnil) (Node (SUCC (ZERO)) (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Tnil) (Tnil)) (Tnil)) (Tnil))) (Tnil)) (Tnil))))
previous tactics
simpl in goal
rewrite IH1 in goal at 0
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH3 in goal at 0
case lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3))
rewrite IH3 in goal at 0
case lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))
rewrite IH2 in goal at 1
simpl in goal
rewrite <- IH3 in goal at 0
rewrite IH2 in goal at 2
rewrite IH2 in goal at 2
assert forall (nat1:nat) (nat2:nat), SUCC (plus (nat1) (nat2)) = SUCC (plus (nat1) (plus (ZERO) (nat2)))
reflexivity
reflexivity
rewrite lemma3 in goal at 1
validate generalize_common_subterm_goal
Prop: tf1 (SUCC (plus (SUCC (ZERO)) (plus (ZERO) (ZERO)))) (Tnil) = SUCC (plus (SUCC (ZERO)) (if lq (tf1 (ZERO) (Tnil)) (tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil))) then tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil)) else tf1 (ZERO) (Tnil)))
Prop: tf1 (SUCC (plus (ZERO) (plus (ZERO) (ZERO)))) (Node (SUCC (ZERO)) (Tnil) (Node (ZERO) (Tnil) (Tnil))) = SUCC (plus (ZERO) (if lq (tf1 (ZERO) (Node (SUCC (ZERO)) (Tnil) (Node (ZERO) (Tnil) (Tnil)))) (tf1 (ZERO) (Node (SUCC (SUCC (SUCC (ZERO)))) (Tnil) (Tnil))) then tf1 (ZERO) (Node (SUCC (SUCC (SUCC (ZERO)))) (Tnil) (Tnil)) else tf1 (ZERO) (Node (SUCC (ZERO)) (Tnil) (Node (ZERO) (Tnil) (Tnil)))))
Prop: tf1 (SUCC (plus (ZERO) (plus (ZERO) (ZERO)))) (Tnil) = SUCC (plus (ZERO) (if lq (tf1 (ZERO) (Tnil)) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (Tnil)))
previous tactics
simpl in goal
rewrite IH1 in goal at 0
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH3 in goal at 0
case lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3))
rewrite IH3 in goal at 0
case lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))
rewrite IH2 in goal at 1
simpl in goal
rewrite <- IH3 in goal at 0
rewrite IH2 in goal at 2
rewrite IH2 in goal at 2
assert forall (nat1:nat) (nat2:nat), SUCC (plus (nat1) (nat2)) = SUCC (plus (nat1) (plus (ZERO) (nat2)))
reflexivity
reflexivity
validate generalize_common_subterm_goal
Prop: tf1 (SUCC (plus (ZERO) (ZERO))) (Tnil) = SUCC (plus (ZERO) (if lq (tf1 (ZERO) (Tnil)) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (Tnil)))
Prop: tf1 (SUCC (plus (ZERO) (SUCC (ZERO)))) (Tnil) = SUCC (plus (ZERO) (if lq (tf1 (SUCC (ZERO)) (Tnil)) (tf1 (SUCC (ZERO)) (Node (ZERO) (Tnil) (Tnil))) then tf1 (SUCC (ZERO)) (Node (ZERO) (Tnil) (Tnil)) else tf1 (SUCC (ZERO)) (Tnil)))
Prop: tf1 (SUCC (plus (SUCC (ZERO)) (ZERO))) (Tnil) = SUCC (plus (SUCC (ZERO)) (if lq (tf1 (ZERO) (Tnil)) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (Tnil)))
Lemma List
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
End of Lemma List


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
tf1 (SUCC (plus (nat3) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat2)))))) (tree2) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
Lemma List
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
End of Lemma List


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
tf1 (SUCC (plus (nat3) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat2)))))) (tree2) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

1 goal(s) more...

1 conjecture(s) more...
Lemma List
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
End of Lemma List


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
tf1 (SUCC (plus (nat3) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat2))))))) (tree2) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

1 goal(s) more...

1 conjecture(s) more...
Lemma List
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
End of Lemma List


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
tf1 (SUCC (plus (nat3) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat2))))))) (tree2) = SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3)))

1 goal(s) more...

1 conjecture(s) more...
Lemma List
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
End of Lemma List


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
tf1 (SUCC (plus (nat3) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat2))))))) (tree2) = SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (tf1 (ZERO) (tree3))))

1 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 1095


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
tf1 (SUCC (plus (nat3) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat2)))))) (tree2) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))

---------------------------------------
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 1096


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
tf1 (SUCC (plus (nat3) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat2)))))) (tree2) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

1 goal(s) more...

1 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))

---------------------------------------
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 1097


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
tf1 (SUCC (plus (nat3) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat2))))))) (tree2) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

1 goal(s) more...

1 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))

---------------------------------------
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 1098


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
tf1 (SUCC (plus (nat3) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat2))))))) (tree2) = SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3)))

1 goal(s) more...

1 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))

---------------------------------------
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 1099


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
tf1 (SUCC (plus (nat3) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat2))))))) (tree2) = SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (tf1 (ZERO) (tree3))))

1 goal(s) more...

1 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))

---------------------------------------
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 1100


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))

---------------------------------------
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))

0 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))

---------------------------------------
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (nat1))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat1(rank:11.)
=================================================
Progress: 1101


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))

---------------------------------------
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))

0 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))

---------------------------------------
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (nat1))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat1(rank:11.)
=================================================
Progress: 1102


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))

---------------------------------------
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))

0 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))

---------------------------------------
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (nat1))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat1(rank:11.)
=================================================
Progress: 1103


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))

---------------------------------------
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))

0 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))

---------------------------------------
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (nat1))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat1(rank:11.)
=================================================
Progress: 1104


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))

---------------------------------------
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))

0 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))

---------------------------------------
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (nat1))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat1(rank:11.)
=================================================
Progress: 1105


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))

---------------------------------------
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (nat1))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat1(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
---------------------------------------
forall (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (nat1))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction nat2(rank:12.)
=================================================
Progress: 1106


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))

---------------------------------------
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (nat1))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat1(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
---------------------------------------
forall (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (nat1))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction nat2(rank:12.)
=================================================
Progress: 1107


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))

---------------------------------------
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (nat1))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat1(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
---------------------------------------
forall (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (nat1))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction nat2(rank:12.)
=================================================
Progress: 1108


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))

---------------------------------------
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (nat1))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat1(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
---------------------------------------
forall (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (nat1))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction nat2(rank:12.)
=================================================
Progress: 1109


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))

---------------------------------------
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (nat1))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat1(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
---------------------------------------
forall (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (nat1))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction nat2(rank:12.)
=================================================
Progress: 1110


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
---------------------------------------
forall (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (nat1))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))

0 goal(s) more...

2 conjecture(s) more...
>>> induction nat2(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (plus (ZERO) (nat1)) (tree1)) (tf1 (plus (ZERO) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (ZERO) (nat1)) (tree1))) (tf1 (SUCC (plus (ZERO) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (ZERO) (nat1))) (tree1) = SUCC (plus (ZERO) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:12.)
=================================================
Progress: 1111


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
---------------------------------------
forall (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (nat1))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))

0 goal(s) more...

2 conjecture(s) more...
>>> induction nat2(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (plus (ZERO) (nat1)) (tree1)) (tf1 (plus (ZERO) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (ZERO) (nat1)) (tree1))) (tf1 (SUCC (plus (ZERO) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (ZERO) (nat1))) (tree1) = SUCC (tf1 (plus (ZERO) (nat1)) (tree2))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:12.)
=================================================
Progress: 1112


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
---------------------------------------
forall (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (nat1))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))

0 goal(s) more...

2 conjecture(s) more...
>>> induction nat2(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (plus (ZERO) (nat1)) (tree1)) (tf1 (plus (ZERO) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (ZERO) (nat1)) (tree1))) (tf1 (SUCC (plus (ZERO) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (ZERO) (nat1))) (tree1) = SUCC (tf1 (plus (ZERO) (nat1)) (tree2))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:12.)
=================================================
Progress: 1113


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
---------------------------------------
forall (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (nat1))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))

0 goal(s) more...

2 conjecture(s) more...
>>> induction nat2(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (plus (ZERO) (nat1)) (tree1)) (tf1 (plus (ZERO) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (ZERO) (nat1)) (tree1))) (tf1 (SUCC (plus (ZERO) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (ZERO) (nat1))) (tree1) = SUCC (plus (plus (ZERO) (nat1)) (tf1 (ZERO) (tree2)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:12.)
=================================================
Progress: 1114


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
---------------------------------------
forall (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (nat1))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))

0 goal(s) more...

2 conjecture(s) more...
>>> induction nat2(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (plus (ZERO) (nat1)) (tree1)) (tf1 (plus (ZERO) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (ZERO) (nat1)) (tree1))) (tf1 (SUCC (plus (ZERO) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (ZERO) (nat1))) (tree1) = SUCC (plus (plus (ZERO) (nat1)) (tf1 (ZERO) (tree2)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:12.)
=================================================
Progress: 1115


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (plus (ZERO) (nat1)) (tree1)) (tf1 (plus (ZERO) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (ZERO) (nat1)) (tree1))) (tf1 (SUCC (plus (ZERO) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (ZERO) (nat1))) (tree1) = SUCC (plus (ZERO) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) = true->lq (SUCC (tf1 (nat1) (tree1))) (tf1 (SUCC (nat1)) (tree2)) = false -> tf1 (SUCC (nat1)) (tree1) = SUCC (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction tree1(rank:13.)
=================================================
Progress: 1116


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (plus (ZERO) (nat1)) (tree1)) (tf1 (plus (ZERO) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (ZERO) (nat1)) (tree1))) (tf1 (SUCC (plus (ZERO) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (ZERO) (nat1))) (tree1) = SUCC (tf1 (plus (ZERO) (nat1)) (tree2))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) = true->lq (SUCC (tf1 (nat1) (tree1))) (tf1 (SUCC (nat1)) (tree2)) = false -> tf1 (SUCC (nat1)) (tree1) = SUCC (tf1 (nat1) (tree2))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction tree1(rank:13.)
=================================================
Progress: 1117


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (plus (ZERO) (nat1)) (tree1)) (tf1 (plus (ZERO) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (ZERO) (nat1)) (tree1))) (tf1 (SUCC (plus (ZERO) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (ZERO) (nat1))) (tree1) = SUCC (tf1 (plus (ZERO) (nat1)) (tree2))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) = true->lq (SUCC (tf1 (nat1) (tree1))) (tf1 (SUCC (nat1)) (tree2)) = false -> tf1 (SUCC (nat1)) (tree1) = SUCC (tf1 (nat1) (tree2))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction tree1(rank:13.)
=================================================
Progress: 1118


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (plus (ZERO) (nat1)) (tree1)) (tf1 (plus (ZERO) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (ZERO) (nat1)) (tree1))) (tf1 (SUCC (plus (ZERO) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (ZERO) (nat1))) (tree1) = SUCC (plus (plus (ZERO) (nat1)) (tf1 (ZERO) (tree2)))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) = true->lq (SUCC (tf1 (nat1) (tree1))) (tf1 (SUCC (nat1)) (tree2)) = false -> tf1 (SUCC (nat1)) (tree1) = SUCC (plus (nat1) (tf1 (ZERO) (tree2)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction tree1(rank:13.)
=================================================
Progress: 1119


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (plus (ZERO) (nat1)) (tree1)) (tf1 (plus (ZERO) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (ZERO) (nat1)) (tree1))) (tf1 (SUCC (plus (ZERO) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (ZERO) (nat1))) (tree1) = SUCC (plus (plus (ZERO) (nat1)) (tf1 (ZERO) (tree2)))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) = true->lq (SUCC (tf1 (nat1) (tree1))) (tf1 (SUCC (nat1)) (tree2)) = false -> tf1 (SUCC (nat1)) (tree1) = SUCC (plus (nat1) (tf1 (ZERO) (tree2)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction tree1(rank:13.)
=================================================
Progress: 1120


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) = true->lq (SUCC (tf1 (nat1) (tree1))) (tf1 (SUCC (nat1)) (tree2)) = false -> tf1 (SUCC (nat1)) (tree1) = SUCC (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1))

1 goal(s) more...

2 conjecture(s) more...
>>> induction tree1(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (tree2:tree), lq (tf1 (nat1) (Tnil)) (tf1 (nat1) (tree2)) = true->lq (SUCC (tf1 (nat1) (Tnil))) (tf1 (SUCC (nat1)) (tree2)) = false -> tf1 (SUCC (nat1)) (Tnil) = SUCC (if lq (tf1 (nat1) (Tnil)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (Tnil))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 1121


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) = true->lq (SUCC (tf1 (nat1) (tree1))) (tf1 (SUCC (nat1)) (tree2)) = false -> tf1 (SUCC (nat1)) (tree1) = SUCC (tf1 (nat1) (tree2))

1 goal(s) more...

2 conjecture(s) more...
>>> induction tree1(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (tree2:tree), lq (tf1 (nat1) (Tnil)) (tf1 (nat1) (tree2)) = true->lq (SUCC (tf1 (nat1) (Tnil))) (tf1 (SUCC (nat1)) (tree2)) = false -> tf1 (SUCC (nat1)) (Tnil) = SUCC (tf1 (nat1) (tree2))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 1122


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) = true->lq (SUCC (tf1 (nat1) (tree1))) (tf1 (SUCC (nat1)) (tree2)) = false -> tf1 (SUCC (nat1)) (tree1) = SUCC (tf1 (nat1) (tree2))

1 goal(s) more...

2 conjecture(s) more...
>>> induction tree1(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (tree2:tree), lq (tf1 (nat1) (Tnil)) (tf1 (nat1) (tree2)) = true->lq (SUCC (tf1 (nat1) (Tnil))) (tf1 (SUCC (nat1)) (tree2)) = false -> tf1 (SUCC (nat1)) (Tnil) = SUCC (tf1 (nat1) (tree2))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 1123


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) = true->lq (SUCC (tf1 (nat1) (tree1))) (tf1 (SUCC (nat1)) (tree2)) = false -> tf1 (SUCC (nat1)) (tree1) = SUCC (plus (nat1) (tf1 (ZERO) (tree2)))

1 goal(s) more...

2 conjecture(s) more...
>>> induction tree1(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (tree2:tree), lq (tf1 (nat1) (Tnil)) (tf1 (nat1) (tree2)) = true->lq (SUCC (tf1 (nat1) (Tnil))) (tf1 (SUCC (nat1)) (tree2)) = false -> tf1 (SUCC (nat1)) (Tnil) = SUCC (plus (nat1) (tf1 (ZERO) (tree2)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 1124


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) = true->lq (SUCC (tf1 (nat1) (tree1))) (tf1 (SUCC (nat1)) (tree2)) = false -> tf1 (SUCC (nat1)) (tree1) = SUCC (plus (nat1) (tf1 (ZERO) (tree2)))

1 goal(s) more...

2 conjecture(s) more...
>>> induction tree1(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (tree2:tree), lq (tf1 (nat1) (Tnil)) (tf1 (nat1) (tree2)) = true->lq (SUCC (tf1 (nat1) (Tnil))) (tf1 (SUCC (nat1)) (tree2)) = false -> tf1 (SUCC (nat1)) (Tnil) = SUCC (plus (nat1) (tf1 (ZERO) (tree2)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 1125


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (tree2:tree), lq (tf1 (nat1) (Tnil)) (tf1 (nat1) (tree2)) = true->lq (SUCC (tf1 (nat1) (Tnil))) (tf1 (SUCC (nat1)) (tree2)) = false -> tf1 (SUCC (nat1)) (Tnil) = SUCC (if lq (tf1 (nat1) (Tnil)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (Tnil))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (tree2:tree), lq (nat1) (tf1 (nat1) (tree2)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree2)) = false -> SUCC (nat1) = SUCC (if lq (nat1) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (Tnil))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction tree2(rank:14.)
=================================================
Progress: 1126


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (tree2:tree), lq (tf1 (nat1) (Tnil)) (tf1 (nat1) (tree2)) = true->lq (SUCC (tf1 (nat1) (Tnil))) (tf1 (SUCC (nat1)) (tree2)) = false -> tf1 (SUCC (nat1)) (Tnil) = SUCC (tf1 (nat1) (tree2))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (tree2:tree), lq (nat1) (tf1 (nat1) (tree2)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree2)) = false -> SUCC (nat1) = SUCC (tf1 (nat1) (tree2))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction tree2(rank:14.)
=================================================
Progress: 1127


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (tree2:tree), lq (tf1 (nat1) (Tnil)) (tf1 (nat1) (tree2)) = true->lq (SUCC (tf1 (nat1) (Tnil))) (tf1 (SUCC (nat1)) (tree2)) = false -> tf1 (SUCC (nat1)) (Tnil) = SUCC (tf1 (nat1) (tree2))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (tree2:tree), lq (nat1) (tf1 (nat1) (tree2)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree2)) = false -> SUCC (nat1) = SUCC (tf1 (nat1) (tree2))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction tree2(rank:14.)
=================================================
Progress: 1128


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (tree2:tree), lq (tf1 (nat1) (Tnil)) (tf1 (nat1) (tree2)) = true->lq (SUCC (tf1 (nat1) (Tnil))) (tf1 (SUCC (nat1)) (tree2)) = false -> tf1 (SUCC (nat1)) (Tnil) = SUCC (plus (nat1) (tf1 (ZERO) (tree2)))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (tree2:tree), lq (nat1) (tf1 (nat1) (tree2)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree2)) = false -> SUCC (nat1) = SUCC (plus (nat1) (tf1 (ZERO) (tree2)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction tree2(rank:14.)
=================================================
Progress: 1129


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (tree2:tree), lq (tf1 (nat1) (Tnil)) (tf1 (nat1) (tree2)) = true->lq (SUCC (tf1 (nat1) (Tnil))) (tf1 (SUCC (nat1)) (tree2)) = false -> tf1 (SUCC (nat1)) (Tnil) = SUCC (plus (nat1) (tf1 (ZERO) (tree2)))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (tree2:tree), lq (nat1) (tf1 (nat1) (tree2)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree2)) = false -> SUCC (nat1) = SUCC (plus (nat1) (tf1 (ZERO) (tree2)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction tree2(rank:14.)
=================================================
Progress: 1130


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (nat1))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
---------------------------------------
lq (nat1) (tf1 (nat1) (Tnil)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (Tnil)) = false -> SUCC (nat1) = SUCC (if lq (nat1) (tf1 (nat1) (Tnil)) then tf1 (nat1) (Tnil) else tf1 (nat1) (Tnil))

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (nat1))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
---------------------------------------
lq (nat1) (nat1) = true->lq (nat1) (nat1) = false -> SUCC (nat1) = SUCC (if lq (nat1) (nat1) then tf1 (nat1) (Tnil) else tf1 (nat1) (Tnil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:14.)
=================================================
Progress: 1131


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (nat1)))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
---------------------------------------
lq (nat1) (tf1 (nat1) (Tnil)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (Tnil)) = false -> SUCC (nat1) = SUCC (if lq (nat1) (tf1 (nat1) (Tnil)) then tf1 (nat1) (Tnil) else tf1 (nat1) (Tnil))

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (nat1)))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
---------------------------------------
lq (nat1) (nat1) = true->lq (nat1) (nat1) = false -> SUCC (nat1) = SUCC (if lq (nat1) (nat1) then tf1 (nat1) (Tnil) else tf1 (nat1) (Tnil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:14.)
=================================================
Progress: 1132


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
---------------------------------------
lq (nat1) (tf1 (nat1) (Tnil)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (Tnil)) = false -> SUCC (nat1) = SUCC (if lq (nat1) (tf1 (nat1) (Tnil)) then tf1 (nat1) (Tnil) else tf1 (nat1) (Tnil))

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
---------------------------------------
lq (nat1) (nat1) = true->lq (nat1) (nat1) = false -> SUCC (nat1) = SUCC (if lq (nat1) (nat1) then tf1 (nat1) (Tnil) else tf1 (nat1) (Tnil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:14.)
=================================================
Progress: 1133


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : lq (nat1) (tf1 (nat1) (tree3)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree3)) = false -> SUCC (nat1) = SUCC (tf1 (nat1) (tree3))
IH2 : lq (nat1) (tf1 (nat1) (tree4)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree4)) = false -> SUCC (nat1) = SUCC (tf1 (nat1) (tree4))
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
Cond1 : lq (nat1) (if lq (tf1 (plus (nat1) (nat3)) (tree3)) (tf1 (plus (nat1) (nat3)) (tree4)) then tf1 (plus (nat1) (nat3)) (tree4) else tf1 (plus (nat1) (nat3)) (tree3)) = true
Cond2 : lq (SUCC (nat1)) (if lq (tf1 (SUCC (plus (nat1) (nat3))) (tree3)) (tf1 (SUCC (plus (nat1) (nat3))) (tree4)) then tf1 (SUCC (plus (nat1) (nat3))) (tree4) else tf1 (SUCC (plus (nat1) (nat3))) (tree3)) = false
---------------------------------------
SUCC (nat1) = SUCC (if lq (tf1 (plus (nat1) (nat3)) (tree3)) (tf1 (plus (nat1) (nat3)) (tree4)) then tf1 (plus (nat1) (nat3)) (tree4) else tf1 (plus (nat1) (nat3)) (tree3))

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (tf1 (plus (nat1) (nat3)) (tree3)) (tf1 (plus (nat1) (nat3)) (tree4))(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : lq (nat1) (tf1 (nat1) (tree3)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree3)) = false -> SUCC (nat1) = SUCC (tf1 (nat1) (tree3))
IH2 : lq (nat1) (tf1 (nat1) (tree4)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree4)) = false -> SUCC (nat1) = SUCC (tf1 (nat1) (tree4))
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
Cond1 : lq (nat1) (tf1 (plus (nat1) (nat3)) (tree4)) = true
Cond2 : lq (SUCC (nat1)) (if lq (tf1 (SUCC (plus (nat1) (nat3))) (tree3)) (tf1 (SUCC (plus (nat1) (nat3))) (tree4)) then tf1 (SUCC (plus (nat1) (nat3))) (tree4) else tf1 (SUCC (plus (nat1) (nat3))) (tree3)) = false
Case1 : lq (tf1 (plus (nat1) (nat3)) (tree3)) (tf1 (plus (nat1) (nat3)) (tree4)) = true
---------------------------------------
SUCC (nat1) = SUCC (tf1 (plus (nat1) (nat3)) (tree4))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:24.)
rewrite IH2 in goal at 0(rank:24.)
=================================================
Progress: 1134


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
---------------------------------------
lq (nat1) (tf1 (nat1) (Tnil)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (Tnil)) = false -> SUCC (nat1) = SUCC (plus (nat1) (tf1 (ZERO) (Tnil)))

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
---------------------------------------
lq (nat1) (nat1) = true->lq (nat1) (nat1) = false -> SUCC (nat1) = SUCC (plus (nat1) (ZERO))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:14.)
=================================================
Progress: 1135


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
---------------------------------------
lq (nat1) (tf1 (nat1) (Tnil)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (Tnil)) = false -> SUCC (nat1) = SUCC (plus (nat1) (tf1 (ZERO) (Tnil)))

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
---------------------------------------
lq (nat1) (nat1) = true->lq (nat1) (nat1) = false -> SUCC (nat1) = SUCC (plus (nat1) (ZERO))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:14.)
=================================================
Progress: 1136


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
plus (SUCC (plus (nat3) (plus (ZERO) (plus (ZERO) (nat2))))) (plus (ZERO) (tf1 (ZERO) (tree2))) = SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3)))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 14.)


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
plus (SUCC (plus (nat3) (plus (ZERO) (plus (ZERO) (nat2))))) (plus (ZERO) (tf1 (ZERO) (tree2))) = SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (tf1 (ZERO) (tree3))))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH3 in goal at 0
case lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3))
rewrite IH3 in goal at 0
case lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))
rewrite IH2 in goal at 1
simpl in goal
rewrite <- IH3 in goal at 0
rewrite IH2 in goal at 2
rewrite IH2 in goal at 2
assert forall (nat1:nat) (nat2:nat), SUCC (plus (nat1) (nat2)) = SUCC (plus (nat1) (plus (ZERO) (nat2)))
reflexivity
reflexivity
rewrite lemma3 in goal at 1
rewrite lemma3 in goal at 1
rewrite IH1 in goal at 1
rewrite IH1 in goal at 1
rewrite <- IH3 in goal at 0
rewrite IH2 in goal at 0
rewrite IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: plus (SUCC (plus (ZERO) (plus (ZERO) (plus (ZERO) (SUCC (ZERO)))))) (plus (ZERO) (tf1 (ZERO) (Node (SUCC (ZERO)) (Tnil) (Node (SUCC (ZERO)) (Tnil) (Tnil))))) = SUCC (plus (plus (ZERO) (SUCC (ZERO))) (plus (ZERO) (tf1 (ZERO) (Node (SUCC (SUCC (ZERO))) (Node (SUCC (ZERO)) (Tnil) (Tnil)) (Tnil)))))
Prop: plus (SUCC (plus (SUCC (ZERO)) (plus (ZERO) (plus (ZERO) (ZERO))))) (plus (ZERO) (tf1 (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Tnil) (Tnil)) (Tnil)))) = SUCC (plus (plus (SUCC (ZERO)) (ZERO)) (plus (ZERO) (tf1 (ZERO) (Node (ZERO) (Node (ZERO) (Node (SUCC (ZERO)) (Tnil) (Tnil)) (Tnil)) (Node (ZERO) (Tnil) (Tnil))))))
Prop: plus (SUCC (plus (SUCC (SUCC (ZERO))) (plus (ZERO) (plus (ZERO) (ZERO))))) (plus (ZERO) (tf1 (ZERO) (Node (SUCC (SUCC (SUCC (ZERO)))) (Node (SUCC (ZERO)) (Tnil) (Node (ZERO) (Node (ZERO) (Tnil) (Node (SUCC (SUCC (SUCC (ZERO)))) (Tnil) (Tnil))) (Node (ZERO) (Tnil) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Node (ZERO) (Tnil) (Tnil)))))) (Node (SUCC (ZERO)) (Tnil) (Tnil))))) = SUCC (plus (plus (SUCC (SUCC (ZERO))) (ZERO)) (plus (ZERO) (tf1 (ZERO) (Tnil))))
previous tactics
simpl in goal
rewrite IH1 in goal at 0
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH3 in goal at 0
case lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3))
rewrite IH3 in goal at 0
case lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))
rewrite IH2 in goal at 1
simpl in goal
rewrite <- IH3 in goal at 0
rewrite IH2 in goal at 2
rewrite IH2 in goal at 2
assert forall (nat1:nat) (nat2:nat), SUCC (plus (nat1) (nat2)) = SUCC (plus (nat1) (plus (ZERO) (nat2)))
reflexivity
reflexivity
rewrite lemma3 in goal at 1
rewrite lemma3 in goal at 1
rewrite IH1 in goal at 1
rewrite IH1 in goal at 1
rewrite <- IH3 in goal at 0
rewrite IH2 in goal at 0
validate generalize_common_subterm_goal
Prop: plus (SUCC (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO))))) (plus (ZERO) (tf1 (ZERO) (Tnil))) = SUCC (plus (plus (ZERO) (ZERO)) (tf1 (ZERO) (Tnil)))
Prop: plus (SUCC (plus (SUCC (ZERO)) (plus (ZERO) (plus (ZERO) (SUCC (ZERO)))))) (plus (ZERO) (tf1 (ZERO) (Tnil))) = SUCC (plus (plus (SUCC (ZERO)) (SUCC (ZERO))) (tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil))))
Prop: plus (SUCC (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO))))) (plus (ZERO) (tf1 (ZERO) (Tnil))) = SUCC (plus (plus (ZERO) (ZERO)) (tf1 (ZERO) (Tnil)))
previous tactics
simpl in goal
rewrite IH1 in goal at 0
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH3 in goal at 0
case lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3))
rewrite IH3 in goal at 0
case lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))
rewrite IH2 in goal at 1
simpl in goal
rewrite <- IH3 in goal at 0
rewrite IH2 in goal at 2
rewrite IH2 in goal at 2
assert forall (nat1:nat) (nat2:nat), SUCC (plus (nat1) (nat2)) = SUCC (plus (nat1) (plus (ZERO) (nat2)))
reflexivity
reflexivity
rewrite lemma3 in goal at 1
rewrite lemma3 in goal at 1
rewrite IH1 in goal at 1
rewrite IH1 in goal at 1
rewrite <- IH3 in goal at 0
validate generalize_common_subterm_goal
Prop: plus (SUCC (plus (ZERO) (plus (ZERO) (plus (ZERO) (SUCC (SUCC (SUCC (ZERO)))))))) (plus (ZERO) (tf1 (ZERO) (Tnil))) = SUCC (tf1 (plus (ZERO) (SUCC (SUCC (SUCC (ZERO))))) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil)))
Prop: plus (SUCC (plus (SUCC (ZERO)) (plus (ZERO) (plus (ZERO) (SUCC (ZERO)))))) (plus (ZERO) (tf1 (ZERO) (Tnil))) = SUCC (tf1 (plus (SUCC (ZERO)) (SUCC (ZERO))) (Tnil))
Prop: plus (SUCC (plus (ZERO) (plus (ZERO) (plus (ZERO) (SUCC (SUCC (ZERO))))))) (plus (ZERO) (tf1 (ZERO) (Tnil))) = SUCC (tf1 (plus (ZERO) (SUCC (SUCC (ZERO)))) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil)))
previous tactics
simpl in goal
rewrite IH1 in goal at 0
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH3 in goal at 0
case lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3))
rewrite IH3 in goal at 0
case lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))
rewrite IH2 in goal at 1
simpl in goal
rewrite <- IH3 in goal at 0
rewrite IH2 in goal at 2
rewrite IH2 in goal at 2
assert forall (nat1:nat) (nat2:nat), SUCC (plus (nat1) (nat2)) = SUCC (plus (nat1) (plus (ZERO) (nat2)))
reflexivity
reflexivity
rewrite lemma3 in goal at 1
rewrite lemma3 in goal at 1
rewrite IH1 in goal at 1
rewrite IH1 in goal at 1
validate generalize_common_subterm_goal
Prop: plus (SUCC (plus (SUCC (ZERO)) (plus (ZERO) (plus (ZERO) (ZERO))))) (plus (ZERO) (tf1 (ZERO) (Tnil))) = SUCC (plus (SUCC (ZERO)) (if lq (tf1 (ZERO) (Tnil)) (tf1 (ZERO) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil))) then tf1 (ZERO) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil)) else tf1 (ZERO) (Tnil)))
Prop: plus (SUCC (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO))))) (plus (ZERO) (tf1 (ZERO) (Tnil))) = SUCC (plus (ZERO) (if lq (tf1 (ZERO) (Tnil)) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (Tnil)))
Prop: plus (SUCC (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO))))) (plus (ZERO) (tf1 (ZERO) (Tnil))) = SUCC (plus (ZERO) (if lq (tf1 (ZERO) (Tnil)) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (Tnil)))
previous tactics
simpl in goal
rewrite IH1 in goal at 0
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH3 in goal at 0
case lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3))
rewrite IH3 in goal at 0
case lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))
rewrite IH2 in goal at 1
simpl in goal
rewrite <- IH3 in goal at 0
rewrite IH2 in goal at 2
rewrite IH2 in goal at 2
assert forall (nat1:nat) (nat2:nat), SUCC (plus (nat1) (nat2)) = SUCC (plus (nat1) (plus (ZERO) (nat2)))
reflexivity
reflexivity
rewrite lemma3 in goal at 1
rewrite lemma3 in goal at 1
rewrite IH1 in goal at 1
validate generalize_common_subterm_goal
Prop: plus (SUCC (plus (ZERO) (plus (ZERO) (plus (ZERO) (SUCC (ZERO)))))) (tf1 (ZERO) (Tnil)) = SUCC (plus (ZERO) (if lq (tf1 (SUCC (ZERO)) (Tnil)) (tf1 (SUCC (ZERO)) (Tnil)) then tf1 (SUCC (ZERO)) (Tnil) else tf1 (SUCC (ZERO)) (Tnil)))
Prop: plus (SUCC (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO))))) (tf1 (ZERO) (Tnil)) = SUCC (plus (ZERO) (if lq (tf1 (ZERO) (Tnil)) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (Tnil)))
Prop: plus (SUCC (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO))))) (tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil))) = SUCC (plus (ZERO) (if lq (tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil))) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (Node (ZERO) (Tnil) (Tnil))))
previous tactics
simpl in goal
rewrite IH1 in goal at 0
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH3 in goal at 0
case lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3))
rewrite IH3 in goal at 0
case lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))
rewrite IH2 in goal at 1
simpl in goal
rewrite <- IH3 in goal at 0
rewrite IH2 in goal at 2
rewrite IH2 in goal at 2
assert forall (nat1:nat) (nat2:nat), SUCC (plus (nat1) (nat2)) = SUCC (plus (nat1) (plus (ZERO) (nat2)))
reflexivity
reflexivity
rewrite lemma3 in goal at 1
rewrite lemma3 in goal at 1
validate generalize_common_subterm_goal
Prop: tf1 (SUCC (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO))))) (Tnil) = SUCC (plus (ZERO) (if lq (tf1 (ZERO) (Tnil)) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (Tnil)))
Prop: tf1 (SUCC (plus (SUCC (ZERO)) (plus (ZERO) (plus (ZERO) (SUCC (ZERO)))))) (Tnil) = SUCC (plus (SUCC (ZERO)) (if lq (tf1 (SUCC (ZERO)) (Tnil)) (tf1 (SUCC (ZERO)) (Node (SUCC (ZERO)) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Tnil) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil))) (Tnil)) (Tnil)) (Node (ZERO) (Tnil) (Tnil)))) then tf1 (SUCC (ZERO)) (Node (SUCC (ZERO)) (Node (ZERO) (Node (ZERO) (Node (ZERO) (Tnil) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil))) (Tnil)) (Tnil)) (Node (ZERO) (Tnil) (Tnil))) else tf1 (SUCC (ZERO)) (Tnil)))
Prop: tf1 (SUCC (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO))))) (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Node (SUCC (ZERO)) (Tnil) (Tnil)) (Tnil)) (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Tnil) (Tnil)) (Tnil))) = SUCC (plus (ZERO) (if lq (tf1 (ZERO) (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Node (SUCC (ZERO)) (Tnil) (Tnil)) (Tnil)) (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Tnil) (Tnil)) (Tnil)))) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Node (SUCC (ZERO)) (Tnil) (Tnil)) (Tnil)) (Node (SUCC (ZERO)) (Node (SUCC (ZERO)) (Tnil) (Tnil)) (Tnil)))))
previous tactics
simpl in goal
rewrite IH1 in goal at 0
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH3 in goal at 0
case lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3))
rewrite IH3 in goal at 0
case lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))
rewrite IH2 in goal at 1
simpl in goal
rewrite <- IH3 in goal at 0
rewrite IH2 in goal at 2
rewrite IH2 in goal at 2
assert forall (nat1:nat) (nat2:nat), SUCC (plus (nat1) (nat2)) = SUCC (plus (nat1) (plus (ZERO) (nat2)))
reflexivity
reflexivity
rewrite lemma3 in goal at 1
validate generalize_common_subterm_goal
Prop: tf1 (SUCC (plus (ZERO) (plus (ZERO) (ZERO)))) (Tnil) = SUCC (plus (ZERO) (if lq (tf1 (ZERO) (Tnil)) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (Tnil)))
Prop: tf1 (SUCC (plus (SUCC (ZERO)) (plus (ZERO) (ZERO)))) (Tnil) = SUCC (plus (SUCC (ZERO)) (if lq (tf1 (ZERO) (Tnil)) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (Tnil)))
Prop: tf1 (SUCC (plus (ZERO) (plus (ZERO) (ZERO)))) (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Tnil) (Tnil)) (Node (SUCC (ZERO)) (Tnil) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil)))) = SUCC (plus (ZERO) (if lq (tf1 (ZERO) (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Tnil) (Tnil)) (Node (SUCC (ZERO)) (Tnil) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil))))) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (Node (ZERO) (Node (SUCC (SUCC (ZERO))) (Tnil) (Tnil)) (Node (SUCC (ZERO)) (Tnil) (Node (ZERO) (Node (ZERO) (Tnil) (Tnil)) (Tnil))))))
previous tactics
simpl in goal
rewrite IH1 in goal at 0
simpl in goal
rewrite <- IH1 in goal at 0
rewrite <- IH3 in goal at 0
case lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3))
rewrite IH3 in goal at 0
case lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3))
rewrite IH2 in goal at 1
simpl in goal
rewrite <- IH3 in goal at 0
rewrite IH2 in goal at 2
rewrite IH2 in goal at 2
assert forall (nat1:nat) (nat2:nat), SUCC (plus (nat1) (nat2)) = SUCC (plus (nat1) (plus (ZERO) (nat2)))
reflexivity
reflexivity
validate generalize_common_subterm_goal
Prop: tf1 (SUCC (plus (ZERO) (ZERO))) (Tnil) = SUCC (plus (ZERO) (if lq (tf1 (ZERO) (Tnil)) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (Tnil)))
Prop: tf1 (SUCC (plus (ZERO) (SUCC (ZERO)))) (Tnil) = SUCC (plus (ZERO) (if lq (tf1 (SUCC (ZERO)) (Tnil)) (tf1 (SUCC (ZERO)) (Tnil)) then tf1 (SUCC (ZERO)) (Tnil) else tf1 (SUCC (ZERO)) (Tnil)))
Prop: tf1 (SUCC (plus (SUCC (ZERO)) (ZERO))) (Tnil) = SUCC (plus (SUCC (ZERO)) (if lq (tf1 (ZERO) (Tnil)) (tf1 (ZERO) (Tnil)) then tf1 (ZERO) (Tnil) else tf1 (ZERO) (Tnil)))
Lemma List
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
End of Lemma List


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
plus (SUCC (plus (nat3) (plus (ZERO) (plus (ZERO) (nat2))))) (plus (ZERO) (tf1 (ZERO) (tree2))) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
Lemma List
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
End of Lemma List


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
plus (SUCC (plus (nat3) (plus (ZERO) (plus (ZERO) (nat2))))) (plus (ZERO) (tf1 (ZERO) (tree2))) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

1 goal(s) more...

1 conjecture(s) more...
Lemma List
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
End of Lemma List


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
plus (SUCC (plus (nat3) (plus (ZERO) (plus (ZERO) (nat2))))) (plus (ZERO) (tf1 (ZERO) (tree2))) = SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3)))

1 goal(s) more...

1 conjecture(s) more...
Lemma List
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
End of Lemma List


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
plus (SUCC (plus (nat3) (plus (ZERO) (plus (ZERO) (nat2))))) (plus (ZERO) (tf1 (ZERO) (tree2))) = SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (tf1 (ZERO) (tree3))))

1 goal(s) more...

1 conjecture(s) more...
=================================================
Progress: 1137


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
plus (SUCC (plus (nat3) (plus (ZERO) (plus (ZERO) (nat2))))) (plus (ZERO) (tf1 (ZERO) (tree2))) = SUCC (plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2)))

1 goal(s) more...

1 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))

---------------------------------------
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 1138


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
plus (SUCC (plus (nat3) (plus (ZERO) (plus (ZERO) (nat2))))) (plus (ZERO) (tf1 (ZERO) (tree2))) = SUCC (tf1 (plus (nat3) (nat2)) (tree3))

1 goal(s) more...

1 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))

---------------------------------------
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 1139


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
plus (SUCC (plus (nat3) (plus (ZERO) (plus (ZERO) (nat2))))) (plus (ZERO) (tf1 (ZERO) (tree2))) = SUCC (plus (plus (nat3) (nat2)) (tf1 (ZERO) (tree3)))

1 goal(s) more...

1 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))

---------------------------------------
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 1140


1st goal of : forall (tree1:tree) (nat1:nat), tf1 (nat1) (tree1) = plus (nat1) (tf1 (ZERO) (tree1))
tree1 : tree
nat2 : nat
tree2 : tree
tree3 : tree
IH1 : forall (nat1:nat), tf1 (nat1) (tree2) = plus (nat1) (tf1 (ZERO) (tree2))
IH2 : forall (nat1:nat), tf1 (nat1) (tree3) = plus (nat1) (tf1 (ZERO) (tree3))
Inductive1 : tree1 = Node (nat2) (tree2) (tree3)
nat1 : nat
nat3 : nat
IH3 : tf1 (plus (nat3) (nat2)) (tree3) = plus (nat3) (if lq (tf1 (nat2) (tree2)) (tf1 (nat2) (tree3)) then tf1 (nat2) (tree3) else tf1 (nat2) (tree2))
Inductive2 : nat1 = SUCC (nat3)
Case1 : lq (tf1 (plus (nat3) (nat2)) (tree2)) (tf1 (plus (nat3) (nat2)) (tree3)) = true
Case2 : lq (SUCC (tf1 (plus (nat3) (nat2)) (tree2))) (tf1 (SUCC (plus (nat3) (nat2))) (tree3)) = false
---------------------------------------
plus (SUCC (plus (nat3) (plus (ZERO) (plus (ZERO) (nat2))))) (plus (ZERO) (tf1 (ZERO) (tree2))) = SUCC (plus (plus (nat3) (nat2)) (plus (ZERO) (tf1 (ZERO) (tree3))))

1 goal(s) more...

1 conjecture(s) more...
>>> assert forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))(rank : 0.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))

---------------------------------------
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:11.)
=================================================
Progress: 1141


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))

---------------------------------------
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))

0 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))

---------------------------------------
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree1))) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat1(rank:11.)
=================================================
Progress: 1142


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))

---------------------------------------
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))

0 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))

---------------------------------------
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree1))) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat1(rank:11.)
=================================================
Progress: 1143


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))

---------------------------------------
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))

0 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))

---------------------------------------
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree1))) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat1(rank:11.)
=================================================
Progress: 1144


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))

---------------------------------------
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))

0 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))

---------------------------------------
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree1))) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro nat1(rank:11.)
=================================================
Progress: 1145


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))

---------------------------------------
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree1))) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat1(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
---------------------------------------
forall (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree1))) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction nat2(rank:12.)
=================================================
Progress: 1146


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))

---------------------------------------
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree1))) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat1(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
---------------------------------------
forall (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree1))) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction nat2(rank:12.)
=================================================
Progress: 1147


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))

---------------------------------------
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree1))) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat1(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
---------------------------------------
forall (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree1))) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction nat2(rank:12.)
=================================================
Progress: 1148


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))

---------------------------------------
forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree1))) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))

0 goal(s) more...

2 conjecture(s) more...
>>> intro nat1(rank : 11.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
---------------------------------------
forall (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree1))) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction nat2(rank:12.)
=================================================
Progress: 1149


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
---------------------------------------
forall (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree1))) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))

0 goal(s) more...

2 conjecture(s) more...
>>> induction nat2(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (plus (ZERO) (nat1)) (tree1)) (tf1 (plus (ZERO) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (ZERO) (nat1)) (tree1))) (tf1 (SUCC (plus (ZERO) (nat1))) (tree2)) = false -> SUCC (plus (plus (ZERO) (nat1)) (tf1 (ZERO) (tree1))) = SUCC (plus (ZERO) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:12.)
=================================================
Progress: 1150


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
---------------------------------------
forall (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree1))) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))

0 goal(s) more...

2 conjecture(s) more...
>>> induction nat2(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (plus (ZERO) (nat1)) (tree1)) (tf1 (plus (ZERO) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (ZERO) (nat1)) (tree1))) (tf1 (SUCC (plus (ZERO) (nat1))) (tree2)) = false -> SUCC (plus (plus (ZERO) (nat1)) (tf1 (ZERO) (tree1))) = SUCC (tf1 (plus (ZERO) (nat1)) (tree2))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:12.)
=================================================
Progress: 1151


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
---------------------------------------
forall (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree1))) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))

0 goal(s) more...

2 conjecture(s) more...
>>> induction nat2(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (plus (ZERO) (nat1)) (tree1)) (tf1 (plus (ZERO) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (ZERO) (nat1)) (tree1))) (tf1 (SUCC (plus (ZERO) (nat1))) (tree2)) = false -> SUCC (plus (plus (ZERO) (nat1)) (tf1 (ZERO) (tree1))) = SUCC (plus (plus (ZERO) (nat1)) (tf1 (ZERO) (tree2)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:12.)
=================================================
Progress: 1152


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
---------------------------------------
forall (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree1))) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))

0 goal(s) more...

2 conjecture(s) more...
>>> induction nat2(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (plus (ZERO) (nat1)) (tree1)) (tf1 (plus (ZERO) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (ZERO) (nat1)) (tree1))) (tf1 (SUCC (plus (ZERO) (nat1))) (tree2)) = false -> SUCC (plus (plus (ZERO) (nat1)) (tf1 (ZERO) (tree1))) = SUCC (plus (plus (ZERO) (nat1)) (tf1 (ZERO) (tree2)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:12.)
=================================================
Progress: 1153


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (plus (ZERO) (nat1)) (tree1)) (tf1 (plus (ZERO) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (ZERO) (nat1)) (tree1))) (tf1 (SUCC (plus (ZERO) (nat1))) (tree2)) = false -> SUCC (plus (plus (ZERO) (nat1)) (tf1 (ZERO) (tree1))) = SUCC (plus (ZERO) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) = true->lq (SUCC (tf1 (nat1) (tree1))) (tf1 (SUCC (nat1)) (tree2)) = false -> SUCC (plus (nat1) (tf1 (ZERO) (tree1))) = SUCC (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction tree1(rank:13.)
=================================================
Progress: 1154


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (plus (ZERO) (nat1)) (tree1)) (tf1 (plus (ZERO) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (ZERO) (nat1)) (tree1))) (tf1 (SUCC (plus (ZERO) (nat1))) (tree2)) = false -> SUCC (plus (plus (ZERO) (nat1)) (tf1 (ZERO) (tree1))) = SUCC (tf1 (plus (ZERO) (nat1)) (tree2))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) = true->lq (SUCC (tf1 (nat1) (tree1))) (tf1 (SUCC (nat1)) (tree2)) = false -> SUCC (plus (nat1) (tf1 (ZERO) (tree1))) = SUCC (tf1 (nat1) (tree2))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction tree1(rank:13.)
=================================================
Progress: 1155


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (plus (ZERO) (nat1)) (tree1)) (tf1 (plus (ZERO) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (ZERO) (nat1)) (tree1))) (tf1 (SUCC (plus (ZERO) (nat1))) (tree2)) = false -> SUCC (plus (plus (ZERO) (nat1)) (tf1 (ZERO) (tree1))) = SUCC (plus (plus (ZERO) (nat1)) (tf1 (ZERO) (tree2)))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) = true->lq (SUCC (tf1 (nat1) (tree1))) (tf1 (SUCC (nat1)) (tree2)) = false -> SUCC (plus (nat1) (tf1 (ZERO) (tree1))) = SUCC (plus (nat1) (tf1 (ZERO) (tree2)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction tree1(rank:13.)
=================================================
Progress: 1156


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (plus (ZERO) (nat1)) (tree1)) (tf1 (plus (ZERO) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (ZERO) (nat1)) (tree1))) (tf1 (SUCC (plus (ZERO) (nat1))) (tree2)) = false -> SUCC (plus (plus (ZERO) (nat1)) (tf1 (ZERO) (tree1))) = SUCC (plus (plus (ZERO) (nat1)) (tf1 (ZERO) (tree2)))

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 12.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) = true->lq (SUCC (tf1 (nat1) (tree1))) (tf1 (SUCC (nat1)) (tree2)) = false -> SUCC (plus (nat1) (tf1 (ZERO) (tree1))) = SUCC (plus (nat1) (tf1 (ZERO) (tree2)))

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction tree1(rank:13.)
=================================================
Progress: 1157


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) = true->lq (SUCC (tf1 (nat1) (tree1))) (tf1 (SUCC (nat1)) (tree2)) = false -> SUCC (plus (nat1) (tf1 (ZERO) (tree1))) = SUCC (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1))

1 goal(s) more...

2 conjecture(s) more...
>>> induction tree1(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (tree2:tree), lq (tf1 (nat1) (Tnil)) (tf1 (nat1) (tree2)) = true->lq (SUCC (tf1 (nat1) (Tnil))) (tf1 (SUCC (nat1)) (tree2)) = false -> SUCC (plus (nat1) (tf1 (ZERO) (Tnil))) = SUCC (if lq (tf1 (nat1) (Tnil)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (Tnil))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 1158


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) = true->lq (SUCC (tf1 (nat1) (tree1))) (tf1 (SUCC (nat1)) (tree2)) = false -> SUCC (plus (nat1) (tf1 (ZERO) (tree1))) = SUCC (tf1 (nat1) (tree2))

1 goal(s) more...

2 conjecture(s) more...
>>> induction tree1(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (tree2:tree), lq (tf1 (nat1) (Tnil)) (tf1 (nat1) (tree2)) = true->lq (SUCC (tf1 (nat1) (Tnil))) (tf1 (SUCC (nat1)) (tree2)) = false -> SUCC (plus (nat1) (tf1 (ZERO) (Tnil))) = SUCC (tf1 (nat1) (tree2))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 1159


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) = true->lq (SUCC (tf1 (nat1) (tree1))) (tf1 (SUCC (nat1)) (tree2)) = false -> SUCC (plus (nat1) (tf1 (ZERO) (tree1))) = SUCC (plus (nat1) (tf1 (ZERO) (tree2)))

1 goal(s) more...

2 conjecture(s) more...
>>> induction tree1(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (tree2:tree), lq (tf1 (nat1) (Tnil)) (tf1 (nat1) (tree2)) = true->lq (SUCC (tf1 (nat1) (Tnil))) (tf1 (SUCC (nat1)) (tree2)) = false -> SUCC (plus (nat1) (tf1 (ZERO) (Tnil))) = SUCC (plus (nat1) (tf1 (ZERO) (tree2)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 1160


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
---------------------------------------
forall (tree1:tree) (tree2:tree), lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) = true->lq (SUCC (tf1 (nat1) (tree1))) (tf1 (SUCC (nat1)) (tree2)) = false -> SUCC (plus (nat1) (tf1 (ZERO) (tree1))) = SUCC (plus (nat1) (tf1 (ZERO) (tree2)))

1 goal(s) more...

2 conjecture(s) more...
>>> induction tree1(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (tree2:tree), lq (tf1 (nat1) (Tnil)) (tf1 (nat1) (tree2)) = true->lq (SUCC (tf1 (nat1) (Tnil))) (tf1 (SUCC (nat1)) (tree2)) = false -> SUCC (plus (nat1) (tf1 (ZERO) (Tnil))) = SUCC (plus (nat1) (tf1 (ZERO) (tree2)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 1161


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (tree2:tree), lq (tf1 (nat1) (Tnil)) (tf1 (nat1) (tree2)) = true->lq (SUCC (tf1 (nat1) (Tnil))) (tf1 (SUCC (nat1)) (tree2)) = false -> SUCC (plus (nat1) (tf1 (ZERO) (Tnil))) = SUCC (if lq (tf1 (nat1) (Tnil)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (Tnil))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (tree2:tree), lq (nat1) (tf1 (nat1) (tree2)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree2)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (if lq (nat1) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (Tnil))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction tree2(rank:14.)
=================================================
Progress: 1162


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (tree2:tree), lq (tf1 (nat1) (Tnil)) (tf1 (nat1) (tree2)) = true->lq (SUCC (tf1 (nat1) (Tnil))) (tf1 (SUCC (nat1)) (tree2)) = false -> SUCC (plus (nat1) (tf1 (ZERO) (Tnil))) = SUCC (tf1 (nat1) (tree2))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (tree2:tree), lq (nat1) (tf1 (nat1) (tree2)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree2)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (tf1 (nat1) (tree2))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction tree2(rank:14.)
=================================================
Progress: 1163


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (tree2:tree), lq (tf1 (nat1) (Tnil)) (tf1 (nat1) (tree2)) = true->lq (SUCC (tf1 (nat1) (Tnil))) (tf1 (SUCC (nat1)) (tree2)) = false -> SUCC (plus (nat1) (tf1 (ZERO) (Tnil))) = SUCC (plus (nat1) (tf1 (ZERO) (tree2)))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (tree2:tree), lq (nat1) (tf1 (nat1) (tree2)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree2)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree2)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction tree2(rank:14.)
=================================================
Progress: 1164


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (tree2:tree), lq (tf1 (nat1) (Tnil)) (tf1 (nat1) (tree2)) = true->lq (SUCC (tf1 (nat1) (Tnil))) (tf1 (SUCC (nat1)) (tree2)) = false -> SUCC (plus (nat1) (tf1 (ZERO) (Tnil))) = SUCC (plus (nat1) (tf1 (ZERO) (tree2)))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (tree2:tree), lq (nat1) (tf1 (nat1) (tree2)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree2)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree2)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction tree2(rank:14.)
=================================================
Progress: 1165


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tf1 (ZERO) (tree1)) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (tree2:tree), lq (nat1) (tf1 (nat1) (tree2)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree2)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (if lq (nat1) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (Tnil))

2 goal(s) more...

2 conjecture(s) more...
>>> induction tree2(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tf1 (ZERO) (tree1)) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
---------------------------------------
lq (nat1) (tf1 (nat1) (Tnil)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (Tnil)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (if lq (nat1) (tf1 (nat1) (Tnil)) then tf1 (nat1) (Tnil) else tf1 (nat1) (Tnil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:14.)
=================================================
Progress: 1166


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (tree2:tree), lq (nat1) (tf1 (nat1) (tree2)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree2)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (if lq (nat1) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (Tnil))

2 goal(s) more...

2 conjecture(s) more...
>>> induction tree2(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
---------------------------------------
lq (nat1) (tf1 (nat1) (Tnil)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (Tnil)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (if lq (nat1) (tf1 (nat1) (Tnil)) then tf1 (nat1) (Tnil) else tf1 (nat1) (Tnil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:14.)
=================================================
Progress: 1167


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (tree2:tree), lq (nat1) (tf1 (nat1) (tree2)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree2)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (tf1 (nat1) (tree2))

2 goal(s) more...

2 conjecture(s) more...
>>> induction tree2(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
---------------------------------------
lq (nat1) (tf1 (nat1) (Tnil)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (Tnil)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (tf1 (nat1) (Tnil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:14.)
=================================================
Progress: 1168


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (tree2:tree), lq (nat1) (tf1 (nat1) (tree2)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree2)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree2)))

2 goal(s) more...

2 conjecture(s) more...
>>> induction tree2(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
---------------------------------------
lq (nat1) (tf1 (nat1) (Tnil)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (Tnil)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (Tnil)))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:13.)
=================================================
Progress: 1169


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
---------------------------------------
lq (nat1) (tf1 (nat1) (Tnil)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (Tnil)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (Tnil)))

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : lq (nat1) (tf1 (nat1) (tree3)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree3)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree3)))
IH2 : lq (nat1) (tf1 (nat1) (tree4)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree4)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree4)))
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
---------------------------------------
lq (nat1) (tf1 (nat1) (Node (nat3) (tree3) (tree4))) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (Node (nat3) (tree3) (tree4))) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (Node (nat3) (tree3) (tree4))))

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 1170


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : lq (nat1) (tf1 (nat1) (tree3)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree3)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree3)))
IH2 : lq (nat1) (tf1 (nat1) (tree4)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree4)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree4)))
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
---------------------------------------
lq (nat1) (tf1 (nat1) (Node (nat3) (tree3) (tree4))) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (Node (nat3) (tree3) (tree4))) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (Node (nat3) (tree3) (tree4))))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : lq (nat1) (tf1 (nat1) (tree3)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree3)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree3)))
IH2 : lq (nat1) (tf1 (nat1) (tree4)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree4)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree4)))
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
---------------------------------------
lq (nat1) (if lq (tf1 (plus (nat1) (nat3)) (tree3)) (tf1 (plus (nat1) (nat3)) (tree4)) then tf1 (plus (nat1) (nat3)) (tree4) else tf1 (plus (nat1) (nat3)) (tree3)) = true->lq (SUCC (nat1)) (if lq (tf1 (SUCC (plus (nat1) (nat3))) (tree3)) (tf1 (SUCC (plus (nat1) (nat3))) (tree4)) then tf1 (SUCC (plus (nat1) (nat3))) (tree4) else tf1 (SUCC (plus (nat1) (nat3))) (tree3)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (if lq (tf1 (nat3) (tree3)) (tf1 (nat3) (tree4)) then tf1 (nat3) (tree4) else tf1 (nat3) (tree3)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:13.)
=================================================
Progress: 1171


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : lq (nat1) (tf1 (nat1) (tree3)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree3)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree3)))
IH2 : lq (nat1) (tf1 (nat1) (tree4)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree4)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree4)))
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
---------------------------------------
lq (nat1) (if lq (tf1 (plus (nat1) (nat3)) (tree3)) (tf1 (plus (nat1) (nat3)) (tree4)) then tf1 (plus (nat1) (nat3)) (tree4) else tf1 (plus (nat1) (nat3)) (tree3)) = true->lq (SUCC (nat1)) (if lq (tf1 (SUCC (plus (nat1) (nat3))) (tree3)) (tf1 (SUCC (plus (nat1) (nat3))) (tree4)) then tf1 (SUCC (plus (nat1) (nat3))) (tree4) else tf1 (SUCC (plus (nat1) (nat3))) (tree3)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (if lq (tf1 (nat3) (tree3)) (tf1 (nat3) (tree4)) then tf1 (nat3) (tree4) else tf1 (nat3) (tree3)))

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : lq (nat1) (tf1 (nat1) (tree3)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree3)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree3)))
IH2 : lq (nat1) (tf1 (nat1) (tree4)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree4)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree4)))
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
Cond1 : lq (nat1) (if lq (tf1 (plus (nat1) (nat3)) (tree3)) (tf1 (plus (nat1) (nat3)) (tree4)) then tf1 (plus (nat1) (nat3)) (tree4) else tf1 (plus (nat1) (nat3)) (tree3)) = true
---------------------------------------
lq (SUCC (nat1)) (if lq (tf1 (SUCC (plus (nat1) (nat3))) (tree3)) (tf1 (SUCC (plus (nat1) (nat3))) (tree4)) then tf1 (SUCC (plus (nat1) (nat3))) (tree4) else tf1 (SUCC (plus (nat1) (nat3))) (tree3)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (if lq (tf1 (nat3) (tree3)) (tf1 (nat3) (tree4)) then tf1 (nat3) (tree4) else tf1 (nat3) (tree3)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:13.)
=================================================
Progress: 1172


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : lq (nat1) (tf1 (nat1) (tree3)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree3)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree3)))
IH2 : lq (nat1) (tf1 (nat1) (tree4)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree4)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree4)))
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
Cond1 : lq (nat1) (if lq (tf1 (plus (nat1) (nat3)) (tree3)) (tf1 (plus (nat1) (nat3)) (tree4)) then tf1 (plus (nat1) (nat3)) (tree4) else tf1 (plus (nat1) (nat3)) (tree3)) = true
---------------------------------------
lq (SUCC (nat1)) (if lq (tf1 (SUCC (plus (nat1) (nat3))) (tree3)) (tf1 (SUCC (plus (nat1) (nat3))) (tree4)) then tf1 (SUCC (plus (nat1) (nat3))) (tree4) else tf1 (SUCC (plus (nat1) (nat3))) (tree3)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (if lq (tf1 (nat3) (tree3)) (tf1 (nat3) (tree4)) then tf1 (nat3) (tree4) else tf1 (nat3) (tree3)))

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : lq (nat1) (tf1 (nat1) (tree3)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree3)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree3)))
IH2 : lq (nat1) (tf1 (nat1) (tree4)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree4)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree4)))
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
Cond1 : lq (nat1) (if lq (tf1 (plus (nat1) (nat3)) (tree3)) (tf1 (plus (nat1) (nat3)) (tree4)) then tf1 (plus (nat1) (nat3)) (tree4) else tf1 (plus (nat1) (nat3)) (tree3)) = true
Cond2 : lq (SUCC (nat1)) (if lq (tf1 (SUCC (plus (nat1) (nat3))) (tree3)) (tf1 (SUCC (plus (nat1) (nat3))) (tree4)) then tf1 (SUCC (plus (nat1) (nat3))) (tree4) else tf1 (SUCC (plus (nat1) (nat3))) (tree3)) = false
---------------------------------------
SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (if lq (tf1 (nat3) (tree3)) (tf1 (nat3) (tree4)) then tf1 (nat3) (tree4) else tf1 (nat3) (tree3)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
case lq (tf1 (nat3) (tree3)) (tf1 (nat3) (tree4))(rank:14.)
rewrite lemma3 in goal at 1(rank:21.)
rewrite lemma3 in goal at 0(rank:29.)
rewrite IH1 in goal at 0(rank:23.)
rewrite IH2 in goal at 0(rank:23.)
rewrite lemma3 in goal at 2(rank:29.)
=================================================
Progress: 1173


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (tree2:tree), lq (nat1) (tf1 (nat1) (tree2)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree2)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree2)))

2 goal(s) more...

2 conjecture(s) more...
>>> induction tree2(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
---------------------------------------
lq (nat1) (tf1 (nat1) (Tnil)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (Tnil)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (Tnil)))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:13.)
=================================================
Progress: 1174


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
---------------------------------------
lq (nat1) (tf1 (nat1) (Tnil)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (Tnil)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (Tnil)))

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : lq (nat1) (tf1 (nat1) (tree3)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree3)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree3)))
IH2 : lq (nat1) (tf1 (nat1) (tree4)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree4)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree4)))
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
---------------------------------------
lq (nat1) (tf1 (nat1) (Node (nat3) (tree3) (tree4))) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (Node (nat3) (tree3) (tree4))) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (Node (nat3) (tree3) (tree4))))

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 1175


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : lq (nat1) (tf1 (nat1) (tree3)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree3)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree3)))
IH2 : lq (nat1) (tf1 (nat1) (tree4)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree4)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree4)))
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
---------------------------------------
lq (nat1) (tf1 (nat1) (Node (nat3) (tree3) (tree4))) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (Node (nat3) (tree3) (tree4))) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (Node (nat3) (tree3) (tree4))))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : lq (nat1) (tf1 (nat1) (tree3)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree3)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree3)))
IH2 : lq (nat1) (tf1 (nat1) (tree4)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree4)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree4)))
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
---------------------------------------
lq (nat1) (if lq (tf1 (plus (nat1) (nat3)) (tree3)) (tf1 (plus (nat1) (nat3)) (tree4)) then tf1 (plus (nat1) (nat3)) (tree4) else tf1 (plus (nat1) (nat3)) (tree3)) = true->lq (SUCC (nat1)) (if lq (tf1 (SUCC (plus (nat1) (nat3))) (tree3)) (tf1 (SUCC (plus (nat1) (nat3))) (tree4)) then tf1 (SUCC (plus (nat1) (nat3))) (tree4) else tf1 (SUCC (plus (nat1) (nat3))) (tree3)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (if lq (tf1 (nat3) (tree3)) (tf1 (nat3) (tree4)) then tf1 (nat3) (tree4) else tf1 (nat3) (tree3)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:13.)
=================================================
Progress: 1176


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : lq (nat1) (tf1 (nat1) (tree3)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree3)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree3)))
IH2 : lq (nat1) (tf1 (nat1) (tree4)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree4)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree4)))
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
---------------------------------------
lq (nat1) (if lq (tf1 (plus (nat1) (nat3)) (tree3)) (tf1 (plus (nat1) (nat3)) (tree4)) then tf1 (plus (nat1) (nat3)) (tree4) else tf1 (plus (nat1) (nat3)) (tree3)) = true->lq (SUCC (nat1)) (if lq (tf1 (SUCC (plus (nat1) (nat3))) (tree3)) (tf1 (SUCC (plus (nat1) (nat3))) (tree4)) then tf1 (SUCC (plus (nat1) (nat3))) (tree4) else tf1 (SUCC (plus (nat1) (nat3))) (tree3)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (if lq (tf1 (nat3) (tree3)) (tf1 (nat3) (tree4)) then tf1 (nat3) (tree4) else tf1 (nat3) (tree3)))

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : lq (nat1) (tf1 (nat1) (tree3)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree3)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree3)))
IH2 : lq (nat1) (tf1 (nat1) (tree4)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree4)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree4)))
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
Cond1 : lq (nat1) (if lq (tf1 (plus (nat1) (nat3)) (tree3)) (tf1 (plus (nat1) (nat3)) (tree4)) then tf1 (plus (nat1) (nat3)) (tree4) else tf1 (plus (nat1) (nat3)) (tree3)) = true
---------------------------------------
lq (SUCC (nat1)) (if lq (tf1 (SUCC (plus (nat1) (nat3))) (tree3)) (tf1 (SUCC (plus (nat1) (nat3))) (tree4)) then tf1 (SUCC (plus (nat1) (nat3))) (tree4) else tf1 (SUCC (plus (nat1) (nat3))) (tree3)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (if lq (tf1 (nat3) (tree3)) (tf1 (nat3) (tree4)) then tf1 (nat3) (tree4) else tf1 (nat3) (tree3)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:13.)
=================================================
Progress: 1177


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : lq (nat1) (tf1 (nat1) (tree3)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree3)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree3)))
IH2 : lq (nat1) (tf1 (nat1) (tree4)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree4)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree4)))
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
Cond1 : lq (nat1) (if lq (tf1 (plus (nat1) (nat3)) (tree3)) (tf1 (plus (nat1) (nat3)) (tree4)) then tf1 (plus (nat1) (nat3)) (tree4) else tf1 (plus (nat1) (nat3)) (tree3)) = true
---------------------------------------
lq (SUCC (nat1)) (if lq (tf1 (SUCC (plus (nat1) (nat3))) (tree3)) (tf1 (SUCC (plus (nat1) (nat3))) (tree4)) then tf1 (SUCC (plus (nat1) (nat3))) (tree4) else tf1 (SUCC (plus (nat1) (nat3))) (tree3)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (if lq (tf1 (nat3) (tree3)) (tf1 (nat3) (tree4)) then tf1 (nat3) (tree4) else tf1 (nat3) (tree3)))

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : lq (nat1) (tf1 (nat1) (tree3)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree3)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree3)))
IH2 : lq (nat1) (tf1 (nat1) (tree4)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree4)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree4)))
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
Cond1 : lq (nat1) (if lq (tf1 (plus (nat1) (nat3)) (tree3)) (tf1 (plus (nat1) (nat3)) (tree4)) then tf1 (plus (nat1) (nat3)) (tree4) else tf1 (plus (nat1) (nat3)) (tree3)) = true
Cond2 : lq (SUCC (nat1)) (if lq (tf1 (SUCC (plus (nat1) (nat3))) (tree3)) (tf1 (SUCC (plus (nat1) (nat3))) (tree4)) then tf1 (SUCC (plus (nat1) (nat3))) (tree4) else tf1 (SUCC (plus (nat1) (nat3))) (tree3)) = false
---------------------------------------
SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (if lq (tf1 (nat3) (tree3)) (tf1 (nat3) (tree4)) then tf1 (nat3) (tree4) else tf1 (nat3) (tree3)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
case lq (tf1 (nat3) (tree3)) (tf1 (nat3) (tree4))(rank:14.)
rewrite lemma3 in goal at 1(rank:21.)
rewrite lemma3 in goal at 0(rank:29.)
rewrite IH1 in goal at 0(rank:23.)
rewrite IH2 in goal at 0(rank:23.)
rewrite lemma3 in goal at 2(rank:29.)
=================================================
Progress: 1178


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (tree2:tree), lq (nat1) (tf1 (nat1) (tree2)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree2)) = false -> SUCC (nat1) = SUCC (if lq (nat1) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (Tnil))

2 goal(s) more...

2 conjecture(s) more...
>>> induction tree2(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
---------------------------------------
lq (nat1) (tf1 (nat1) (Tnil)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (Tnil)) = false -> SUCC (nat1) = SUCC (if lq (nat1) (tf1 (nat1) (Tnil)) then tf1 (nat1) (Tnil) else tf1 (nat1) (Tnil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:14.)
=================================================
Progress: 1179


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (tree2:tree), lq (nat1) (tf1 (nat1) (tree2)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree2)) = false -> SUCC (nat1) = SUCC (tf1 (nat1) (tree2))

2 goal(s) more...

2 conjecture(s) more...
>>> induction tree2(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
---------------------------------------
lq (nat1) (tf1 (nat1) (Tnil)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (Tnil)) = false -> SUCC (nat1) = SUCC (tf1 (nat1) (Tnil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:13.)
=================================================
Progress: 1180


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
---------------------------------------
lq (nat1) (tf1 (nat1) (Tnil)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (Tnil)) = false -> SUCC (nat1) = SUCC (tf1 (nat1) (Tnil))

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : lq (nat1) (tf1 (nat1) (tree3)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree3)) = false -> SUCC (nat1) = SUCC (tf1 (nat1) (tree3))
IH2 : lq (nat1) (tf1 (nat1) (tree4)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree4)) = false -> SUCC (nat1) = SUCC (tf1 (nat1) (tree4))
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
---------------------------------------
lq (nat1) (tf1 (nat1) (Node (nat3) (tree3) (tree4))) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (Node (nat3) (tree3) (tree4))) = false -> SUCC (nat1) = SUCC (tf1 (nat1) (Node (nat3) (tree3) (tree4)))

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 1181


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : lq (nat1) (tf1 (nat1) (tree3)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree3)) = false -> SUCC (nat1) = SUCC (tf1 (nat1) (tree3))
IH2 : lq (nat1) (tf1 (nat1) (tree4)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree4)) = false -> SUCC (nat1) = SUCC (tf1 (nat1) (tree4))
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
---------------------------------------
lq (nat1) (tf1 (nat1) (Node (nat3) (tree3) (tree4))) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (Node (nat3) (tree3) (tree4))) = false -> SUCC (nat1) = SUCC (tf1 (nat1) (Node (nat3) (tree3) (tree4)))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : lq (nat1) (tf1 (nat1) (tree3)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree3)) = false -> SUCC (nat1) = SUCC (tf1 (nat1) (tree3))
IH2 : lq (nat1) (tf1 (nat1) (tree4)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree4)) = false -> SUCC (nat1) = SUCC (tf1 (nat1) (tree4))
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
---------------------------------------
lq (nat1) (if lq (tf1 (plus (nat1) (nat3)) (tree3)) (tf1 (plus (nat1) (nat3)) (tree4)) then tf1 (plus (nat1) (nat3)) (tree4) else tf1 (plus (nat1) (nat3)) (tree3)) = true->lq (SUCC (nat1)) (if lq (tf1 (SUCC (plus (nat1) (nat3))) (tree3)) (tf1 (SUCC (plus (nat1) (nat3))) (tree4)) then tf1 (SUCC (plus (nat1) (nat3))) (tree4) else tf1 (SUCC (plus (nat1) (nat3))) (tree3)) = false -> SUCC (nat1) = SUCC (if lq (tf1 (plus (nat1) (nat3)) (tree3)) (tf1 (plus (nat1) (nat3)) (tree4)) then tf1 (plus (nat1) (nat3)) (tree4) else tf1 (plus (nat1) (nat3)) (tree3))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:13.)
=================================================
Progress: 1182


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : lq (nat1) (tf1 (nat1) (tree3)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree3)) = false -> SUCC (nat1) = SUCC (tf1 (nat1) (tree3))
IH2 : lq (nat1) (tf1 (nat1) (tree4)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree4)) = false -> SUCC (nat1) = SUCC (tf1 (nat1) (tree4))
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
---------------------------------------
lq (nat1) (if lq (tf1 (plus (nat1) (nat3)) (tree3)) (tf1 (plus (nat1) (nat3)) (tree4)) then tf1 (plus (nat1) (nat3)) (tree4) else tf1 (plus (nat1) (nat3)) (tree3)) = true->lq (SUCC (nat1)) (if lq (tf1 (SUCC (plus (nat1) (nat3))) (tree3)) (tf1 (SUCC (plus (nat1) (nat3))) (tree4)) then tf1 (SUCC (plus (nat1) (nat3))) (tree4) else tf1 (SUCC (plus (nat1) (nat3))) (tree3)) = false -> SUCC (nat1) = SUCC (if lq (tf1 (plus (nat1) (nat3)) (tree3)) (tf1 (plus (nat1) (nat3)) (tree4)) then tf1 (plus (nat1) (nat3)) (tree4) else tf1 (plus (nat1) (nat3)) (tree3))

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : lq (nat1) (tf1 (nat1) (tree3)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree3)) = false -> SUCC (nat1) = SUCC (tf1 (nat1) (tree3))
IH2 : lq (nat1) (tf1 (nat1) (tree4)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree4)) = false -> SUCC (nat1) = SUCC (tf1 (nat1) (tree4))
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
Cond1 : lq (nat1) (if lq (tf1 (plus (nat1) (nat3)) (tree3)) (tf1 (plus (nat1) (nat3)) (tree4)) then tf1 (plus (nat1) (nat3)) (tree4) else tf1 (plus (nat1) (nat3)) (tree3)) = true
---------------------------------------
lq (SUCC (nat1)) (if lq (tf1 (SUCC (plus (nat1) (nat3))) (tree3)) (tf1 (SUCC (plus (nat1) (nat3))) (tree4)) then tf1 (SUCC (plus (nat1) (nat3))) (tree4) else tf1 (SUCC (plus (nat1) (nat3))) (tree3)) = false -> SUCC (nat1) = SUCC (if lq (tf1 (plus (nat1) (nat3)) (tree3)) (tf1 (plus (nat1) (nat3)) (tree4)) then tf1 (plus (nat1) (nat3)) (tree4) else tf1 (plus (nat1) (nat3)) (tree3))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:13.)
=================================================
Progress: 1183


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : lq (nat1) (tf1 (nat1) (tree3)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree3)) = false -> SUCC (nat1) = SUCC (tf1 (nat1) (tree3))
IH2 : lq (nat1) (tf1 (nat1) (tree4)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree4)) = false -> SUCC (nat1) = SUCC (tf1 (nat1) (tree4))
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
Cond1 : lq (nat1) (if lq (tf1 (plus (nat1) (nat3)) (tree3)) (tf1 (plus (nat1) (nat3)) (tree4)) then tf1 (plus (nat1) (nat3)) (tree4) else tf1 (plus (nat1) (nat3)) (tree3)) = true
---------------------------------------
lq (SUCC (nat1)) (if lq (tf1 (SUCC (plus (nat1) (nat3))) (tree3)) (tf1 (SUCC (plus (nat1) (nat3))) (tree4)) then tf1 (SUCC (plus (nat1) (nat3))) (tree4) else tf1 (SUCC (plus (nat1) (nat3))) (tree3)) = false -> SUCC (nat1) = SUCC (if lq (tf1 (plus (nat1) (nat3)) (tree3)) (tf1 (plus (nat1) (nat3)) (tree4)) then tf1 (plus (nat1) (nat3)) (tree4) else tf1 (plus (nat1) (nat3)) (tree3))

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : lq (nat1) (tf1 (nat1) (tree3)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree3)) = false -> SUCC (nat1) = SUCC (tf1 (nat1) (tree3))
IH2 : lq (nat1) (tf1 (nat1) (tree4)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree4)) = false -> SUCC (nat1) = SUCC (tf1 (nat1) (tree4))
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
Cond1 : lq (nat1) (if lq (tf1 (plus (nat1) (nat3)) (tree3)) (tf1 (plus (nat1) (nat3)) (tree4)) then tf1 (plus (nat1) (nat3)) (tree4) else tf1 (plus (nat1) (nat3)) (tree3)) = true
Cond2 : lq (SUCC (nat1)) (if lq (tf1 (SUCC (plus (nat1) (nat3))) (tree3)) (tf1 (SUCC (plus (nat1) (nat3))) (tree4)) then tf1 (SUCC (plus (nat1) (nat3))) (tree4) else tf1 (SUCC (plus (nat1) (nat3))) (tree3)) = false
---------------------------------------
SUCC (nat1) = SUCC (if lq (tf1 (plus (nat1) (nat3)) (tree3)) (tf1 (plus (nat1) (nat3)) (tree4)) then tf1 (plus (nat1) (nat3)) (tree4) else tf1 (plus (nat1) (nat3)) (tree3))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
case lq (tf1 (plus (nat1) (nat3)) (tree3)) (tf1 (plus (nat1) (nat3)) (tree4))(rank:14.)
rewrite IH1 in goal at 0(rank:23.)
rewrite IH2 in goal at 0(rank:23.)
=================================================
Progress: 1184


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (tree2:tree), lq (nat1) (tf1 (nat1) (tree2)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree2)) = false -> SUCC (nat1) = SUCC (tf1 (nat1) (tree2))

2 goal(s) more...

2 conjecture(s) more...
>>> induction tree2(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
---------------------------------------
lq (nat1) (tf1 (nat1) (Tnil)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (Tnil)) = false -> SUCC (nat1) = SUCC (tf1 (nat1) (Tnil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:13.)
=================================================
Progress: 1185


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
---------------------------------------
lq (nat1) (tf1 (nat1) (Tnil)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (Tnil)) = false -> SUCC (nat1) = SUCC (tf1 (nat1) (Tnil))

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : lq (nat1) (tf1 (nat1) (tree3)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree3)) = false -> SUCC (nat1) = SUCC (tf1 (nat1) (tree3))
IH2 : lq (nat1) (tf1 (nat1) (tree4)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree4)) = false -> SUCC (nat1) = SUCC (tf1 (nat1) (tree4))
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
---------------------------------------
lq (nat1) (tf1 (nat1) (Node (nat3) (tree3) (tree4))) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (Node (nat3) (tree3) (tree4))) = false -> SUCC (nat1) = SUCC (tf1 (nat1) (Node (nat3) (tree3) (tree4)))

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 1186


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : lq (nat1) (tf1 (nat1) (tree3)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree3)) = false -> SUCC (nat1) = SUCC (tf1 (nat1) (tree3))
IH2 : lq (nat1) (tf1 (nat1) (tree4)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree4)) = false -> SUCC (nat1) = SUCC (tf1 (nat1) (tree4))
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
---------------------------------------
lq (nat1) (tf1 (nat1) (Node (nat3) (tree3) (tree4))) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (Node (nat3) (tree3) (tree4))) = false -> SUCC (nat1) = SUCC (tf1 (nat1) (Node (nat3) (tree3) (tree4)))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : lq (nat1) (tf1 (nat1) (tree3)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree3)) = false -> SUCC (nat1) = SUCC (tf1 (nat1) (tree3))
IH2 : lq (nat1) (tf1 (nat1) (tree4)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree4)) = false -> SUCC (nat1) = SUCC (tf1 (nat1) (tree4))
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
---------------------------------------
lq (nat1) (if lq (tf1 (plus (nat1) (nat3)) (tree3)) (tf1 (plus (nat1) (nat3)) (tree4)) then tf1 (plus (nat1) (nat3)) (tree4) else tf1 (plus (nat1) (nat3)) (tree3)) = true->lq (SUCC (nat1)) (if lq (tf1 (SUCC (plus (nat1) (nat3))) (tree3)) (tf1 (SUCC (plus (nat1) (nat3))) (tree4)) then tf1 (SUCC (plus (nat1) (nat3))) (tree4) else tf1 (SUCC (plus (nat1) (nat3))) (tree3)) = false -> SUCC (nat1) = SUCC (if lq (tf1 (plus (nat1) (nat3)) (tree3)) (tf1 (plus (nat1) (nat3)) (tree4)) then tf1 (plus (nat1) (nat3)) (tree4) else tf1 (plus (nat1) (nat3)) (tree3))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:13.)
=================================================
Progress: 1187


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : lq (nat1) (tf1 (nat1) (tree3)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree3)) = false -> SUCC (nat1) = SUCC (tf1 (nat1) (tree3))
IH2 : lq (nat1) (tf1 (nat1) (tree4)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree4)) = false -> SUCC (nat1) = SUCC (tf1 (nat1) (tree4))
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
---------------------------------------
lq (nat1) (if lq (tf1 (plus (nat1) (nat3)) (tree3)) (tf1 (plus (nat1) (nat3)) (tree4)) then tf1 (plus (nat1) (nat3)) (tree4) else tf1 (plus (nat1) (nat3)) (tree3)) = true->lq (SUCC (nat1)) (if lq (tf1 (SUCC (plus (nat1) (nat3))) (tree3)) (tf1 (SUCC (plus (nat1) (nat3))) (tree4)) then tf1 (SUCC (plus (nat1) (nat3))) (tree4) else tf1 (SUCC (plus (nat1) (nat3))) (tree3)) = false -> SUCC (nat1) = SUCC (if lq (tf1 (plus (nat1) (nat3)) (tree3)) (tf1 (plus (nat1) (nat3)) (tree4)) then tf1 (plus (nat1) (nat3)) (tree4) else tf1 (plus (nat1) (nat3)) (tree3))

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : lq (nat1) (tf1 (nat1) (tree3)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree3)) = false -> SUCC (nat1) = SUCC (tf1 (nat1) (tree3))
IH2 : lq (nat1) (tf1 (nat1) (tree4)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree4)) = false -> SUCC (nat1) = SUCC (tf1 (nat1) (tree4))
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
Cond1 : lq (nat1) (if lq (tf1 (plus (nat1) (nat3)) (tree3)) (tf1 (plus (nat1) (nat3)) (tree4)) then tf1 (plus (nat1) (nat3)) (tree4) else tf1 (plus (nat1) (nat3)) (tree3)) = true
---------------------------------------
lq (SUCC (nat1)) (if lq (tf1 (SUCC (plus (nat1) (nat3))) (tree3)) (tf1 (SUCC (plus (nat1) (nat3))) (tree4)) then tf1 (SUCC (plus (nat1) (nat3))) (tree4) else tf1 (SUCC (plus (nat1) (nat3))) (tree3)) = false -> SUCC (nat1) = SUCC (if lq (tf1 (plus (nat1) (nat3)) (tree3)) (tf1 (plus (nat1) (nat3)) (tree4)) then tf1 (plus (nat1) (nat3)) (tree4) else tf1 (plus (nat1) (nat3)) (tree3))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:13.)
=================================================
Progress: 1188


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : lq (nat1) (tf1 (nat1) (tree3)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree3)) = false -> SUCC (nat1) = SUCC (tf1 (nat1) (tree3))
IH2 : lq (nat1) (tf1 (nat1) (tree4)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree4)) = false -> SUCC (nat1) = SUCC (tf1 (nat1) (tree4))
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
Cond1 : lq (nat1) (if lq (tf1 (plus (nat1) (nat3)) (tree3)) (tf1 (plus (nat1) (nat3)) (tree4)) then tf1 (plus (nat1) (nat3)) (tree4) else tf1 (plus (nat1) (nat3)) (tree3)) = true
---------------------------------------
lq (SUCC (nat1)) (if lq (tf1 (SUCC (plus (nat1) (nat3))) (tree3)) (tf1 (SUCC (plus (nat1) (nat3))) (tree4)) then tf1 (SUCC (plus (nat1) (nat3))) (tree4) else tf1 (SUCC (plus (nat1) (nat3))) (tree3)) = false -> SUCC (nat1) = SUCC (if lq (tf1 (plus (nat1) (nat3)) (tree3)) (tf1 (plus (nat1) (nat3)) (tree4)) then tf1 (plus (nat1) (nat3)) (tree4) else tf1 (plus (nat1) (nat3)) (tree3))

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : lq (nat1) (tf1 (nat1) (tree3)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree3)) = false -> SUCC (nat1) = SUCC (tf1 (nat1) (tree3))
IH2 : lq (nat1) (tf1 (nat1) (tree4)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree4)) = false -> SUCC (nat1) = SUCC (tf1 (nat1) (tree4))
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
Cond1 : lq (nat1) (if lq (tf1 (plus (nat1) (nat3)) (tree3)) (tf1 (plus (nat1) (nat3)) (tree4)) then tf1 (plus (nat1) (nat3)) (tree4) else tf1 (plus (nat1) (nat3)) (tree3)) = true
Cond2 : lq (SUCC (nat1)) (if lq (tf1 (SUCC (plus (nat1) (nat3))) (tree3)) (tf1 (SUCC (plus (nat1) (nat3))) (tree4)) then tf1 (SUCC (plus (nat1) (nat3))) (tree4) else tf1 (SUCC (plus (nat1) (nat3))) (tree3)) = false
---------------------------------------
SUCC (nat1) = SUCC (if lq (tf1 (plus (nat1) (nat3)) (tree3)) (tf1 (plus (nat1) (nat3)) (tree4)) then tf1 (plus (nat1) (nat3)) (tree4) else tf1 (plus (nat1) (nat3)) (tree3))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
case lq (tf1 (plus (nat1) (nat3)) (tree3)) (tf1 (plus (nat1) (nat3)) (tree4))(rank:14.)
rewrite IH1 in goal at 0(rank:23.)
rewrite IH2 in goal at 0(rank:23.)
=================================================
Progress: 1189


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (tree2:tree), lq (nat1) (tf1 (nat1) (tree2)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree2)) = false -> SUCC (nat1) = SUCC (plus (nat1) (tf1 (ZERO) (tree2)))

2 goal(s) more...

2 conjecture(s) more...
>>> induction tree2(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
---------------------------------------
lq (nat1) (tf1 (nat1) (Tnil)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (Tnil)) = false -> SUCC (nat1) = SUCC (plus (nat1) (tf1 (ZERO) (Tnil)))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:14.)
=================================================
Progress: 1190


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (tree2:tree), lq (nat1) (tf1 (nat1) (tree2)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree2)) = false -> SUCC (nat1) = SUCC (plus (nat1) (tf1 (ZERO) (tree2)))

2 goal(s) more...

2 conjecture(s) more...
>>> induction tree2(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
---------------------------------------
lq (nat1) (tf1 (nat1) (Tnil)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (Tnil)) = false -> SUCC (nat1) = SUCC (plus (nat1) (tf1 (ZERO) (Tnil)))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:14.)
=================================================
Progress: 1191


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (nat1))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
---------------------------------------
lq (nat1) (nat1) = true->lq (nat1) (nat1) = false -> SUCC (nat1) = SUCC (if lq (nat1) (nat1) then tf1 (nat1) (Tnil) else tf1 (nat1) (Tnil))

3 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (nat1))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
---------------------------------------
lq (nat1) (nat1) = false -> SUCC (nat1) = SUCC (if lq (nat1) (nat1) then tf1 (nat1) (Tnil) else tf1 (nat1) (Tnil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:14.)
=================================================
Progress: 1192


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (nat1)))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
---------------------------------------
lq (nat1) (nat1) = true->lq (nat1) (nat1) = false -> SUCC (nat1) = SUCC (if lq (nat1) (nat1) then tf1 (nat1) (Tnil) else tf1 (nat1) (Tnil))

3 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (nat1)))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
---------------------------------------
lq (nat1) (nat1) = false -> SUCC (nat1) = SUCC (if lq (nat1) (nat1) then tf1 (nat1) (Tnil) else tf1 (nat1) (Tnil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:14.)
=================================================
Progress: 1193


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
---------------------------------------
lq (nat1) (nat1) = true->lq (nat1) (nat1) = false -> SUCC (nat1) = SUCC (if lq (nat1) (nat1) then tf1 (nat1) (Tnil) else tf1 (nat1) (Tnil))

3 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
---------------------------------------
lq (nat1) (nat1) = false -> SUCC (nat1) = SUCC (if lq (nat1) (nat1) then tf1 (nat1) (Tnil) else tf1 (nat1) (Tnil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:14.)
=================================================
Progress: 1194


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
---------------------------------------
lq (nat1) (nat1) = true->lq (nat1) (nat1) = false -> SUCC (nat1) = SUCC (plus (nat1) (ZERO))

3 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
---------------------------------------
lq (nat1) (nat1) = false -> SUCC (nat1) = SUCC (plus (nat1) (ZERO))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:14.)
=================================================
Progress: 1195


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
---------------------------------------
lq (nat1) (nat1) = true->lq (nat1) (nat1) = false -> SUCC (nat1) = SUCC (plus (nat1) (ZERO))

3 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
---------------------------------------
lq (nat1) (nat1) = false -> SUCC (nat1) = SUCC (plus (nat1) (ZERO))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:14.)
=================================================
Progress: 1196


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (tree2:tree), lq (nat1) (tf1 (nat1) (tree2)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree2)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (if lq (nat1) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (Tnil))

2 goal(s) more...

2 conjecture(s) more...
>>> induction tree2(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
---------------------------------------
lq (nat1) (tf1 (nat1) (Tnil)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (Tnil)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (if lq (nat1) (tf1 (nat1) (Tnil)) then tf1 (nat1) (Tnil) else tf1 (nat1) (Tnil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:14.)
=================================================
Progress: 1197


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (tree2:tree), lq (nat1) (tf1 (nat1) (tree2)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree2)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (tf1 (nat1) (tree2))

2 goal(s) more...

2 conjecture(s) more...
>>> induction tree2(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
---------------------------------------
lq (nat1) (tf1 (nat1) (Tnil)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (Tnil)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (tf1 (nat1) (Tnil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:14.)
=================================================
Progress: 1198


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (tree2:tree), lq (nat1) (tf1 (nat1) (tree2)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree2)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree2)))

2 goal(s) more...

2 conjecture(s) more...
>>> induction tree2(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
---------------------------------------
lq (nat1) (tf1 (nat1) (Tnil)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (Tnil)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (Tnil)))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:13.)
=================================================
Progress: 1199


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
---------------------------------------
lq (nat1) (tf1 (nat1) (Tnil)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (Tnil)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (Tnil)))

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : lq (nat1) (tf1 (nat1) (tree3)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree3)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree3)))
IH2 : lq (nat1) (tf1 (nat1) (tree4)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree4)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree4)))
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
---------------------------------------
lq (nat1) (tf1 (nat1) (Node (nat3) (tree3) (tree4))) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (Node (nat3) (tree3) (tree4))) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (Node (nat3) (tree3) (tree4))))

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 1200


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : lq (nat1) (tf1 (nat1) (tree3)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree3)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree3)))
IH2 : lq (nat1) (tf1 (nat1) (tree4)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree4)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree4)))
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
---------------------------------------
lq (nat1) (tf1 (nat1) (Node (nat3) (tree3) (tree4))) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (Node (nat3) (tree3) (tree4))) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (Node (nat3) (tree3) (tree4))))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : lq (nat1) (tf1 (nat1) (tree3)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree3)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree3)))
IH2 : lq (nat1) (tf1 (nat1) (tree4)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree4)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree4)))
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
---------------------------------------
lq (nat1) (if lq (tf1 (plus (nat1) (nat3)) (tree3)) (tf1 (plus (nat1) (nat3)) (tree4)) then tf1 (plus (nat1) (nat3)) (tree4) else tf1 (plus (nat1) (nat3)) (tree3)) = true->lq (SUCC (nat1)) (if lq (tf1 (SUCC (plus (nat1) (nat3))) (tree3)) (tf1 (SUCC (plus (nat1) (nat3))) (tree4)) then tf1 (SUCC (plus (nat1) (nat3))) (tree4) else tf1 (SUCC (plus (nat1) (nat3))) (tree3)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (if lq (tf1 (nat3) (tree3)) (tf1 (nat3) (tree4)) then tf1 (nat3) (tree4) else tf1 (nat3) (tree3)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:13.)
=================================================
Progress: 1201


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : lq (nat1) (tf1 (nat1) (tree3)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree3)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree3)))
IH2 : lq (nat1) (tf1 (nat1) (tree4)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree4)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree4)))
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
---------------------------------------
lq (nat1) (if lq (tf1 (plus (nat1) (nat3)) (tree3)) (tf1 (plus (nat1) (nat3)) (tree4)) then tf1 (plus (nat1) (nat3)) (tree4) else tf1 (plus (nat1) (nat3)) (tree3)) = true->lq (SUCC (nat1)) (if lq (tf1 (SUCC (plus (nat1) (nat3))) (tree3)) (tf1 (SUCC (plus (nat1) (nat3))) (tree4)) then tf1 (SUCC (plus (nat1) (nat3))) (tree4) else tf1 (SUCC (plus (nat1) (nat3))) (tree3)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (if lq (tf1 (nat3) (tree3)) (tf1 (nat3) (tree4)) then tf1 (nat3) (tree4) else tf1 (nat3) (tree3)))

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : lq (nat1) (tf1 (nat1) (tree3)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree3)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree3)))
IH2 : lq (nat1) (tf1 (nat1) (tree4)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree4)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree4)))
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
Cond1 : lq (nat1) (if lq (tf1 (plus (nat1) (nat3)) (tree3)) (tf1 (plus (nat1) (nat3)) (tree4)) then tf1 (plus (nat1) (nat3)) (tree4) else tf1 (plus (nat1) (nat3)) (tree3)) = true
---------------------------------------
lq (SUCC (nat1)) (if lq (tf1 (SUCC (plus (nat1) (nat3))) (tree3)) (tf1 (SUCC (plus (nat1) (nat3))) (tree4)) then tf1 (SUCC (plus (nat1) (nat3))) (tree4) else tf1 (SUCC (plus (nat1) (nat3))) (tree3)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (if lq (tf1 (nat3) (tree3)) (tf1 (nat3) (tree4)) then tf1 (nat3) (tree4) else tf1 (nat3) (tree3)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:13.)
=================================================
Progress: 1202


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : lq (nat1) (tf1 (nat1) (tree3)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree3)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree3)))
IH2 : lq (nat1) (tf1 (nat1) (tree4)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree4)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree4)))
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
Cond1 : lq (nat1) (if lq (tf1 (plus (nat1) (nat3)) (tree3)) (tf1 (plus (nat1) (nat3)) (tree4)) then tf1 (plus (nat1) (nat3)) (tree4) else tf1 (plus (nat1) (nat3)) (tree3)) = true
---------------------------------------
lq (SUCC (nat1)) (if lq (tf1 (SUCC (plus (nat1) (nat3))) (tree3)) (tf1 (SUCC (plus (nat1) (nat3))) (tree4)) then tf1 (SUCC (plus (nat1) (nat3))) (tree4) else tf1 (SUCC (plus (nat1) (nat3))) (tree3)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (if lq (tf1 (nat3) (tree3)) (tf1 (nat3) (tree4)) then tf1 (nat3) (tree4) else tf1 (nat3) (tree3)))

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : lq (nat1) (tf1 (nat1) (tree3)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree3)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree3)))
IH2 : lq (nat1) (tf1 (nat1) (tree4)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree4)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree4)))
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
Cond1 : lq (nat1) (if lq (tf1 (plus (nat1) (nat3)) (tree3)) (tf1 (plus (nat1) (nat3)) (tree4)) then tf1 (plus (nat1) (nat3)) (tree4) else tf1 (plus (nat1) (nat3)) (tree3)) = true
Cond2 : lq (SUCC (nat1)) (if lq (tf1 (SUCC (plus (nat1) (nat3))) (tree3)) (tf1 (SUCC (plus (nat1) (nat3))) (tree4)) then tf1 (SUCC (plus (nat1) (nat3))) (tree4) else tf1 (SUCC (plus (nat1) (nat3))) (tree3)) = false
---------------------------------------
SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (if lq (tf1 (nat3) (tree3)) (tf1 (nat3) (tree4)) then tf1 (nat3) (tree4) else tf1 (nat3) (tree3)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
case lq (tf1 (nat3) (tree3)) (tf1 (nat3) (tree4))(rank:14.)
rewrite lemma3 in goal at 1(rank:21.)
rewrite lemma3 in goal at 0(rank:29.)
rewrite IH1 in goal at 0(rank:23.)
rewrite IH2 in goal at 0(rank:23.)
rewrite lemma3 in goal at 2(rank:29.)
=================================================
Progress: 1203


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
---------------------------------------
forall (tree2:tree), lq (nat1) (tf1 (nat1) (tree2)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree2)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree2)))

2 goal(s) more...

2 conjecture(s) more...
>>> induction tree2(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
---------------------------------------
lq (nat1) (tf1 (nat1) (Tnil)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (Tnil)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (Tnil)))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:13.)
=================================================
Progress: 1204


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
---------------------------------------
lq (nat1) (tf1 (nat1) (Tnil)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (Tnil)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (Tnil)))

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : lq (nat1) (tf1 (nat1) (tree3)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree3)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree3)))
IH2 : lq (nat1) (tf1 (nat1) (tree4)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree4)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree4)))
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
---------------------------------------
lq (nat1) (tf1 (nat1) (Node (nat3) (tree3) (tree4))) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (Node (nat3) (tree3) (tree4))) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (Node (nat3) (tree3) (tree4))))

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:13.)
=================================================
Progress: 1205


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : lq (nat1) (tf1 (nat1) (tree3)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree3)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree3)))
IH2 : lq (nat1) (tf1 (nat1) (tree4)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree4)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree4)))
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
---------------------------------------
lq (nat1) (tf1 (nat1) (Node (nat3) (tree3) (tree4))) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (Node (nat3) (tree3) (tree4))) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (Node (nat3) (tree3) (tree4))))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : lq (nat1) (tf1 (nat1) (tree3)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree3)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree3)))
IH2 : lq (nat1) (tf1 (nat1) (tree4)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree4)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree4)))
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
---------------------------------------
lq (nat1) (if lq (tf1 (plus (nat1) (nat3)) (tree3)) (tf1 (plus (nat1) (nat3)) (tree4)) then tf1 (plus (nat1) (nat3)) (tree4) else tf1 (plus (nat1) (nat3)) (tree3)) = true->lq (SUCC (nat1)) (if lq (tf1 (SUCC (plus (nat1) (nat3))) (tree3)) (tf1 (SUCC (plus (nat1) (nat3))) (tree4)) then tf1 (SUCC (plus (nat1) (nat3))) (tree4) else tf1 (SUCC (plus (nat1) (nat3))) (tree3)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (if lq (tf1 (nat3) (tree3)) (tf1 (nat3) (tree4)) then tf1 (nat3) (tree4) else tf1 (nat3) (tree3)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:13.)
=================================================
Progress: 1206


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : lq (nat1) (tf1 (nat1) (tree3)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree3)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree3)))
IH2 : lq (nat1) (tf1 (nat1) (tree4)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree4)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree4)))
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
---------------------------------------
lq (nat1) (if lq (tf1 (plus (nat1) (nat3)) (tree3)) (tf1 (plus (nat1) (nat3)) (tree4)) then tf1 (plus (nat1) (nat3)) (tree4) else tf1 (plus (nat1) (nat3)) (tree3)) = true->lq (SUCC (nat1)) (if lq (tf1 (SUCC (plus (nat1) (nat3))) (tree3)) (tf1 (SUCC (plus (nat1) (nat3))) (tree4)) then tf1 (SUCC (plus (nat1) (nat3))) (tree4) else tf1 (SUCC (plus (nat1) (nat3))) (tree3)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (if lq (tf1 (nat3) (tree3)) (tf1 (nat3) (tree4)) then tf1 (nat3) (tree4) else tf1 (nat3) (tree3)))

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : lq (nat1) (tf1 (nat1) (tree3)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree3)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree3)))
IH2 : lq (nat1) (tf1 (nat1) (tree4)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree4)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree4)))
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
Cond1 : lq (nat1) (if lq (tf1 (plus (nat1) (nat3)) (tree3)) (tf1 (plus (nat1) (nat3)) (tree4)) then tf1 (plus (nat1) (nat3)) (tree4) else tf1 (plus (nat1) (nat3)) (tree3)) = true
---------------------------------------
lq (SUCC (nat1)) (if lq (tf1 (SUCC (plus (nat1) (nat3))) (tree3)) (tf1 (SUCC (plus (nat1) (nat3))) (tree4)) then tf1 (SUCC (plus (nat1) (nat3))) (tree4) else tf1 (SUCC (plus (nat1) (nat3))) (tree3)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (if lq (tf1 (nat3) (tree3)) (tf1 (nat3) (tree4)) then tf1 (nat3) (tree4) else tf1 (nat3) (tree3)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:13.)
=================================================
Progress: 1207


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : lq (nat1) (tf1 (nat1) (tree3)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree3)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree3)))
IH2 : lq (nat1) (tf1 (nat1) (tree4)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree4)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree4)))
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
Cond1 : lq (nat1) (if lq (tf1 (plus (nat1) (nat3)) (tree3)) (tf1 (plus (nat1) (nat3)) (tree4)) then tf1 (plus (nat1) (nat3)) (tree4) else tf1 (plus (nat1) (nat3)) (tree3)) = true
---------------------------------------
lq (SUCC (nat1)) (if lq (tf1 (SUCC (plus (nat1) (nat3))) (tree3)) (tf1 (SUCC (plus (nat1) (nat3))) (tree4)) then tf1 (SUCC (plus (nat1) (nat3))) (tree4) else tf1 (SUCC (plus (nat1) (nat3))) (tree3)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (if lq (tf1 (nat3) (tree3)) (tf1 (nat3) (tree4)) then tf1 (nat3) (tree4) else tf1 (nat3) (tree3)))

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 13.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : lq (nat1) (tf1 (nat1) (tree3)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree3)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree3)))
IH2 : lq (nat1) (tf1 (nat1) (tree4)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree4)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree4)))
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
Cond1 : lq (nat1) (if lq (tf1 (plus (nat1) (nat3)) (tree3)) (tf1 (plus (nat1) (nat3)) (tree4)) then tf1 (plus (nat1) (nat3)) (tree4) else tf1 (plus (nat1) (nat3)) (tree3)) = true
Cond2 : lq (SUCC (nat1)) (if lq (tf1 (SUCC (plus (nat1) (nat3))) (tree3)) (tf1 (SUCC (plus (nat1) (nat3))) (tree4)) then tf1 (SUCC (plus (nat1) (nat3))) (tree4) else tf1 (SUCC (plus (nat1) (nat3))) (tree3)) = false
---------------------------------------
SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (if lq (tf1 (nat3) (tree3)) (tf1 (nat3) (tree4)) then tf1 (nat3) (tree4) else tf1 (nat3) (tree3)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 6
case lq (tf1 (nat3) (tree3)) (tf1 (nat3) (tree4))(rank:14.)
rewrite lemma3 in goal at 1(rank:21.)
rewrite lemma3 in goal at 0(rank:29.)
rewrite IH1 in goal at 0(rank:23.)
rewrite IH2 in goal at 0(rank:23.)
rewrite lemma3 in goal at 2(rank:29.)
=================================================
Progress: 1208


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tf1 (ZERO) (tree1)) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
---------------------------------------
lq (nat1) (tf1 (nat1) (Tnil)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (Tnil)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (if lq (nat1) (tf1 (nat1) (Tnil)) then tf1 (nat1) (Tnil) else tf1 (nat1) (Tnil))

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tf1 (ZERO) (tree1)) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
---------------------------------------
lq (nat1) (nat1) = true->lq (nat1) (nat1) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (if lq (nat1) (nat1) then tf1 (nat1) (Tnil) else tf1 (nat1) (Tnil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:14.)
=================================================
Progress: 1209


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
---------------------------------------
lq (nat1) (tf1 (nat1) (Tnil)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (Tnil)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (if lq (nat1) (tf1 (nat1) (Tnil)) then tf1 (nat1) (Tnil) else tf1 (nat1) (Tnil))

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
---------------------------------------
lq (nat1) (nat1) = true->lq (nat1) (nat1) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (if lq (nat1) (nat1) then tf1 (nat1) (Tnil) else tf1 (nat1) (Tnil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:14.)
=================================================
Progress: 1210


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
---------------------------------------
lq (nat1) (tf1 (nat1) (Tnil)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (Tnil)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (tf1 (nat1) (Tnil))

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
---------------------------------------
lq (nat1) (nat1) = true->lq (nat1) (nat1) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (nat1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:14.)
=================================================
Progress: 1211


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : lq (nat1) (tf1 (nat1) (tree3)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree3)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree3)))
IH2 : lq (nat1) (tf1 (nat1) (tree4)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree4)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree4)))
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
Cond1 : lq (nat1) (if lq (tf1 (plus (nat1) (nat3)) (tree3)) (tf1 (plus (nat1) (nat3)) (tree4)) then tf1 (plus (nat1) (nat3)) (tree4) else tf1 (plus (nat1) (nat3)) (tree3)) = true
Cond2 : lq (SUCC (nat1)) (if lq (tf1 (SUCC (plus (nat1) (nat3))) (tree3)) (tf1 (SUCC (plus (nat1) (nat3))) (tree4)) then tf1 (SUCC (plus (nat1) (nat3))) (tree4) else tf1 (SUCC (plus (nat1) (nat3))) (tree3)) = false
---------------------------------------
SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (if lq (tf1 (nat3) (tree3)) (tf1 (nat3) (tree4)) then tf1 (nat3) (tree4) else tf1 (nat3) (tree3)))

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (tf1 (nat3) (tree3)) (tf1 (nat3) (tree4))(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : lq (nat1) (tf1 (nat1) (tree3)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree3)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree3)))
IH2 : lq (nat1) (tf1 (nat1) (tree4)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree4)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree4)))
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
Cond1 : lq (nat1) (if lq (tf1 (plus (nat1) (nat3)) (tree3)) (tf1 (plus (nat1) (nat3)) (tree4)) then tf1 (plus (nat1) (nat3)) (tree4) else tf1 (plus (nat1) (nat3)) (tree3)) = true
Cond2 : lq (SUCC (nat1)) (if lq (tf1 (SUCC (plus (nat1) (nat3))) (tree3)) (tf1 (SUCC (plus (nat1) (nat3))) (tree4)) then tf1 (SUCC (plus (nat1) (nat3))) (tree4) else tf1 (SUCC (plus (nat1) (nat3))) (tree3)) = false
Case1 : lq (tf1 (nat3) (tree3)) (tf1 (nat3) (tree4)) = true
---------------------------------------
SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (nat3) (tree4)))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 5
rewrite lemma3 in goal at 1(rank:22.)
rewrite IH1 in goal at 0(rank:24.)
rewrite IH2 in goal at 0(rank:24.)
rewrite lemma3 in goal at 2(rank:30.)
rewrite lemma3 in goal at 0(rank:30.)
=================================================
Progress: 1212


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : lq (nat1) (tf1 (nat1) (tree3)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree3)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree3)))
IH2 : lq (nat1) (tf1 (nat1) (tree4)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree4)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree4)))
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
Cond1 : lq (nat1) (if lq (tf1 (plus (nat1) (nat3)) (tree3)) (tf1 (plus (nat1) (nat3)) (tree4)) then tf1 (plus (nat1) (nat3)) (tree4) else tf1 (plus (nat1) (nat3)) (tree3)) = true
Cond2 : lq (SUCC (nat1)) (if lq (tf1 (SUCC (plus (nat1) (nat3))) (tree3)) (tf1 (SUCC (plus (nat1) (nat3))) (tree4)) then tf1 (SUCC (plus (nat1) (nat3))) (tree4) else tf1 (SUCC (plus (nat1) (nat3))) (tree3)) = false
---------------------------------------
SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (if lq (tf1 (nat3) (tree3)) (tf1 (nat3) (tree4)) then tf1 (nat3) (tree4) else tf1 (nat3) (tree3)))

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (tf1 (nat3) (tree3)) (tf1 (nat3) (tree4))(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : lq (nat1) (tf1 (nat1) (tree3)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree3)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree3)))
IH2 : lq (nat1) (tf1 (nat1) (tree4)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree4)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree4)))
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
Cond1 : lq (nat1) (if lq (tf1 (plus (nat1) (nat3)) (tree3)) (tf1 (plus (nat1) (nat3)) (tree4)) then tf1 (plus (nat1) (nat3)) (tree4) else tf1 (plus (nat1) (nat3)) (tree3)) = true
Cond2 : lq (SUCC (nat1)) (if lq (tf1 (SUCC (plus (nat1) (nat3))) (tree3)) (tf1 (SUCC (plus (nat1) (nat3))) (tree4)) then tf1 (SUCC (plus (nat1) (nat3))) (tree4) else tf1 (SUCC (plus (nat1) (nat3))) (tree3)) = false
Case1 : lq (tf1 (nat3) (tree3)) (tf1 (nat3) (tree4)) = true
---------------------------------------
SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (nat3) (tree4)))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 5
rewrite lemma3 in goal at 1(rank:22.)
rewrite IH1 in goal at 0(rank:24.)
rewrite IH2 in goal at 0(rank:24.)
rewrite lemma3 in goal at 2(rank:30.)
rewrite lemma3 in goal at 0(rank:30.)
=================================================
Progress: 1213


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
---------------------------------------
lq (nat1) (tf1 (nat1) (Tnil)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (Tnil)) = false -> SUCC (nat1) = SUCC (if lq (nat1) (tf1 (nat1) (Tnil)) then tf1 (nat1) (Tnil) else tf1 (nat1) (Tnil))

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
---------------------------------------
lq (nat1) (nat1) = true->lq (nat1) (nat1) = false -> SUCC (nat1) = SUCC (if lq (nat1) (nat1) then tf1 (nat1) (Tnil) else tf1 (nat1) (Tnil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:14.)
=================================================
Progress: 1214


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : lq (nat1) (tf1 (nat1) (tree3)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree3)) = false -> SUCC (nat1) = SUCC (tf1 (nat1) (tree3))
IH2 : lq (nat1) (tf1 (nat1) (tree4)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree4)) = false -> SUCC (nat1) = SUCC (tf1 (nat1) (tree4))
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
Cond1 : lq (nat1) (if lq (tf1 (plus (nat1) (nat3)) (tree3)) (tf1 (plus (nat1) (nat3)) (tree4)) then tf1 (plus (nat1) (nat3)) (tree4) else tf1 (plus (nat1) (nat3)) (tree3)) = true
Cond2 : lq (SUCC (nat1)) (if lq (tf1 (SUCC (plus (nat1) (nat3))) (tree3)) (tf1 (SUCC (plus (nat1) (nat3))) (tree4)) then tf1 (SUCC (plus (nat1) (nat3))) (tree4) else tf1 (SUCC (plus (nat1) (nat3))) (tree3)) = false
---------------------------------------
SUCC (nat1) = SUCC (if lq (tf1 (plus (nat1) (nat3)) (tree3)) (tf1 (plus (nat1) (nat3)) (tree4)) then tf1 (plus (nat1) (nat3)) (tree4) else tf1 (plus (nat1) (nat3)) (tree3))

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (tf1 (plus (nat1) (nat3)) (tree3)) (tf1 (plus (nat1) (nat3)) (tree4))(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : lq (nat1) (tf1 (nat1) (tree3)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree3)) = false -> SUCC (nat1) = SUCC (tf1 (nat1) (tree3))
IH2 : lq (nat1) (tf1 (nat1) (tree4)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree4)) = false -> SUCC (nat1) = SUCC (tf1 (nat1) (tree4))
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
Cond1 : lq (nat1) (tf1 (plus (nat1) (nat3)) (tree4)) = true
Cond2 : lq (SUCC (nat1)) (if lq (tf1 (SUCC (plus (nat1) (nat3))) (tree3)) (tf1 (SUCC (plus (nat1) (nat3))) (tree4)) then tf1 (SUCC (plus (nat1) (nat3))) (tree4) else tf1 (SUCC (plus (nat1) (nat3))) (tree3)) = false
Case1 : lq (tf1 (plus (nat1) (nat3)) (tree3)) (tf1 (plus (nat1) (nat3)) (tree4)) = true
---------------------------------------
SUCC (nat1) = SUCC (tf1 (plus (nat1) (nat3)) (tree4))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:24.)
rewrite IH2 in goal at 0(rank:24.)
=================================================
Progress: 1215


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : lq (nat1) (tf1 (nat1) (tree3)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree3)) = false -> SUCC (nat1) = SUCC (tf1 (nat1) (tree3))
IH2 : lq (nat1) (tf1 (nat1) (tree4)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree4)) = false -> SUCC (nat1) = SUCC (tf1 (nat1) (tree4))
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
Cond1 : lq (nat1) (if lq (tf1 (plus (nat1) (nat3)) (tree3)) (tf1 (plus (nat1) (nat3)) (tree4)) then tf1 (plus (nat1) (nat3)) (tree4) else tf1 (plus (nat1) (nat3)) (tree3)) = true
Cond2 : lq (SUCC (nat1)) (if lq (tf1 (SUCC (plus (nat1) (nat3))) (tree3)) (tf1 (SUCC (plus (nat1) (nat3))) (tree4)) then tf1 (SUCC (plus (nat1) (nat3))) (tree4) else tf1 (SUCC (plus (nat1) (nat3))) (tree3)) = false
---------------------------------------
SUCC (nat1) = SUCC (if lq (tf1 (plus (nat1) (nat3)) (tree3)) (tf1 (plus (nat1) (nat3)) (tree4)) then tf1 (plus (nat1) (nat3)) (tree4) else tf1 (plus (nat1) (nat3)) (tree3))

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (tf1 (plus (nat1) (nat3)) (tree3)) (tf1 (plus (nat1) (nat3)) (tree4))(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : lq (nat1) (tf1 (nat1) (tree3)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree3)) = false -> SUCC (nat1) = SUCC (tf1 (nat1) (tree3))
IH2 : lq (nat1) (tf1 (nat1) (tree4)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree4)) = false -> SUCC (nat1) = SUCC (tf1 (nat1) (tree4))
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
Cond1 : lq (nat1) (tf1 (plus (nat1) (nat3)) (tree4)) = true
Cond2 : lq (SUCC (nat1)) (if lq (tf1 (SUCC (plus (nat1) (nat3))) (tree3)) (tf1 (SUCC (plus (nat1) (nat3))) (tree4)) then tf1 (SUCC (plus (nat1) (nat3))) (tree4) else tf1 (SUCC (plus (nat1) (nat3))) (tree3)) = false
Case1 : lq (tf1 (plus (nat1) (nat3)) (tree3)) (tf1 (plus (nat1) (nat3)) (tree4)) = true
---------------------------------------
SUCC (nat1) = SUCC (tf1 (plus (nat1) (nat3)) (tree4))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite IH1 in goal at 0(rank:24.)
rewrite IH2 in goal at 0(rank:24.)
=================================================
Progress: 1216


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
---------------------------------------
lq (nat1) (tf1 (nat1) (Tnil)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (Tnil)) = false -> SUCC (nat1) = SUCC (plus (nat1) (tf1 (ZERO) (Tnil)))

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
---------------------------------------
lq (nat1) (nat1) = true->lq (nat1) (nat1) = false -> SUCC (nat1) = SUCC (plus (nat1) (ZERO))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:14.)
=================================================
Progress: 1217


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
---------------------------------------
lq (nat1) (tf1 (nat1) (Tnil)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (Tnil)) = false -> SUCC (nat1) = SUCC (plus (nat1) (tf1 (ZERO) (Tnil)))

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
---------------------------------------
lq (nat1) (nat1) = true->lq (nat1) (nat1) = false -> SUCC (nat1) = SUCC (plus (nat1) (ZERO))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:14.)
=================================================
Progress: 1218


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (nat1))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
---------------------------------------
lq (nat1) (nat1) = false -> SUCC (nat1) = SUCC (if lq (nat1) (nat1) then tf1 (nat1) (Tnil) else tf1 (nat1) (Tnil))

3 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (nat1))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (nat1) = SUCC (if lq (nat1) (nat1) then tf1 (nat1) (Tnil) else tf1 (nat1) (Tnil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite Cond1 in goal at 0(rank:22.)
rewrite Cond2 in goal at 0(rank:22.)
=================================================
Progress: 1219


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (nat1)))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
---------------------------------------
lq (nat1) (nat1) = false -> SUCC (nat1) = SUCC (if lq (nat1) (nat1) then tf1 (nat1) (Tnil) else tf1 (nat1) (Tnil))

3 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (nat1)))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (nat1) = SUCC (if lq (nat1) (nat1) then tf1 (nat1) (Tnil) else tf1 (nat1) (Tnil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite Cond1 in goal at 0(rank:22.)
rewrite Cond2 in goal at 0(rank:22.)
=================================================
Progress: 1220


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
---------------------------------------
lq (nat1) (nat1) = false -> SUCC (nat1) = SUCC (if lq (nat1) (nat1) then tf1 (nat1) (Tnil) else tf1 (nat1) (Tnil))

3 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (nat1) = SUCC (if lq (nat1) (nat1) then tf1 (nat1) (Tnil) else tf1 (nat1) (Tnil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite Cond1 in goal at 0(rank:22.)
rewrite Cond2 in goal at 0(rank:22.)
=================================================
Progress: 1221


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
---------------------------------------
lq (nat1) (nat1) = false -> SUCC (nat1) = SUCC (plus (nat1) (ZERO))

3 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (nat1) = SUCC (plus (nat1) (ZERO))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:14.)
=================================================
Progress: 1222


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
---------------------------------------
lq (nat1) (nat1) = false -> SUCC (nat1) = SUCC (plus (nat1) (ZERO))

3 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (nat1) = SUCC (plus (nat1) (ZERO))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:14.)
=================================================
Progress: 1223


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
---------------------------------------
lq (nat1) (tf1 (nat1) (Tnil)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (Tnil)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (if lq (nat1) (tf1 (nat1) (Tnil)) then tf1 (nat1) (Tnil) else tf1 (nat1) (Tnil))

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
---------------------------------------
lq (nat1) (nat1) = true->lq (nat1) (nat1) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (if lq (nat1) (nat1) then tf1 (nat1) (Tnil) else tf1 (nat1) (Tnil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:14.)
=================================================
Progress: 1224


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
---------------------------------------
lq (nat1) (tf1 (nat1) (Tnil)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (Tnil)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (tf1 (nat1) (Tnil))

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
---------------------------------------
lq (nat1) (nat1) = true->lq (nat1) (nat1) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (nat1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:14.)
=================================================
Progress: 1225


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : lq (nat1) (tf1 (nat1) (tree3)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree3)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree3)))
IH2 : lq (nat1) (tf1 (nat1) (tree4)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree4)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree4)))
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
Cond1 : lq (nat1) (if lq (tf1 (plus (nat1) (nat3)) (tree3)) (tf1 (plus (nat1) (nat3)) (tree4)) then tf1 (plus (nat1) (nat3)) (tree4) else tf1 (plus (nat1) (nat3)) (tree3)) = true
Cond2 : lq (SUCC (nat1)) (if lq (tf1 (SUCC (plus (nat1) (nat3))) (tree3)) (tf1 (SUCC (plus (nat1) (nat3))) (tree4)) then tf1 (SUCC (plus (nat1) (nat3))) (tree4) else tf1 (SUCC (plus (nat1) (nat3))) (tree3)) = false
---------------------------------------
SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (if lq (tf1 (nat3) (tree3)) (tf1 (nat3) (tree4)) then tf1 (nat3) (tree4) else tf1 (nat3) (tree3)))

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (tf1 (nat3) (tree3)) (tf1 (nat3) (tree4))(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : lq (nat1) (tf1 (nat1) (tree3)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree3)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree3)))
IH2 : lq (nat1) (tf1 (nat1) (tree4)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree4)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree4)))
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
Cond1 : lq (nat1) (if lq (tf1 (plus (nat1) (nat3)) (tree3)) (tf1 (plus (nat1) (nat3)) (tree4)) then tf1 (plus (nat1) (nat3)) (tree4) else tf1 (plus (nat1) (nat3)) (tree3)) = true
Cond2 : lq (SUCC (nat1)) (if lq (tf1 (SUCC (plus (nat1) (nat3))) (tree3)) (tf1 (SUCC (plus (nat1) (nat3))) (tree4)) then tf1 (SUCC (plus (nat1) (nat3))) (tree4) else tf1 (SUCC (plus (nat1) (nat3))) (tree3)) = false
Case1 : lq (tf1 (nat3) (tree3)) (tf1 (nat3) (tree4)) = true
---------------------------------------
SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (nat3) (tree4)))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 5
rewrite lemma3 in goal at 1(rank:22.)
rewrite IH1 in goal at 0(rank:24.)
rewrite IH2 in goal at 0(rank:24.)
rewrite lemma3 in goal at 2(rank:30.)
rewrite lemma3 in goal at 0(rank:30.)
=================================================
Progress: 1226


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : lq (nat1) (tf1 (nat1) (tree3)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree3)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree3)))
IH2 : lq (nat1) (tf1 (nat1) (tree4)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree4)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree4)))
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
Cond1 : lq (nat1) (if lq (tf1 (plus (nat1) (nat3)) (tree3)) (tf1 (plus (nat1) (nat3)) (tree4)) then tf1 (plus (nat1) (nat3)) (tree4) else tf1 (plus (nat1) (nat3)) (tree3)) = true
Cond2 : lq (SUCC (nat1)) (if lq (tf1 (SUCC (plus (nat1) (nat3))) (tree3)) (tf1 (SUCC (plus (nat1) (nat3))) (tree4)) then tf1 (SUCC (plus (nat1) (nat3))) (tree4) else tf1 (SUCC (plus (nat1) (nat3))) (tree3)) = false
---------------------------------------
SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (if lq (tf1 (nat3) (tree3)) (tf1 (nat3) (tree4)) then tf1 (nat3) (tree4) else tf1 (nat3) (tree3)))

2 goal(s) more...

2 conjecture(s) more...
>>> case lq (tf1 (nat3) (tree3)) (tf1 (nat3) (tree4))(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
nat3 : nat
tree3 : tree
tree4 : tree
IH1 : lq (nat1) (tf1 (nat1) (tree3)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree3)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree3)))
IH2 : lq (nat1) (tf1 (nat1) (tree4)) = true->lq (SUCC (nat1)) (tf1 (SUCC (nat1)) (tree4)) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (ZERO) (tree4)))
Inductive1 : tree2 = Node (nat3) (tree3) (tree4)
Cond1 : lq (nat1) (if lq (tf1 (plus (nat1) (nat3)) (tree3)) (tf1 (plus (nat1) (nat3)) (tree4)) then tf1 (plus (nat1) (nat3)) (tree4) else tf1 (plus (nat1) (nat3)) (tree3)) = true
Cond2 : lq (SUCC (nat1)) (if lq (tf1 (SUCC (plus (nat1) (nat3))) (tree3)) (tf1 (SUCC (plus (nat1) (nat3))) (tree4)) then tf1 (SUCC (plus (nat1) (nat3))) (tree4) else tf1 (SUCC (plus (nat1) (nat3))) (tree3)) = false
Case1 : lq (tf1 (nat3) (tree3)) (tf1 (nat3) (tree4)) = true
---------------------------------------
SUCC (plus (nat1) (ZERO)) = SUCC (plus (nat1) (tf1 (nat3) (tree4)))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 5
rewrite lemma3 in goal at 1(rank:22.)
rewrite IH1 in goal at 0(rank:24.)
rewrite IH2 in goal at 0(rank:24.)
rewrite lemma3 in goal at 2(rank:30.)
rewrite lemma3 in goal at 0(rank:30.)
=================================================
Progress: 1227


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tf1 (ZERO) (tree1)) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
---------------------------------------
lq (nat1) (nat1) = true->lq (nat1) (nat1) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (if lq (nat1) (nat1) then tf1 (nat1) (Tnil) else tf1 (nat1) (Tnil))

3 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tf1 (ZERO) (tree1)) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
---------------------------------------
lq (nat1) (nat1) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (if lq (nat1) (nat1) then tf1 (nat1) (Tnil) else tf1 (nat1) (Tnil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:14.)
=================================================
Progress: 1228


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
---------------------------------------
lq (nat1) (nat1) = true->lq (nat1) (nat1) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (if lq (nat1) (nat1) then tf1 (nat1) (Tnil) else tf1 (nat1) (Tnil))

3 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
---------------------------------------
lq (nat1) (nat1) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (if lq (nat1) (nat1) then tf1 (nat1) (Tnil) else tf1 (nat1) (Tnil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:14.)
=================================================
Progress: 1229


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
---------------------------------------
lq (nat1) (nat1) = true->lq (nat1) (nat1) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (nat1)

3 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
---------------------------------------
lq (nat1) (nat1) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (nat1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:14.)
=================================================
Progress: 1230


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
---------------------------------------
lq (nat1) (nat1) = true->lq (nat1) (nat1) = false -> SUCC (nat1) = SUCC (if lq (nat1) (nat1) then tf1 (nat1) (Tnil) else tf1 (nat1) (Tnil))

3 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
---------------------------------------
lq (nat1) (nat1) = false -> SUCC (nat1) = SUCC (if lq (nat1) (nat1) then tf1 (nat1) (Tnil) else tf1 (nat1) (Tnil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:14.)
=================================================
Progress: 1231


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
---------------------------------------
lq (nat1) (nat1) = true->lq (nat1) (nat1) = false -> SUCC (nat1) = SUCC (plus (nat1) (ZERO))

3 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
---------------------------------------
lq (nat1) (nat1) = false -> SUCC (nat1) = SUCC (plus (nat1) (ZERO))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:14.)
=================================================
Progress: 1232


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
---------------------------------------
lq (nat1) (nat1) = true->lq (nat1) (nat1) = false -> SUCC (nat1) = SUCC (plus (nat1) (ZERO))

3 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
---------------------------------------
lq (nat1) (nat1) = false -> SUCC (nat1) = SUCC (plus (nat1) (ZERO))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:14.)
=================================================
Progress: 1233


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (nat1) = SUCC (plus (nat1) (ZERO))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (nat1) = SUCC (plus (nat1) (plus (ZERO) (ZERO)))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:14.)
=================================================
Progress: 1234


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (nat1) = SUCC (plus (nat1) (ZERO))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (nat1) = SUCC (plus (nat1) (plus (ZERO) (ZERO)))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:14.)
=================================================
Progress: 1235


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
---------------------------------------
lq (nat1) (nat1) = true->lq (nat1) (nat1) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (if lq (nat1) (nat1) then tf1 (nat1) (Tnil) else tf1 (nat1) (Tnil))

3 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
---------------------------------------
lq (nat1) (nat1) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (if lq (nat1) (nat1) then tf1 (nat1) (Tnil) else tf1 (nat1) (Tnil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:14.)
=================================================
Progress: 1236


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
---------------------------------------
lq (nat1) (nat1) = true->lq (nat1) (nat1) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (nat1)

3 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
---------------------------------------
lq (nat1) (nat1) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (nat1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro Cond2(rank:14.)
=================================================
Progress: 1237


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tf1 (ZERO) (tree1)) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
---------------------------------------
lq (nat1) (nat1) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (if lq (nat1) (nat1) then tf1 (nat1) (Tnil) else tf1 (nat1) (Tnil))

3 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tf1 (ZERO) (tree1)) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (plus (nat1) (ZERO)) = SUCC (if lq (nat1) (nat1) then tf1 (nat1) (Tnil) else tf1 (nat1) (Tnil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite Cond1 in goal at 0(rank:22.)
rewrite Cond2 in goal at 0(rank:22.)
rewrite lemma3 in goal at 0(rank:22.)
=================================================
Progress: 1238


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
---------------------------------------
lq (nat1) (nat1) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (if lq (nat1) (nat1) then tf1 (nat1) (Tnil) else tf1 (nat1) (Tnil))

3 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (plus (nat1) (ZERO)) = SUCC (if lq (nat1) (nat1) then tf1 (nat1) (Tnil) else tf1 (nat1) (Tnil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite Cond1 in goal at 0(rank:22.)
rewrite Cond2 in goal at 0(rank:22.)
rewrite lemma3 in goal at 0(rank:22.)
=================================================
Progress: 1239


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
---------------------------------------
lq (nat1) (nat1) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (nat1)

3 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (plus (nat1) (ZERO)) = SUCC (nat1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:14.)
=================================================
Progress: 1240


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
---------------------------------------
lq (nat1) (nat1) = false -> SUCC (nat1) = SUCC (if lq (nat1) (nat1) then tf1 (nat1) (Tnil) else tf1 (nat1) (Tnil))

3 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tree1) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (nat1) = SUCC (if lq (nat1) (nat1) then tf1 (nat1) (Tnil) else tf1 (nat1) (Tnil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite Cond1 in goal at 0(rank:22.)
rewrite Cond2 in goal at 0(rank:22.)
=================================================
Progress: 1241


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
---------------------------------------
lq (nat1) (nat1) = false -> SUCC (nat1) = SUCC (plus (nat1) (ZERO))

3 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (nat1) = SUCC (plus (nat1) (ZERO))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:14.)
=================================================
Progress: 1242


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
---------------------------------------
lq (nat1) (nat1) = false -> SUCC (nat1) = SUCC (plus (nat1) (ZERO))

3 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (nat1) = SUCC (plus (nat1) (ZERO))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:14.)
=================================================
Progress: 1243


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (nat1) = SUCC (plus (nat1) (plus (ZERO) (ZERO)))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (nat1) = SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (ZERO))))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:14.)
=================================================
Progress: 1244


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (nat1) = SUCC (plus (nat1) (plus (ZERO) (ZERO)))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (nat1) = SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (ZERO))))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:14.)
=================================================
Progress: 1245


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
---------------------------------------
lq (nat1) (nat1) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (if lq (nat1) (nat1) then tf1 (nat1) (Tnil) else tf1 (nat1) (Tnil))

3 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (plus (nat2) (if lq (tf1 (nat1) (tree1)) (tf1 (nat1) (tree2)) then tf1 (nat1) (tree2) else tf1 (nat1) (tree1)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (plus (nat1) (ZERO)) = SUCC (if lq (nat1) (nat1) then tf1 (nat1) (Tnil) else tf1 (nat1) (Tnil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite Cond1 in goal at 0(rank:22.)
rewrite Cond2 in goal at 0(rank:22.)
rewrite lemma3 in goal at 0(rank:22.)
=================================================
Progress: 1246


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
---------------------------------------
lq (nat1) (nat1) = false -> SUCC (plus (nat1) (ZERO)) = SUCC (nat1)

3 goal(s) more...

2 conjecture(s) more...
>>> intro Cond2(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (plus (nat1) (ZERO)) = SUCC (nat1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:14.)
=================================================
Progress: 1247


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (plus (nat1) (ZERO)) = SUCC (nat1)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (plus (nat1) (plus (ZERO) (ZERO))) = SUCC (nat1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:14.)
=================================================
Progress: 1248


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (nat1) = SUCC (plus (nat1) (ZERO))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (nat1) = SUCC (plus (nat1) (plus (ZERO) (ZERO)))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:14.)
=================================================
Progress: 1249


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (nat1) = SUCC (plus (nat1) (ZERO))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (nat1) = SUCC (plus (nat1) (plus (ZERO) (ZERO)))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:14.)
=================================================
Progress: 1250


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (nat1) = SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (ZERO))))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (nat1) = SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO)))))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:14.)
=================================================
Progress: 1251


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (nat1) = SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (ZERO))))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (nat1) = SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO)))))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:14.)
=================================================
Progress: 1252


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (plus (nat1) (ZERO)) = SUCC (nat1)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (plus (nat1) (plus (ZERO) (ZERO))) = SUCC (nat1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:14.)
=================================================
Progress: 1253


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (plus (nat1) (plus (ZERO) (ZERO))) = SUCC (nat1)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (ZERO)))) = SUCC (nat1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:14.)
=================================================
Progress: 1254


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (nat1) = SUCC (plus (nat1) (plus (ZERO) (ZERO)))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (nat1) = SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (ZERO))))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:14.)
=================================================
Progress: 1255


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (nat1) = SUCC (plus (nat1) (plus (ZERO) (ZERO)))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (nat1) = SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (ZERO))))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:14.)
=================================================
Progress: 1256


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (nat1) = SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO)))))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (nat1) = SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO))))))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:14.)
=================================================
Progress: 1257


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (nat1) = SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO)))))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (nat1) = SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO))))))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:14.)
=================================================
Progress: 1258


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (plus (nat1) (plus (ZERO) (ZERO))) = SUCC (nat1)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (ZERO)))) = SUCC (nat1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:14.)
=================================================
Progress: 1259


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (ZERO)))) = SUCC (nat1)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO))))) = SUCC (nat1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:14.)
=================================================
Progress: 1260


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (nat1) = SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (ZERO))))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (nat1) = SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO)))))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:14.)
=================================================
Progress: 1261


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (nat1) = SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (ZERO))))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (nat1) = SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO)))))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:14.)
=================================================
Progress: 1262


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (nat1) = SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO))))))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (nat1) = SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO)))))))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:14.)
=================================================
Progress: 1263


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (nat1) = SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO))))))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (nat1) = SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO)))))))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:14.)
=================================================
Progress: 1264


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (ZERO)))) = SUCC (nat1)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO))))) = SUCC (nat1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:14.)
=================================================
Progress: 1265


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO))))) = SUCC (nat1)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO)))))) = SUCC (nat1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:14.)
=================================================
Progress: 1266


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (nat1) = SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO)))))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (nat1) = SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO))))))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:14.)
=================================================
Progress: 1267


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (nat1) = SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO)))))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (nat1) = SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO))))))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:14.)
=================================================
Progress: 1268


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (nat1) = SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO)))))))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (nat1) = SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO))))))))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:14.)
=================================================
Progress: 1269


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (nat1) = SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO)))))))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (nat1) = SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO))))))))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:14.)
=================================================
Progress: 1270


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO))))) = SUCC (nat1)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO)))))) = SUCC (nat1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:14.)
=================================================
Progress: 1271


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO)))))) = SUCC (nat1)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO))))))) = SUCC (nat1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:14.)
=================================================
Progress: 1272


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (nat1) = SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO))))))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (nat1) = SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO)))))))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:14.)
=================================================
Progress: 1273


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (nat1) = SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO))))))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (nat1) = SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO)))))))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:14.)
=================================================
Progress: 1274


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (nat1) = SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO))))))))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (nat1) = SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO)))))))))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:14.)
=================================================
Progress: 1275


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (nat1) = SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO))))))))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (nat1) = SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO)))))))))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:14.)
=================================================
Progress: 1276


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO)))))) = SUCC (nat1)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO))))))) = SUCC (nat1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:14.)
=================================================
Progress: 1277


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO))))))) = SUCC (nat1)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO)))))))) = SUCC (nat1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:14.)
=================================================
Progress: 1278


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (nat1) = SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO)))))))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (nat1) = SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO))))))))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:14.)
=================================================
Progress: 1279


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (nat1) = SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO)))))))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (nat1) = SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO))))))))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:14.)
=================================================
Progress: 1280


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (nat1) = SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO)))))))))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (nat1) = SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO))))))))))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:14.)
=================================================
Progress: 1281


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (nat1) = SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO)))))))))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (nat1) = SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO))))))))))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:14.)
=================================================
Progress: 1282


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO))))))) = SUCC (nat1)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO)))))))) = SUCC (nat1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:14.)
=================================================
Progress: 1283


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO)))))))) = SUCC (nat1)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO))))))))) = SUCC (nat1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:14.)
=================================================
Progress: 1284


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (nat1) = SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO))))))))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (nat1) = SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO)))))))))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:14.)
=================================================
Progress: 1285


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (nat1) = SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO))))))))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (nat1) = SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO)))))))))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:14.)
=================================================
Progress: 1286


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (nat1) = SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO))))))))))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (nat1) = SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO)))))))))))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:14.)
=================================================
Progress: 1287


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (nat1) = SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO))))))))))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (plus (ZERO) (tf1 (ZERO) (tree2))))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (nat1) = SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO)))))))))))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:14.)
=================================================
Progress: 1288


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO)))))))) = SUCC (nat1)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (nat1))))) (plus (ZERO) (tf1 (ZERO) (tree1))) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO))))))))) = SUCC (nat1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:14.)
=================================================
Progress: 1289


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO))))))))) = SUCC (nat1)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> plus (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1)))))) (tf1 (ZERO) (tree1)) = SUCC (tf1 (plus (nat2) (nat1)) (tree2))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO)))))))))) = SUCC (nat1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite lemma3 in goal at 0(rank:14.)
=================================================
Progress: 1290


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (nat1) = SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO)))))))))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite lemma3 in goal at 0(rank : 14.)


1st goal of : forall (nat1:nat) (nat2:nat) (tree1:tree) (tree2:tree), lq (tf1 (plus (nat2) (nat1)) (tree1)) (tf1 (plus (nat2) (nat1)) (tree2)) = true->lq (SUCC (tf1 (plus (nat2) (nat1)) (tree1))) (tf1 (SUCC (plus (nat2) (nat1))) (tree2)) = false -> tf1 (SUCC (plus (nat2) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (nat1))))))) (tree1) = SUCC (plus (plus (nat2) (nat1)) (tf1 (ZERO) (tree2)))
nat1 : nat
nat2 : nat
Base1 : nat2 = ZERO
tree1 : tree
Base2 : tree1 = Tnil
tree2 : tree
Base3 : tree2 = Tnil
Cond1 : lq (nat1) (nat1) = true
Cond2 : lq (nat1) (nat1) = false
---------------------------------------
SUCC (nat1) = SUCC (plus (nat1) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (plus (ZERO) (ZERO))))))))))

3 goal(s) more...

2 conjecture(s) more...
